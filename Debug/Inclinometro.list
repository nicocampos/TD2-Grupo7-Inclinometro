
Inclinometro.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007c30  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002b18  08007d40  08007d40  00017d40  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a858  0800a858  000202a4  2**0
                  CONTENTS
  4 .ARM          00000000  0800a858  0800a858  000202a4  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800a858  0800a858  000202a4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a858  0800a858  0001a858  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a85c  0800a85c  0001a85c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000002a4  20000000  0800a860  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000648  200002a8  0800ab04  000202a8  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  200008f0  0800ab04  000208f0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000202a4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d031  00000000  00000000  000202cd  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000020cd  00000000  00000000  0002d2fe  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000008e0  00000000  00000000  0002f3d0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000810  00000000  00000000  0002fcb0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000167e3  00000000  00000000  000304c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000939f  00000000  00000000  00046ca3  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00074ebf  00000000  00000000  00050042  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000c4f01  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002fdc  00000000  00000000  000c4f7c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200002a8 	.word	0x200002a8
 800012c:	00000000 	.word	0x00000000
 8000130:	08007d28 	.word	0x08007d28

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200002ac 	.word	0x200002ac
 800014c:	08007d28 	.word	0x08007d28

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800029e:	f1a4 0401 	sub.w	r4, r4, #1
 80002a2:	d1e9      	bne.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2f>:
 8000a88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a8c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a90:	bf24      	itt	cs
 8000a92:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a96:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a9a:	d90d      	bls.n	8000ab8 <__aeabi_d2f+0x30>
 8000a9c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000aa0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000aa4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000aa8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000aac:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ab0:	bf08      	it	eq
 8000ab2:	f020 0001 	biceq.w	r0, r0, #1
 8000ab6:	4770      	bx	lr
 8000ab8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000abc:	d121      	bne.n	8000b02 <__aeabi_d2f+0x7a>
 8000abe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000ac2:	bfbc      	itt	lt
 8000ac4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000ac8:	4770      	bxlt	lr
 8000aca:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000ace:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ad2:	f1c2 0218 	rsb	r2, r2, #24
 8000ad6:	f1c2 0c20 	rsb	ip, r2, #32
 8000ada:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ade:	fa20 f002 	lsr.w	r0, r0, r2
 8000ae2:	bf18      	it	ne
 8000ae4:	f040 0001 	orrne.w	r0, r0, #1
 8000ae8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aec:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000af0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000af4:	ea40 000c 	orr.w	r0, r0, ip
 8000af8:	fa23 f302 	lsr.w	r3, r3, r2
 8000afc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b00:	e7cc      	b.n	8000a9c <__aeabi_d2f+0x14>
 8000b02:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b06:	d107      	bne.n	8000b18 <__aeabi_d2f+0x90>
 8000b08:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b0c:	bf1e      	ittt	ne
 8000b0e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b12:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b16:	4770      	bxne	lr
 8000b18:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b1c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b20:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b24:	4770      	bx	lr
 8000b26:	bf00      	nop

08000b28 <__aeabi_frsub>:
 8000b28:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b2c:	e002      	b.n	8000b34 <__addsf3>
 8000b2e:	bf00      	nop

08000b30 <__aeabi_fsub>:
 8000b30:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b34 <__addsf3>:
 8000b34:	0042      	lsls	r2, r0, #1
 8000b36:	bf1f      	itttt	ne
 8000b38:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b3c:	ea92 0f03 	teqne	r2, r3
 8000b40:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b44:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b48:	d06a      	beq.n	8000c20 <__addsf3+0xec>
 8000b4a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b4e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b52:	bfc1      	itttt	gt
 8000b54:	18d2      	addgt	r2, r2, r3
 8000b56:	4041      	eorgt	r1, r0
 8000b58:	4048      	eorgt	r0, r1
 8000b5a:	4041      	eorgt	r1, r0
 8000b5c:	bfb8      	it	lt
 8000b5e:	425b      	neglt	r3, r3
 8000b60:	2b19      	cmp	r3, #25
 8000b62:	bf88      	it	hi
 8000b64:	4770      	bxhi	lr
 8000b66:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000b6a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b6e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000b72:	bf18      	it	ne
 8000b74:	4240      	negne	r0, r0
 8000b76:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7a:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000b7e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000b82:	bf18      	it	ne
 8000b84:	4249      	negne	r1, r1
 8000b86:	ea92 0f03 	teq	r2, r3
 8000b8a:	d03f      	beq.n	8000c0c <__addsf3+0xd8>
 8000b8c:	f1a2 0201 	sub.w	r2, r2, #1
 8000b90:	fa41 fc03 	asr.w	ip, r1, r3
 8000b94:	eb10 000c 	adds.w	r0, r0, ip
 8000b98:	f1c3 0320 	rsb	r3, r3, #32
 8000b9c:	fa01 f103 	lsl.w	r1, r1, r3
 8000ba0:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000ba4:	d502      	bpl.n	8000bac <__addsf3+0x78>
 8000ba6:	4249      	negs	r1, r1
 8000ba8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bac:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000bb0:	d313      	bcc.n	8000bda <__addsf3+0xa6>
 8000bb2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000bb6:	d306      	bcc.n	8000bc6 <__addsf3+0x92>
 8000bb8:	0840      	lsrs	r0, r0, #1
 8000bba:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bbe:	f102 0201 	add.w	r2, r2, #1
 8000bc2:	2afe      	cmp	r2, #254	; 0xfe
 8000bc4:	d251      	bcs.n	8000c6a <__addsf3+0x136>
 8000bc6:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000bca:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000bce:	bf08      	it	eq
 8000bd0:	f020 0001 	biceq.w	r0, r0, #1
 8000bd4:	ea40 0003 	orr.w	r0, r0, r3
 8000bd8:	4770      	bx	lr
 8000bda:	0049      	lsls	r1, r1, #1
 8000bdc:	eb40 0000 	adc.w	r0, r0, r0
 8000be0:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 8000be4:	f1a2 0201 	sub.w	r2, r2, #1
 8000be8:	d1ed      	bne.n	8000bc6 <__addsf3+0x92>
 8000bea:	fab0 fc80 	clz	ip, r0
 8000bee:	f1ac 0c08 	sub.w	ip, ip, #8
 8000bf2:	ebb2 020c 	subs.w	r2, r2, ip
 8000bf6:	fa00 f00c 	lsl.w	r0, r0, ip
 8000bfa:	bfaa      	itet	ge
 8000bfc:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c00:	4252      	neglt	r2, r2
 8000c02:	4318      	orrge	r0, r3
 8000c04:	bfbc      	itt	lt
 8000c06:	40d0      	lsrlt	r0, r2
 8000c08:	4318      	orrlt	r0, r3
 8000c0a:	4770      	bx	lr
 8000c0c:	f092 0f00 	teq	r2, #0
 8000c10:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c14:	bf06      	itte	eq
 8000c16:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c1a:	3201      	addeq	r2, #1
 8000c1c:	3b01      	subne	r3, #1
 8000c1e:	e7b5      	b.n	8000b8c <__addsf3+0x58>
 8000c20:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c24:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c28:	bf18      	it	ne
 8000c2a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c2e:	d021      	beq.n	8000c74 <__addsf3+0x140>
 8000c30:	ea92 0f03 	teq	r2, r3
 8000c34:	d004      	beq.n	8000c40 <__addsf3+0x10c>
 8000c36:	f092 0f00 	teq	r2, #0
 8000c3a:	bf08      	it	eq
 8000c3c:	4608      	moveq	r0, r1
 8000c3e:	4770      	bx	lr
 8000c40:	ea90 0f01 	teq	r0, r1
 8000c44:	bf1c      	itt	ne
 8000c46:	2000      	movne	r0, #0
 8000c48:	4770      	bxne	lr
 8000c4a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c4e:	d104      	bne.n	8000c5a <__addsf3+0x126>
 8000c50:	0040      	lsls	r0, r0, #1
 8000c52:	bf28      	it	cs
 8000c54:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c58:	4770      	bx	lr
 8000c5a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c5e:	bf3c      	itt	cc
 8000c60:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000c64:	4770      	bxcc	lr
 8000c66:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c6a:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000c6e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c72:	4770      	bx	lr
 8000c74:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c78:	bf16      	itet	ne
 8000c7a:	4608      	movne	r0, r1
 8000c7c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c80:	4601      	movne	r1, r0
 8000c82:	0242      	lsls	r2, r0, #9
 8000c84:	bf06      	itte	eq
 8000c86:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c8a:	ea90 0f01 	teqeq	r0, r1
 8000c8e:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000c92:	4770      	bx	lr

08000c94 <__aeabi_ui2f>:
 8000c94:	f04f 0300 	mov.w	r3, #0
 8000c98:	e004      	b.n	8000ca4 <__aeabi_i2f+0x8>
 8000c9a:	bf00      	nop

08000c9c <__aeabi_i2f>:
 8000c9c:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000ca0:	bf48      	it	mi
 8000ca2:	4240      	negmi	r0, r0
 8000ca4:	ea5f 0c00 	movs.w	ip, r0
 8000ca8:	bf08      	it	eq
 8000caa:	4770      	bxeq	lr
 8000cac:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000cb0:	4601      	mov	r1, r0
 8000cb2:	f04f 0000 	mov.w	r0, #0
 8000cb6:	e01c      	b.n	8000cf2 <__aeabi_l2f+0x2a>

08000cb8 <__aeabi_ul2f>:
 8000cb8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cbc:	bf08      	it	eq
 8000cbe:	4770      	bxeq	lr
 8000cc0:	f04f 0300 	mov.w	r3, #0
 8000cc4:	e00a      	b.n	8000cdc <__aeabi_l2f+0x14>
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_l2f>:
 8000cc8:	ea50 0201 	orrs.w	r2, r0, r1
 8000ccc:	bf08      	it	eq
 8000cce:	4770      	bxeq	lr
 8000cd0:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000cd4:	d502      	bpl.n	8000cdc <__aeabi_l2f+0x14>
 8000cd6:	4240      	negs	r0, r0
 8000cd8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cdc:	ea5f 0c01 	movs.w	ip, r1
 8000ce0:	bf02      	ittt	eq
 8000ce2:	4684      	moveq	ip, r0
 8000ce4:	4601      	moveq	r1, r0
 8000ce6:	2000      	moveq	r0, #0
 8000ce8:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000cec:	bf08      	it	eq
 8000cee:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000cf2:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000cf6:	fabc f28c 	clz	r2, ip
 8000cfa:	3a08      	subs	r2, #8
 8000cfc:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d00:	db10      	blt.n	8000d24 <__aeabi_l2f+0x5c>
 8000d02:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d06:	4463      	add	r3, ip
 8000d08:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d0c:	f1c2 0220 	rsb	r2, r2, #32
 8000d10:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d14:	fa20 f202 	lsr.w	r2, r0, r2
 8000d18:	eb43 0002 	adc.w	r0, r3, r2
 8000d1c:	bf08      	it	eq
 8000d1e:	f020 0001 	biceq.w	r0, r0, #1
 8000d22:	4770      	bx	lr
 8000d24:	f102 0220 	add.w	r2, r2, #32
 8000d28:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d2c:	f1c2 0220 	rsb	r2, r2, #32
 8000d30:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d34:	fa21 f202 	lsr.w	r2, r1, r2
 8000d38:	eb43 0002 	adc.w	r0, r3, r2
 8000d3c:	bf08      	it	eq
 8000d3e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d42:	4770      	bx	lr

08000d44 <__aeabi_fmul>:
 8000d44:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d48:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d4c:	bf1e      	ittt	ne
 8000d4e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d52:	ea92 0f0c 	teqne	r2, ip
 8000d56:	ea93 0f0c 	teqne	r3, ip
 8000d5a:	d06f      	beq.n	8000e3c <__aeabi_fmul+0xf8>
 8000d5c:	441a      	add	r2, r3
 8000d5e:	ea80 0c01 	eor.w	ip, r0, r1
 8000d62:	0240      	lsls	r0, r0, #9
 8000d64:	bf18      	it	ne
 8000d66:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000d6a:	d01e      	beq.n	8000daa <__aeabi_fmul+0x66>
 8000d6c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000d70:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000d74:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000d78:	fba0 3101 	umull	r3, r1, r0, r1
 8000d7c:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000d80:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000d84:	bf3e      	ittt	cc
 8000d86:	0049      	lslcc	r1, r1, #1
 8000d88:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000d8c:	005b      	lslcc	r3, r3, #1
 8000d8e:	ea40 0001 	orr.w	r0, r0, r1
 8000d92:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000d96:	2afd      	cmp	r2, #253	; 0xfd
 8000d98:	d81d      	bhi.n	8000dd6 <__aeabi_fmul+0x92>
 8000d9a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000d9e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000da2:	bf08      	it	eq
 8000da4:	f020 0001 	biceq.w	r0, r0, #1
 8000da8:	4770      	bx	lr
 8000daa:	f090 0f00 	teq	r0, #0
 8000dae:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000db2:	bf08      	it	eq
 8000db4:	0249      	lsleq	r1, r1, #9
 8000db6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dba:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000dbe:	3a7f      	subs	r2, #127	; 0x7f
 8000dc0:	bfc2      	ittt	gt
 8000dc2:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000dc6:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000dca:	4770      	bxgt	lr
 8000dcc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000dd0:	f04f 0300 	mov.w	r3, #0
 8000dd4:	3a01      	subs	r2, #1
 8000dd6:	dc5d      	bgt.n	8000e94 <__aeabi_fmul+0x150>
 8000dd8:	f112 0f19 	cmn.w	r2, #25
 8000ddc:	bfdc      	itt	le
 8000dde:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000de2:	4770      	bxle	lr
 8000de4:	f1c2 0200 	rsb	r2, r2, #0
 8000de8:	0041      	lsls	r1, r0, #1
 8000dea:	fa21 f102 	lsr.w	r1, r1, r2
 8000dee:	f1c2 0220 	rsb	r2, r2, #32
 8000df2:	fa00 fc02 	lsl.w	ip, r0, r2
 8000df6:	ea5f 0031 	movs.w	r0, r1, rrx
 8000dfa:	f140 0000 	adc.w	r0, r0, #0
 8000dfe:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e02:	bf08      	it	eq
 8000e04:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e08:	4770      	bx	lr
 8000e0a:	f092 0f00 	teq	r2, #0
 8000e0e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e12:	bf02      	ittt	eq
 8000e14:	0040      	lsleq	r0, r0, #1
 8000e16:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e1a:	3a01      	subeq	r2, #1
 8000e1c:	d0f9      	beq.n	8000e12 <__aeabi_fmul+0xce>
 8000e1e:	ea40 000c 	orr.w	r0, r0, ip
 8000e22:	f093 0f00 	teq	r3, #0
 8000e26:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e2a:	bf02      	ittt	eq
 8000e2c:	0049      	lsleq	r1, r1, #1
 8000e2e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e32:	3b01      	subeq	r3, #1
 8000e34:	d0f9      	beq.n	8000e2a <__aeabi_fmul+0xe6>
 8000e36:	ea41 010c 	orr.w	r1, r1, ip
 8000e3a:	e78f      	b.n	8000d5c <__aeabi_fmul+0x18>
 8000e3c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e40:	ea92 0f0c 	teq	r2, ip
 8000e44:	bf18      	it	ne
 8000e46:	ea93 0f0c 	teqne	r3, ip
 8000e4a:	d00a      	beq.n	8000e62 <__aeabi_fmul+0x11e>
 8000e4c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e50:	bf18      	it	ne
 8000e52:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e56:	d1d8      	bne.n	8000e0a <__aeabi_fmul+0xc6>
 8000e58:	ea80 0001 	eor.w	r0, r0, r1
 8000e5c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e60:	4770      	bx	lr
 8000e62:	f090 0f00 	teq	r0, #0
 8000e66:	bf17      	itett	ne
 8000e68:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000e6c:	4608      	moveq	r0, r1
 8000e6e:	f091 0f00 	teqne	r1, #0
 8000e72:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000e76:	d014      	beq.n	8000ea2 <__aeabi_fmul+0x15e>
 8000e78:	ea92 0f0c 	teq	r2, ip
 8000e7c:	d101      	bne.n	8000e82 <__aeabi_fmul+0x13e>
 8000e7e:	0242      	lsls	r2, r0, #9
 8000e80:	d10f      	bne.n	8000ea2 <__aeabi_fmul+0x15e>
 8000e82:	ea93 0f0c 	teq	r3, ip
 8000e86:	d103      	bne.n	8000e90 <__aeabi_fmul+0x14c>
 8000e88:	024b      	lsls	r3, r1, #9
 8000e8a:	bf18      	it	ne
 8000e8c:	4608      	movne	r0, r1
 8000e8e:	d108      	bne.n	8000ea2 <__aeabi_fmul+0x15e>
 8000e90:	ea80 0001 	eor.w	r0, r0, r1
 8000e94:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e98:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e9c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ea0:	4770      	bx	lr
 8000ea2:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ea6:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000eaa:	4770      	bx	lr

08000eac <__aeabi_fdiv>:
 8000eac:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000eb0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000eb4:	bf1e      	ittt	ne
 8000eb6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000eba:	ea92 0f0c 	teqne	r2, ip
 8000ebe:	ea93 0f0c 	teqne	r3, ip
 8000ec2:	d069      	beq.n	8000f98 <__aeabi_fdiv+0xec>
 8000ec4:	eba2 0203 	sub.w	r2, r2, r3
 8000ec8:	ea80 0c01 	eor.w	ip, r0, r1
 8000ecc:	0249      	lsls	r1, r1, #9
 8000ece:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000ed2:	d037      	beq.n	8000f44 <__aeabi_fdiv+0x98>
 8000ed4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000ed8:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000edc:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000ee0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000ee4:	428b      	cmp	r3, r1
 8000ee6:	bf38      	it	cc
 8000ee8:	005b      	lslcc	r3, r3, #1
 8000eea:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000eee:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000ef2:	428b      	cmp	r3, r1
 8000ef4:	bf24      	itt	cs
 8000ef6:	1a5b      	subcs	r3, r3, r1
 8000ef8:	ea40 000c 	orrcs.w	r0, r0, ip
 8000efc:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f00:	bf24      	itt	cs
 8000f02:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f06:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f0a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f0e:	bf24      	itt	cs
 8000f10:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f14:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f18:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f1c:	bf24      	itt	cs
 8000f1e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f22:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f26:	011b      	lsls	r3, r3, #4
 8000f28:	bf18      	it	ne
 8000f2a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f2e:	d1e0      	bne.n	8000ef2 <__aeabi_fdiv+0x46>
 8000f30:	2afd      	cmp	r2, #253	; 0xfd
 8000f32:	f63f af50 	bhi.w	8000dd6 <__aeabi_fmul+0x92>
 8000f36:	428b      	cmp	r3, r1
 8000f38:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f3c:	bf08      	it	eq
 8000f3e:	f020 0001 	biceq.w	r0, r0, #1
 8000f42:	4770      	bx	lr
 8000f44:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000f48:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f4c:	327f      	adds	r2, #127	; 0x7f
 8000f4e:	bfc2      	ittt	gt
 8000f50:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000f54:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f58:	4770      	bxgt	lr
 8000f5a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f5e:	f04f 0300 	mov.w	r3, #0
 8000f62:	3a01      	subs	r2, #1
 8000f64:	e737      	b.n	8000dd6 <__aeabi_fmul+0x92>
 8000f66:	f092 0f00 	teq	r2, #0
 8000f6a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000f6e:	bf02      	ittt	eq
 8000f70:	0040      	lsleq	r0, r0, #1
 8000f72:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000f76:	3a01      	subeq	r2, #1
 8000f78:	d0f9      	beq.n	8000f6e <__aeabi_fdiv+0xc2>
 8000f7a:	ea40 000c 	orr.w	r0, r0, ip
 8000f7e:	f093 0f00 	teq	r3, #0
 8000f82:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000f86:	bf02      	ittt	eq
 8000f88:	0049      	lsleq	r1, r1, #1
 8000f8a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000f8e:	3b01      	subeq	r3, #1
 8000f90:	d0f9      	beq.n	8000f86 <__aeabi_fdiv+0xda>
 8000f92:	ea41 010c 	orr.w	r1, r1, ip
 8000f96:	e795      	b.n	8000ec4 <__aeabi_fdiv+0x18>
 8000f98:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f9c:	ea92 0f0c 	teq	r2, ip
 8000fa0:	d108      	bne.n	8000fb4 <__aeabi_fdiv+0x108>
 8000fa2:	0242      	lsls	r2, r0, #9
 8000fa4:	f47f af7d 	bne.w	8000ea2 <__aeabi_fmul+0x15e>
 8000fa8:	ea93 0f0c 	teq	r3, ip
 8000fac:	f47f af70 	bne.w	8000e90 <__aeabi_fmul+0x14c>
 8000fb0:	4608      	mov	r0, r1
 8000fb2:	e776      	b.n	8000ea2 <__aeabi_fmul+0x15e>
 8000fb4:	ea93 0f0c 	teq	r3, ip
 8000fb8:	d104      	bne.n	8000fc4 <__aeabi_fdiv+0x118>
 8000fba:	024b      	lsls	r3, r1, #9
 8000fbc:	f43f af4c 	beq.w	8000e58 <__aeabi_fmul+0x114>
 8000fc0:	4608      	mov	r0, r1
 8000fc2:	e76e      	b.n	8000ea2 <__aeabi_fmul+0x15e>
 8000fc4:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000fc8:	bf18      	it	ne
 8000fca:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000fce:	d1ca      	bne.n	8000f66 <__aeabi_fdiv+0xba>
 8000fd0:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000fd4:	f47f af5c 	bne.w	8000e90 <__aeabi_fmul+0x14c>
 8000fd8:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000fdc:	f47f af3c 	bne.w	8000e58 <__aeabi_fmul+0x114>
 8000fe0:	e75f      	b.n	8000ea2 <__aeabi_fmul+0x15e>
 8000fe2:	bf00      	nop

08000fe4 <__gesf2>:
 8000fe4:	f04f 3cff 	mov.w	ip, #4294967295
 8000fe8:	e006      	b.n	8000ff8 <__cmpsf2+0x4>
 8000fea:	bf00      	nop

08000fec <__lesf2>:
 8000fec:	f04f 0c01 	mov.w	ip, #1
 8000ff0:	e002      	b.n	8000ff8 <__cmpsf2+0x4>
 8000ff2:	bf00      	nop

08000ff4 <__cmpsf2>:
 8000ff4:	f04f 0c01 	mov.w	ip, #1
 8000ff8:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000ffc:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001000:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8001004:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001008:	bf18      	it	ne
 800100a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800100e:	d011      	beq.n	8001034 <__cmpsf2+0x40>
 8001010:	b001      	add	sp, #4
 8001012:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8001016:	bf18      	it	ne
 8001018:	ea90 0f01 	teqne	r0, r1
 800101c:	bf58      	it	pl
 800101e:	ebb2 0003 	subspl.w	r0, r2, r3
 8001022:	bf88      	it	hi
 8001024:	17c8      	asrhi	r0, r1, #31
 8001026:	bf38      	it	cc
 8001028:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 800102c:	bf18      	it	ne
 800102e:	f040 0001 	orrne.w	r0, r0, #1
 8001032:	4770      	bx	lr
 8001034:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001038:	d102      	bne.n	8001040 <__cmpsf2+0x4c>
 800103a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 800103e:	d105      	bne.n	800104c <__cmpsf2+0x58>
 8001040:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001044:	d1e4      	bne.n	8001010 <__cmpsf2+0x1c>
 8001046:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800104a:	d0e1      	beq.n	8001010 <__cmpsf2+0x1c>
 800104c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8001050:	4770      	bx	lr
 8001052:	bf00      	nop

08001054 <__aeabi_cfrcmple>:
 8001054:	4684      	mov	ip, r0
 8001056:	4608      	mov	r0, r1
 8001058:	4661      	mov	r1, ip
 800105a:	e7ff      	b.n	800105c <__aeabi_cfcmpeq>

0800105c <__aeabi_cfcmpeq>:
 800105c:	b50f      	push	{r0, r1, r2, r3, lr}
 800105e:	f7ff ffc9 	bl	8000ff4 <__cmpsf2>
 8001062:	2800      	cmp	r0, #0
 8001064:	bf48      	it	mi
 8001066:	f110 0f00 	cmnmi.w	r0, #0
 800106a:	bd0f      	pop	{r0, r1, r2, r3, pc}

0800106c <__aeabi_fcmpeq>:
 800106c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001070:	f7ff fff4 	bl	800105c <__aeabi_cfcmpeq>
 8001074:	bf0c      	ite	eq
 8001076:	2001      	moveq	r0, #1
 8001078:	2000      	movne	r0, #0
 800107a:	f85d fb08 	ldr.w	pc, [sp], #8
 800107e:	bf00      	nop

08001080 <__aeabi_fcmplt>:
 8001080:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001084:	f7ff ffea 	bl	800105c <__aeabi_cfcmpeq>
 8001088:	bf34      	ite	cc
 800108a:	2001      	movcc	r0, #1
 800108c:	2000      	movcs	r0, #0
 800108e:	f85d fb08 	ldr.w	pc, [sp], #8
 8001092:	bf00      	nop

08001094 <__aeabi_fcmple>:
 8001094:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001098:	f7ff ffe0 	bl	800105c <__aeabi_cfcmpeq>
 800109c:	bf94      	ite	ls
 800109e:	2001      	movls	r0, #1
 80010a0:	2000      	movhi	r0, #0
 80010a2:	f85d fb08 	ldr.w	pc, [sp], #8
 80010a6:	bf00      	nop

080010a8 <__aeabi_fcmpge>:
 80010a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010ac:	f7ff ffd2 	bl	8001054 <__aeabi_cfrcmple>
 80010b0:	bf94      	ite	ls
 80010b2:	2001      	movls	r0, #1
 80010b4:	2000      	movhi	r0, #0
 80010b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80010ba:	bf00      	nop

080010bc <__aeabi_fcmpgt>:
 80010bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010c0:	f7ff ffc8 	bl	8001054 <__aeabi_cfrcmple>
 80010c4:	bf34      	ite	cc
 80010c6:	2001      	movcc	r0, #1
 80010c8:	2000      	movcs	r0, #0
 80010ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80010ce:	bf00      	nop

080010d0 <__aeabi_f2iz>:
 80010d0:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80010d4:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 80010d8:	d30f      	bcc.n	80010fa <__aeabi_f2iz+0x2a>
 80010da:	f04f 039e 	mov.w	r3, #158	; 0x9e
 80010de:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 80010e2:	d90d      	bls.n	8001100 <__aeabi_f2iz+0x30>
 80010e4:	ea4f 2300 	mov.w	r3, r0, lsl #8
 80010e8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80010ec:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80010f0:	fa23 f002 	lsr.w	r0, r3, r2
 80010f4:	bf18      	it	ne
 80010f6:	4240      	negne	r0, r0
 80010f8:	4770      	bx	lr
 80010fa:	f04f 0000 	mov.w	r0, #0
 80010fe:	4770      	bx	lr
 8001100:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8001104:	d101      	bne.n	800110a <__aeabi_f2iz+0x3a>
 8001106:	0242      	lsls	r2, r0, #9
 8001108:	d105      	bne.n	8001116 <__aeabi_f2iz+0x46>
 800110a:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 800110e:	bf08      	it	eq
 8001110:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8001114:	4770      	bx	lr
 8001116:	f04f 0000 	mov.w	r0, #0
 800111a:	4770      	bx	lr

0800111c <__aeabi_f2uiz>:
 800111c:	0042      	lsls	r2, r0, #1
 800111e:	d20e      	bcs.n	800113e <__aeabi_f2uiz+0x22>
 8001120:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8001124:	d30b      	bcc.n	800113e <__aeabi_f2uiz+0x22>
 8001126:	f04f 039e 	mov.w	r3, #158	; 0x9e
 800112a:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 800112e:	d409      	bmi.n	8001144 <__aeabi_f2uiz+0x28>
 8001130:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001134:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001138:	fa23 f002 	lsr.w	r0, r3, r2
 800113c:	4770      	bx	lr
 800113e:	f04f 0000 	mov.w	r0, #0
 8001142:	4770      	bx	lr
 8001144:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8001148:	d101      	bne.n	800114e <__aeabi_f2uiz+0x32>
 800114a:	0242      	lsls	r2, r0, #9
 800114c:	d102      	bne.n	8001154 <__aeabi_f2uiz+0x38>
 800114e:	f04f 30ff 	mov.w	r0, #4294967295
 8001152:	4770      	bx	lr
 8001154:	f04f 0000 	mov.w	r0, #0
 8001158:	4770      	bx	lr
 800115a:	bf00      	nop

0800115c <readEEPROM>:
uint8_t	customAlarmsInt[CANT_ALARMAS+1]={0};

extern float valuetoSave;

uint8_t readEEPROM( void )
{
 800115c:	b590      	push	{r4, r7, lr}
 800115e:	b087      	sub	sp, #28
 8001160:	af04      	add	r7, sp, #16
	uint16_t eeprom_memadd = EEPROM_MEMADD;
 8001162:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001166:	80fb      	strh	r3, [r7, #6]

	for(int i = CANT_RESERVADO; i < CANT_ALARMAS; i++){
 8001168:	2303      	movs	r3, #3
 800116a:	603b      	str	r3, [r7, #0]
 800116c:	e01c      	b.n	80011a8 <readEEPROM+0x4c>
		if(HAL_I2C_Mem_Read(&hi2c1, EEPROM_ADDRESS_READ, eeprom_memadd, I2C_MEMADD_SIZE_16BIT, &customAlarmsInt[i], 1, TIMEOUT) != HAL_OK)
 800116e:	683b      	ldr	r3, [r7, #0]
 8001170:	4a43      	ldr	r2, [pc, #268]	; (8001280 <readEEPROM+0x124>)
 8001172:	4413      	add	r3, r2
 8001174:	88f9      	ldrh	r1, [r7, #6]
 8001176:	220a      	movs	r2, #10
 8001178:	9202      	str	r2, [sp, #8]
 800117a:	2201      	movs	r2, #1
 800117c:	9201      	str	r2, [sp, #4]
 800117e:	9300      	str	r3, [sp, #0]
 8001180:	2310      	movs	r3, #16
 8001182:	460a      	mov	r2, r1
 8001184:	21a1      	movs	r1, #161	; 0xa1
 8001186:	483f      	ldr	r0, [pc, #252]	; (8001284 <readEEPROM+0x128>)
 8001188:	f002 feac 	bl	8003ee4 <HAL_I2C_Mem_Read>
 800118c:	4603      	mov	r3, r0
 800118e:	2b00      	cmp	r3, #0
 8001190:	d001      	beq.n	8001196 <readEEPROM+0x3a>
			return EEPROM_ERR;
 8001192:	2300      	movs	r3, #0
 8001194:	e070      	b.n	8001278 <readEEPROM+0x11c>
		eeprom_memadd += EEPROM_SHIFT_16BIT;
 8001196:	88fb      	ldrh	r3, [r7, #6]
 8001198:	3302      	adds	r3, #2
 800119a:	80fb      	strh	r3, [r7, #6]
		HAL_Delay(5);
 800119c:	2005      	movs	r0, #5
 800119e:	f002 f8d9 	bl	8003354 <HAL_Delay>
	for(int i = CANT_RESERVADO; i < CANT_ALARMAS; i++){
 80011a2:	683b      	ldr	r3, [r7, #0]
 80011a4:	3301      	adds	r3, #1
 80011a6:	603b      	str	r3, [r7, #0]
 80011a8:	683b      	ldr	r3, [r7, #0]
 80011aa:	2b06      	cmp	r3, #6
 80011ac:	dddf      	ble.n	800116e <readEEPROM+0x12>
	}

	customAlarms[3] = customAlarmsInt[0] + ((float) customAlarmsInt[1] /100);
 80011ae:	4b34      	ldr	r3, [pc, #208]	; (8001280 <readEEPROM+0x124>)
 80011b0:	781b      	ldrb	r3, [r3, #0]
 80011b2:	4618      	mov	r0, r3
 80011b4:	f7ff fd72 	bl	8000c9c <__aeabi_i2f>
 80011b8:	4604      	mov	r4, r0
 80011ba:	4b31      	ldr	r3, [pc, #196]	; (8001280 <readEEPROM+0x124>)
 80011bc:	785b      	ldrb	r3, [r3, #1]
 80011be:	4618      	mov	r0, r3
 80011c0:	f7ff fd68 	bl	8000c94 <__aeabi_ui2f>
 80011c4:	4603      	mov	r3, r0
 80011c6:	4930      	ldr	r1, [pc, #192]	; (8001288 <readEEPROM+0x12c>)
 80011c8:	4618      	mov	r0, r3
 80011ca:	f7ff fe6f 	bl	8000eac <__aeabi_fdiv>
 80011ce:	4603      	mov	r3, r0
 80011d0:	4619      	mov	r1, r3
 80011d2:	4620      	mov	r0, r4
 80011d4:	f7ff fcae 	bl	8000b34 <__addsf3>
 80011d8:	4603      	mov	r3, r0
 80011da:	461a      	mov	r2, r3
 80011dc:	4b2b      	ldr	r3, [pc, #172]	; (800128c <readEEPROM+0x130>)
 80011de:	60da      	str	r2, [r3, #12]
	customAlarms[4] = customAlarmsInt[2] + ((float) customAlarmsInt[3] /100);
 80011e0:	4b27      	ldr	r3, [pc, #156]	; (8001280 <readEEPROM+0x124>)
 80011e2:	789b      	ldrb	r3, [r3, #2]
 80011e4:	4618      	mov	r0, r3
 80011e6:	f7ff fd59 	bl	8000c9c <__aeabi_i2f>
 80011ea:	4604      	mov	r4, r0
 80011ec:	4b24      	ldr	r3, [pc, #144]	; (8001280 <readEEPROM+0x124>)
 80011ee:	78db      	ldrb	r3, [r3, #3]
 80011f0:	4618      	mov	r0, r3
 80011f2:	f7ff fd4f 	bl	8000c94 <__aeabi_ui2f>
 80011f6:	4603      	mov	r3, r0
 80011f8:	4923      	ldr	r1, [pc, #140]	; (8001288 <readEEPROM+0x12c>)
 80011fa:	4618      	mov	r0, r3
 80011fc:	f7ff fe56 	bl	8000eac <__aeabi_fdiv>
 8001200:	4603      	mov	r3, r0
 8001202:	4619      	mov	r1, r3
 8001204:	4620      	mov	r0, r4
 8001206:	f7ff fc95 	bl	8000b34 <__addsf3>
 800120a:	4603      	mov	r3, r0
 800120c:	461a      	mov	r2, r3
 800120e:	4b1f      	ldr	r3, [pc, #124]	; (800128c <readEEPROM+0x130>)
 8001210:	611a      	str	r2, [r3, #16]
	customAlarms[5] = customAlarmsInt[4] + ((float) customAlarmsInt[5] /100);
 8001212:	4b1b      	ldr	r3, [pc, #108]	; (8001280 <readEEPROM+0x124>)
 8001214:	791b      	ldrb	r3, [r3, #4]
 8001216:	4618      	mov	r0, r3
 8001218:	f7ff fd40 	bl	8000c9c <__aeabi_i2f>
 800121c:	4604      	mov	r4, r0
 800121e:	4b18      	ldr	r3, [pc, #96]	; (8001280 <readEEPROM+0x124>)
 8001220:	795b      	ldrb	r3, [r3, #5]
 8001222:	4618      	mov	r0, r3
 8001224:	f7ff fd36 	bl	8000c94 <__aeabi_ui2f>
 8001228:	4603      	mov	r3, r0
 800122a:	4917      	ldr	r1, [pc, #92]	; (8001288 <readEEPROM+0x12c>)
 800122c:	4618      	mov	r0, r3
 800122e:	f7ff fe3d 	bl	8000eac <__aeabi_fdiv>
 8001232:	4603      	mov	r3, r0
 8001234:	4619      	mov	r1, r3
 8001236:	4620      	mov	r0, r4
 8001238:	f7ff fc7c 	bl	8000b34 <__addsf3>
 800123c:	4603      	mov	r3, r0
 800123e:	461a      	mov	r2, r3
 8001240:	4b12      	ldr	r3, [pc, #72]	; (800128c <readEEPROM+0x130>)
 8001242:	615a      	str	r2, [r3, #20]
	customAlarms[6] = customAlarmsInt[6] + ((float) customAlarmsInt[7] /100);
 8001244:	4b0e      	ldr	r3, [pc, #56]	; (8001280 <readEEPROM+0x124>)
 8001246:	799b      	ldrb	r3, [r3, #6]
 8001248:	4618      	mov	r0, r3
 800124a:	f7ff fd27 	bl	8000c9c <__aeabi_i2f>
 800124e:	4604      	mov	r4, r0
 8001250:	4b0b      	ldr	r3, [pc, #44]	; (8001280 <readEEPROM+0x124>)
 8001252:	79db      	ldrb	r3, [r3, #7]
 8001254:	4618      	mov	r0, r3
 8001256:	f7ff fd1d 	bl	8000c94 <__aeabi_ui2f>
 800125a:	4603      	mov	r3, r0
 800125c:	490a      	ldr	r1, [pc, #40]	; (8001288 <readEEPROM+0x12c>)
 800125e:	4618      	mov	r0, r3
 8001260:	f7ff fe24 	bl	8000eac <__aeabi_fdiv>
 8001264:	4603      	mov	r3, r0
 8001266:	4619      	mov	r1, r3
 8001268:	4620      	mov	r0, r4
 800126a:	f7ff fc63 	bl	8000b34 <__addsf3>
 800126e:	4603      	mov	r3, r0
 8001270:	461a      	mov	r2, r3
 8001272:	4b06      	ldr	r3, [pc, #24]	; (800128c <readEEPROM+0x130>)
 8001274:	619a      	str	r2, [r3, #24]

	return EEPROM_OK;
 8001276:	2301      	movs	r3, #1
}
 8001278:	4618      	mov	r0, r3
 800127a:	370c      	adds	r7, #12
 800127c:	46bd      	mov	sp, r7
 800127e:	bd90      	pop	{r4, r7, pc}
 8001280:	200002c4 	.word	0x200002c4
 8001284:	20000734 	.word	0x20000734
 8001288:	42c80000 	.word	0x42c80000
 800128c:	200000ac 	.word	0x200000ac

08001290 <writeEEPROM>:
//	}
//	return EEPROM_OK;
//}

uint8_t writeEEPROM( void )
{
 8001290:	b590      	push	{r4, r7, lr}
 8001292:	b087      	sub	sp, #28
 8001294:	af04      	add	r7, sp, #16
	uint16_t eeprom_memadd = EEPROM_MEMADD;
 8001296:	f44f 7380 	mov.w	r3, #256	; 0x100
 800129a:	80fb      	strh	r3, [r7, #6]

	customAlarmsInt[0] = customAlarms[3];
 800129c:	4b61      	ldr	r3, [pc, #388]	; (8001424 <writeEEPROM+0x194>)
 800129e:	68db      	ldr	r3, [r3, #12]
 80012a0:	4618      	mov	r0, r3
 80012a2:	f7ff ff3b 	bl	800111c <__aeabi_f2uiz>
 80012a6:	4603      	mov	r3, r0
 80012a8:	b2da      	uxtb	r2, r3
 80012aa:	4b5f      	ldr	r3, [pc, #380]	; (8001428 <writeEEPROM+0x198>)
 80012ac:	701a      	strb	r2, [r3, #0]
	customAlarmsInt[1] = (customAlarms[3] - (uint8_t) customAlarms[3]) * 100;
 80012ae:	4b5d      	ldr	r3, [pc, #372]	; (8001424 <writeEEPROM+0x194>)
 80012b0:	68dc      	ldr	r4, [r3, #12]
 80012b2:	4b5c      	ldr	r3, [pc, #368]	; (8001424 <writeEEPROM+0x194>)
 80012b4:	68db      	ldr	r3, [r3, #12]
 80012b6:	4618      	mov	r0, r3
 80012b8:	f7ff ff30 	bl	800111c <__aeabi_f2uiz>
 80012bc:	4603      	mov	r3, r0
 80012be:	b2db      	uxtb	r3, r3
 80012c0:	4618      	mov	r0, r3
 80012c2:	f7ff fceb 	bl	8000c9c <__aeabi_i2f>
 80012c6:	4603      	mov	r3, r0
 80012c8:	4619      	mov	r1, r3
 80012ca:	4620      	mov	r0, r4
 80012cc:	f7ff fc30 	bl	8000b30 <__aeabi_fsub>
 80012d0:	4603      	mov	r3, r0
 80012d2:	4956      	ldr	r1, [pc, #344]	; (800142c <writeEEPROM+0x19c>)
 80012d4:	4618      	mov	r0, r3
 80012d6:	f7ff fd35 	bl	8000d44 <__aeabi_fmul>
 80012da:	4603      	mov	r3, r0
 80012dc:	4618      	mov	r0, r3
 80012de:	f7ff ff1d 	bl	800111c <__aeabi_f2uiz>
 80012e2:	4603      	mov	r3, r0
 80012e4:	b2da      	uxtb	r2, r3
 80012e6:	4b50      	ldr	r3, [pc, #320]	; (8001428 <writeEEPROM+0x198>)
 80012e8:	705a      	strb	r2, [r3, #1]
	customAlarmsInt[2] = customAlarms[4];
 80012ea:	4b4e      	ldr	r3, [pc, #312]	; (8001424 <writeEEPROM+0x194>)
 80012ec:	691b      	ldr	r3, [r3, #16]
 80012ee:	4618      	mov	r0, r3
 80012f0:	f7ff ff14 	bl	800111c <__aeabi_f2uiz>
 80012f4:	4603      	mov	r3, r0
 80012f6:	b2da      	uxtb	r2, r3
 80012f8:	4b4b      	ldr	r3, [pc, #300]	; (8001428 <writeEEPROM+0x198>)
 80012fa:	709a      	strb	r2, [r3, #2]
	customAlarmsInt[3] = (customAlarms[4] - (uint8_t) customAlarms[4]) * 100;
 80012fc:	4b49      	ldr	r3, [pc, #292]	; (8001424 <writeEEPROM+0x194>)
 80012fe:	691c      	ldr	r4, [r3, #16]
 8001300:	4b48      	ldr	r3, [pc, #288]	; (8001424 <writeEEPROM+0x194>)
 8001302:	691b      	ldr	r3, [r3, #16]
 8001304:	4618      	mov	r0, r3
 8001306:	f7ff ff09 	bl	800111c <__aeabi_f2uiz>
 800130a:	4603      	mov	r3, r0
 800130c:	b2db      	uxtb	r3, r3
 800130e:	4618      	mov	r0, r3
 8001310:	f7ff fcc4 	bl	8000c9c <__aeabi_i2f>
 8001314:	4603      	mov	r3, r0
 8001316:	4619      	mov	r1, r3
 8001318:	4620      	mov	r0, r4
 800131a:	f7ff fc09 	bl	8000b30 <__aeabi_fsub>
 800131e:	4603      	mov	r3, r0
 8001320:	4942      	ldr	r1, [pc, #264]	; (800142c <writeEEPROM+0x19c>)
 8001322:	4618      	mov	r0, r3
 8001324:	f7ff fd0e 	bl	8000d44 <__aeabi_fmul>
 8001328:	4603      	mov	r3, r0
 800132a:	4618      	mov	r0, r3
 800132c:	f7ff fef6 	bl	800111c <__aeabi_f2uiz>
 8001330:	4603      	mov	r3, r0
 8001332:	b2da      	uxtb	r2, r3
 8001334:	4b3c      	ldr	r3, [pc, #240]	; (8001428 <writeEEPROM+0x198>)
 8001336:	70da      	strb	r2, [r3, #3]
	customAlarmsInt[4] = customAlarms[5];
 8001338:	4b3a      	ldr	r3, [pc, #232]	; (8001424 <writeEEPROM+0x194>)
 800133a:	695b      	ldr	r3, [r3, #20]
 800133c:	4618      	mov	r0, r3
 800133e:	f7ff feed 	bl	800111c <__aeabi_f2uiz>
 8001342:	4603      	mov	r3, r0
 8001344:	b2da      	uxtb	r2, r3
 8001346:	4b38      	ldr	r3, [pc, #224]	; (8001428 <writeEEPROM+0x198>)
 8001348:	711a      	strb	r2, [r3, #4]
	customAlarmsInt[5] = (customAlarms[5] - (uint8_t) customAlarms[5]) * 100;
 800134a:	4b36      	ldr	r3, [pc, #216]	; (8001424 <writeEEPROM+0x194>)
 800134c:	695c      	ldr	r4, [r3, #20]
 800134e:	4b35      	ldr	r3, [pc, #212]	; (8001424 <writeEEPROM+0x194>)
 8001350:	695b      	ldr	r3, [r3, #20]
 8001352:	4618      	mov	r0, r3
 8001354:	f7ff fee2 	bl	800111c <__aeabi_f2uiz>
 8001358:	4603      	mov	r3, r0
 800135a:	b2db      	uxtb	r3, r3
 800135c:	4618      	mov	r0, r3
 800135e:	f7ff fc9d 	bl	8000c9c <__aeabi_i2f>
 8001362:	4603      	mov	r3, r0
 8001364:	4619      	mov	r1, r3
 8001366:	4620      	mov	r0, r4
 8001368:	f7ff fbe2 	bl	8000b30 <__aeabi_fsub>
 800136c:	4603      	mov	r3, r0
 800136e:	492f      	ldr	r1, [pc, #188]	; (800142c <writeEEPROM+0x19c>)
 8001370:	4618      	mov	r0, r3
 8001372:	f7ff fce7 	bl	8000d44 <__aeabi_fmul>
 8001376:	4603      	mov	r3, r0
 8001378:	4618      	mov	r0, r3
 800137a:	f7ff fecf 	bl	800111c <__aeabi_f2uiz>
 800137e:	4603      	mov	r3, r0
 8001380:	b2da      	uxtb	r2, r3
 8001382:	4b29      	ldr	r3, [pc, #164]	; (8001428 <writeEEPROM+0x198>)
 8001384:	715a      	strb	r2, [r3, #5]
	customAlarmsInt[6] = customAlarms[6];
 8001386:	4b27      	ldr	r3, [pc, #156]	; (8001424 <writeEEPROM+0x194>)
 8001388:	699b      	ldr	r3, [r3, #24]
 800138a:	4618      	mov	r0, r3
 800138c:	f7ff fec6 	bl	800111c <__aeabi_f2uiz>
 8001390:	4603      	mov	r3, r0
 8001392:	b2da      	uxtb	r2, r3
 8001394:	4b24      	ldr	r3, [pc, #144]	; (8001428 <writeEEPROM+0x198>)
 8001396:	719a      	strb	r2, [r3, #6]
	customAlarmsInt[7] = (customAlarms[6] - (uint8_t) customAlarms[6]) * 100;
 8001398:	4b22      	ldr	r3, [pc, #136]	; (8001424 <writeEEPROM+0x194>)
 800139a:	699c      	ldr	r4, [r3, #24]
 800139c:	4b21      	ldr	r3, [pc, #132]	; (8001424 <writeEEPROM+0x194>)
 800139e:	699b      	ldr	r3, [r3, #24]
 80013a0:	4618      	mov	r0, r3
 80013a2:	f7ff febb 	bl	800111c <__aeabi_f2uiz>
 80013a6:	4603      	mov	r3, r0
 80013a8:	b2db      	uxtb	r3, r3
 80013aa:	4618      	mov	r0, r3
 80013ac:	f7ff fc76 	bl	8000c9c <__aeabi_i2f>
 80013b0:	4603      	mov	r3, r0
 80013b2:	4619      	mov	r1, r3
 80013b4:	4620      	mov	r0, r4
 80013b6:	f7ff fbbb 	bl	8000b30 <__aeabi_fsub>
 80013ba:	4603      	mov	r3, r0
 80013bc:	491b      	ldr	r1, [pc, #108]	; (800142c <writeEEPROM+0x19c>)
 80013be:	4618      	mov	r0, r3
 80013c0:	f7ff fcc0 	bl	8000d44 <__aeabi_fmul>
 80013c4:	4603      	mov	r3, r0
 80013c6:	4618      	mov	r0, r3
 80013c8:	f7ff fea8 	bl	800111c <__aeabi_f2uiz>
 80013cc:	4603      	mov	r3, r0
 80013ce:	b2da      	uxtb	r2, r3
 80013d0:	4b15      	ldr	r3, [pc, #84]	; (8001428 <writeEEPROM+0x198>)
 80013d2:	71da      	strb	r2, [r3, #7]

	for(int i = CANT_RESERVADO; i < CANT_ALARMAS; i++){
 80013d4:	2303      	movs	r3, #3
 80013d6:	603b      	str	r3, [r7, #0]
 80013d8:	e01c      	b.n	8001414 <writeEEPROM+0x184>
		if(HAL_I2C_Mem_Write(&hi2c1, EEPROM_ADDRESS_WRITE, eeprom_memadd, I2C_MEMADD_SIZE_16BIT, &customAlarmsInt[i], 1, TIMEOUT) != HAL_OK)
 80013da:	683b      	ldr	r3, [r7, #0]
 80013dc:	4a12      	ldr	r2, [pc, #72]	; (8001428 <writeEEPROM+0x198>)
 80013de:	4413      	add	r3, r2
 80013e0:	88f9      	ldrh	r1, [r7, #6]
 80013e2:	220a      	movs	r2, #10
 80013e4:	9202      	str	r2, [sp, #8]
 80013e6:	2201      	movs	r2, #1
 80013e8:	9201      	str	r2, [sp, #4]
 80013ea:	9300      	str	r3, [sp, #0]
 80013ec:	2310      	movs	r3, #16
 80013ee:	460a      	mov	r2, r1
 80013f0:	21a0      	movs	r1, #160	; 0xa0
 80013f2:	480f      	ldr	r0, [pc, #60]	; (8001430 <writeEEPROM+0x1a0>)
 80013f4:	f002 fc7c 	bl	8003cf0 <HAL_I2C_Mem_Write>
 80013f8:	4603      	mov	r3, r0
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d001      	beq.n	8001402 <writeEEPROM+0x172>
			return EEPROM_ERR;
 80013fe:	2300      	movs	r3, #0
 8001400:	e00c      	b.n	800141c <writeEEPROM+0x18c>
		eeprom_memadd += EEPROM_SHIFT_16BIT;
 8001402:	88fb      	ldrh	r3, [r7, #6]
 8001404:	3302      	adds	r3, #2
 8001406:	80fb      	strh	r3, [r7, #6]
		HAL_Delay(5);
 8001408:	2005      	movs	r0, #5
 800140a:	f001 ffa3 	bl	8003354 <HAL_Delay>
	for(int i = CANT_RESERVADO; i < CANT_ALARMAS; i++){
 800140e:	683b      	ldr	r3, [r7, #0]
 8001410:	3301      	adds	r3, #1
 8001412:	603b      	str	r3, [r7, #0]
 8001414:	683b      	ldr	r3, [r7, #0]
 8001416:	2b06      	cmp	r3, #6
 8001418:	dddf      	ble.n	80013da <writeEEPROM+0x14a>
	}
	return EEPROM_OK;
 800141a:	2301      	movs	r3, #1
}
 800141c:	4618      	mov	r0, r3
 800141e:	370c      	adds	r7, #12
 8001420:	46bd      	mov	sp, r7
 8001422:	bd90      	pop	{r4, r7, pc}
 8001424:	200000ac 	.word	0x200000ac
 8001428:	200002c4 	.word	0x200002c4
 800142c:	42c80000 	.word	0x42c80000
 8001430:	20000734 	.word	0x20000734

08001434 <EEPROM_Init>:
//	}
//	return EEPROM_OK;
//}

void EEPROM_Init( void )
{
 8001434:	b580      	push	{r7, lr}
 8001436:	af00      	add	r7, sp, #0
//	customAlarms[3] = 0;
//	customAlarms[4] = 0;
//	customAlarms[5] = 0;
//	customAlarms[6] = 0;
//	HAL_Delay(1000);
	readEEPROM();
 8001438:	f7ff fe90 	bl	800115c <readEEPROM>
}
 800143c:	bf00      	nop
 800143e:	bd80      	pop	{r7, pc}

08001440 <EEPROM_refresh>:

void EEPROM_refresh(uint8_t action)
{
 8001440:	b580      	push	{r7, lr}
 8001442:	b086      	sub	sp, #24
 8001444:	af00      	add	r7, sp, #0
 8001446:	4603      	mov	r3, r0
 8001448:	71fb      	strb	r3, [r7, #7]
	int del_ok = NO_OK;
 800144a:	2301      	movs	r3, #1
 800144c:	617b      	str	r3, [r7, #20]
	int refresh_ok = NO_OK;
 800144e:	2301      	movs	r3, #1
 8001450:	60bb      	str	r3, [r7, #8]

	if(action == EEPROM_DELETE){
 8001452:	79fb      	ldrb	r3, [r7, #7]
 8001454:	2b02      	cmp	r3, #2
 8001456:	d129      	bne.n	80014ac <EEPROM_refresh+0x6c>
		for(int i = CANT_RESERVADO; i < CANT_ALARMAS; i++){
 8001458:	2303      	movs	r3, #3
 800145a:	613b      	str	r3, [r7, #16]
 800145c:	e01a      	b.n	8001494 <EEPROM_refresh+0x54>
			if(customAlarms[i] == EEPROM_EMPTY && i > CANT_RESERVADO){
 800145e:	4a25      	ldr	r2, [pc, #148]	; (80014f4 <EEPROM_refresh+0xb4>)
 8001460:	693b      	ldr	r3, [r7, #16]
 8001462:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001466:	4924      	ldr	r1, [pc, #144]	; (80014f8 <EEPROM_refresh+0xb8>)
 8001468:	4618      	mov	r0, r3
 800146a:	f7ff fdff 	bl	800106c <__aeabi_fcmpeq>
 800146e:	4603      	mov	r3, r0
 8001470:	2b00      	cmp	r3, #0
 8001472:	d00c      	beq.n	800148e <EEPROM_refresh+0x4e>
 8001474:	693b      	ldr	r3, [r7, #16]
 8001476:	2b03      	cmp	r3, #3
 8001478:	dd09      	ble.n	800148e <EEPROM_refresh+0x4e>
				del_ok = OK;
 800147a:	2300      	movs	r3, #0
 800147c:	617b      	str	r3, [r7, #20]
				customAlarms[i-1] = EEPROM_EMPTY;
 800147e:	693b      	ldr	r3, [r7, #16]
 8001480:	3b01      	subs	r3, #1
 8001482:	4a1c      	ldr	r2, [pc, #112]	; (80014f4 <EEPROM_refresh+0xb4>)
 8001484:	491c      	ldr	r1, [pc, #112]	; (80014f8 <EEPROM_refresh+0xb8>)
 8001486:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				writeEEPROM();
 800148a:	f7ff ff01 	bl	8001290 <writeEEPROM>
		for(int i = CANT_RESERVADO; i < CANT_ALARMAS; i++){
 800148e:	693b      	ldr	r3, [r7, #16]
 8001490:	3301      	adds	r3, #1
 8001492:	613b      	str	r3, [r7, #16]
 8001494:	693b      	ldr	r3, [r7, #16]
 8001496:	2b06      	cmp	r3, #6
 8001498:	dde1      	ble.n	800145e <EEPROM_refresh+0x1e>
			}
		}
		if(del_ok == NO_OK){
 800149a:	697b      	ldr	r3, [r7, #20]
 800149c:	2b01      	cmp	r3, #1
 800149e:	d125      	bne.n	80014ec <EEPROM_refresh+0xac>
			customAlarms[CANT_ALARMAS-1] = EEPROM_EMPTY;
 80014a0:	4b14      	ldr	r3, [pc, #80]	; (80014f4 <EEPROM_refresh+0xb4>)
 80014a2:	4a15      	ldr	r2, [pc, #84]	; (80014f8 <EEPROM_refresh+0xb8>)
 80014a4:	619a      	str	r2, [r3, #24]
			writeEEPROM();
 80014a6:	f7ff fef3 	bl	8001290 <writeEEPROM>
		}
		if(refresh_ok == NO_OK){
			// memoria llena - gg ez
		}
	}
}
 80014aa:	e01f      	b.n	80014ec <EEPROM_refresh+0xac>
		for(int i = CANT_RESERVADO; i < CANT_ALARMAS; i++){
 80014ac:	2303      	movs	r3, #3
 80014ae:	60fb      	str	r3, [r7, #12]
 80014b0:	e019      	b.n	80014e6 <EEPROM_refresh+0xa6>
			if(customAlarms[i] == EEPROM_EMPTY){
 80014b2:	4a10      	ldr	r2, [pc, #64]	; (80014f4 <EEPROM_refresh+0xb4>)
 80014b4:	68fb      	ldr	r3, [r7, #12]
 80014b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80014ba:	490f      	ldr	r1, [pc, #60]	; (80014f8 <EEPROM_refresh+0xb8>)
 80014bc:	4618      	mov	r0, r3
 80014be:	f7ff fdd5 	bl	800106c <__aeabi_fcmpeq>
 80014c2:	4603      	mov	r3, r0
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	d00b      	beq.n	80014e0 <EEPROM_refresh+0xa0>
				refresh_ok = OK;
 80014c8:	2300      	movs	r3, #0
 80014ca:	60bb      	str	r3, [r7, #8]
				customAlarms[i] = valuetoSave;
 80014cc:	4b0b      	ldr	r3, [pc, #44]	; (80014fc <EEPROM_refresh+0xbc>)
 80014ce:	681a      	ldr	r2, [r3, #0]
 80014d0:	4908      	ldr	r1, [pc, #32]	; (80014f4 <EEPROM_refresh+0xb4>)
 80014d2:	68fb      	ldr	r3, [r7, #12]
 80014d4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				writeEEPROM();
 80014d8:	f7ff feda 	bl	8001290 <writeEEPROM>
				break;
 80014dc:	bf00      	nop
}
 80014de:	e005      	b.n	80014ec <EEPROM_refresh+0xac>
		for(int i = CANT_RESERVADO; i < CANT_ALARMAS; i++){
 80014e0:	68fb      	ldr	r3, [r7, #12]
 80014e2:	3301      	adds	r3, #1
 80014e4:	60fb      	str	r3, [r7, #12]
 80014e6:	68fb      	ldr	r3, [r7, #12]
 80014e8:	2b06      	cmp	r3, #6
 80014ea:	dde2      	ble.n	80014b2 <EEPROM_refresh+0x72>
}
 80014ec:	bf00      	nop
 80014ee:	3718      	adds	r7, #24
 80014f0:	46bd      	mov	sp, r7
 80014f2:	bd80      	pop	{r7, pc}
 80014f4:	200000ac 	.word	0x200000ac
 80014f8:	437a0000 	.word	0x437a0000
 80014fc:	200006f0 	.word	0x200006f0

08001500 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001500:	b580      	push	{r7, lr}
 8001502:	b086      	sub	sp, #24
 8001504:	af04      	add	r7, sp, #16
  /* USER CODE BEGIN 1 */
	uint32_t tics_despachador;
	uint32_t wcet_todo = 0;
 8001506:	2300      	movs	r3, #0
 8001508:	607b      	str	r3, [r7, #4]

	/*
	 * Pongo en diez la variable que cuenta la cantidad de ticks que tienen
	 * que pasar entre llamadas del despachador.
	 */
	ticks = TICK_SISTEMA;
 800150a:	4b58      	ldr	r3, [pc, #352]	; (800166c <main+0x16c>)
 800150c:	220a      	movs	r2, #10
 800150e:	601a      	str	r2, [r3, #0]
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001510:	f001 febe 	bl	8003290 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001514:	f000 f95e 	bl	80017d4 <SystemClock_Config>

  /* Initialize all configured peripherals */
  /*
   * Inicializo todo el hardware.
   */
  dwt_init();
 8001518:	4b55      	ldr	r3, [pc, #340]	; (8001670 <main+0x170>)
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	4a54      	ldr	r2, [pc, #336]	; (8001670 <main+0x170>)
 800151e:	f043 0301 	orr.w	r3, r3, #1
 8001522:	6013      	str	r3, [r2, #0]
 8001524:	4b52      	ldr	r3, [pc, #328]	; (8001670 <main+0x170>)
 8001526:	2200      	movs	r2, #0
 8001528:	605a      	str	r2, [r3, #4]
  MX_GPIO_Init();
 800152a:	f000 f9c9 	bl	80018c0 <MX_GPIO_Init>
  MX_I2C1_Init();
 800152e:	f000 f999 	bl	8001864 <MX_I2C1_Init>
  MPU6050_Init();
 8001532:	f000 f8ff 	bl	8001734 <MPU6050_Init>
  SSD1306_Init();
 8001536:	f000 fd87 	bl	8002048 <SSD1306_Init>
  EEPROM_Init();
 800153a:	f7ff ff7b 	bl	8001434 <EEPROM_Init>
  /* USER CODE BEGIN 2 */
	#ifdef __SET_IWDG
		MX_IWDG_Init();
	#endif
  /* USER CODE END 2 */
	HAL_GPIO_WritePin(GPIOC, Led_Blink_Pin, GPIO_PIN_RESET);
 800153e:	2200      	movs	r2, #0
 8001540:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001544:	484b      	ldr	r0, [pc, #300]	; (8001674 <main+0x174>)
 8001546:	f002 f97c 	bl	8003842 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, outputLed_Pin, GPIO_PIN_RESET);
 800154a:	2200      	movs	r2, #0
 800154c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001550:	4849      	ldr	r0, [pc, #292]	; (8001678 <main+0x178>)
 8001552:	f002 f976 	bl	8003842 <HAL_GPIO_WritePin>


	/*
	 * Uso el timer 2 para el monitor del sistema.
	 */
	RCC->APB1ENR |= RCC_APB1ENR_TIM2EN;
 8001556:	4b49      	ldr	r3, [pc, #292]	; (800167c <main+0x17c>)
 8001558:	69db      	ldr	r3, [r3, #28]
 800155a:	4a48      	ldr	r2, [pc, #288]	; (800167c <main+0x17c>)
 800155c:	f043 0301 	orr.w	r3, r3, #1
 8001560:	61d3      	str	r3, [r2, #28]
	/*
	 * Esta línea configura el prescaler del timer
	 * que cuenta tiempo del procesador. Prestar atención.
	 */
	TIM2->PSC = (SystemCoreClock / 1000000) - 1;
 8001562:	4b47      	ldr	r3, [pc, #284]	; (8001680 <main+0x180>)
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	4a47      	ldr	r2, [pc, #284]	; (8001684 <main+0x184>)
 8001568:	fba2 2303 	umull	r2, r3, r2, r3
 800156c:	0c9b      	lsrs	r3, r3, #18
 800156e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001572:	3b01      	subs	r3, #1
 8001574:	6293      	str	r3, [r2, #40]	; 0x28
	TIM2->CNT = -1;
 8001576:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800157a:	f04f 32ff 	mov.w	r2, #4294967295
 800157e:	625a      	str	r2, [r3, #36]	; 0x24
	TIM2->CR1 |= TIM_CR1_CEN;
 8001580:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800158a:	f043 0301 	orr.w	r3, r3, #1
 800158e:	6013      	str	r3, [r2, #0]
	TIM2->CR1 &= ~TIM_CR1_CEN;
 8001590:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800159a:	f023 0301 	bic.w	r3, r3, #1
 800159e:	6013      	str	r3, [r2, #0]
	 * un timer y otro para que me devuelva la cuenta y lo frene. El
	 * puntero restante es un puntero a función que se llama cuando
	 * hay falla en la medición de tiempos de las funciones.
	 *
	 */
	inicializar_despachador(lista_tareas,
 80015a0:	4b39      	ldr	r3, [pc, #228]	; (8001688 <main+0x188>)
 80015a2:	9300      	str	r3, [sp, #0]
 80015a4:	4b39      	ldr	r3, [pc, #228]	; (800168c <main+0x18c>)
 80015a6:	4a3a      	ldr	r2, [pc, #232]	; (8001690 <main+0x190>)
 80015a8:	2108      	movs	r1, #8
 80015aa:	483a      	ldr	r0, [pc, #232]	; (8001694 <main+0x194>)
 80015ac:	f001 fd6a 	bl	8003084 <inicializar_despachador>
	MAX_LEN_TASK_LIST, start_timer, stop_timer, falla_sistema);

	//agregar_tarea(lista_tareas, tarea_iwdg, NULL, 0, 1, 0, 100000);
	agregar_tarea(lista_tareas, tarea_led_blinking, NULL, 0, 10, 0, 4); // et_wcet = 2
 80015b0:	2304      	movs	r3, #4
 80015b2:	9302      	str	r3, [sp, #8]
 80015b4:	2300      	movs	r3, #0
 80015b6:	9301      	str	r3, [sp, #4]
 80015b8:	230a      	movs	r3, #10
 80015ba:	9300      	str	r3, [sp, #0]
 80015bc:	2300      	movs	r3, #0
 80015be:	2200      	movs	r2, #0
 80015c0:	4935      	ldr	r1, [pc, #212]	; (8001698 <main+0x198>)
 80015c2:	4834      	ldr	r0, [pc, #208]	; (8001694 <main+0x194>)
 80015c4:	f001 fd9a 	bl	80030fc <agregar_tarea>
	agregar_tarea(lista_tareas, tarea_orienta, NULL, 0, 1, 0, 100000);   	// et_wcet = 926
 80015c8:	4b34      	ldr	r3, [pc, #208]	; (800169c <main+0x19c>)
 80015ca:	9302      	str	r3, [sp, #8]
 80015cc:	2300      	movs	r3, #0
 80015ce:	9301      	str	r3, [sp, #4]
 80015d0:	2301      	movs	r3, #1
 80015d2:	9300      	str	r3, [sp, #0]
 80015d4:	2300      	movs	r3, #0
 80015d6:	2200      	movs	r2, #0
 80015d8:	4931      	ldr	r1, [pc, #196]	; (80016a0 <main+0x1a0>)
 80015da:	482e      	ldr	r0, [pc, #184]	; (8001694 <main+0x194>)
 80015dc:	f001 fd8e 	bl	80030fc <agregar_tarea>
    agregar_tarea(lista_tareas, tarea_refresh, NULL, 0, 1, 0, 100000);  	// et_wcet = 3632
 80015e0:	4b2e      	ldr	r3, [pc, #184]	; (800169c <main+0x19c>)
 80015e2:	9302      	str	r3, [sp, #8]
 80015e4:	2300      	movs	r3, #0
 80015e6:	9301      	str	r3, [sp, #4]
 80015e8:	2301      	movs	r3, #1
 80015ea:	9300      	str	r3, [sp, #0]
 80015ec:	2300      	movs	r3, #0
 80015ee:	2200      	movs	r2, #0
 80015f0:	492c      	ldr	r1, [pc, #176]	; (80016a4 <main+0x1a4>)
 80015f2:	4828      	ldr	r0, [pc, #160]	; (8001694 <main+0x194>)
 80015f4:	f001 fd82 	bl	80030fc <agregar_tarea>
    agregar_tarea(lista_tareas, tarea_pulsadores, NULL, 0, 10, 0, 100000);  	// et_wcet =
 80015f8:	4b28      	ldr	r3, [pc, #160]	; (800169c <main+0x19c>)
 80015fa:	9302      	str	r3, [sp, #8]
 80015fc:	2300      	movs	r3, #0
 80015fe:	9301      	str	r3, [sp, #4]
 8001600:	230a      	movs	r3, #10
 8001602:	9300      	str	r3, [sp, #0]
 8001604:	2300      	movs	r3, #0
 8001606:	2200      	movs	r2, #0
 8001608:	4927      	ldr	r1, [pc, #156]	; (80016a8 <main+0x1a8>)
 800160a:	4822      	ldr	r0, [pc, #136]	; (8001694 <main+0x194>)
 800160c:	f001 fd76 	bl	80030fc <agregar_tarea>
    agregar_tarea(lista_tareas, tarea_modos, NULL, 0, 10, 0, 100000);  	// et_wcet =
 8001610:	4b22      	ldr	r3, [pc, #136]	; (800169c <main+0x19c>)
 8001612:	9302      	str	r3, [sp, #8]
 8001614:	2300      	movs	r3, #0
 8001616:	9301      	str	r3, [sp, #4]
 8001618:	230a      	movs	r3, #10
 800161a:	9300      	str	r3, [sp, #0]
 800161c:	2300      	movs	r3, #0
 800161e:	2200      	movs	r2, #0
 8001620:	4922      	ldr	r1, [pc, #136]	; (80016ac <main+0x1ac>)
 8001622:	481c      	ldr	r0, [pc, #112]	; (8001694 <main+0x194>)
 8001624:	f001 fd6a 	bl	80030fc <agregar_tarea>
    agregar_tarea(lista_tareas, tarea_display, NULL, 0, 1, 0, 100000); 	// et_wcet = 7876
 8001628:	4b1c      	ldr	r3, [pc, #112]	; (800169c <main+0x19c>)
 800162a:	9302      	str	r3, [sp, #8]
 800162c:	2300      	movs	r3, #0
 800162e:	9301      	str	r3, [sp, #4]
 8001630:	2301      	movs	r3, #1
 8001632:	9300      	str	r3, [sp, #0]
 8001634:	2300      	movs	r3, #0
 8001636:	2200      	movs	r2, #0
 8001638:	491d      	ldr	r1, [pc, #116]	; (80016b0 <main+0x1b0>)
 800163a:	4816      	ldr	r0, [pc, #88]	; (8001694 <main+0x194>)
 800163c:	f001 fd5e 	bl	80030fc <agregar_tarea>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1)
	{
		dwt_reset();
 8001640:	4b0b      	ldr	r3, [pc, #44]	; (8001670 <main+0x170>)
 8001642:	2200      	movs	r2, #0
 8001644:	605a      	str	r2, [r3, #4]
		if (!ticks)
 8001646:	4b09      	ldr	r3, [pc, #36]	; (800166c <main+0x16c>)
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	2b00      	cmp	r3, #0
 800164c:	d104      	bne.n	8001658 <main+0x158>
		{
			ticks = TICK_SISTEMA;
 800164e:	4b07      	ldr	r3, [pc, #28]	; (800166c <main+0x16c>)
 8001650:	220a      	movs	r2, #10
 8001652:	601a      	str	r2, [r3, #0]
			despachar_tareas();
 8001654:	f001 fdee 	bl	8003234 <despachar_tareas>
		}
		tics_despachador = dwt_read();
 8001658:	4b05      	ldr	r3, [pc, #20]	; (8001670 <main+0x170>)
 800165a:	685b      	ldr	r3, [r3, #4]
 800165c:	603b      	str	r3, [r7, #0]
		if (tics_despachador > wcet_todo)
 800165e:	683a      	ldr	r2, [r7, #0]
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	429a      	cmp	r2, r3
 8001664:	d9ec      	bls.n	8001640 <main+0x140>
			wcet_todo = tics_despachador;
 8001666:	683b      	ldr	r3, [r7, #0]
 8001668:	607b      	str	r3, [r7, #4]
		dwt_reset();
 800166a:	e7e9      	b.n	8001640 <main+0x140>
 800166c:	20000788 	.word	0x20000788
 8001670:	e0001000 	.word	0xe0001000
 8001674:	40011000 	.word	0x40011000
 8001678:	40010c00 	.word	0x40010c00
 800167c:	40021000 	.word	0x40021000
 8001680:	200000a8 	.word	0x200000a8
 8001684:	431bde83 	.word	0x431bde83
 8001688:	080016b5 	.word	0x080016b5
 800168c:	08001709 	.word	0x08001709
 8001690:	080016e5 	.word	0x080016e5
 8001694:	2000078c 	.word	0x2000078c
 8001698:	08002ff9 	.word	0x08002ff9
 800169c:	000186a0 	.word	0x000186a0
 80016a0:	08002fd9 	.word	0x08002fd9
 80016a4:	08003019 	.word	0x08003019
 80016a8:	080028d5 	.word	0x080028d5
 80016ac:	08002949 	.word	0x08002949
 80016b0:	08002b29 	.word	0x08002b29

080016b4 <falla_sistema>:
#endif
}


void falla_sistema(void)
{
 80016b4:	b580      	push	{r7, lr}
 80016b6:	b082      	sub	sp, #8
 80016b8:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80016ba:	b672      	cpsid	i
	__disable_irq();
	while (1)
	{
		for (uint32_t i = 0; i < 100000; i++);
 80016bc:	2300      	movs	r3, #0
 80016be:	607b      	str	r3, [r7, #4]
 80016c0:	e002      	b.n	80016c8 <falla_sistema+0x14>
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	3301      	adds	r3, #1
 80016c6:	607b      	str	r3, [r7, #4]
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	4a04      	ldr	r2, [pc, #16]	; (80016dc <falla_sistema+0x28>)
 80016cc:	4293      	cmp	r3, r2
 80016ce:	d9f8      	bls.n	80016c2 <falla_sistema+0xe>
		HAL_GPIO_TogglePin(GPIOC, Led_Blink_Pin);
 80016d0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80016d4:	4802      	ldr	r0, [pc, #8]	; (80016e0 <falla_sistema+0x2c>)
 80016d6:	f002 f8cc 	bl	8003872 <HAL_GPIO_TogglePin>
		for (uint32_t i = 0; i < 100000; i++);
 80016da:	e7ef      	b.n	80016bc <falla_sistema+0x8>
 80016dc:	0001869f 	.word	0x0001869f
 80016e0:	40011000 	.word	0x40011000

080016e4 <start_timer>:
	}
}

void start_timer(void)
{
 80016e4:	b480      	push	{r7}
 80016e6:	af00      	add	r7, sp, #0
	TIM2->CNT = 0;
 80016e8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80016ec:	2200      	movs	r2, #0
 80016ee:	625a      	str	r2, [r3, #36]	; 0x24
	TIM2->CR1 |= TIM_CR1_CEN;
 80016f0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80016fa:	f043 0301 	orr.w	r3, r3, #1
 80016fe:	6013      	str	r3, [r2, #0]
}
 8001700:	bf00      	nop
 8001702:	46bd      	mov	sp, r7
 8001704:	bc80      	pop	{r7}
 8001706:	4770      	bx	lr

08001708 <stop_timer>:

uint32_t stop_timer(void)
{
 8001708:	b480      	push	{r7}
 800170a:	b083      	sub	sp, #12
 800170c:	af00      	add	r7, sp, #0
	uint32_t ret = TIM2->CNT;
 800170e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001712:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001714:	607b      	str	r3, [r7, #4]
	TIM2->CR1 &= ~TIM_CR1_CEN;
 8001716:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001720:	f023 0301 	bic.w	r3, r3, #1
 8001724:	6013      	str	r3, [r2, #0]
	return ret;
 8001726:	687b      	ldr	r3, [r7, #4]
}
 8001728:	4618      	mov	r0, r3
 800172a:	370c      	adds	r7, #12
 800172c:	46bd      	mov	sp, r7
 800172e:	bc80      	pop	{r7}
 8001730:	4770      	bx	lr
	...

08001734 <MPU6050_Init>:
  * @brief MPU6050 Initialization Function
  * @param None
  * @retval None
  */
void MPU6050_Init(void)
{
 8001734:	b580      	push	{r7, lr}
 8001736:	b086      	sub	sp, #24
 8001738:	af04      	add	r7, sp, #16
	uint8_t check, Data;

	// Check device WHO I AM
	HAL_I2C_Mem_Read(&hi2c1, MPU6050_ADDR, MPU6050_RA_WHO_AM_I, 1, &check, 1, TIMEOUT_I2C);
 800173a:	230a      	movs	r3, #10
 800173c:	9302      	str	r3, [sp, #8]
 800173e:	2301      	movs	r3, #1
 8001740:	9301      	str	r3, [sp, #4]
 8001742:	1dfb      	adds	r3, r7, #7
 8001744:	9300      	str	r3, [sp, #0]
 8001746:	2301      	movs	r3, #1
 8001748:	2275      	movs	r2, #117	; 0x75
 800174a:	21d0      	movs	r1, #208	; 0xd0
 800174c:	4820      	ldr	r0, [pc, #128]	; (80017d0 <MPU6050_Init+0x9c>)
 800174e:	f002 fbc9 	bl	8003ee4 <HAL_I2C_Mem_Read>

	if(check == MPU6050_ADDRESS_AD0_LOW){	// if the device is present
 8001752:	79fb      	ldrb	r3, [r7, #7]
 8001754:	2b68      	cmp	r3, #104	; 0x68
 8001756:	d137      	bne.n	80017c8 <MPU6050_Init+0x94>
		// power management register 0X6B we should write all 0's to wake the sensor up
		Data = 0;
 8001758:	2300      	movs	r3, #0
 800175a:	71bb      	strb	r3, [r7, #6]
		HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, MPU6050_RA_PWR_MGMT_1, 1,&Data, 1, TIMEOUT_I2C);
 800175c:	230a      	movs	r3, #10
 800175e:	9302      	str	r3, [sp, #8]
 8001760:	2301      	movs	r3, #1
 8001762:	9301      	str	r3, [sp, #4]
 8001764:	1dbb      	adds	r3, r7, #6
 8001766:	9300      	str	r3, [sp, #0]
 8001768:	2301      	movs	r3, #1
 800176a:	226b      	movs	r2, #107	; 0x6b
 800176c:	21d0      	movs	r1, #208	; 0xd0
 800176e:	4818      	ldr	r0, [pc, #96]	; (80017d0 <MPU6050_Init+0x9c>)
 8001770:	f002 fabe 	bl	8003cf0 <HAL_I2C_Mem_Write>
		// Set DATA RATE of 1KHz by writing SMPLRT_DIV register
		Data = 0x07;
 8001774:	2307      	movs	r3, #7
 8001776:	71bb      	strb	r3, [r7, #6]
		HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, MPU6050_RA_SMPLRT_DIV, 1, &Data, 1, TIMEOUT_I2C);
 8001778:	230a      	movs	r3, #10
 800177a:	9302      	str	r3, [sp, #8]
 800177c:	2301      	movs	r3, #1
 800177e:	9301      	str	r3, [sp, #4]
 8001780:	1dbb      	adds	r3, r7, #6
 8001782:	9300      	str	r3, [sp, #0]
 8001784:	2301      	movs	r3, #1
 8001786:	2219      	movs	r2, #25
 8001788:	21d0      	movs	r1, #208	; 0xd0
 800178a:	4811      	ldr	r0, [pc, #68]	; (80017d0 <MPU6050_Init+0x9c>)
 800178c:	f002 fab0 	bl	8003cf0 <HAL_I2C_Mem_Write>
		// Set accelerometer configuration in MPU6050_RA_ACCEL_CONFIG
		// XA_ST=0, YA_ST=0, ZA_ST=0, FS_SEL=0 -> +/- 2g
		Data = 0x00;
 8001790:	2300      	movs	r3, #0
 8001792:	71bb      	strb	r3, [r7, #6]
		HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, MPU6050_RA_ACCEL_CONFIG, 1,&Data, 1, TIMEOUT_I2C);
 8001794:	230a      	movs	r3, #10
 8001796:	9302      	str	r3, [sp, #8]
 8001798:	2301      	movs	r3, #1
 800179a:	9301      	str	r3, [sp, #4]
 800179c:	1dbb      	adds	r3, r7, #6
 800179e:	9300      	str	r3, [sp, #0]
 80017a0:	2301      	movs	r3, #1
 80017a2:	221c      	movs	r2, #28
 80017a4:	21d0      	movs	r1, #208	; 0xd0
 80017a6:	480a      	ldr	r0, [pc, #40]	; (80017d0 <MPU6050_Init+0x9c>)
 80017a8:	f002 faa2 	bl	8003cf0 <HAL_I2C_Mem_Write>
		// Set Gyroscope configuration in MPU6050_RA_GYRO_CONFIG
		// XG_ST=0, YG_ST=0, ZG_ST=0, FS_SEL=0 -> +/- 250°/s
		Data = 0x00;
 80017ac:	2300      	movs	r3, #0
 80017ae:	71bb      	strb	r3, [r7, #6]
		HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, MPU6050_RA_GYRO_CONFIG, 1,&Data, 1, TIMEOUT_I2C);
 80017b0:	230a      	movs	r3, #10
 80017b2:	9302      	str	r3, [sp, #8]
 80017b4:	2301      	movs	r3, #1
 80017b6:	9301      	str	r3, [sp, #4]
 80017b8:	1dbb      	adds	r3, r7, #6
 80017ba:	9300      	str	r3, [sp, #0]
 80017bc:	2301      	movs	r3, #1
 80017be:	221b      	movs	r2, #27
 80017c0:	21d0      	movs	r1, #208	; 0xd0
 80017c2:	4803      	ldr	r0, [pc, #12]	; (80017d0 <MPU6050_Init+0x9c>)
 80017c4:	f002 fa94 	bl	8003cf0 <HAL_I2C_Mem_Write>
	}
}
 80017c8:	bf00      	nop
 80017ca:	3708      	adds	r7, #8
 80017cc:	46bd      	mov	sp, r7
 80017ce:	bd80      	pop	{r7, pc}
 80017d0:	20000734 	.word	0x20000734

080017d4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80017d4:	b580      	push	{r7, lr}
 80017d6:	b090      	sub	sp, #64	; 0x40
 80017d8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80017da:	f107 0318 	add.w	r3, r7, #24
 80017de:	2228      	movs	r2, #40	; 0x28
 80017e0:	2100      	movs	r1, #0
 80017e2:	4618      	mov	r0, r3
 80017e4:	f003 feb4 	bl	8005550 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80017e8:	1d3b      	adds	r3, r7, #4
 80017ea:	2200      	movs	r2, #0
 80017ec:	601a      	str	r2, [r3, #0]
 80017ee:	605a      	str	r2, [r3, #4]
 80017f0:	609a      	str	r2, [r3, #8]
 80017f2:	60da      	str	r2, [r3, #12]
 80017f4:	611a      	str	r2, [r3, #16]

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 80017f6:	2309      	movs	r3, #9
 80017f8:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80017fa:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80017fe:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001800:	2300      	movs	r3, #0
 8001802:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001804:	2301      	movs	r3, #1
 8001806:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8001808:	2301      	movs	r3, #1
 800180a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800180c:	2302      	movs	r3, #2
 800180e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001810:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001814:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL7;
 8001816:	f44f 13a0 	mov.w	r3, #1310720	; 0x140000
 800181a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800181c:	f107 0318 	add.w	r3, r7, #24
 8001820:	4618      	mov	r0, r3
 8001822:	f003 fa63 	bl	8004cec <HAL_RCC_OscConfig>
 8001826:	4603      	mov	r3, r0
 8001828:	2b00      	cmp	r3, #0
 800182a:	d001      	beq.n	8001830 <SystemClock_Config+0x5c>
  {
    Error_Handler();
 800182c:	f000 f8c4 	bl	80019b8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001830:	230f      	movs	r3, #15
 8001832:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001834:	2302      	movs	r3, #2
 8001836:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001838:	2300      	movs	r3, #0
 800183a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800183c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001840:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001842:	2300      	movs	r3, #0
 8001844:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001846:	1d3b      	adds	r3, r7, #4
 8001848:	2102      	movs	r1, #2
 800184a:	4618      	mov	r0, r3
 800184c:	f003 fcce 	bl	80051ec <HAL_RCC_ClockConfig>
 8001850:	4603      	mov	r3, r0
 8001852:	2b00      	cmp	r3, #0
 8001854:	d001      	beq.n	800185a <SystemClock_Config+0x86>
  {
    Error_Handler();
 8001856:	f000 f8af 	bl	80019b8 <Error_Handler>
  }
}
 800185a:	bf00      	nop
 800185c:	3740      	adds	r7, #64	; 0x40
 800185e:	46bd      	mov	sp, r7
 8001860:	bd80      	pop	{r7, pc}
	...

08001864 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001864:	b580      	push	{r7, lr}
 8001866:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001868:	4b12      	ldr	r3, [pc, #72]	; (80018b4 <MX_I2C1_Init+0x50>)
 800186a:	4a13      	ldr	r2, [pc, #76]	; (80018b8 <MX_I2C1_Init+0x54>)
 800186c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 800186e:	4b11      	ldr	r3, [pc, #68]	; (80018b4 <MX_I2C1_Init+0x50>)
 8001870:	4a12      	ldr	r2, [pc, #72]	; (80018bc <MX_I2C1_Init+0x58>)
 8001872:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001874:	4b0f      	ldr	r3, [pc, #60]	; (80018b4 <MX_I2C1_Init+0x50>)
 8001876:	2200      	movs	r2, #0
 8001878:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800187a:	4b0e      	ldr	r3, [pc, #56]	; (80018b4 <MX_I2C1_Init+0x50>)
 800187c:	2200      	movs	r2, #0
 800187e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001880:	4b0c      	ldr	r3, [pc, #48]	; (80018b4 <MX_I2C1_Init+0x50>)
 8001882:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001886:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001888:	4b0a      	ldr	r3, [pc, #40]	; (80018b4 <MX_I2C1_Init+0x50>)
 800188a:	2200      	movs	r2, #0
 800188c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800188e:	4b09      	ldr	r3, [pc, #36]	; (80018b4 <MX_I2C1_Init+0x50>)
 8001890:	2200      	movs	r2, #0
 8001892:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001894:	4b07      	ldr	r3, [pc, #28]	; (80018b4 <MX_I2C1_Init+0x50>)
 8001896:	2200      	movs	r2, #0
 8001898:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800189a:	4b06      	ldr	r3, [pc, #24]	; (80018b4 <MX_I2C1_Init+0x50>)
 800189c:	2200      	movs	r2, #0
 800189e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80018a0:	4804      	ldr	r0, [pc, #16]	; (80018b4 <MX_I2C1_Init+0x50>)
 80018a2:	f001 ffff 	bl	80038a4 <HAL_I2C_Init>
 80018a6:	4603      	mov	r3, r0
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d001      	beq.n	80018b0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80018ac:	f000 f884 	bl	80019b8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80018b0:	bf00      	nop
 80018b2:	bd80      	pop	{r7, pc}
 80018b4:	20000734 	.word	0x20000734
 80018b8:	40005400 	.word	0x40005400
 80018bc:	00061a80 	.word	0x00061a80

080018c0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80018c0:	b580      	push	{r7, lr}
 80018c2:	b088      	sub	sp, #32
 80018c4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018c6:	f107 0310 	add.w	r3, r7, #16
 80018ca:	2200      	movs	r2, #0
 80018cc:	601a      	str	r2, [r3, #0]
 80018ce:	605a      	str	r2, [r3, #4]
 80018d0:	609a      	str	r2, [r3, #8]
 80018d2:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80018d4:	4b35      	ldr	r3, [pc, #212]	; (80019ac <MX_GPIO_Init+0xec>)
 80018d6:	699b      	ldr	r3, [r3, #24]
 80018d8:	4a34      	ldr	r2, [pc, #208]	; (80019ac <MX_GPIO_Init+0xec>)
 80018da:	f043 0310 	orr.w	r3, r3, #16
 80018de:	6193      	str	r3, [r2, #24]
 80018e0:	4b32      	ldr	r3, [pc, #200]	; (80019ac <MX_GPIO_Init+0xec>)
 80018e2:	699b      	ldr	r3, [r3, #24]
 80018e4:	f003 0310 	and.w	r3, r3, #16
 80018e8:	60fb      	str	r3, [r7, #12]
 80018ea:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80018ec:	4b2f      	ldr	r3, [pc, #188]	; (80019ac <MX_GPIO_Init+0xec>)
 80018ee:	699b      	ldr	r3, [r3, #24]
 80018f0:	4a2e      	ldr	r2, [pc, #184]	; (80019ac <MX_GPIO_Init+0xec>)
 80018f2:	f043 0320 	orr.w	r3, r3, #32
 80018f6:	6193      	str	r3, [r2, #24]
 80018f8:	4b2c      	ldr	r3, [pc, #176]	; (80019ac <MX_GPIO_Init+0xec>)
 80018fa:	699b      	ldr	r3, [r3, #24]
 80018fc:	f003 0320 	and.w	r3, r3, #32
 8001900:	60bb      	str	r3, [r7, #8]
 8001902:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001904:	4b29      	ldr	r3, [pc, #164]	; (80019ac <MX_GPIO_Init+0xec>)
 8001906:	699b      	ldr	r3, [r3, #24]
 8001908:	4a28      	ldr	r2, [pc, #160]	; (80019ac <MX_GPIO_Init+0xec>)
 800190a:	f043 0308 	orr.w	r3, r3, #8
 800190e:	6193      	str	r3, [r2, #24]
 8001910:	4b26      	ldr	r3, [pc, #152]	; (80019ac <MX_GPIO_Init+0xec>)
 8001912:	699b      	ldr	r3, [r3, #24]
 8001914:	f003 0308 	and.w	r3, r3, #8
 8001918:	607b      	str	r3, [r7, #4]
 800191a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800191c:	4b23      	ldr	r3, [pc, #140]	; (80019ac <MX_GPIO_Init+0xec>)
 800191e:	699b      	ldr	r3, [r3, #24]
 8001920:	4a22      	ldr	r2, [pc, #136]	; (80019ac <MX_GPIO_Init+0xec>)
 8001922:	f043 0304 	orr.w	r3, r3, #4
 8001926:	6193      	str	r3, [r2, #24]
 8001928:	4b20      	ldr	r3, [pc, #128]	; (80019ac <MX_GPIO_Init+0xec>)
 800192a:	699b      	ldr	r3, [r3, #24]
 800192c:	f003 0304 	and.w	r3, r3, #4
 8001930:	603b      	str	r3, [r7, #0]
 8001932:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Led_Blink_GPIO_Port, Led_Blink_Pin, GPIO_PIN_RESET);
 8001934:	2200      	movs	r2, #0
 8001936:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800193a:	481d      	ldr	r0, [pc, #116]	; (80019b0 <MX_GPIO_Init+0xf0>)
 800193c:	f001 ff81 	bl	8003842 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(outputLed_GPIO_Port, outputLed_Pin, GPIO_PIN_RESET);
 8001940:	2200      	movs	r2, #0
 8001942:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001946:	481b      	ldr	r0, [pc, #108]	; (80019b4 <MX_GPIO_Init+0xf4>)
 8001948:	f001 ff7b 	bl	8003842 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : Led_Blink_Pin */
  GPIO_InitStruct.Pin = Led_Blink_Pin;
 800194c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001950:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001952:	2301      	movs	r3, #1
 8001954:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001956:	2300      	movs	r3, #0
 8001958:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800195a:	2302      	movs	r3, #2
 800195c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Led_Blink_GPIO_Port, &GPIO_InitStruct);
 800195e:	f107 0310 	add.w	r3, r7, #16
 8001962:	4619      	mov	r1, r3
 8001964:	4812      	ldr	r0, [pc, #72]	; (80019b0 <MX_GPIO_Init+0xf0>)
 8001966:	f001 fdfb 	bl	8003560 <HAL_GPIO_Init>

  /*Configure GPIO pins : inputHold_Pin inputZero_Pin inputMode_Pin */
  GPIO_InitStruct.Pin = inputHold_Pin|inputZero_Pin|inputMode_Pin;
 800196a:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 800196e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001970:	2300      	movs	r3, #0
 8001972:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001974:	2302      	movs	r3, #2
 8001976:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001978:	f107 0310 	add.w	r3, r7, #16
 800197c:	4619      	mov	r1, r3
 800197e:	480d      	ldr	r0, [pc, #52]	; (80019b4 <MX_GPIO_Init+0xf4>)
 8001980:	f001 fdee 	bl	8003560 <HAL_GPIO_Init>

  /*Configure GPIO pin : outputLed_Pin */
  GPIO_InitStruct.Pin = outputLed_Pin;
 8001984:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001988:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800198a:	2301      	movs	r3, #1
 800198c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800198e:	2300      	movs	r3, #0
 8001990:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001992:	2302      	movs	r3, #2
 8001994:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(outputLed_GPIO_Port, &GPIO_InitStruct);
 8001996:	f107 0310 	add.w	r3, r7, #16
 800199a:	4619      	mov	r1, r3
 800199c:	4805      	ldr	r0, [pc, #20]	; (80019b4 <MX_GPIO_Init+0xf4>)
 800199e:	f001 fddf 	bl	8003560 <HAL_GPIO_Init>

}
 80019a2:	bf00      	nop
 80019a4:	3720      	adds	r7, #32
 80019a6:	46bd      	mov	sp, r7
 80019a8:	bd80      	pop	{r7, pc}
 80019aa:	bf00      	nop
 80019ac:	40021000 	.word	0x40021000
 80019b0:	40011000 	.word	0x40011000
 80019b4:	40010c00 	.word	0x40010c00

080019b8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80019b8:	b480      	push	{r7}
 80019ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80019bc:	bf00      	nop
 80019be:	46bd      	mov	sp, r7
 80019c0:	bc80      	pop	{r7}
 80019c2:	4770      	bx	lr
 80019c4:	0000      	movs	r0, r0
	...

080019c8 <MPU6050_Read_All>:

    temp = (int16_t) (Rec_Data[0] << 8 | Rec_Data[1]);
    DataStruct->Temperature = (float) ((int16_t) temp / (float) 340.0 + (float) 36.53);
}

void MPU6050_Read_All(I2C_HandleTypeDef *I2Cx, MPU6050_t *DataStruct) {
 80019c8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80019cc:	b094      	sub	sp, #80	; 0x50
 80019ce:	af04      	add	r7, sp, #16
 80019d0:	6078      	str	r0, [r7, #4]
 80019d2:	6039      	str	r1, [r7, #0]
    uint8_t Rec_Data[14];
    int16_t temp;

    // Read 14 BYTES of data starting from ACCEL_XOUT_H register

    HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDR, ACCEL_XOUT_H_REG, 1, Rec_Data, 14, i2c_timeout);
 80019d4:	2364      	movs	r3, #100	; 0x64
 80019d6:	9302      	str	r3, [sp, #8]
 80019d8:	230e      	movs	r3, #14
 80019da:	9301      	str	r3, [sp, #4]
 80019dc:	f107 0308 	add.w	r3, r7, #8
 80019e0:	9300      	str	r3, [sp, #0]
 80019e2:	2301      	movs	r3, #1
 80019e4:	223b      	movs	r2, #59	; 0x3b
 80019e6:	21d0      	movs	r1, #208	; 0xd0
 80019e8:	6878      	ldr	r0, [r7, #4]
 80019ea:	f002 fa7b 	bl	8003ee4 <HAL_I2C_Mem_Read>

    DataStruct->Accel_X_RAW = (int16_t) (Rec_Data[0] << 8 | Rec_Data[1]);
 80019ee:	7a3b      	ldrb	r3, [r7, #8]
 80019f0:	021b      	lsls	r3, r3, #8
 80019f2:	b21a      	sxth	r2, r3
 80019f4:	7a7b      	ldrb	r3, [r7, #9]
 80019f6:	b21b      	sxth	r3, r3
 80019f8:	4313      	orrs	r3, r2
 80019fa:	b21a      	sxth	r2, r3
 80019fc:	683b      	ldr	r3, [r7, #0]
 80019fe:	801a      	strh	r2, [r3, #0]
    DataStruct->Accel_Y_RAW = (int16_t) (Rec_Data[2] << 8 | Rec_Data[3]);
 8001a00:	7abb      	ldrb	r3, [r7, #10]
 8001a02:	021b      	lsls	r3, r3, #8
 8001a04:	b21a      	sxth	r2, r3
 8001a06:	7afb      	ldrb	r3, [r7, #11]
 8001a08:	b21b      	sxth	r3, r3
 8001a0a:	4313      	orrs	r3, r2
 8001a0c:	b21a      	sxth	r2, r3
 8001a0e:	683b      	ldr	r3, [r7, #0]
 8001a10:	805a      	strh	r2, [r3, #2]
    DataStruct->Accel_Z_RAW = (int16_t) (Rec_Data[4] << 8 | Rec_Data[5]);
 8001a12:	7b3b      	ldrb	r3, [r7, #12]
 8001a14:	021b      	lsls	r3, r3, #8
 8001a16:	b21a      	sxth	r2, r3
 8001a18:	7b7b      	ldrb	r3, [r7, #13]
 8001a1a:	b21b      	sxth	r3, r3
 8001a1c:	4313      	orrs	r3, r2
 8001a1e:	b21a      	sxth	r2, r3
 8001a20:	683b      	ldr	r3, [r7, #0]
 8001a22:	809a      	strh	r2, [r3, #4]
    temp = (int16_t) (Rec_Data[6] << 8 | Rec_Data[7]);
 8001a24:	7bbb      	ldrb	r3, [r7, #14]
 8001a26:	021b      	lsls	r3, r3, #8
 8001a28:	b21a      	sxth	r2, r3
 8001a2a:	7bfb      	ldrb	r3, [r7, #15]
 8001a2c:	b21b      	sxth	r3, r3
 8001a2e:	4313      	orrs	r3, r2
 8001a30:	86fb      	strh	r3, [r7, #54]	; 0x36
    DataStruct->Gyro_X_RAW = (int16_t) (Rec_Data[8] << 8 | Rec_Data[9]);
 8001a32:	7c3b      	ldrb	r3, [r7, #16]
 8001a34:	021b      	lsls	r3, r3, #8
 8001a36:	b21a      	sxth	r2, r3
 8001a38:	7c7b      	ldrb	r3, [r7, #17]
 8001a3a:	b21b      	sxth	r3, r3
 8001a3c:	4313      	orrs	r3, r2
 8001a3e:	b21a      	sxth	r2, r3
 8001a40:	683b      	ldr	r3, [r7, #0]
 8001a42:	841a      	strh	r2, [r3, #32]
    DataStruct->Gyro_Y_RAW = (int16_t) (Rec_Data[10] << 8 | Rec_Data[11]);
 8001a44:	7cbb      	ldrb	r3, [r7, #18]
 8001a46:	021b      	lsls	r3, r3, #8
 8001a48:	b21a      	sxth	r2, r3
 8001a4a:	7cfb      	ldrb	r3, [r7, #19]
 8001a4c:	b21b      	sxth	r3, r3
 8001a4e:	4313      	orrs	r3, r2
 8001a50:	b21a      	sxth	r2, r3
 8001a52:	683b      	ldr	r3, [r7, #0]
 8001a54:	845a      	strh	r2, [r3, #34]	; 0x22
    DataStruct->Gyro_Z_RAW = (int16_t) (Rec_Data[12] << 8 | Rec_Data[13]);
 8001a56:	7d3b      	ldrb	r3, [r7, #20]
 8001a58:	021b      	lsls	r3, r3, #8
 8001a5a:	b21a      	sxth	r2, r3
 8001a5c:	7d7b      	ldrb	r3, [r7, #21]
 8001a5e:	b21b      	sxth	r3, r3
 8001a60:	4313      	orrs	r3, r2
 8001a62:	b21a      	sxth	r2, r3
 8001a64:	683b      	ldr	r3, [r7, #0]
 8001a66:	849a      	strh	r2, [r3, #36]	; 0x24

    DataStruct->Ax = DataStruct->Accel_X_RAW / 16384.0;
 8001a68:	683b      	ldr	r3, [r7, #0]
 8001a6a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001a6e:	4618      	mov	r0, r3
 8001a70:	f7fe fcc8 	bl	8000404 <__aeabi_i2d>
 8001a74:	f04f 0200 	mov.w	r2, #0
 8001a78:	4bb7      	ldr	r3, [pc, #732]	; (8001d58 <MPU6050_Read_All+0x390>)
 8001a7a:	f7fe fe57 	bl	800072c <__aeabi_ddiv>
 8001a7e:	4602      	mov	r2, r0
 8001a80:	460b      	mov	r3, r1
 8001a82:	6839      	ldr	r1, [r7, #0]
 8001a84:	e9c1 2302 	strd	r2, r3, [r1, #8]
    DataStruct->Ay = DataStruct->Accel_Y_RAW / 16384.0;
 8001a88:	683b      	ldr	r3, [r7, #0]
 8001a8a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001a8e:	4618      	mov	r0, r3
 8001a90:	f7fe fcb8 	bl	8000404 <__aeabi_i2d>
 8001a94:	f04f 0200 	mov.w	r2, #0
 8001a98:	4baf      	ldr	r3, [pc, #700]	; (8001d58 <MPU6050_Read_All+0x390>)
 8001a9a:	f7fe fe47 	bl	800072c <__aeabi_ddiv>
 8001a9e:	4602      	mov	r2, r0
 8001aa0:	460b      	mov	r3, r1
 8001aa2:	6839      	ldr	r1, [r7, #0]
 8001aa4:	e9c1 2304 	strd	r2, r3, [r1, #16]
    DataStruct->Az = DataStruct->Accel_Z_RAW / Accel_Z_corrector;
 8001aa8:	683b      	ldr	r3, [r7, #0]
 8001aaa:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001aae:	4618      	mov	r0, r3
 8001ab0:	f7fe fca8 	bl	8000404 <__aeabi_i2d>
 8001ab4:	a3a2      	add	r3, pc, #648	; (adr r3, 8001d40 <MPU6050_Read_All+0x378>)
 8001ab6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001aba:	f7fe fe37 	bl	800072c <__aeabi_ddiv>
 8001abe:	4602      	mov	r2, r0
 8001ac0:	460b      	mov	r3, r1
 8001ac2:	6839      	ldr	r1, [r7, #0]
 8001ac4:	e9c1 2306 	strd	r2, r3, [r1, #24]
    DataStruct->Temperature = (float) ((int16_t) temp / (float) 340.0 + (float) 36.53);
 8001ac8:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 8001acc:	4618      	mov	r0, r3
 8001ace:	f7ff f8e5 	bl	8000c9c <__aeabi_i2f>
 8001ad2:	4603      	mov	r3, r0
 8001ad4:	49a1      	ldr	r1, [pc, #644]	; (8001d5c <MPU6050_Read_All+0x394>)
 8001ad6:	4618      	mov	r0, r3
 8001ad8:	f7ff f9e8 	bl	8000eac <__aeabi_fdiv>
 8001adc:	4603      	mov	r3, r0
 8001ade:	49a0      	ldr	r1, [pc, #640]	; (8001d60 <MPU6050_Read_All+0x398>)
 8001ae0:	4618      	mov	r0, r3
 8001ae2:	f7ff f827 	bl	8000b34 <__addsf3>
 8001ae6:	4603      	mov	r3, r0
 8001ae8:	461a      	mov	r2, r3
 8001aea:	683b      	ldr	r3, [r7, #0]
 8001aec:	641a      	str	r2, [r3, #64]	; 0x40
    DataStruct->Gx = DataStruct->Gyro_X_RAW / 131.0;
 8001aee:	683b      	ldr	r3, [r7, #0]
 8001af0:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 8001af4:	4618      	mov	r0, r3
 8001af6:	f7fe fc85 	bl	8000404 <__aeabi_i2d>
 8001afa:	a393      	add	r3, pc, #588	; (adr r3, 8001d48 <MPU6050_Read_All+0x380>)
 8001afc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b00:	f7fe fe14 	bl	800072c <__aeabi_ddiv>
 8001b04:	4602      	mov	r2, r0
 8001b06:	460b      	mov	r3, r1
 8001b08:	6839      	ldr	r1, [r7, #0]
 8001b0a:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
    DataStruct->Gy = DataStruct->Gyro_Y_RAW / 131.0;
 8001b0e:	683b      	ldr	r3, [r7, #0]
 8001b10:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	; 0x22
 8001b14:	4618      	mov	r0, r3
 8001b16:	f7fe fc75 	bl	8000404 <__aeabi_i2d>
 8001b1a:	a38b      	add	r3, pc, #556	; (adr r3, 8001d48 <MPU6050_Read_All+0x380>)
 8001b1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b20:	f7fe fe04 	bl	800072c <__aeabi_ddiv>
 8001b24:	4602      	mov	r2, r0
 8001b26:	460b      	mov	r3, r1
 8001b28:	6839      	ldr	r1, [r7, #0]
 8001b2a:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
    DataStruct->Gz = DataStruct->Gyro_Z_RAW / 131.0;
 8001b2e:	683b      	ldr	r3, [r7, #0]
 8001b30:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	; 0x24
 8001b34:	4618      	mov	r0, r3
 8001b36:	f7fe fc65 	bl	8000404 <__aeabi_i2d>
 8001b3a:	a383      	add	r3, pc, #524	; (adr r3, 8001d48 <MPU6050_Read_All+0x380>)
 8001b3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b40:	f7fe fdf4 	bl	800072c <__aeabi_ddiv>
 8001b44:	4602      	mov	r2, r0
 8001b46:	460b      	mov	r3, r1
 8001b48:	6839      	ldr	r1, [r7, #0]
 8001b4a:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38

    // Kalman angle solve
    double dt = (double) (HAL_GetTick() - timer) / 1000;
 8001b4e:	f001 fbf7 	bl	8003340 <HAL_GetTick>
 8001b52:	4602      	mov	r2, r0
 8001b54:	4b83      	ldr	r3, [pc, #524]	; (8001d64 <MPU6050_Read_All+0x39c>)
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	1ad3      	subs	r3, r2, r3
 8001b5a:	4618      	mov	r0, r3
 8001b5c:	f7fe fc42 	bl	80003e4 <__aeabi_ui2d>
 8001b60:	f04f 0200 	mov.w	r2, #0
 8001b64:	4b80      	ldr	r3, [pc, #512]	; (8001d68 <MPU6050_Read_All+0x3a0>)
 8001b66:	f7fe fde1 	bl	800072c <__aeabi_ddiv>
 8001b6a:	4602      	mov	r2, r0
 8001b6c:	460b      	mov	r3, r1
 8001b6e:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
    timer = HAL_GetTick();
 8001b72:	f001 fbe5 	bl	8003340 <HAL_GetTick>
 8001b76:	4602      	mov	r2, r0
 8001b78:	4b7a      	ldr	r3, [pc, #488]	; (8001d64 <MPU6050_Read_All+0x39c>)
 8001b7a:	601a      	str	r2, [r3, #0]
    double roll;
    double roll_sqrt = sqrt(
            DataStruct->Accel_X_RAW * DataStruct->Accel_X_RAW + DataStruct->Accel_Z_RAW * DataStruct->Accel_Z_RAW);
 8001b7c:	683b      	ldr	r3, [r7, #0]
 8001b7e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001b82:	461a      	mov	r2, r3
 8001b84:	683b      	ldr	r3, [r7, #0]
 8001b86:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001b8a:	fb03 f202 	mul.w	r2, r3, r2
 8001b8e:	683b      	ldr	r3, [r7, #0]
 8001b90:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001b94:	4619      	mov	r1, r3
 8001b96:	683b      	ldr	r3, [r7, #0]
 8001b98:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001b9c:	fb03 f301 	mul.w	r3, r3, r1
 8001ba0:	4413      	add	r3, r2
    double roll_sqrt = sqrt(
 8001ba2:	4618      	mov	r0, r3
 8001ba4:	f7fe fc2e 	bl	8000404 <__aeabi_i2d>
 8001ba8:	4602      	mov	r2, r0
 8001baa:	460b      	mov	r3, r1
 8001bac:	4610      	mov	r0, r2
 8001bae:	4619      	mov	r1, r3
 8001bb0:	f005 feda 	bl	8007968 <sqrt>
 8001bb4:	e9c7 0108 	strd	r0, r1, [r7, #32]
    if (roll_sqrt != 0.0) {
 8001bb8:	f04f 0200 	mov.w	r2, #0
 8001bbc:	f04f 0300 	mov.w	r3, #0
 8001bc0:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001bc4:	f7fe fef0 	bl	80009a8 <__aeabi_dcmpeq>
 8001bc8:	4603      	mov	r3, r0
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d119      	bne.n	8001c02 <MPU6050_Read_All+0x23a>
        roll = atan(DataStruct->Accel_Y_RAW / roll_sqrt) * RAD_TO_DEG;
 8001bce:	683b      	ldr	r3, [r7, #0]
 8001bd0:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001bd4:	4618      	mov	r0, r3
 8001bd6:	f7fe fc15 	bl	8000404 <__aeabi_i2d>
 8001bda:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001bde:	f7fe fda5 	bl	800072c <__aeabi_ddiv>
 8001be2:	4602      	mov	r2, r0
 8001be4:	460b      	mov	r3, r1
 8001be6:	4610      	mov	r0, r2
 8001be8:	4619      	mov	r1, r3
 8001bea:	f005 fd09 	bl	8007600 <atan>
 8001bee:	a358      	add	r3, pc, #352	; (adr r3, 8001d50 <MPU6050_Read_All+0x388>)
 8001bf0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001bf4:	f7fe fc70 	bl	80004d8 <__aeabi_dmul>
 8001bf8:	4602      	mov	r2, r0
 8001bfa:	460b      	mov	r3, r1
 8001bfc:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
 8001c00:	e005      	b.n	8001c0e <MPU6050_Read_All+0x246>
    } else {
        roll = 0.0;
 8001c02:	f04f 0200 	mov.w	r2, #0
 8001c06:	f04f 0300 	mov.w	r3, #0
 8001c0a:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
    }
    double pitch = atan2(-DataStruct->Accel_X_RAW, DataStruct->Accel_Z_RAW) * RAD_TO_DEG;
 8001c0e:	683b      	ldr	r3, [r7, #0]
 8001c10:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001c14:	425b      	negs	r3, r3
 8001c16:	4618      	mov	r0, r3
 8001c18:	f7fe fbf4 	bl	8000404 <__aeabi_i2d>
 8001c1c:	4682      	mov	sl, r0
 8001c1e:	468b      	mov	fp, r1
 8001c20:	683b      	ldr	r3, [r7, #0]
 8001c22:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001c26:	4618      	mov	r0, r3
 8001c28:	f7fe fbec 	bl	8000404 <__aeabi_i2d>
 8001c2c:	4602      	mov	r2, r0
 8001c2e:	460b      	mov	r3, r1
 8001c30:	4650      	mov	r0, sl
 8001c32:	4659      	mov	r1, fp
 8001c34:	f005 fe96 	bl	8007964 <atan2>
 8001c38:	a345      	add	r3, pc, #276	; (adr r3, 8001d50 <MPU6050_Read_All+0x388>)
 8001c3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c3e:	f7fe fc4b 	bl	80004d8 <__aeabi_dmul>
 8001c42:	4602      	mov	r2, r0
 8001c44:	460b      	mov	r3, r1
 8001c46:	e9c7 2306 	strd	r2, r3, [r7, #24]
    if ((pitch < -90 && DataStruct->KalmanAngleY > 90) || (pitch > 90 && DataStruct->KalmanAngleY < -90)) {
 8001c4a:	f04f 0200 	mov.w	r2, #0
 8001c4e:	4b47      	ldr	r3, [pc, #284]	; (8001d6c <MPU6050_Read_All+0x3a4>)
 8001c50:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001c54:	f7fe feb2 	bl	80009bc <__aeabi_dcmplt>
 8001c58:	4603      	mov	r3, r0
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d00a      	beq.n	8001c74 <MPU6050_Read_All+0x2ac>
 8001c5e:	683b      	ldr	r3, [r7, #0]
 8001c60:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 8001c64:	f04f 0200 	mov.w	r2, #0
 8001c68:	4b41      	ldr	r3, [pc, #260]	; (8001d70 <MPU6050_Read_All+0x3a8>)
 8001c6a:	f7fe fec5 	bl	80009f8 <__aeabi_dcmpgt>
 8001c6e:	4603      	mov	r3, r0
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d114      	bne.n	8001c9e <MPU6050_Read_All+0x2d6>
 8001c74:	f04f 0200 	mov.w	r2, #0
 8001c78:	4b3d      	ldr	r3, [pc, #244]	; (8001d70 <MPU6050_Read_All+0x3a8>)
 8001c7a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001c7e:	f7fe febb 	bl	80009f8 <__aeabi_dcmpgt>
 8001c82:	4603      	mov	r3, r0
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d015      	beq.n	8001cb4 <MPU6050_Read_All+0x2ec>
 8001c88:	683b      	ldr	r3, [r7, #0]
 8001c8a:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 8001c8e:	f04f 0200 	mov.w	r2, #0
 8001c92:	4b36      	ldr	r3, [pc, #216]	; (8001d6c <MPU6050_Read_All+0x3a4>)
 8001c94:	f7fe fe92 	bl	80009bc <__aeabi_dcmplt>
 8001c98:	4603      	mov	r3, r0
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d00a      	beq.n	8001cb4 <MPU6050_Read_All+0x2ec>
        KalmanY.angle = pitch;
 8001c9e:	4935      	ldr	r1, [pc, #212]	; (8001d74 <MPU6050_Read_All+0x3ac>)
 8001ca0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001ca4:	e9c1 2306 	strd	r2, r3, [r1, #24]
        DataStruct->KalmanAngleY = pitch;
 8001ca8:	6839      	ldr	r1, [r7, #0]
 8001caa:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001cae:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
 8001cb2:	e012      	b.n	8001cda <MPU6050_Read_All+0x312>
    } else {
        DataStruct->KalmanAngleY = Kalman_getAngle(&KalmanY, pitch, DataStruct->Gy, dt);
 8001cb4:	683b      	ldr	r3, [r7, #0]
 8001cb6:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 8001cba:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8001cbe:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8001cc2:	e9cd 2300 	strd	r2, r3, [sp]
 8001cc6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001cca:	482a      	ldr	r0, [pc, #168]	; (8001d74 <MPU6050_Read_All+0x3ac>)
 8001ccc:	f000 f856 	bl	8001d7c <Kalman_getAngle>
 8001cd0:	4602      	mov	r2, r0
 8001cd2:	460b      	mov	r3, r1
 8001cd4:	6839      	ldr	r1, [r7, #0]
 8001cd6:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
    }
    if (fabs(DataStruct->KalmanAngleY) > 90)
 8001cda:	683b      	ldr	r3, [r7, #0]
 8001cdc:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	; 0x50
 8001ce0:	4690      	mov	r8, r2
 8001ce2:	f023 4900 	bic.w	r9, r3, #2147483648	; 0x80000000
 8001ce6:	f04f 0200 	mov.w	r2, #0
 8001cea:	4b21      	ldr	r3, [pc, #132]	; (8001d70 <MPU6050_Read_All+0x3a8>)
 8001cec:	4640      	mov	r0, r8
 8001cee:	4649      	mov	r1, r9
 8001cf0:	f7fe fe82 	bl	80009f8 <__aeabi_dcmpgt>
 8001cf4:	4603      	mov	r3, r0
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d008      	beq.n	8001d0c <MPU6050_Read_All+0x344>
        DataStruct->Gx = -DataStruct->Gx;
 8001cfa:	683b      	ldr	r3, [r7, #0]
 8001cfc:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 8001d00:	4614      	mov	r4, r2
 8001d02:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 8001d06:	683b      	ldr	r3, [r7, #0]
 8001d08:	e9c3 450a 	strd	r4, r5, [r3, #40]	; 0x28
    DataStruct->KalmanAngleX = Kalman_getAngle(&KalmanX, roll, DataStruct->Gy, dt);
 8001d0c:	683b      	ldr	r3, [r7, #0]
 8001d0e:	f103 0430 	add.w	r4, r3, #48	; 0x30
 8001d12:	e9d4 3400 	ldrd	r3, r4, [r4]
 8001d16:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 8001d1a:	e9cd 1202 	strd	r1, r2, [sp, #8]
 8001d1e:	e9cd 3400 	strd	r3, r4, [sp]
 8001d22:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8001d26:	4814      	ldr	r0, [pc, #80]	; (8001d78 <MPU6050_Read_All+0x3b0>)
 8001d28:	f000 f828 	bl	8001d7c <Kalman_getAngle>
 8001d2c:	4603      	mov	r3, r0
 8001d2e:	460c      	mov	r4, r1
 8001d30:	683a      	ldr	r2, [r7, #0]
 8001d32:	e9c2 3412 	strd	r3, r4, [r2, #72]	; 0x48

}
 8001d36:	bf00      	nop
 8001d38:	3740      	adds	r7, #64	; 0x40
 8001d3a:	46bd      	mov	sp, r7
 8001d3c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001d40:	00000000 	.word	0x00000000
 8001d44:	40cc2900 	.word	0x40cc2900
 8001d48:	00000000 	.word	0x00000000
 8001d4c:	40606000 	.word	0x40606000
 8001d50:	1a63c1f8 	.word	0x1a63c1f8
 8001d54:	404ca5dc 	.word	0x404ca5dc
 8001d58:	40d00000 	.word	0x40d00000
 8001d5c:	43aa0000 	.word	0x43aa0000
 8001d60:	42121eb8 	.word	0x42121eb8
 8001d64:	2000088c 	.word	0x2000088c
 8001d68:	408f4000 	.word	0x408f4000
 8001d6c:	c0568000 	.word	0xc0568000
 8001d70:	40568000 	.word	0x40568000
 8001d74:	20000060 	.word	0x20000060
 8001d78:	20000018 	.word	0x20000018

08001d7c <Kalman_getAngle>:

double Kalman_getAngle(Kalman_t *Kalman, double newAngle, double newRate, double dt) {
 8001d7c:	b5b0      	push	{r4, r5, r7, lr}
 8001d7e:	b092      	sub	sp, #72	; 0x48
 8001d80:	af00      	add	r7, sp, #0
 8001d82:	60f8      	str	r0, [r7, #12]
 8001d84:	e9c7 2300 	strd	r2, r3, [r7]
    double rate = newRate - Kalman->bias;
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	f103 0420 	add.w	r4, r3, #32
 8001d8e:	e9d4 3400 	ldrd	r3, r4, [r4]
 8001d92:	461a      	mov	r2, r3
 8001d94:	4623      	mov	r3, r4
 8001d96:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8001d9a:	f7fe f9e5 	bl	8000168 <__aeabi_dsub>
 8001d9e:	4603      	mov	r3, r0
 8001da0:	460c      	mov	r4, r1
 8001da2:	e9c7 3410 	strd	r3, r4, [r7, #64]	; 0x40
    Kalman->angle += dt * rate;
 8001da6:	68fb      	ldr	r3, [r7, #12]
 8001da8:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 8001dac:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8001db0:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8001db4:	f7fe fb90 	bl	80004d8 <__aeabi_dmul>
 8001db8:	4602      	mov	r2, r0
 8001dba:	460b      	mov	r3, r1
 8001dbc:	4620      	mov	r0, r4
 8001dbe:	4629      	mov	r1, r5
 8001dc0:	f7fe f9d4 	bl	800016c <__adddf3>
 8001dc4:	4603      	mov	r3, r0
 8001dc6:	460c      	mov	r4, r1
 8001dc8:	68fa      	ldr	r2, [r7, #12]
 8001dca:	e9c2 3406 	strd	r3, r4, [r2, #24]

    Kalman->P[0][0] += dt * (dt * Kalman->P[1][1] - Kalman->P[0][1] - Kalman->P[1][0] + Kalman->Q_angle);
 8001dce:	68fb      	ldr	r3, [r7, #12]
 8001dd0:	e9d3 450a 	ldrd	r4, r5, [r3, #40]	; 0x28
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 8001dda:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8001dde:	f7fe fb7b 	bl	80004d8 <__aeabi_dmul>
 8001de2:	4602      	mov	r2, r0
 8001de4:	460b      	mov	r3, r1
 8001de6:	4610      	mov	r0, r2
 8001de8:	4619      	mov	r1, r3
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 8001df0:	f7fe f9ba 	bl	8000168 <__aeabi_dsub>
 8001df4:	4602      	mov	r2, r0
 8001df6:	460b      	mov	r3, r1
 8001df8:	4610      	mov	r0, r2
 8001dfa:	4619      	mov	r1, r3
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8001e02:	f7fe f9b1 	bl	8000168 <__aeabi_dsub>
 8001e06:	4602      	mov	r2, r0
 8001e08:	460b      	mov	r3, r1
 8001e0a:	4610      	mov	r0, r2
 8001e0c:	4619      	mov	r1, r3
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e14:	f7fe f9aa 	bl	800016c <__adddf3>
 8001e18:	4602      	mov	r2, r0
 8001e1a:	460b      	mov	r3, r1
 8001e1c:	4610      	mov	r0, r2
 8001e1e:	4619      	mov	r1, r3
 8001e20:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8001e24:	f7fe fb58 	bl	80004d8 <__aeabi_dmul>
 8001e28:	4602      	mov	r2, r0
 8001e2a:	460b      	mov	r3, r1
 8001e2c:	4620      	mov	r0, r4
 8001e2e:	4629      	mov	r1, r5
 8001e30:	f7fe f99c 	bl	800016c <__adddf3>
 8001e34:	4603      	mov	r3, r0
 8001e36:	460c      	mov	r4, r1
 8001e38:	68fa      	ldr	r2, [r7, #12]
 8001e3a:	e9c2 340a 	strd	r3, r4, [r2, #40]	; 0x28
    Kalman->P[0][1] -= dt * Kalman->P[1][1];
 8001e3e:	68fb      	ldr	r3, [r7, #12]
 8001e40:	e9d3 450c 	ldrd	r4, r5, [r3, #48]	; 0x30
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 8001e4a:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8001e4e:	f7fe fb43 	bl	80004d8 <__aeabi_dmul>
 8001e52:	4602      	mov	r2, r0
 8001e54:	460b      	mov	r3, r1
 8001e56:	4620      	mov	r0, r4
 8001e58:	4629      	mov	r1, r5
 8001e5a:	f7fe f985 	bl	8000168 <__aeabi_dsub>
 8001e5e:	4603      	mov	r3, r0
 8001e60:	460c      	mov	r4, r1
 8001e62:	68fa      	ldr	r2, [r7, #12]
 8001e64:	e9c2 340c 	strd	r3, r4, [r2, #48]	; 0x30
    Kalman->P[1][0] -= dt * Kalman->P[1][1];
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	e9d3 450e 	ldrd	r4, r5, [r3, #56]	; 0x38
 8001e6e:	68fb      	ldr	r3, [r7, #12]
 8001e70:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 8001e74:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8001e78:	f7fe fb2e 	bl	80004d8 <__aeabi_dmul>
 8001e7c:	4602      	mov	r2, r0
 8001e7e:	460b      	mov	r3, r1
 8001e80:	4620      	mov	r0, r4
 8001e82:	4629      	mov	r1, r5
 8001e84:	f7fe f970 	bl	8000168 <__aeabi_dsub>
 8001e88:	4603      	mov	r3, r0
 8001e8a:	460c      	mov	r4, r1
 8001e8c:	68fa      	ldr	r2, [r7, #12]
 8001e8e:	e9c2 340e 	strd	r3, r4, [r2, #56]	; 0x38
    Kalman->P[1][1] += Kalman->Q_bias * dt;
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	e9d3 4510 	ldrd	r4, r5, [r3, #64]	; 0x40
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8001e9e:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8001ea2:	f7fe fb19 	bl	80004d8 <__aeabi_dmul>
 8001ea6:	4602      	mov	r2, r0
 8001ea8:	460b      	mov	r3, r1
 8001eaa:	4620      	mov	r0, r4
 8001eac:	4629      	mov	r1, r5
 8001eae:	f7fe f95d 	bl	800016c <__adddf3>
 8001eb2:	4603      	mov	r3, r0
 8001eb4:	460c      	mov	r4, r1
 8001eb6:	68fa      	ldr	r2, [r7, #12]
 8001eb8:	e9c2 3410 	strd	r3, r4, [r2, #64]	; 0x40

    double S = Kalman->P[0][0] + Kalman->R_measure;
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	f103 0410 	add.w	r4, r3, #16
 8001ec8:	e9d4 3400 	ldrd	r3, r4, [r4]
 8001ecc:	461a      	mov	r2, r3
 8001ece:	4623      	mov	r3, r4
 8001ed0:	f7fe f94c 	bl	800016c <__adddf3>
 8001ed4:	4603      	mov	r3, r0
 8001ed6:	460c      	mov	r4, r1
 8001ed8:	e9c7 340e 	strd	r3, r4, [r7, #56]	; 0x38
    double K[2];
    K[0] = Kalman->P[0][0] / S;
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 8001ee2:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8001ee6:	f7fe fc21 	bl	800072c <__aeabi_ddiv>
 8001eea:	4603      	mov	r3, r0
 8001eec:	460c      	mov	r4, r1
 8001eee:	e9c7 3404 	strd	r3, r4, [r7, #16]
    K[1] = Kalman->P[1][0] / S;
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 8001ef8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8001efc:	f7fe fc16 	bl	800072c <__aeabi_ddiv>
 8001f00:	4603      	mov	r3, r0
 8001f02:	460c      	mov	r4, r1
 8001f04:	e9c7 3406 	strd	r3, r4, [r7, #24]

    double y = newAngle - Kalman->angle;
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	f103 0418 	add.w	r4, r3, #24
 8001f0e:	e9d4 3400 	ldrd	r3, r4, [r4]
 8001f12:	461a      	mov	r2, r3
 8001f14:	4623      	mov	r3, r4
 8001f16:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001f1a:	f7fe f925 	bl	8000168 <__aeabi_dsub>
 8001f1e:	4603      	mov	r3, r0
 8001f20:	460c      	mov	r4, r1
 8001f22:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30
    Kalman->angle += K[0] * y;
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 8001f2c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001f30:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8001f34:	f7fe fad0 	bl	80004d8 <__aeabi_dmul>
 8001f38:	4602      	mov	r2, r0
 8001f3a:	460b      	mov	r3, r1
 8001f3c:	4620      	mov	r0, r4
 8001f3e:	4629      	mov	r1, r5
 8001f40:	f7fe f914 	bl	800016c <__adddf3>
 8001f44:	4603      	mov	r3, r0
 8001f46:	460c      	mov	r4, r1
 8001f48:	68fa      	ldr	r2, [r7, #12]
 8001f4a:	e9c2 3406 	strd	r3, r4, [r2, #24]
    Kalman->bias += K[1] * y;
 8001f4e:	68fb      	ldr	r3, [r7, #12]
 8001f50:	e9d3 4508 	ldrd	r4, r5, [r3, #32]
 8001f54:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001f58:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8001f5c:	f7fe fabc 	bl	80004d8 <__aeabi_dmul>
 8001f60:	4602      	mov	r2, r0
 8001f62:	460b      	mov	r3, r1
 8001f64:	4620      	mov	r0, r4
 8001f66:	4629      	mov	r1, r5
 8001f68:	f7fe f900 	bl	800016c <__adddf3>
 8001f6c:	4603      	mov	r3, r0
 8001f6e:	460c      	mov	r4, r1
 8001f70:	68fa      	ldr	r2, [r7, #12]
 8001f72:	e9c2 3408 	strd	r3, r4, [r2, #32]

    double P00_temp = Kalman->P[0][0];
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	f103 0428 	add.w	r4, r3, #40	; 0x28
 8001f7c:	e9d4 3400 	ldrd	r3, r4, [r4]
 8001f80:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
    double P01_temp = Kalman->P[0][1];
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	f103 0430 	add.w	r4, r3, #48	; 0x30
 8001f8a:	e9d4 3400 	ldrd	r3, r4, [r4]
 8001f8e:	e9c7 3408 	strd	r3, r4, [r7, #32]

    Kalman->P[0][0] -= K[0] * P00_temp;
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	e9d3 450a 	ldrd	r4, r5, [r3, #40]	; 0x28
 8001f98:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001f9c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001fa0:	f7fe fa9a 	bl	80004d8 <__aeabi_dmul>
 8001fa4:	4602      	mov	r2, r0
 8001fa6:	460b      	mov	r3, r1
 8001fa8:	4620      	mov	r0, r4
 8001faa:	4629      	mov	r1, r5
 8001fac:	f7fe f8dc 	bl	8000168 <__aeabi_dsub>
 8001fb0:	4603      	mov	r3, r0
 8001fb2:	460c      	mov	r4, r1
 8001fb4:	68fa      	ldr	r2, [r7, #12]
 8001fb6:	e9c2 340a 	strd	r3, r4, [r2, #40]	; 0x28
    Kalman->P[0][1] -= K[0] * P01_temp;
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	e9d3 450c 	ldrd	r4, r5, [r3, #48]	; 0x30
 8001fc0:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001fc4:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001fc8:	f7fe fa86 	bl	80004d8 <__aeabi_dmul>
 8001fcc:	4602      	mov	r2, r0
 8001fce:	460b      	mov	r3, r1
 8001fd0:	4620      	mov	r0, r4
 8001fd2:	4629      	mov	r1, r5
 8001fd4:	f7fe f8c8 	bl	8000168 <__aeabi_dsub>
 8001fd8:	4603      	mov	r3, r0
 8001fda:	460c      	mov	r4, r1
 8001fdc:	68fa      	ldr	r2, [r7, #12]
 8001fde:	e9c2 340c 	strd	r3, r4, [r2, #48]	; 0x30
    Kalman->P[1][0] -= K[1] * P00_temp;
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	e9d3 450e 	ldrd	r4, r5, [r3, #56]	; 0x38
 8001fe8:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001fec:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001ff0:	f7fe fa72 	bl	80004d8 <__aeabi_dmul>
 8001ff4:	4602      	mov	r2, r0
 8001ff6:	460b      	mov	r3, r1
 8001ff8:	4620      	mov	r0, r4
 8001ffa:	4629      	mov	r1, r5
 8001ffc:	f7fe f8b4 	bl	8000168 <__aeabi_dsub>
 8002000:	4603      	mov	r3, r0
 8002002:	460c      	mov	r4, r1
 8002004:	68fa      	ldr	r2, [r7, #12]
 8002006:	e9c2 340e 	strd	r3, r4, [r2, #56]	; 0x38
    Kalman->P[1][1] -= K[1] * P01_temp;
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	e9d3 4510 	ldrd	r4, r5, [r3, #64]	; 0x40
 8002010:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002014:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002018:	f7fe fa5e 	bl	80004d8 <__aeabi_dmul>
 800201c:	4602      	mov	r2, r0
 800201e:	460b      	mov	r3, r1
 8002020:	4620      	mov	r0, r4
 8002022:	4629      	mov	r1, r5
 8002024:	f7fe f8a0 	bl	8000168 <__aeabi_dsub>
 8002028:	4603      	mov	r3, r0
 800202a:	460c      	mov	r4, r1
 800202c:	68fa      	ldr	r2, [r7, #12]
 800202e:	e9c2 3410 	strd	r3, r4, [r2, #64]	; 0x40

    return Kalman->angle;
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	f103 0418 	add.w	r4, r3, #24
 8002038:	e9d4 3400 	ldrd	r3, r4, [r4]
};
 800203c:	4618      	mov	r0, r3
 800203e:	4621      	mov	r1, r4
 8002040:	3748      	adds	r7, #72	; 0x48
 8002042:	46bd      	mov	sp, r7
 8002044:	bdb0      	pop	{r4, r5, r7, pc}
	...

08002048 <SSD1306_Init>:





uint8_t SSD1306_Init(void) {
 8002048:	b580      	push	{r7, lr}
 800204a:	b082      	sub	sp, #8
 800204c:	af00      	add	r7, sp, #0

	/* Init I2C */
	ssd1306_I2C_Init();
 800204e:	f000 fa35 	bl	80024bc <ssd1306_I2C_Init>
	
	/* Check if LCD connected to I2C */
	if (HAL_I2C_IsDeviceReady(&hi2c1, SSD1306_I2C_ADDR, 1, 20000) != HAL_OK) {
 8002052:	f644 6320 	movw	r3, #20000	; 0x4e20
 8002056:	2201      	movs	r2, #1
 8002058:	2178      	movs	r1, #120	; 0x78
 800205a:	485b      	ldr	r0, [pc, #364]	; (80021c8 <SSD1306_Init+0x180>)
 800205c:	f002 f978 	bl	8004350 <HAL_I2C_IsDeviceReady>
 8002060:	4603      	mov	r3, r0
 8002062:	2b00      	cmp	r3, #0
 8002064:	d001      	beq.n	800206a <SSD1306_Init+0x22>
		/* Return false */
		return 0;
 8002066:	2300      	movs	r3, #0
 8002068:	e0a9      	b.n	80021be <SSD1306_Init+0x176>
	}
	
	/* A little delay */
	uint32_t p = 2500;
 800206a:	f640 13c4 	movw	r3, #2500	; 0x9c4
 800206e:	607b      	str	r3, [r7, #4]
	while(p>0)
 8002070:	e002      	b.n	8002078 <SSD1306_Init+0x30>
		p--;
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	3b01      	subs	r3, #1
 8002076:	607b      	str	r3, [r7, #4]
	while(p>0)
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	2b00      	cmp	r3, #0
 800207c:	d1f9      	bne.n	8002072 <SSD1306_Init+0x2a>
	
	/* Init LCD */
	SSD1306_WRITECOMMAND(0xAE); //display off
 800207e:	22ae      	movs	r2, #174	; 0xae
 8002080:	2100      	movs	r1, #0
 8002082:	2078      	movs	r0, #120	; 0x78
 8002084:	f000 fa76 	bl	8002574 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //Set Memory Addressing Mode   
 8002088:	2220      	movs	r2, #32
 800208a:	2100      	movs	r1, #0
 800208c:	2078      	movs	r0, #120	; 0x78
 800208e:	f000 fa71 	bl	8002574 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 8002092:	2210      	movs	r2, #16
 8002094:	2100      	movs	r1, #0
 8002096:	2078      	movs	r0, #120	; 0x78
 8002098:	f000 fa6c 	bl	8002574 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 800209c:	22b0      	movs	r2, #176	; 0xb0
 800209e:	2100      	movs	r1, #0
 80020a0:	2078      	movs	r0, #120	; 0x78
 80020a2:	f000 fa67 	bl	8002574 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xC8); //Set COM Output Scan Direction
 80020a6:	22c8      	movs	r2, #200	; 0xc8
 80020a8:	2100      	movs	r1, #0
 80020aa:	2078      	movs	r0, #120	; 0x78
 80020ac:	f000 fa62 	bl	8002574 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //---set low column address
 80020b0:	2200      	movs	r2, #0
 80020b2:	2100      	movs	r1, #0
 80020b4:	2078      	movs	r0, #120	; 0x78
 80020b6:	f000 fa5d 	bl	8002574 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //---set high column address
 80020ba:	2210      	movs	r2, #16
 80020bc:	2100      	movs	r1, #0
 80020be:	2078      	movs	r0, #120	; 0x78
 80020c0:	f000 fa58 	bl	8002574 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x40); //--set start line address
 80020c4:	2240      	movs	r2, #64	; 0x40
 80020c6:	2100      	movs	r1, #0
 80020c8:	2078      	movs	r0, #120	; 0x78
 80020ca:	f000 fa53 	bl	8002574 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x81); //--set contrast control register
 80020ce:	2281      	movs	r2, #129	; 0x81
 80020d0:	2100      	movs	r1, #0
 80020d2:	2078      	movs	r0, #120	; 0x78
 80020d4:	f000 fa4e 	bl	8002574 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xFF);
 80020d8:	22ff      	movs	r2, #255	; 0xff
 80020da:	2100      	movs	r1, #0
 80020dc:	2078      	movs	r0, #120	; 0x78
 80020de:	f000 fa49 	bl	8002574 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA1); //--set segment re-map 0 to 127
 80020e2:	22a1      	movs	r2, #161	; 0xa1
 80020e4:	2100      	movs	r1, #0
 80020e6:	2078      	movs	r0, #120	; 0x78
 80020e8:	f000 fa44 	bl	8002574 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA6); //--set normal display
 80020ec:	22a6      	movs	r2, #166	; 0xa6
 80020ee:	2100      	movs	r1, #0
 80020f0:	2078      	movs	r0, #120	; 0x78
 80020f2:	f000 fa3f 	bl	8002574 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA8); //--set multiplex ratio(1 to 64)
 80020f6:	22a8      	movs	r2, #168	; 0xa8
 80020f8:	2100      	movs	r1, #0
 80020fa:	2078      	movs	r0, #120	; 0x78
 80020fc:	f000 fa3a 	bl	8002574 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x3F); //
 8002100:	223f      	movs	r2, #63	; 0x3f
 8002102:	2100      	movs	r1, #0
 8002104:	2078      	movs	r0, #120	; 0x78
 8002106:	f000 fa35 	bl	8002574 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 800210a:	22a4      	movs	r2, #164	; 0xa4
 800210c:	2100      	movs	r1, #0
 800210e:	2078      	movs	r0, #120	; 0x78
 8002110:	f000 fa30 	bl	8002574 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD3); //-set display offset
 8002114:	22d3      	movs	r2, #211	; 0xd3
 8002116:	2100      	movs	r1, #0
 8002118:	2078      	movs	r0, #120	; 0x78
 800211a:	f000 fa2b 	bl	8002574 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //-not offset
 800211e:	2200      	movs	r2, #0
 8002120:	2100      	movs	r1, #0
 8002122:	2078      	movs	r0, #120	; 0x78
 8002124:	f000 fa26 	bl	8002574 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
 8002128:	22d5      	movs	r2, #213	; 0xd5
 800212a:	2100      	movs	r1, #0
 800212c:	2078      	movs	r0, #120	; 0x78
 800212e:	f000 fa21 	bl	8002574 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xF0); //--set divide ratio
 8002132:	22f0      	movs	r2, #240	; 0xf0
 8002134:	2100      	movs	r1, #0
 8002136:	2078      	movs	r0, #120	; 0x78
 8002138:	f000 fa1c 	bl	8002574 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD9); //--set pre-charge period
 800213c:	22d9      	movs	r2, #217	; 0xd9
 800213e:	2100      	movs	r1, #0
 8002140:	2078      	movs	r0, #120	; 0x78
 8002142:	f000 fa17 	bl	8002574 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x22); //
 8002146:	2222      	movs	r2, #34	; 0x22
 8002148:	2100      	movs	r1, #0
 800214a:	2078      	movs	r0, #120	; 0x78
 800214c:	f000 fa12 	bl	8002574 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDA); //--set com pins hardware configuration
 8002150:	22da      	movs	r2, #218	; 0xda
 8002152:	2100      	movs	r1, #0
 8002154:	2078      	movs	r0, #120	; 0x78
 8002156:	f000 fa0d 	bl	8002574 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x12);
 800215a:	2212      	movs	r2, #18
 800215c:	2100      	movs	r1, #0
 800215e:	2078      	movs	r0, #120	; 0x78
 8002160:	f000 fa08 	bl	8002574 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDB); //--set vcomh
 8002164:	22db      	movs	r2, #219	; 0xdb
 8002166:	2100      	movs	r1, #0
 8002168:	2078      	movs	r0, #120	; 0x78
 800216a:	f000 fa03 	bl	8002574 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //0x20,0.77xVcc
 800216e:	2220      	movs	r2, #32
 8002170:	2100      	movs	r1, #0
 8002172:	2078      	movs	r0, #120	; 0x78
 8002174:	f000 f9fe 	bl	8002574 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x8D); //--set DC-DC enable
 8002178:	228d      	movs	r2, #141	; 0x8d
 800217a:	2100      	movs	r1, #0
 800217c:	2078      	movs	r0, #120	; 0x78
 800217e:	f000 f9f9 	bl	8002574 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x14); //
 8002182:	2214      	movs	r2, #20
 8002184:	2100      	movs	r1, #0
 8002186:	2078      	movs	r0, #120	; 0x78
 8002188:	f000 f9f4 	bl	8002574 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xAF); //--turn on SSD1306 panel
 800218c:	22af      	movs	r2, #175	; 0xaf
 800218e:	2100      	movs	r1, #0
 8002190:	2078      	movs	r0, #120	; 0x78
 8002192:	f000 f9ef 	bl	8002574 <ssd1306_I2C_Write>
	

	SSD1306_WRITECOMMAND(SSD1306_DEACTIVATE_SCROLL);
 8002196:	222e      	movs	r2, #46	; 0x2e
 8002198:	2100      	movs	r1, #0
 800219a:	2078      	movs	r0, #120	; 0x78
 800219c:	f000 f9ea 	bl	8002574 <ssd1306_I2C_Write>

	/* Clear screen */
	SSD1306_Fill(SSD1306_COLOR_BLACK);
 80021a0:	2000      	movs	r0, #0
 80021a2:	f000 f84d 	bl	8002240 <SSD1306_Fill>
	
	/* Update screen */
	SSD1306_UpdateScreen();
 80021a6:	f000 f813 	bl	80021d0 <SSD1306_UpdateScreen>
	
	/* Set default values */
	SSD1306.CurrentX = 0;
 80021aa:	4b08      	ldr	r3, [pc, #32]	; (80021cc <SSD1306_Init+0x184>)
 80021ac:	2200      	movs	r2, #0
 80021ae:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 80021b0:	4b06      	ldr	r3, [pc, #24]	; (80021cc <SSD1306_Init+0x184>)
 80021b2:	2200      	movs	r2, #0
 80021b4:	805a      	strh	r2, [r3, #2]
	
	/* Initialized OK */
	SSD1306.Initialized = 1;
 80021b6:	4b05      	ldr	r3, [pc, #20]	; (80021cc <SSD1306_Init+0x184>)
 80021b8:	2201      	movs	r2, #1
 80021ba:	715a      	strb	r2, [r3, #5]
	
	/* Return OK */
	return 1;
 80021bc:	2301      	movs	r3, #1
}
 80021be:	4618      	mov	r0, r3
 80021c0:	3708      	adds	r7, #8
 80021c2:	46bd      	mov	sp, r7
 80021c4:	bd80      	pop	{r7, pc}
 80021c6:	bf00      	nop
 80021c8:	20000734 	.word	0x20000734
 80021cc:	200006dc 	.word	0x200006dc

080021d0 <SSD1306_UpdateScreen>:

void SSD1306_UpdateScreen(void) {
 80021d0:	b580      	push	{r7, lr}
 80021d2:	af00      	add	r7, sp, #0
//	}

	// Codigo optimizado
	static uint8_t m = 0;
	
	SSD1306_WRITECOMMAND(0xB0 + m);
 80021d4:	4b18      	ldr	r3, [pc, #96]	; (8002238 <SSD1306_UpdateScreen+0x68>)
 80021d6:	781b      	ldrb	r3, [r3, #0]
 80021d8:	3b50      	subs	r3, #80	; 0x50
 80021da:	b2db      	uxtb	r3, r3
 80021dc:	461a      	mov	r2, r3
 80021de:	2100      	movs	r1, #0
 80021e0:	2078      	movs	r0, #120	; 0x78
 80021e2:	f000 f9c7 	bl	8002574 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00);
 80021e6:	2200      	movs	r2, #0
 80021e8:	2100      	movs	r1, #0
 80021ea:	2078      	movs	r0, #120	; 0x78
 80021ec:	f000 f9c2 	bl	8002574 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10);
 80021f0:	2210      	movs	r2, #16
 80021f2:	2100      	movs	r1, #0
 80021f4:	2078      	movs	r0, #120	; 0x78
 80021f6:	f000 f9bd 	bl	8002574 <ssd1306_I2C_Write>

	/* Write multi data */
	ssd1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40, &SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 80021fa:	4b0f      	ldr	r3, [pc, #60]	; (8002238 <SSD1306_UpdateScreen+0x68>)
 80021fc:	781b      	ldrb	r3, [r3, #0]
 80021fe:	461a      	mov	r2, r3
 8002200:	4613      	mov	r3, r2
 8002202:	019b      	lsls	r3, r3, #6
 8002204:	4413      	add	r3, r2
 8002206:	005b      	lsls	r3, r3, #1
 8002208:	461a      	mov	r2, r3
 800220a:	4b0c      	ldr	r3, [pc, #48]	; (800223c <SSD1306_UpdateScreen+0x6c>)
 800220c:	441a      	add	r2, r3
 800220e:	2382      	movs	r3, #130	; 0x82
 8002210:	2140      	movs	r1, #64	; 0x40
 8002212:	2078      	movs	r0, #120	; 0x78
 8002214:	f000 f966 	bl	80024e4 <ssd1306_I2C_WriteMulti>

	m++;
 8002218:	4b07      	ldr	r3, [pc, #28]	; (8002238 <SSD1306_UpdateScreen+0x68>)
 800221a:	781b      	ldrb	r3, [r3, #0]
 800221c:	3301      	adds	r3, #1
 800221e:	b2da      	uxtb	r2, r3
 8002220:	4b05      	ldr	r3, [pc, #20]	; (8002238 <SSD1306_UpdateScreen+0x68>)
 8002222:	701a      	strb	r2, [r3, #0]
	m %= 8;
 8002224:	4b04      	ldr	r3, [pc, #16]	; (8002238 <SSD1306_UpdateScreen+0x68>)
 8002226:	781b      	ldrb	r3, [r3, #0]
 8002228:	f003 0307 	and.w	r3, r3, #7
 800222c:	b2da      	uxtb	r2, r3
 800222e:	4b02      	ldr	r3, [pc, #8]	; (8002238 <SSD1306_UpdateScreen+0x68>)
 8002230:	701a      	strb	r2, [r3, #0]
}
 8002232:	bf00      	nop
 8002234:	bd80      	pop	{r7, pc}
 8002236:	bf00      	nop
 8002238:	200006e2 	.word	0x200006e2
 800223c:	200002cc 	.word	0x200002cc

08002240 <SSD1306_Fill>:
	for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
		SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
	}
}

void SSD1306_Fill(SSD1306_COLOR_t color) {
 8002240:	b580      	push	{r7, lr}
 8002242:	b082      	sub	sp, #8
 8002244:	af00      	add	r7, sp, #0
 8002246:	4603      	mov	r3, r0
 8002248:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 800224a:	79fb      	ldrb	r3, [r7, #7]
 800224c:	2b00      	cmp	r3, #0
 800224e:	d101      	bne.n	8002254 <SSD1306_Fill+0x14>
 8002250:	2300      	movs	r3, #0
 8002252:	e000      	b.n	8002256 <SSD1306_Fill+0x16>
 8002254:	23ff      	movs	r3, #255	; 0xff
 8002256:	f44f 6282 	mov.w	r2, #1040	; 0x410
 800225a:	4619      	mov	r1, r3
 800225c:	4803      	ldr	r0, [pc, #12]	; (800226c <SSD1306_Fill+0x2c>)
 800225e:	f003 f977 	bl	8005550 <memset>
}
 8002262:	bf00      	nop
 8002264:	3708      	adds	r7, #8
 8002266:	46bd      	mov	sp, r7
 8002268:	bd80      	pop	{r7, pc}
 800226a:	bf00      	nop
 800226c:	200002cc 	.word	0x200002cc

08002270 <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
 8002270:	b490      	push	{r4, r7}
 8002272:	b082      	sub	sp, #8
 8002274:	af00      	add	r7, sp, #0
 8002276:	4603      	mov	r3, r0
 8002278:	80fb      	strh	r3, [r7, #6]
 800227a:	460b      	mov	r3, r1
 800227c:	80bb      	strh	r3, [r7, #4]
 800227e:	4613      	mov	r3, r2
 8002280:	70fb      	strb	r3, [r7, #3]
	if (
 8002282:	88fb      	ldrh	r3, [r7, #6]
 8002284:	2b81      	cmp	r3, #129	; 0x81
 8002286:	d854      	bhi.n	8002332 <SSD1306_DrawPixel+0xc2>
		x >= SSD1306_WIDTH ||
 8002288:	88bb      	ldrh	r3, [r7, #4]
 800228a:	2b3f      	cmp	r3, #63	; 0x3f
 800228c:	d851      	bhi.n	8002332 <SSD1306_DrawPixel+0xc2>
		/* Error */
		return;
	}
	
	/* Check if pixels are inverted */
	if (SSD1306.Inverted) {
 800228e:	4b2b      	ldr	r3, [pc, #172]	; (800233c <SSD1306_DrawPixel+0xcc>)
 8002290:	791b      	ldrb	r3, [r3, #4]
 8002292:	2b00      	cmp	r3, #0
 8002294:	d006      	beq.n	80022a4 <SSD1306_DrawPixel+0x34>
		color = (SSD1306_COLOR_t)!color;
 8002296:	78fb      	ldrb	r3, [r7, #3]
 8002298:	2b00      	cmp	r3, #0
 800229a:	bf0c      	ite	eq
 800229c:	2301      	moveq	r3, #1
 800229e:	2300      	movne	r3, #0
 80022a0:	b2db      	uxtb	r3, r3
 80022a2:	70fb      	strb	r3, [r7, #3]
	}
	
	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
 80022a4:	78fb      	ldrb	r3, [r7, #3]
 80022a6:	2b01      	cmp	r3, #1
 80022a8:	d120      	bne.n	80022ec <SSD1306_DrawPixel+0x7c>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 80022aa:	88fa      	ldrh	r2, [r7, #6]
 80022ac:	88bb      	ldrh	r3, [r7, #4]
 80022ae:	08db      	lsrs	r3, r3, #3
 80022b0:	b298      	uxth	r0, r3
 80022b2:	4601      	mov	r1, r0
 80022b4:	460b      	mov	r3, r1
 80022b6:	019b      	lsls	r3, r3, #6
 80022b8:	440b      	add	r3, r1
 80022ba:	005b      	lsls	r3, r3, #1
 80022bc:	4413      	add	r3, r2
 80022be:	4a20      	ldr	r2, [pc, #128]	; (8002340 <SSD1306_DrawPixel+0xd0>)
 80022c0:	5cd3      	ldrb	r3, [r2, r3]
 80022c2:	b25a      	sxtb	r2, r3
 80022c4:	88bb      	ldrh	r3, [r7, #4]
 80022c6:	f003 0307 	and.w	r3, r3, #7
 80022ca:	2101      	movs	r1, #1
 80022cc:	fa01 f303 	lsl.w	r3, r1, r3
 80022d0:	b25b      	sxtb	r3, r3
 80022d2:	4313      	orrs	r3, r2
 80022d4:	b25c      	sxtb	r4, r3
 80022d6:	88fa      	ldrh	r2, [r7, #6]
 80022d8:	4601      	mov	r1, r0
 80022da:	460b      	mov	r3, r1
 80022dc:	019b      	lsls	r3, r3, #6
 80022de:	440b      	add	r3, r1
 80022e0:	005b      	lsls	r3, r3, #1
 80022e2:	4413      	add	r3, r2
 80022e4:	b2e1      	uxtb	r1, r4
 80022e6:	4a16      	ldr	r2, [pc, #88]	; (8002340 <SSD1306_DrawPixel+0xd0>)
 80022e8:	54d1      	strb	r1, [r2, r3]
 80022ea:	e023      	b.n	8002334 <SSD1306_DrawPixel+0xc4>
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 80022ec:	88fa      	ldrh	r2, [r7, #6]
 80022ee:	88bb      	ldrh	r3, [r7, #4]
 80022f0:	08db      	lsrs	r3, r3, #3
 80022f2:	b298      	uxth	r0, r3
 80022f4:	4601      	mov	r1, r0
 80022f6:	460b      	mov	r3, r1
 80022f8:	019b      	lsls	r3, r3, #6
 80022fa:	440b      	add	r3, r1
 80022fc:	005b      	lsls	r3, r3, #1
 80022fe:	4413      	add	r3, r2
 8002300:	4a0f      	ldr	r2, [pc, #60]	; (8002340 <SSD1306_DrawPixel+0xd0>)
 8002302:	5cd3      	ldrb	r3, [r2, r3]
 8002304:	b25a      	sxtb	r2, r3
 8002306:	88bb      	ldrh	r3, [r7, #4]
 8002308:	f003 0307 	and.w	r3, r3, #7
 800230c:	2101      	movs	r1, #1
 800230e:	fa01 f303 	lsl.w	r3, r1, r3
 8002312:	b25b      	sxtb	r3, r3
 8002314:	43db      	mvns	r3, r3
 8002316:	b25b      	sxtb	r3, r3
 8002318:	4013      	ands	r3, r2
 800231a:	b25c      	sxtb	r4, r3
 800231c:	88fa      	ldrh	r2, [r7, #6]
 800231e:	4601      	mov	r1, r0
 8002320:	460b      	mov	r3, r1
 8002322:	019b      	lsls	r3, r3, #6
 8002324:	440b      	add	r3, r1
 8002326:	005b      	lsls	r3, r3, #1
 8002328:	4413      	add	r3, r2
 800232a:	b2e1      	uxtb	r1, r4
 800232c:	4a04      	ldr	r2, [pc, #16]	; (8002340 <SSD1306_DrawPixel+0xd0>)
 800232e:	54d1      	strb	r1, [r2, r3]
 8002330:	e000      	b.n	8002334 <SSD1306_DrawPixel+0xc4>
		return;
 8002332:	bf00      	nop
	}
}
 8002334:	3708      	adds	r7, #8
 8002336:	46bd      	mov	sp, r7
 8002338:	bc90      	pop	{r4, r7}
 800233a:	4770      	bx	lr
 800233c:	200006dc 	.word	0x200006dc
 8002340:	200002cc 	.word	0x200002cc

08002344 <SSD1306_GotoXY>:

void SSD1306_GotoXY(uint16_t x, uint16_t y) {
 8002344:	b480      	push	{r7}
 8002346:	b083      	sub	sp, #12
 8002348:	af00      	add	r7, sp, #0
 800234a:	4603      	mov	r3, r0
 800234c:	460a      	mov	r2, r1
 800234e:	80fb      	strh	r3, [r7, #6]
 8002350:	4613      	mov	r3, r2
 8002352:	80bb      	strh	r3, [r7, #4]
	/* Set write pointers */
	SSD1306.CurrentX = x;
 8002354:	4a05      	ldr	r2, [pc, #20]	; (800236c <SSD1306_GotoXY+0x28>)
 8002356:	88fb      	ldrh	r3, [r7, #6]
 8002358:	8013      	strh	r3, [r2, #0]
	SSD1306.CurrentY = y;
 800235a:	4a04      	ldr	r2, [pc, #16]	; (800236c <SSD1306_GotoXY+0x28>)
 800235c:	88bb      	ldrh	r3, [r7, #4]
 800235e:	8053      	strh	r3, [r2, #2]
}
 8002360:	bf00      	nop
 8002362:	370c      	adds	r7, #12
 8002364:	46bd      	mov	sp, r7
 8002366:	bc80      	pop	{r7}
 8002368:	4770      	bx	lr
 800236a:	bf00      	nop
 800236c:	200006dc 	.word	0x200006dc

08002370 <SSD1306_Putc>:

char SSD1306_Putc(char ch, FontDef_t* Font, SSD1306_COLOR_t color) {
 8002370:	b580      	push	{r7, lr}
 8002372:	b086      	sub	sp, #24
 8002374:	af00      	add	r7, sp, #0
 8002376:	4603      	mov	r3, r0
 8002378:	6039      	str	r1, [r7, #0]
 800237a:	71fb      	strb	r3, [r7, #7]
 800237c:	4613      	mov	r3, r2
 800237e:	71bb      	strb	r3, [r7, #6]
	uint32_t i, b, j;
	
	/* Check available space in LCD */
	if (
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8002380:	4b3a      	ldr	r3, [pc, #232]	; (800246c <SSD1306_Putc+0xfc>)
 8002382:	881b      	ldrh	r3, [r3, #0]
 8002384:	461a      	mov	r2, r3
 8002386:	683b      	ldr	r3, [r7, #0]
 8002388:	781b      	ldrb	r3, [r3, #0]
 800238a:	4413      	add	r3, r2
	if (
 800238c:	2b81      	cmp	r3, #129	; 0x81
 800238e:	dc07      	bgt.n	80023a0 <SSD1306_Putc+0x30>
		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font->FontHeight)
 8002390:	4b36      	ldr	r3, [pc, #216]	; (800246c <SSD1306_Putc+0xfc>)
 8002392:	885b      	ldrh	r3, [r3, #2]
 8002394:	461a      	mov	r2, r3
 8002396:	683b      	ldr	r3, [r7, #0]
 8002398:	785b      	ldrb	r3, [r3, #1]
 800239a:	4413      	add	r3, r2
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 800239c:	2b3f      	cmp	r3, #63	; 0x3f
 800239e:	dd01      	ble.n	80023a4 <SSD1306_Putc+0x34>
	) {
		/* Error */
		return 0;
 80023a0:	2300      	movs	r3, #0
 80023a2:	e05e      	b.n	8002462 <SSD1306_Putc+0xf2>
	}
	
	/* Go through font */
	for (i = 0; i < Font->FontHeight; i++) {
 80023a4:	2300      	movs	r3, #0
 80023a6:	617b      	str	r3, [r7, #20]
 80023a8:	e04b      	b.n	8002442 <SSD1306_Putc+0xd2>
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 80023aa:	683b      	ldr	r3, [r7, #0]
 80023ac:	685a      	ldr	r2, [r3, #4]
 80023ae:	79fb      	ldrb	r3, [r7, #7]
 80023b0:	3b20      	subs	r3, #32
 80023b2:	6839      	ldr	r1, [r7, #0]
 80023b4:	7849      	ldrb	r1, [r1, #1]
 80023b6:	fb01 f303 	mul.w	r3, r1, r3
 80023ba:	4619      	mov	r1, r3
 80023bc:	697b      	ldr	r3, [r7, #20]
 80023be:	440b      	add	r3, r1
 80023c0:	005b      	lsls	r3, r3, #1
 80023c2:	4413      	add	r3, r2
 80023c4:	881b      	ldrh	r3, [r3, #0]
 80023c6:	60fb      	str	r3, [r7, #12]
		for (j = 0; j < Font->FontWidth; j++) {
 80023c8:	2300      	movs	r3, #0
 80023ca:	613b      	str	r3, [r7, #16]
 80023cc:	e030      	b.n	8002430 <SSD1306_Putc+0xc0>
			if ((b << j) & 0x8000) {
 80023ce:	68fa      	ldr	r2, [r7, #12]
 80023d0:	693b      	ldr	r3, [r7, #16]
 80023d2:	fa02 f303 	lsl.w	r3, r2, r3
 80023d6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d010      	beq.n	8002400 <SSD1306_Putc+0x90>
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
 80023de:	4b23      	ldr	r3, [pc, #140]	; (800246c <SSD1306_Putc+0xfc>)
 80023e0:	881a      	ldrh	r2, [r3, #0]
 80023e2:	693b      	ldr	r3, [r7, #16]
 80023e4:	b29b      	uxth	r3, r3
 80023e6:	4413      	add	r3, r2
 80023e8:	b298      	uxth	r0, r3
 80023ea:	4b20      	ldr	r3, [pc, #128]	; (800246c <SSD1306_Putc+0xfc>)
 80023ec:	885a      	ldrh	r2, [r3, #2]
 80023ee:	697b      	ldr	r3, [r7, #20]
 80023f0:	b29b      	uxth	r3, r3
 80023f2:	4413      	add	r3, r2
 80023f4:	b29b      	uxth	r3, r3
 80023f6:	79ba      	ldrb	r2, [r7, #6]
 80023f8:	4619      	mov	r1, r3
 80023fa:	f7ff ff39 	bl	8002270 <SSD1306_DrawPixel>
 80023fe:	e014      	b.n	800242a <SSD1306_Putc+0xba>
			} else {
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 8002400:	4b1a      	ldr	r3, [pc, #104]	; (800246c <SSD1306_Putc+0xfc>)
 8002402:	881a      	ldrh	r2, [r3, #0]
 8002404:	693b      	ldr	r3, [r7, #16]
 8002406:	b29b      	uxth	r3, r3
 8002408:	4413      	add	r3, r2
 800240a:	b298      	uxth	r0, r3
 800240c:	4b17      	ldr	r3, [pc, #92]	; (800246c <SSD1306_Putc+0xfc>)
 800240e:	885a      	ldrh	r2, [r3, #2]
 8002410:	697b      	ldr	r3, [r7, #20]
 8002412:	b29b      	uxth	r3, r3
 8002414:	4413      	add	r3, r2
 8002416:	b299      	uxth	r1, r3
 8002418:	79bb      	ldrb	r3, [r7, #6]
 800241a:	2b00      	cmp	r3, #0
 800241c:	bf0c      	ite	eq
 800241e:	2301      	moveq	r3, #1
 8002420:	2300      	movne	r3, #0
 8002422:	b2db      	uxtb	r3, r3
 8002424:	461a      	mov	r2, r3
 8002426:	f7ff ff23 	bl	8002270 <SSD1306_DrawPixel>
		for (j = 0; j < Font->FontWidth; j++) {
 800242a:	693b      	ldr	r3, [r7, #16]
 800242c:	3301      	adds	r3, #1
 800242e:	613b      	str	r3, [r7, #16]
 8002430:	683b      	ldr	r3, [r7, #0]
 8002432:	781b      	ldrb	r3, [r3, #0]
 8002434:	461a      	mov	r2, r3
 8002436:	693b      	ldr	r3, [r7, #16]
 8002438:	4293      	cmp	r3, r2
 800243a:	d3c8      	bcc.n	80023ce <SSD1306_Putc+0x5e>
	for (i = 0; i < Font->FontHeight; i++) {
 800243c:	697b      	ldr	r3, [r7, #20]
 800243e:	3301      	adds	r3, #1
 8002440:	617b      	str	r3, [r7, #20]
 8002442:	683b      	ldr	r3, [r7, #0]
 8002444:	785b      	ldrb	r3, [r3, #1]
 8002446:	461a      	mov	r2, r3
 8002448:	697b      	ldr	r3, [r7, #20]
 800244a:	4293      	cmp	r3, r2
 800244c:	d3ad      	bcc.n	80023aa <SSD1306_Putc+0x3a>
			}
		}
	}
	
	/* Increase pointer */
	SSD1306.CurrentX += Font->FontWidth;
 800244e:	4b07      	ldr	r3, [pc, #28]	; (800246c <SSD1306_Putc+0xfc>)
 8002450:	881a      	ldrh	r2, [r3, #0]
 8002452:	683b      	ldr	r3, [r7, #0]
 8002454:	781b      	ldrb	r3, [r3, #0]
 8002456:	b29b      	uxth	r3, r3
 8002458:	4413      	add	r3, r2
 800245a:	b29a      	uxth	r2, r3
 800245c:	4b03      	ldr	r3, [pc, #12]	; (800246c <SSD1306_Putc+0xfc>)
 800245e:	801a      	strh	r2, [r3, #0]
	
	/* Return character written */
	return ch;
 8002460:	79fb      	ldrb	r3, [r7, #7]
}
 8002462:	4618      	mov	r0, r3
 8002464:	3718      	adds	r7, #24
 8002466:	46bd      	mov	sp, r7
 8002468:	bd80      	pop	{r7, pc}
 800246a:	bf00      	nop
 800246c:	200006dc 	.word	0x200006dc

08002470 <SSD1306_Puts>:

char SSD1306_Puts(char* str, FontDef_t* Font, SSD1306_COLOR_t color) {
 8002470:	b580      	push	{r7, lr}
 8002472:	b084      	sub	sp, #16
 8002474:	af00      	add	r7, sp, #0
 8002476:	60f8      	str	r0, [r7, #12]
 8002478:	60b9      	str	r1, [r7, #8]
 800247a:	4613      	mov	r3, r2
 800247c:	71fb      	strb	r3, [r7, #7]
	/* Write characters */
	while (*str) {
 800247e:	e012      	b.n	80024a6 <SSD1306_Puts+0x36>
		/* Write character by character */
		if (SSD1306_Putc(*str, Font, color) != *str) {
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	781b      	ldrb	r3, [r3, #0]
 8002484:	79fa      	ldrb	r2, [r7, #7]
 8002486:	68b9      	ldr	r1, [r7, #8]
 8002488:	4618      	mov	r0, r3
 800248a:	f7ff ff71 	bl	8002370 <SSD1306_Putc>
 800248e:	4603      	mov	r3, r0
 8002490:	461a      	mov	r2, r3
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	781b      	ldrb	r3, [r3, #0]
 8002496:	429a      	cmp	r2, r3
 8002498:	d002      	beq.n	80024a0 <SSD1306_Puts+0x30>
			/* Return error */
			return *str;
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	781b      	ldrb	r3, [r3, #0]
 800249e:	e008      	b.n	80024b2 <SSD1306_Puts+0x42>
		}
		
		/* Increase string pointer */
		str++;
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	3301      	adds	r3, #1
 80024a4:	60fb      	str	r3, [r7, #12]
	while (*str) {
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	781b      	ldrb	r3, [r3, #0]
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d1e8      	bne.n	8002480 <SSD1306_Puts+0x10>
	}
	
	/* Everything OK, zero should be returned */
	return *str;
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	781b      	ldrb	r3, [r3, #0]
}
 80024b2:	4618      	mov	r0, r3
 80024b4:	3710      	adds	r7, #16
 80024b6:	46bd      	mov	sp, r7
 80024b8:	bd80      	pop	{r7, pc}
	...

080024bc <ssd1306_I2C_Init>:
//  _| |_ / /_| |____ 
// |_____|____|\_____|
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////

void ssd1306_I2C_Init() {
 80024bc:	b480      	push	{r7}
 80024be:	b083      	sub	sp, #12
 80024c0:	af00      	add	r7, sp, #0
	//MX_I2C1_Init();
	uint32_t p = 250000;
 80024c2:	4b07      	ldr	r3, [pc, #28]	; (80024e0 <ssd1306_I2C_Init+0x24>)
 80024c4:	607b      	str	r3, [r7, #4]
	while(p>0)
 80024c6:	e002      	b.n	80024ce <ssd1306_I2C_Init+0x12>
		p--;
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	3b01      	subs	r3, #1
 80024cc:	607b      	str	r3, [r7, #4]
	while(p>0)
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d1f9      	bne.n	80024c8 <ssd1306_I2C_Init+0xc>
	//HAL_I2C_DeInit(&hi2c1);
	//p = 250000;
	//while(p>0)
	//	p--;
	//MX_I2C1_Init();
}
 80024d4:	bf00      	nop
 80024d6:	370c      	adds	r7, #12
 80024d8:	46bd      	mov	sp, r7
 80024da:	bc80      	pop	{r7}
 80024dc:	4770      	bx	lr
 80024de:	bf00      	nop
 80024e0:	0003d090 	.word	0x0003d090

080024e4 <ssd1306_I2C_WriteMulti>:

void ssd1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 80024e4:	b590      	push	{r4, r7, lr}
 80024e6:	b0c7      	sub	sp, #284	; 0x11c
 80024e8:	af02      	add	r7, sp, #8
 80024ea:	4604      	mov	r4, r0
 80024ec:	4608      	mov	r0, r1
 80024ee:	4639      	mov	r1, r7
 80024f0:	600a      	str	r2, [r1, #0]
 80024f2:	4619      	mov	r1, r3
 80024f4:	1dfb      	adds	r3, r7, #7
 80024f6:	4622      	mov	r2, r4
 80024f8:	701a      	strb	r2, [r3, #0]
 80024fa:	1dbb      	adds	r3, r7, #6
 80024fc:	4602      	mov	r2, r0
 80024fe:	701a      	strb	r2, [r3, #0]
 8002500:	1d3b      	adds	r3, r7, #4
 8002502:	460a      	mov	r2, r1
 8002504:	801a      	strh	r2, [r3, #0]
uint8_t dt[256];
dt[0] = reg;
 8002506:	f107 030c 	add.w	r3, r7, #12
 800250a:	1dba      	adds	r2, r7, #6
 800250c:	7812      	ldrb	r2, [r2, #0]
 800250e:	701a      	strb	r2, [r3, #0]
uint8_t i;
for(i = 0; i < count; i++)
 8002510:	2300      	movs	r3, #0
 8002512:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 8002516:	e010      	b.n	800253a <ssd1306_I2C_WriteMulti+0x56>
dt[i+1] = data[i];
 8002518:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 800251c:	463a      	mov	r2, r7
 800251e:	6812      	ldr	r2, [r2, #0]
 8002520:	441a      	add	r2, r3
 8002522:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8002526:	3301      	adds	r3, #1
 8002528:	7811      	ldrb	r1, [r2, #0]
 800252a:	f107 020c 	add.w	r2, r7, #12
 800252e:	54d1      	strb	r1, [r2, r3]
for(i = 0; i < count; i++)
 8002530:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8002534:	3301      	adds	r3, #1
 8002536:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 800253a:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 800253e:	b29b      	uxth	r3, r3
 8002540:	1d3a      	adds	r2, r7, #4
 8002542:	8812      	ldrh	r2, [r2, #0]
 8002544:	429a      	cmp	r2, r3
 8002546:	d8e7      	bhi.n	8002518 <ssd1306_I2C_WriteMulti+0x34>
HAL_I2C_Master_Transmit(&hi2c1, address, dt, count+1, 10);
 8002548:	1dfb      	adds	r3, r7, #7
 800254a:	781b      	ldrb	r3, [r3, #0]
 800254c:	b299      	uxth	r1, r3
 800254e:	1d3b      	adds	r3, r7, #4
 8002550:	881b      	ldrh	r3, [r3, #0]
 8002552:	3301      	adds	r3, #1
 8002554:	b298      	uxth	r0, r3
 8002556:	f107 020c 	add.w	r2, r7, #12
 800255a:	230a      	movs	r3, #10
 800255c:	9300      	str	r3, [sp, #0]
 800255e:	4603      	mov	r3, r0
 8002560:	4803      	ldr	r0, [pc, #12]	; (8002570 <ssd1306_I2C_WriteMulti+0x8c>)
 8002562:	f001 fac7 	bl	8003af4 <HAL_I2C_Master_Transmit>
}
 8002566:	bf00      	nop
 8002568:	f507 778a 	add.w	r7, r7, #276	; 0x114
 800256c:	46bd      	mov	sp, r7
 800256e:	bd90      	pop	{r4, r7, pc}
 8002570:	20000734 	.word	0x20000734

08002574 <ssd1306_I2C_Write>:


void ssd1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data) {
 8002574:	b580      	push	{r7, lr}
 8002576:	b086      	sub	sp, #24
 8002578:	af02      	add	r7, sp, #8
 800257a:	4603      	mov	r3, r0
 800257c:	71fb      	strb	r3, [r7, #7]
 800257e:	460b      	mov	r3, r1
 8002580:	71bb      	strb	r3, [r7, #6]
 8002582:	4613      	mov	r3, r2
 8002584:	717b      	strb	r3, [r7, #5]
	uint8_t dt[2];
	dt[0] = reg;
 8002586:	79bb      	ldrb	r3, [r7, #6]
 8002588:	733b      	strb	r3, [r7, #12]
	dt[1] = data;
 800258a:	797b      	ldrb	r3, [r7, #5]
 800258c:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1, address, dt, 2, 10);
 800258e:	79fb      	ldrb	r3, [r7, #7]
 8002590:	b299      	uxth	r1, r3
 8002592:	f107 020c 	add.w	r2, r7, #12
 8002596:	230a      	movs	r3, #10
 8002598:	9300      	str	r3, [sp, #0]
 800259a:	2302      	movs	r3, #2
 800259c:	4803      	ldr	r0, [pc, #12]	; (80025ac <ssd1306_I2C_Write+0x38>)
 800259e:	f001 faa9 	bl	8003af4 <HAL_I2C_Master_Transmit>
}
 80025a2:	bf00      	nop
 80025a4:	3710      	adds	r7, #16
 80025a6:	46bd      	mov	sp, r7
 80025a8:	bd80      	pop	{r7, pc}
 80025aa:	bf00      	nop
 80025ac:	20000734 	.word	0x20000734

080025b0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80025b0:	b480      	push	{r7}
 80025b2:	b085      	sub	sp, #20
 80025b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80025b6:	4b15      	ldr	r3, [pc, #84]	; (800260c <HAL_MspInit+0x5c>)
 80025b8:	699b      	ldr	r3, [r3, #24]
 80025ba:	4a14      	ldr	r2, [pc, #80]	; (800260c <HAL_MspInit+0x5c>)
 80025bc:	f043 0301 	orr.w	r3, r3, #1
 80025c0:	6193      	str	r3, [r2, #24]
 80025c2:	4b12      	ldr	r3, [pc, #72]	; (800260c <HAL_MspInit+0x5c>)
 80025c4:	699b      	ldr	r3, [r3, #24]
 80025c6:	f003 0301 	and.w	r3, r3, #1
 80025ca:	60bb      	str	r3, [r7, #8]
 80025cc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80025ce:	4b0f      	ldr	r3, [pc, #60]	; (800260c <HAL_MspInit+0x5c>)
 80025d0:	69db      	ldr	r3, [r3, #28]
 80025d2:	4a0e      	ldr	r2, [pc, #56]	; (800260c <HAL_MspInit+0x5c>)
 80025d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80025d8:	61d3      	str	r3, [r2, #28]
 80025da:	4b0c      	ldr	r3, [pc, #48]	; (800260c <HAL_MspInit+0x5c>)
 80025dc:	69db      	ldr	r3, [r3, #28]
 80025de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025e2:	607b      	str	r3, [r7, #4]
 80025e4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80025e6:	4b0a      	ldr	r3, [pc, #40]	; (8002610 <HAL_MspInit+0x60>)
 80025e8:	685b      	ldr	r3, [r3, #4]
 80025ea:	60fb      	str	r3, [r7, #12]
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80025f2:	60fb      	str	r3, [r7, #12]
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80025fa:	60fb      	str	r3, [r7, #12]
 80025fc:	4a04      	ldr	r2, [pc, #16]	; (8002610 <HAL_MspInit+0x60>)
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002602:	bf00      	nop
 8002604:	3714      	adds	r7, #20
 8002606:	46bd      	mov	sp, r7
 8002608:	bc80      	pop	{r7}
 800260a:	4770      	bx	lr
 800260c:	40021000 	.word	0x40021000
 8002610:	40010000 	.word	0x40010000

08002614 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002614:	b580      	push	{r7, lr}
 8002616:	b088      	sub	sp, #32
 8002618:	af00      	add	r7, sp, #0
 800261a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800261c:	f107 0310 	add.w	r3, r7, #16
 8002620:	2200      	movs	r2, #0
 8002622:	601a      	str	r2, [r3, #0]
 8002624:	605a      	str	r2, [r3, #4]
 8002626:	609a      	str	r2, [r3, #8]
 8002628:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	4a15      	ldr	r2, [pc, #84]	; (8002684 <HAL_I2C_MspInit+0x70>)
 8002630:	4293      	cmp	r3, r2
 8002632:	d123      	bne.n	800267c <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002634:	4b14      	ldr	r3, [pc, #80]	; (8002688 <HAL_I2C_MspInit+0x74>)
 8002636:	699b      	ldr	r3, [r3, #24]
 8002638:	4a13      	ldr	r2, [pc, #76]	; (8002688 <HAL_I2C_MspInit+0x74>)
 800263a:	f043 0308 	orr.w	r3, r3, #8
 800263e:	6193      	str	r3, [r2, #24]
 8002640:	4b11      	ldr	r3, [pc, #68]	; (8002688 <HAL_I2C_MspInit+0x74>)
 8002642:	699b      	ldr	r3, [r3, #24]
 8002644:	f003 0308 	and.w	r3, r3, #8
 8002648:	60fb      	str	r3, [r7, #12]
 800264a:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800264c:	23c0      	movs	r3, #192	; 0xc0
 800264e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002650:	2312      	movs	r3, #18
 8002652:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002654:	2303      	movs	r3, #3
 8002656:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002658:	f107 0310 	add.w	r3, r7, #16
 800265c:	4619      	mov	r1, r3
 800265e:	480b      	ldr	r0, [pc, #44]	; (800268c <HAL_I2C_MspInit+0x78>)
 8002660:	f000 ff7e 	bl	8003560 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002664:	4b08      	ldr	r3, [pc, #32]	; (8002688 <HAL_I2C_MspInit+0x74>)
 8002666:	69db      	ldr	r3, [r3, #28]
 8002668:	4a07      	ldr	r2, [pc, #28]	; (8002688 <HAL_I2C_MspInit+0x74>)
 800266a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800266e:	61d3      	str	r3, [r2, #28]
 8002670:	4b05      	ldr	r3, [pc, #20]	; (8002688 <HAL_I2C_MspInit+0x74>)
 8002672:	69db      	ldr	r3, [r3, #28]
 8002674:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002678:	60bb      	str	r3, [r7, #8]
 800267a:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800267c:	bf00      	nop
 800267e:	3720      	adds	r7, #32
 8002680:	46bd      	mov	sp, r7
 8002682:	bd80      	pop	{r7, pc}
 8002684:	40005400 	.word	0x40005400
 8002688:	40021000 	.word	0x40021000
 800268c:	40010c00 	.word	0x40010c00

08002690 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002690:	b480      	push	{r7}
 8002692:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002694:	bf00      	nop
 8002696:	46bd      	mov	sp, r7
 8002698:	bc80      	pop	{r7}
 800269a:	4770      	bx	lr

0800269c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800269c:	b480      	push	{r7}
 800269e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80026a0:	e7fe      	b.n	80026a0 <HardFault_Handler+0x4>

080026a2 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80026a2:	b480      	push	{r7}
 80026a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80026a6:	e7fe      	b.n	80026a6 <MemManage_Handler+0x4>

080026a8 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80026a8:	b480      	push	{r7}
 80026aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80026ac:	e7fe      	b.n	80026ac <BusFault_Handler+0x4>

080026ae <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80026ae:	b480      	push	{r7}
 80026b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80026b2:	e7fe      	b.n	80026b2 <UsageFault_Handler+0x4>

080026b4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80026b4:	b480      	push	{r7}
 80026b6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80026b8:	bf00      	nop
 80026ba:	46bd      	mov	sp, r7
 80026bc:	bc80      	pop	{r7}
 80026be:	4770      	bx	lr

080026c0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80026c0:	b480      	push	{r7}
 80026c2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80026c4:	bf00      	nop
 80026c6:	46bd      	mov	sp, r7
 80026c8:	bc80      	pop	{r7}
 80026ca:	4770      	bx	lr

080026cc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80026cc:	b480      	push	{r7}
 80026ce:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80026d0:	bf00      	nop
 80026d2:	46bd      	mov	sp, r7
 80026d4:	bc80      	pop	{r7}
 80026d6:	4770      	bx	lr

080026d8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80026d8:	b580      	push	{r7, lr}
 80026da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80026dc:	f000 fe1e 	bl	800331c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  	  if(ticks) ticks--;
 80026e0:	4b05      	ldr	r3, [pc, #20]	; (80026f8 <SysTick_Handler+0x20>)
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d004      	beq.n	80026f2 <SysTick_Handler+0x1a>
 80026e8:	4b03      	ldr	r3, [pc, #12]	; (80026f8 <SysTick_Handler+0x20>)
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	3b01      	subs	r3, #1
 80026ee:	4a02      	ldr	r2, [pc, #8]	; (80026f8 <SysTick_Handler+0x20>)
 80026f0:	6013      	str	r3, [r2, #0]
  /* USER CODE END SysTick_IRQn 1 */
}
 80026f2:	bf00      	nop
 80026f4:	bd80      	pop	{r7, pc}
 80026f6:	bf00      	nop
 80026f8:	20000788 	.word	0x20000788

080026fc <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 80026fc:	b580      	push	{r7, lr}
 80026fe:	b084      	sub	sp, #16
 8002700:	af00      	add	r7, sp, #0
 8002702:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8002704:	4b11      	ldr	r3, [pc, #68]	; (800274c <_sbrk+0x50>)
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	2b00      	cmp	r3, #0
 800270a:	d102      	bne.n	8002712 <_sbrk+0x16>
		heap_end = &end;
 800270c:	4b0f      	ldr	r3, [pc, #60]	; (800274c <_sbrk+0x50>)
 800270e:	4a10      	ldr	r2, [pc, #64]	; (8002750 <_sbrk+0x54>)
 8002710:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8002712:	4b0e      	ldr	r3, [pc, #56]	; (800274c <_sbrk+0x50>)
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8002718:	4b0c      	ldr	r3, [pc, #48]	; (800274c <_sbrk+0x50>)
 800271a:	681a      	ldr	r2, [r3, #0]
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	4413      	add	r3, r2
 8002720:	466a      	mov	r2, sp
 8002722:	4293      	cmp	r3, r2
 8002724:	d907      	bls.n	8002736 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8002726:	f002 fee9 	bl	80054fc <__errno>
 800272a:	4602      	mov	r2, r0
 800272c:	230c      	movs	r3, #12
 800272e:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8002730:	f04f 33ff 	mov.w	r3, #4294967295
 8002734:	e006      	b.n	8002744 <_sbrk+0x48>
	}

	heap_end += incr;
 8002736:	4b05      	ldr	r3, [pc, #20]	; (800274c <_sbrk+0x50>)
 8002738:	681a      	ldr	r2, [r3, #0]
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	4413      	add	r3, r2
 800273e:	4a03      	ldr	r2, [pc, #12]	; (800274c <_sbrk+0x50>)
 8002740:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8002742:	68fb      	ldr	r3, [r7, #12]
}
 8002744:	4618      	mov	r0, r3
 8002746:	3710      	adds	r7, #16
 8002748:	46bd      	mov	sp, r7
 800274a:	bd80      	pop	{r7, pc}
 800274c:	200006e4 	.word	0x200006e4
 8002750:	200008f0 	.word	0x200008f0

08002754 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002754:	b480      	push	{r7}
 8002756:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8002758:	4b15      	ldr	r3, [pc, #84]	; (80027b0 <SystemInit+0x5c>)
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	4a14      	ldr	r2, [pc, #80]	; (80027b0 <SystemInit+0x5c>)
 800275e:	f043 0301 	orr.w	r3, r3, #1
 8002762:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8002764:	4b12      	ldr	r3, [pc, #72]	; (80027b0 <SystemInit+0x5c>)
 8002766:	685a      	ldr	r2, [r3, #4]
 8002768:	4911      	ldr	r1, [pc, #68]	; (80027b0 <SystemInit+0x5c>)
 800276a:	4b12      	ldr	r3, [pc, #72]	; (80027b4 <SystemInit+0x60>)
 800276c:	4013      	ands	r3, r2
 800276e:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8002770:	4b0f      	ldr	r3, [pc, #60]	; (80027b0 <SystemInit+0x5c>)
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	4a0e      	ldr	r2, [pc, #56]	; (80027b0 <SystemInit+0x5c>)
 8002776:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 800277a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800277e:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8002780:	4b0b      	ldr	r3, [pc, #44]	; (80027b0 <SystemInit+0x5c>)
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	4a0a      	ldr	r2, [pc, #40]	; (80027b0 <SystemInit+0x5c>)
 8002786:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800278a:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 800278c:	4b08      	ldr	r3, [pc, #32]	; (80027b0 <SystemInit+0x5c>)
 800278e:	685b      	ldr	r3, [r3, #4]
 8002790:	4a07      	ldr	r2, [pc, #28]	; (80027b0 <SystemInit+0x5c>)
 8002792:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8002796:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8002798:	4b05      	ldr	r3, [pc, #20]	; (80027b0 <SystemInit+0x5c>)
 800279a:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 800279e:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 80027a0:	4b05      	ldr	r3, [pc, #20]	; (80027b8 <SystemInit+0x64>)
 80027a2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80027a6:	609a      	str	r2, [r3, #8]
#endif 
}
 80027a8:	bf00      	nop
 80027aa:	46bd      	mov	sp, r7
 80027ac:	bc80      	pop	{r7}
 80027ae:	4770      	bx	lr
 80027b0:	40021000 	.word	0x40021000
 80027b4:	f8ff0000 	.word	0xf8ff0000
 80027b8:	e000ed00 	.word	0xe000ed00

080027bc <antirebote>:

////////////////////////////
//	 FUNCION ANTIREBOTE	  //
////////////////////////////
uint8_t antirebote (uint8_t teclaActual)
{
 80027bc:	b480      	push	{r7}
 80027be:	b083      	sub	sp, #12
 80027c0:	af00      	add	r7, sp, #0
 80027c2:	4603      	mov	r3, r0
 80027c4:	71fb      	strb	r3, [r7, #7]
	static uint8_t teclaAnt = NO_KEY;
	static uint8_t cont = 0;

	if(cont == 0){
 80027c6:	4b10      	ldr	r3, [pc, #64]	; (8002808 <antirebote+0x4c>)
 80027c8:	781b      	ldrb	r3, [r3, #0]
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d10a      	bne.n	80027e4 <antirebote+0x28>
		teclaAnt = teclaActual;
 80027ce:	4a0f      	ldr	r2, [pc, #60]	; (800280c <antirebote+0x50>)
 80027d0:	79fb      	ldrb	r3, [r7, #7]
 80027d2:	7013      	strb	r3, [r2, #0]
		cont++;
 80027d4:	4b0c      	ldr	r3, [pc, #48]	; (8002808 <antirebote+0x4c>)
 80027d6:	781b      	ldrb	r3, [r3, #0]
 80027d8:	3301      	adds	r3, #1
 80027da:	b2da      	uxtb	r2, r3
 80027dc:	4b0a      	ldr	r3, [pc, #40]	; (8002808 <antirebote+0x4c>)
 80027de:	701a      	strb	r2, [r3, #0]
		}
		else{
			return NO_KEY;
		}
	}
	return NO_KEY;
 80027e0:	2300      	movs	r3, #0
 80027e2:	e00b      	b.n	80027fc <antirebote+0x40>
		cont = 0;
 80027e4:	4b08      	ldr	r3, [pc, #32]	; (8002808 <antirebote+0x4c>)
 80027e6:	2200      	movs	r2, #0
 80027e8:	701a      	strb	r2, [r3, #0]
		if(teclaActual == teclaAnt){
 80027ea:	4b08      	ldr	r3, [pc, #32]	; (800280c <antirebote+0x50>)
 80027ec:	781b      	ldrb	r3, [r3, #0]
 80027ee:	79fa      	ldrb	r2, [r7, #7]
 80027f0:	429a      	cmp	r2, r3
 80027f2:	d102      	bne.n	80027fa <antirebote+0x3e>
			return teclaAnt;
 80027f4:	4b05      	ldr	r3, [pc, #20]	; (800280c <antirebote+0x50>)
 80027f6:	781b      	ldrb	r3, [r3, #0]
 80027f8:	e000      	b.n	80027fc <antirebote+0x40>
			return NO_KEY;
 80027fa:	2300      	movs	r3, #0
}
 80027fc:	4618      	mov	r0, r3
 80027fe:	370c      	adds	r7, #12
 8002800:	46bd      	mov	sp, r7
 8002802:	bc80      	pop	{r7}
 8002804:	4770      	bx	lr
 8002806:	bf00      	nop
 8002808:	200006f9 	.word	0x200006f9
 800280c:	200006fa 	.word	0x200006fa

08002810 <lastAlarm>:

void lastAlarm(char *string)
{
 8002810:	b590      	push	{r4, r7, lr}
 8002812:	b085      	sub	sp, #20
 8002814:	af00      	add	r7, sp, #0
 8002816:	6078      	str	r0, [r7, #4]
	float aux = 0;
 8002818:	f04f 0300 	mov.w	r3, #0
 800281c:	60fb      	str	r3, [r7, #12]

	for(int i = 0; i < CANT_ALARMAS; i++){
 800281e:	2300      	movs	r3, #0
 8002820:	60bb      	str	r3, [r7, #8]
 8002822:	e013      	b.n	800284c <lastAlarm+0x3c>
		if(customAlarms[i] != EEPROM_EMPTY)
 8002824:	4a24      	ldr	r2, [pc, #144]	; (80028b8 <lastAlarm+0xa8>)
 8002826:	68bb      	ldr	r3, [r7, #8]
 8002828:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800282c:	4923      	ldr	r1, [pc, #140]	; (80028bc <lastAlarm+0xac>)
 800282e:	4618      	mov	r0, r3
 8002830:	f7fe fc1c 	bl	800106c <__aeabi_fcmpeq>
 8002834:	4603      	mov	r3, r0
 8002836:	2b00      	cmp	r3, #0
 8002838:	d000      	beq.n	800283c <lastAlarm+0x2c>
			aux = customAlarms[i];
		else
			break;
 800283a:	e00a      	b.n	8002852 <lastAlarm+0x42>
			aux = customAlarms[i];
 800283c:	4a1e      	ldr	r2, [pc, #120]	; (80028b8 <lastAlarm+0xa8>)
 800283e:	68bb      	ldr	r3, [r7, #8]
 8002840:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002844:	60fb      	str	r3, [r7, #12]
	for(int i = 0; i < CANT_ALARMAS; i++){
 8002846:	68bb      	ldr	r3, [r7, #8]
 8002848:	3301      	adds	r3, #1
 800284a:	60bb      	str	r3, [r7, #8]
 800284c:	68bb      	ldr	r3, [r7, #8]
 800284e:	2b06      	cmp	r3, #6
 8002850:	dde8      	ble.n	8002824 <lastAlarm+0x14>
	}
	if(aux!=90){
 8002852:	491b      	ldr	r1, [pc, #108]	; (80028c0 <lastAlarm+0xb0>)
 8002854:	68f8      	ldr	r0, [r7, #12]
 8002856:	f7fe fc09 	bl	800106c <__aeabi_fcmpeq>
 800285a:	4603      	mov	r3, r0
 800285c:	2b00      	cmp	r3, #0
 800285e:	d11e      	bne.n	800289e <lastAlarm+0x8e>
		if(aux < 10){
 8002860:	4918      	ldr	r1, [pc, #96]	; (80028c4 <lastAlarm+0xb4>)
 8002862:	68f8      	ldr	r0, [r7, #12]
 8002864:	f7fe fc0c 	bl	8001080 <__aeabi_fcmplt>
 8002868:	4603      	mov	r3, r0
 800286a:	2b00      	cmp	r3, #0
 800286c:	d00b      	beq.n	8002886 <lastAlarm+0x76>
			sprintf(string,"0%.2f", aux);
 800286e:	68f8      	ldr	r0, [r7, #12]
 8002870:	f7fd fdda 	bl	8000428 <__aeabi_f2d>
 8002874:	4603      	mov	r3, r0
 8002876:	460c      	mov	r4, r1
 8002878:	461a      	mov	r2, r3
 800287a:	4623      	mov	r3, r4
 800287c:	4912      	ldr	r1, [pc, #72]	; (80028c8 <lastAlarm+0xb8>)
 800287e:	6878      	ldr	r0, [r7, #4]
 8002880:	f003 fabe 	bl	8005e00 <siprintf>
		}
	}
	else{	//aux==90
		sprintf(string,"%d   ", (int)aux);
	}
}
 8002884:	e014      	b.n	80028b0 <lastAlarm+0xa0>
			sprintf(string,"%.2f", aux);
 8002886:	68f8      	ldr	r0, [r7, #12]
 8002888:	f7fd fdce 	bl	8000428 <__aeabi_f2d>
 800288c:	4603      	mov	r3, r0
 800288e:	460c      	mov	r4, r1
 8002890:	461a      	mov	r2, r3
 8002892:	4623      	mov	r3, r4
 8002894:	490d      	ldr	r1, [pc, #52]	; (80028cc <lastAlarm+0xbc>)
 8002896:	6878      	ldr	r0, [r7, #4]
 8002898:	f003 fab2 	bl	8005e00 <siprintf>
}
 800289c:	e008      	b.n	80028b0 <lastAlarm+0xa0>
		sprintf(string,"%d   ", (int)aux);
 800289e:	68f8      	ldr	r0, [r7, #12]
 80028a0:	f7fe fc16 	bl	80010d0 <__aeabi_f2iz>
 80028a4:	4603      	mov	r3, r0
 80028a6:	461a      	mov	r2, r3
 80028a8:	4909      	ldr	r1, [pc, #36]	; (80028d0 <lastAlarm+0xc0>)
 80028aa:	6878      	ldr	r0, [r7, #4]
 80028ac:	f003 faa8 	bl	8005e00 <siprintf>
}
 80028b0:	bf00      	nop
 80028b2:	3714      	adds	r7, #20
 80028b4:	46bd      	mov	sp, r7
 80028b6:	bd90      	pop	{r4, r7, pc}
 80028b8:	200000ac 	.word	0x200000ac
 80028bc:	437a0000 	.word	0x437a0000
 80028c0:	42b40000 	.word	0x42b40000
 80028c4:	41200000 	.word	0x41200000
 80028c8:	08007d40 	.word	0x08007d40
 80028cc:	08007d48 	.word	0x08007d48
 80028d0:	08007d50 	.word	0x08007d50

080028d4 <tarea_pulsadores>:


// TAREAS

void tarea_pulsadores (void *p)
{
 80028d4:	b580      	push	{r7, lr}
 80028d6:	b082      	sub	sp, #8
 80028d8:	af00      	add	r7, sp, #0
 80028da:	6078      	str	r0, [r7, #4]

	if(HAL_GPIO_ReadPin(MODE_KEY)){
 80028dc:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80028e0:	4817      	ldr	r0, [pc, #92]	; (8002940 <tarea_pulsadores+0x6c>)
 80028e2:	f000 ff97 	bl	8003814 <HAL_GPIO_ReadPin>
 80028e6:	4603      	mov	r3, r0
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d002      	beq.n	80028f2 <tarea_pulsadores+0x1e>
		tecla = MODE;
 80028ec:	4b15      	ldr	r3, [pc, #84]	; (8002944 <tarea_pulsadores+0x70>)
 80028ee:	2201      	movs	r2, #1
 80028f0:	701a      	strb	r2, [r3, #0]
	}

	if(HAL_GPIO_ReadPin(ZERO_KEY)){
 80028f2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80028f6:	4812      	ldr	r0, [pc, #72]	; (8002940 <tarea_pulsadores+0x6c>)
 80028f8:	f000 ff8c 	bl	8003814 <HAL_GPIO_ReadPin>
 80028fc:	4603      	mov	r3, r0
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d002      	beq.n	8002908 <tarea_pulsadores+0x34>
		tecla = ZERO;
 8002902:	4b10      	ldr	r3, [pc, #64]	; (8002944 <tarea_pulsadores+0x70>)
 8002904:	2202      	movs	r2, #2
 8002906:	701a      	strb	r2, [r3, #0]
	}

	if(HAL_GPIO_ReadPin(HOLD_KEY)){
 8002908:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800290c:	480c      	ldr	r0, [pc, #48]	; (8002940 <tarea_pulsadores+0x6c>)
 800290e:	f000 ff81 	bl	8003814 <HAL_GPIO_ReadPin>
 8002912:	4603      	mov	r3, r0
 8002914:	2b00      	cmp	r3, #0
 8002916:	d002      	beq.n	800291e <tarea_pulsadores+0x4a>
		tecla = HOLD;
 8002918:	4b0a      	ldr	r3, [pc, #40]	; (8002944 <tarea_pulsadores+0x70>)
 800291a:	2203      	movs	r2, #3
 800291c:	701a      	strb	r2, [r3, #0]
	}

	if (tecla != NO_KEY)
 800291e:	4b09      	ldr	r3, [pc, #36]	; (8002944 <tarea_pulsadores+0x70>)
 8002920:	781b      	ldrb	r3, [r3, #0]
 8002922:	2b00      	cmp	r3, #0
 8002924:	d008      	beq.n	8002938 <tarea_pulsadores+0x64>
		tecla = antirebote(tecla);
 8002926:	4b07      	ldr	r3, [pc, #28]	; (8002944 <tarea_pulsadores+0x70>)
 8002928:	781b      	ldrb	r3, [r3, #0]
 800292a:	4618      	mov	r0, r3
 800292c:	f7ff ff46 	bl	80027bc <antirebote>
 8002930:	4603      	mov	r3, r0
 8002932:	461a      	mov	r2, r3
 8002934:	4b03      	ldr	r3, [pc, #12]	; (8002944 <tarea_pulsadores+0x70>)
 8002936:	701a      	strb	r2, [r3, #0]

}
 8002938:	bf00      	nop
 800293a:	3708      	adds	r7, #8
 800293c:	46bd      	mov	sp, r7
 800293e:	bd80      	pop	{r7, pc}
 8002940:	40010c00 	.word	0x40010c00
 8002944:	200006f4 	.word	0x200006f4

08002948 <tarea_modos>:

void tarea_modos(void *p)
{
 8002948:	b580      	push	{r7, lr}
 800294a:	b082      	sub	sp, #8
 800294c:	af00      	add	r7, sp, #0
 800294e:	6078      	str	r0, [r7, #4]
	static uint8_t clean = OFF;
	static uint8_t mode = MODO_MEDIR;

	if(tecla == MODE){
 8002950:	4b67      	ldr	r3, [pc, #412]	; (8002af0 <tarea_modos+0x1a8>)
 8002952:	781b      	ldrb	r3, [r3, #0]
 8002954:	2b01      	cmp	r3, #1
 8002956:	d115      	bne.n	8002984 <tarea_modos+0x3c>
		mode++;
 8002958:	4b66      	ldr	r3, [pc, #408]	; (8002af4 <tarea_modos+0x1ac>)
 800295a:	781b      	ldrb	r3, [r3, #0]
 800295c:	3301      	adds	r3, #1
 800295e:	b2da      	uxtb	r2, r3
 8002960:	4b64      	ldr	r3, [pc, #400]	; (8002af4 <tarea_modos+0x1ac>)
 8002962:	701a      	strb	r2, [r3, #0]
		mode%=CANT_MODOS;
 8002964:	4b63      	ldr	r3, [pc, #396]	; (8002af4 <tarea_modos+0x1ac>)
 8002966:	781a      	ldrb	r2, [r3, #0]
 8002968:	4b63      	ldr	r3, [pc, #396]	; (8002af8 <tarea_modos+0x1b0>)
 800296a:	fba3 1302 	umull	r1, r3, r3, r2
 800296e:	0859      	lsrs	r1, r3, #1
 8002970:	460b      	mov	r3, r1
 8002972:	005b      	lsls	r3, r3, #1
 8002974:	440b      	add	r3, r1
 8002976:	1ad3      	subs	r3, r2, r3
 8002978:	b2da      	uxtb	r2, r3
 800297a:	4b5e      	ldr	r3, [pc, #376]	; (8002af4 <tarea_modos+0x1ac>)
 800297c:	701a      	strb	r2, [r3, #0]
		clean = OFF;
 800297e:	4b5f      	ldr	r3, [pc, #380]	; (8002afc <tarea_modos+0x1b4>)
 8002980:	2200      	movs	r2, #0
 8002982:	701a      	strb	r2, [r3, #0]
	}

	switch(mode){
 8002984:	4b5b      	ldr	r3, [pc, #364]	; (8002af4 <tarea_modos+0x1ac>)
 8002986:	781b      	ldrb	r3, [r3, #0]
 8002988:	2b01      	cmp	r3, #1
 800298a:	d03a      	beq.n	8002a02 <tarea_modos+0xba>
 800298c:	2b02      	cmp	r3, #2
 800298e:	d06e      	beq.n	8002a6e <tarea_modos+0x126>
 8002990:	2b00      	cmp	r3, #0
 8002992:	f040 809f 	bne.w	8002ad4 <tarea_modos+0x18c>
	case MODO_MEDIR:
		if(clean == OFF){
 8002996:	4b59      	ldr	r3, [pc, #356]	; (8002afc <tarea_modos+0x1b4>)
 8002998:	781b      	ldrb	r3, [r3, #0]
 800299a:	2b00      	cmp	r3, #0
 800299c:	d110      	bne.n	80029c0 <tarea_modos+0x78>
			SSD1306_Fill(SSD1306_COLOR_BLACK); /* Clear screen */
 800299e:	2000      	movs	r0, #0
 80029a0:	f7ff fc4e 	bl	8002240 <SSD1306_Fill>
			offset_x = 0;
 80029a4:	4b56      	ldr	r3, [pc, #344]	; (8002b00 <tarea_modos+0x1b8>)
 80029a6:	f04f 0200 	mov.w	r2, #0
 80029aa:	601a      	str	r2, [r3, #0]
			offset_y = 0;
 80029ac:	4b55      	ldr	r3, [pc, #340]	; (8002b04 <tarea_modos+0x1bc>)
 80029ae:	f04f 0200 	mov.w	r2, #0
 80029b2:	601a      	str	r2, [r3, #0]
			clean = ON;
 80029b4:	4b51      	ldr	r3, [pc, #324]	; (8002afc <tarea_modos+0x1b4>)
 80029b6:	2201      	movs	r2, #1
 80029b8:	701a      	strb	r2, [r3, #0]
			f_hold = OFF;
 80029ba:	4b53      	ldr	r3, [pc, #332]	; (8002b08 <tarea_modos+0x1c0>)
 80029bc:	2200      	movs	r2, #0
 80029be:	701a      	strb	r2, [r3, #0]
		}
		SSD1306_GotoXY (POS_MODO);
 80029c0:	2100      	movs	r1, #0
 80029c2:	2005      	movs	r0, #5
 80029c4:	f7ff fcbe 	bl	8002344 <SSD1306_GotoXY>
		SSD1306_Puts("Modo: 1", &Font_7x10, SSD1306_COLOR_WHITE);
 80029c8:	2201      	movs	r2, #1
 80029ca:	4950      	ldr	r1, [pc, #320]	; (8002b0c <tarea_modos+0x1c4>)
 80029cc:	4850      	ldr	r0, [pc, #320]	; (8002b10 <tarea_modos+0x1c8>)
 80029ce:	f7ff fd4f 	bl	8002470 <SSD1306_Puts>
		fEjeY = OFF;
 80029d2:	4b50      	ldr	r3, [pc, #320]	; (8002b14 <tarea_modos+0x1cc>)
 80029d4:	2200      	movs	r2, #0
 80029d6:	701a      	strb	r2, [r3, #0]
		fAlarms = OFF;
 80029d8:	4b4f      	ldr	r3, [pc, #316]	; (8002b18 <tarea_modos+0x1d0>)
 80029da:	2200      	movs	r2, #0
 80029dc:	701a      	strb	r2, [r3, #0]
		if(tecla == HOLD){
 80029de:	4b44      	ldr	r3, [pc, #272]	; (8002af0 <tarea_modos+0x1a8>)
 80029e0:	781b      	ldrb	r3, [r3, #0]
 80029e2:	2b03      	cmp	r3, #3
 80029e4:	d105      	bne.n	80029f2 <tarea_modos+0xaa>
			f_hold = ~ f_hold; // toggle flag
 80029e6:	4b48      	ldr	r3, [pc, #288]	; (8002b08 <tarea_modos+0x1c0>)
 80029e8:	781b      	ldrb	r3, [r3, #0]
 80029ea:	43db      	mvns	r3, r3
 80029ec:	b2da      	uxtb	r2, r3
 80029ee:	4b46      	ldr	r3, [pc, #280]	; (8002b08 <tarea_modos+0x1c0>)
 80029f0:	701a      	strb	r2, [r3, #0]
		}
		if(tecla == ZERO){
 80029f2:	4b3f      	ldr	r3, [pc, #252]	; (8002af0 <tarea_modos+0x1a8>)
 80029f4:	781b      	ldrb	r3, [r3, #0]
 80029f6:	2b02      	cmp	r3, #2
 80029f8:	d170      	bne.n	8002adc <tarea_modos+0x194>
			f_zero = ON;
 80029fa:	4b48      	ldr	r3, [pc, #288]	; (8002b1c <tarea_modos+0x1d4>)
 80029fc:	2201      	movs	r2, #1
 80029fe:	701a      	strb	r2, [r3, #0]
		}
		break;
 8002a00:	e06c      	b.n	8002adc <tarea_modos+0x194>

	case MODO_NIVEL:
		if(clean == OFF){
 8002a02:	4b3e      	ldr	r3, [pc, #248]	; (8002afc <tarea_modos+0x1b4>)
 8002a04:	781b      	ldrb	r3, [r3, #0]
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d110      	bne.n	8002a2c <tarea_modos+0xe4>
			SSD1306_Fill(SSD1306_COLOR_BLACK); /* Clear screen */
 8002a0a:	2000      	movs	r0, #0
 8002a0c:	f7ff fc18 	bl	8002240 <SSD1306_Fill>
			offset_x = 0;
 8002a10:	4b3b      	ldr	r3, [pc, #236]	; (8002b00 <tarea_modos+0x1b8>)
 8002a12:	f04f 0200 	mov.w	r2, #0
 8002a16:	601a      	str	r2, [r3, #0]
			offset_y = 0;
 8002a18:	4b3a      	ldr	r3, [pc, #232]	; (8002b04 <tarea_modos+0x1bc>)
 8002a1a:	f04f 0200 	mov.w	r2, #0
 8002a1e:	601a      	str	r2, [r3, #0]
			clean = ON;
 8002a20:	4b36      	ldr	r3, [pc, #216]	; (8002afc <tarea_modos+0x1b4>)
 8002a22:	2201      	movs	r2, #1
 8002a24:	701a      	strb	r2, [r3, #0]
			f_hold = OFF;
 8002a26:	4b38      	ldr	r3, [pc, #224]	; (8002b08 <tarea_modos+0x1c0>)
 8002a28:	2200      	movs	r2, #0
 8002a2a:	701a      	strb	r2, [r3, #0]
		}
		SSD1306_GotoXY (POS_MODO);
 8002a2c:	2100      	movs	r1, #0
 8002a2e:	2005      	movs	r0, #5
 8002a30:	f7ff fc88 	bl	8002344 <SSD1306_GotoXY>
		SSD1306_Puts("Modo: 2", &Font_7x10, SSD1306_COLOR_WHITE);
 8002a34:	2201      	movs	r2, #1
 8002a36:	4935      	ldr	r1, [pc, #212]	; (8002b0c <tarea_modos+0x1c4>)
 8002a38:	4839      	ldr	r0, [pc, #228]	; (8002b20 <tarea_modos+0x1d8>)
 8002a3a:	f7ff fd19 	bl	8002470 <SSD1306_Puts>
		fEjeY = ON;
 8002a3e:	4b35      	ldr	r3, [pc, #212]	; (8002b14 <tarea_modos+0x1cc>)
 8002a40:	2201      	movs	r2, #1
 8002a42:	701a      	strb	r2, [r3, #0]
		fAlarms = OFF;
 8002a44:	4b34      	ldr	r3, [pc, #208]	; (8002b18 <tarea_modos+0x1d0>)
 8002a46:	2200      	movs	r2, #0
 8002a48:	701a      	strb	r2, [r3, #0]
		if(tecla == HOLD){
 8002a4a:	4b29      	ldr	r3, [pc, #164]	; (8002af0 <tarea_modos+0x1a8>)
 8002a4c:	781b      	ldrb	r3, [r3, #0]
 8002a4e:	2b03      	cmp	r3, #3
 8002a50:	d105      	bne.n	8002a5e <tarea_modos+0x116>
			f_hold = ~ f_hold; // toggle flag
 8002a52:	4b2d      	ldr	r3, [pc, #180]	; (8002b08 <tarea_modos+0x1c0>)
 8002a54:	781b      	ldrb	r3, [r3, #0]
 8002a56:	43db      	mvns	r3, r3
 8002a58:	b2da      	uxtb	r2, r3
 8002a5a:	4b2b      	ldr	r3, [pc, #172]	; (8002b08 <tarea_modos+0x1c0>)
 8002a5c:	701a      	strb	r2, [r3, #0]
		}
		if(tecla == ZERO){
 8002a5e:	4b24      	ldr	r3, [pc, #144]	; (8002af0 <tarea_modos+0x1a8>)
 8002a60:	781b      	ldrb	r3, [r3, #0]
 8002a62:	2b02      	cmp	r3, #2
 8002a64:	d13c      	bne.n	8002ae0 <tarea_modos+0x198>
			f_zero = ON;
 8002a66:	4b2d      	ldr	r3, [pc, #180]	; (8002b1c <tarea_modos+0x1d4>)
 8002a68:	2201      	movs	r2, #1
 8002a6a:	701a      	strb	r2, [r3, #0]
		}
		break;
 8002a6c:	e038      	b.n	8002ae0 <tarea_modos+0x198>
	case MODO_ALARMAS:
		if(clean == OFF){
 8002a6e:	4b23      	ldr	r3, [pc, #140]	; (8002afc <tarea_modos+0x1b4>)
 8002a70:	781b      	ldrb	r3, [r3, #0]
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d110      	bne.n	8002a98 <tarea_modos+0x150>
			SSD1306_Fill(SSD1306_COLOR_BLACK); /* Clear screen */
 8002a76:	2000      	movs	r0, #0
 8002a78:	f7ff fbe2 	bl	8002240 <SSD1306_Fill>
			offset_x = 0;
 8002a7c:	4b20      	ldr	r3, [pc, #128]	; (8002b00 <tarea_modos+0x1b8>)
 8002a7e:	f04f 0200 	mov.w	r2, #0
 8002a82:	601a      	str	r2, [r3, #0]
			offset_y = 0;
 8002a84:	4b1f      	ldr	r3, [pc, #124]	; (8002b04 <tarea_modos+0x1bc>)
 8002a86:	f04f 0200 	mov.w	r2, #0
 8002a8a:	601a      	str	r2, [r3, #0]
			clean = ON;
 8002a8c:	4b1b      	ldr	r3, [pc, #108]	; (8002afc <tarea_modos+0x1b4>)
 8002a8e:	2201      	movs	r2, #1
 8002a90:	701a      	strb	r2, [r3, #0]
			f_hold = OFF;
 8002a92:	4b1d      	ldr	r3, [pc, #116]	; (8002b08 <tarea_modos+0x1c0>)
 8002a94:	2200      	movs	r2, #0
 8002a96:	701a      	strb	r2, [r3, #0]
		}
		SSD1306_GotoXY (POS_MODO);
 8002a98:	2100      	movs	r1, #0
 8002a9a:	2005      	movs	r0, #5
 8002a9c:	f7ff fc52 	bl	8002344 <SSD1306_GotoXY>
		SSD1306_Puts("Modo: 3", &Font_7x10, SSD1306_COLOR_WHITE);
 8002aa0:	2201      	movs	r2, #1
 8002aa2:	491a      	ldr	r1, [pc, #104]	; (8002b0c <tarea_modos+0x1c4>)
 8002aa4:	481f      	ldr	r0, [pc, #124]	; (8002b24 <tarea_modos+0x1dc>)
 8002aa6:	f7ff fce3 	bl	8002470 <SSD1306_Puts>
		fEjeY = OFF;
 8002aaa:	4b1a      	ldr	r3, [pc, #104]	; (8002b14 <tarea_modos+0x1cc>)
 8002aac:	2200      	movs	r2, #0
 8002aae:	701a      	strb	r2, [r3, #0]
		fAlarms = ON;
 8002ab0:	4b19      	ldr	r3, [pc, #100]	; (8002b18 <tarea_modos+0x1d0>)
 8002ab2:	2201      	movs	r2, #1
 8002ab4:	701a      	strb	r2, [r3, #0]
		if(tecla == HOLD){	// Guardar
 8002ab6:	4b0e      	ldr	r3, [pc, #56]	; (8002af0 <tarea_modos+0x1a8>)
 8002ab8:	781b      	ldrb	r3, [r3, #0]
 8002aba:	2b03      	cmp	r3, #3
 8002abc:	d102      	bne.n	8002ac4 <tarea_modos+0x17c>
			EEPROM_refresh(EEPROM_SAVE);
 8002abe:	2003      	movs	r0, #3
 8002ac0:	f7fe fcbe 	bl	8001440 <EEPROM_refresh>
		}
		if(tecla == ZERO){	// Borrar
 8002ac4:	4b0a      	ldr	r3, [pc, #40]	; (8002af0 <tarea_modos+0x1a8>)
 8002ac6:	781b      	ldrb	r3, [r3, #0]
 8002ac8:	2b02      	cmp	r3, #2
 8002aca:	d10b      	bne.n	8002ae4 <tarea_modos+0x19c>
			EEPROM_refresh(EEPROM_DELETE);
 8002acc:	2002      	movs	r0, #2
 8002ace:	f7fe fcb7 	bl	8001440 <EEPROM_refresh>
		}

		break;
 8002ad2:	e007      	b.n	8002ae4 <tarea_modos+0x19c>
	default:
		mode = MODO_MEDIR;
 8002ad4:	4b07      	ldr	r3, [pc, #28]	; (8002af4 <tarea_modos+0x1ac>)
 8002ad6:	2200      	movs	r2, #0
 8002ad8:	701a      	strb	r2, [r3, #0]
	}
}
 8002ada:	e004      	b.n	8002ae6 <tarea_modos+0x19e>
		break;
 8002adc:	bf00      	nop
 8002ade:	e002      	b.n	8002ae6 <tarea_modos+0x19e>
		break;
 8002ae0:	bf00      	nop
 8002ae2:	e000      	b.n	8002ae6 <tarea_modos+0x19e>
		break;
 8002ae4:	bf00      	nop
}
 8002ae6:	bf00      	nop
 8002ae8:	3708      	adds	r7, #8
 8002aea:	46bd      	mov	sp, r7
 8002aec:	bd80      	pop	{r7, pc}
 8002aee:	bf00      	nop
 8002af0:	200006f4 	.word	0x200006f4
 8002af4:	200006fb 	.word	0x200006fb
 8002af8:	aaaaaaab 	.word	0xaaaaaaab
 8002afc:	200006fc 	.word	0x200006fc
 8002b00:	200006e8 	.word	0x200006e8
 8002b04:	200006ec 	.word	0x200006ec
 8002b08:	200006f5 	.word	0x200006f5
 8002b0c:	20000000 	.word	0x20000000
 8002b10:	08007d58 	.word	0x08007d58
 8002b14:	200006f7 	.word	0x200006f7
 8002b18:	200006f8 	.word	0x200006f8
 8002b1c:	200006f6 	.word	0x200006f6
 8002b20:	08007d60 	.word	0x08007d60
 8002b24:	08007d68 	.word	0x08007d68

08002b28 <tarea_display>:

void tarea_display(void *p)
{
 8002b28:	b590      	push	{r4, r7, lr}
 8002b2a:	b08d      	sub	sp, #52	; 0x34
 8002b2c:	af00      	add	r7, sp, #0
 8002b2e:	6078      	str	r0, [r7, #4]
	static int cont = 0;				//!< Variable contador para el promedio
	static float prom_x = 0;			//!<
	static float prom_y = 0;			//!<
	static float valorAntX = 0;			//!<
	static float valorAntY = 0;			//!<
	float prom_offset_x = 0;			//!<
 8002b30:	f04f 0300 	mov.w	r3, #0
 8002b34:	62fb      	str	r3, [r7, #44]	; 0x2c
	float prom_offset_y = 0;			//!<
 8002b36:	f04f 0300 	mov.w	r3, #0
 8002b3a:	62bb      	str	r3, [r7, #40]	; 0x28
	char str_x[5];						//!<
	char str_y[5];						//!<
	char str1[6] = {0};				//!<
 8002b3c:	f107 0310 	add.w	r3, r7, #16
 8002b40:	2200      	movs	r2, #0
 8002b42:	601a      	str	r2, [r3, #0]
 8002b44:	809a      	strh	r2, [r3, #4]
	char str2[6] = {0};				//!<
 8002b46:	f107 0308 	add.w	r3, r7, #8
 8002b4a:	2200      	movs	r2, #0
 8002b4c:	601a      	str	r2, [r3, #0]
 8002b4e:	809a      	strh	r2, [r3, #4]

	if(cont >= PROMEDIO){
 8002b50:	4b87      	ldr	r3, [pc, #540]	; (8002d70 <tarea_display+0x248>)
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	2b31      	cmp	r3, #49	; 0x31
 8002b56:	f340 81ee 	ble.w	8002f36 <tarea_display+0x40e>
		cont = 0;
 8002b5a:	4b85      	ldr	r3, [pc, #532]	; (8002d70 <tarea_display+0x248>)
 8002b5c:	2200      	movs	r2, #0
 8002b5e:	601a      	str	r2, [r3, #0]
		prom_x /= PROMEDIO;
 8002b60:	4b84      	ldr	r3, [pc, #528]	; (8002d74 <tarea_display+0x24c>)
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	4984      	ldr	r1, [pc, #528]	; (8002d78 <tarea_display+0x250>)
 8002b66:	4618      	mov	r0, r3
 8002b68:	f7fe f9a0 	bl	8000eac <__aeabi_fdiv>
 8002b6c:	4603      	mov	r3, r0
 8002b6e:	461a      	mov	r2, r3
 8002b70:	4b80      	ldr	r3, [pc, #512]	; (8002d74 <tarea_display+0x24c>)
 8002b72:	601a      	str	r2, [r3, #0]
		prom_y /= PROMEDIO;
 8002b74:	4b81      	ldr	r3, [pc, #516]	; (8002d7c <tarea_display+0x254>)
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	497f      	ldr	r1, [pc, #508]	; (8002d78 <tarea_display+0x250>)
 8002b7a:	4618      	mov	r0, r3
 8002b7c:	f7fe f996 	bl	8000eac <__aeabi_fdiv>
 8002b80:	4603      	mov	r3, r0
 8002b82:	461a      	mov	r2, r3
 8002b84:	4b7d      	ldr	r3, [pc, #500]	; (8002d7c <tarea_display+0x254>)
 8002b86:	601a      	str	r2, [r3, #0]

		//------------------------------------------------------------------------------------------------
		//--------------------------------------- Chequeo signo -----------------------------------------
		//------------------------------------------------------------------------------------------------
		if(offset_x != 0){
 8002b88:	4b7d      	ldr	r3, [pc, #500]	; (8002d80 <tarea_display+0x258>)
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	f04f 0100 	mov.w	r1, #0
 8002b90:	4618      	mov	r0, r3
 8002b92:	f7fe fa6b 	bl	800106c <__aeabi_fcmpeq>
 8002b96:	4603      	mov	r3, r0
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d113      	bne.n	8002bc4 <tarea_display+0x9c>
			prom_x = fabs(prom_x);
 8002b9c:	4b75      	ldr	r3, [pc, #468]	; (8002d74 <tarea_display+0x24c>)
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002ba4:	4a73      	ldr	r2, [pc, #460]	; (8002d74 <tarea_display+0x24c>)
 8002ba6:	6013      	str	r3, [r2, #0]

			if((prom_offset_x) < 0)
 8002ba8:	f04f 0100 	mov.w	r1, #0
 8002bac:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002bae:	f7fe fa67 	bl	8001080 <__aeabi_fcmplt>
 8002bb2:	4603      	mov	r3, r0
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d002      	beq.n	8002bbe <tarea_display+0x96>
				str1[0] = 118; // v
 8002bb8:	2376      	movs	r3, #118	; 0x76
 8002bba:	743b      	strb	r3, [r7, #16]
 8002bbc:	e017      	b.n	8002bee <tarea_display+0xc6>
			else
				str1[0] = 94; // ^
 8002bbe:	235e      	movs	r3, #94	; 0x5e
 8002bc0:	743b      	strb	r3, [r7, #16]
 8002bc2:	e014      	b.n	8002bee <tarea_display+0xc6>
		}
		else{
			if(prom_x < 0)
 8002bc4:	4b6b      	ldr	r3, [pc, #428]	; (8002d74 <tarea_display+0x24c>)
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	f04f 0100 	mov.w	r1, #0
 8002bcc:	4618      	mov	r0, r3
 8002bce:	f7fe fa57 	bl	8001080 <__aeabi_fcmplt>
 8002bd2:	4603      	mov	r3, r0
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d002      	beq.n	8002bde <tarea_display+0xb6>
				str1[0] = 118; // v
 8002bd8:	2376      	movs	r3, #118	; 0x76
 8002bda:	743b      	strb	r3, [r7, #16]
 8002bdc:	e001      	b.n	8002be2 <tarea_display+0xba>
			else
				str1[0] = 94; // ^
 8002bde:	235e      	movs	r3, #94	; 0x5e
 8002be0:	743b      	strb	r3, [r7, #16]
			prom_x = fabs(prom_x);
 8002be2:	4b64      	ldr	r3, [pc, #400]	; (8002d74 <tarea_display+0x24c>)
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002bea:	4a62      	ldr	r2, [pc, #392]	; (8002d74 <tarea_display+0x24c>)
 8002bec:	6013      	str	r3, [r2, #0]
		}

		if(offset_y != 0){
 8002bee:	4b65      	ldr	r3, [pc, #404]	; (8002d84 <tarea_display+0x25c>)
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	f04f 0100 	mov.w	r1, #0
 8002bf6:	4618      	mov	r0, r3
 8002bf8:	f7fe fa38 	bl	800106c <__aeabi_fcmpeq>
 8002bfc:	4603      	mov	r3, r0
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d113      	bne.n	8002c2a <tarea_display+0x102>
			prom_y = fabs(prom_y);
 8002c02:	4b5e      	ldr	r3, [pc, #376]	; (8002d7c <tarea_display+0x254>)
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002c0a:	4a5c      	ldr	r2, [pc, #368]	; (8002d7c <tarea_display+0x254>)
 8002c0c:	6013      	str	r3, [r2, #0]

			if((prom_offset_y) < 0)
 8002c0e:	f04f 0100 	mov.w	r1, #0
 8002c12:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002c14:	f7fe fa34 	bl	8001080 <__aeabi_fcmplt>
 8002c18:	4603      	mov	r3, r0
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d002      	beq.n	8002c24 <tarea_display+0xfc>
				str2[0] = 118; // v
 8002c1e:	2376      	movs	r3, #118	; 0x76
 8002c20:	723b      	strb	r3, [r7, #8]
 8002c22:	e017      	b.n	8002c54 <tarea_display+0x12c>
			else
				str2[0] = 94; // ^
 8002c24:	235e      	movs	r3, #94	; 0x5e
 8002c26:	723b      	strb	r3, [r7, #8]
 8002c28:	e014      	b.n	8002c54 <tarea_display+0x12c>
		}
		else{
			if(prom_y < 0)
 8002c2a:	4b54      	ldr	r3, [pc, #336]	; (8002d7c <tarea_display+0x254>)
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	f04f 0100 	mov.w	r1, #0
 8002c32:	4618      	mov	r0, r3
 8002c34:	f7fe fa24 	bl	8001080 <__aeabi_fcmplt>
 8002c38:	4603      	mov	r3, r0
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d002      	beq.n	8002c44 <tarea_display+0x11c>
				str2[0] = 118; // v
 8002c3e:	2376      	movs	r3, #118	; 0x76
 8002c40:	723b      	strb	r3, [r7, #8]
 8002c42:	e001      	b.n	8002c48 <tarea_display+0x120>
			else
				str2[0] = 94; // ^
 8002c44:	235e      	movs	r3, #94	; 0x5e
 8002c46:	723b      	strb	r3, [r7, #8]
			prom_x = fabs(prom_x);
 8002c48:	4b4a      	ldr	r3, [pc, #296]	; (8002d74 <tarea_display+0x24c>)
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002c50:	4a48      	ldr	r2, [pc, #288]	; (8002d74 <tarea_display+0x24c>)
 8002c52:	6013      	str	r3, [r2, #0]
		}

		prom_offset_x = prom_x - offset_x;
 8002c54:	4b47      	ldr	r3, [pc, #284]	; (8002d74 <tarea_display+0x24c>)
 8002c56:	681a      	ldr	r2, [r3, #0]
 8002c58:	4b49      	ldr	r3, [pc, #292]	; (8002d80 <tarea_display+0x258>)
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	4619      	mov	r1, r3
 8002c5e:	4610      	mov	r0, r2
 8002c60:	f7fd ff66 	bl	8000b30 <__aeabi_fsub>
 8002c64:	4603      	mov	r3, r0
 8002c66:	62fb      	str	r3, [r7, #44]	; 0x2c
		prom_offset_y = prom_y - offset_y;
 8002c68:	4b44      	ldr	r3, [pc, #272]	; (8002d7c <tarea_display+0x254>)
 8002c6a:	681a      	ldr	r2, [r3, #0]
 8002c6c:	4b45      	ldr	r3, [pc, #276]	; (8002d84 <tarea_display+0x25c>)
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	4619      	mov	r1, r3
 8002c72:	4610      	mov	r0, r2
 8002c74:	f7fd ff5c 	bl	8000b30 <__aeabi_fsub>
 8002c78:	4603      	mov	r3, r0
 8002c7a:	62bb      	str	r3, [r7, #40]	; 0x28

		//------------------------------------------------------------------------------------------------
		//----------------------------------------------- Zero -------------------------------------------
		//------------------------------------------------------------------------------------------------
		if(f_zero == ON){
 8002c7c:	4b42      	ldr	r3, [pc, #264]	; (8002d88 <tarea_display+0x260>)
 8002c7e:	781b      	ldrb	r3, [r3, #0]
 8002c80:	2b01      	cmp	r3, #1
 8002c82:	d10a      	bne.n	8002c9a <tarea_display+0x172>
			offset_x = prom_x;
 8002c84:	4b3b      	ldr	r3, [pc, #236]	; (8002d74 <tarea_display+0x24c>)
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	4a3d      	ldr	r2, [pc, #244]	; (8002d80 <tarea_display+0x258>)
 8002c8a:	6013      	str	r3, [r2, #0]
			offset_y = prom_y;
 8002c8c:	4b3b      	ldr	r3, [pc, #236]	; (8002d7c <tarea_display+0x254>)
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	4a3c      	ldr	r2, [pc, #240]	; (8002d84 <tarea_display+0x25c>)
 8002c92:	6013      	str	r3, [r2, #0]
			f_zero = OFF;
 8002c94:	4b3c      	ldr	r3, [pc, #240]	; (8002d88 <tarea_display+0x260>)
 8002c96:	2200      	movs	r2, #0
 8002c98:	701a      	strb	r2, [r3, #0]
		}

		//------------------------------------------------------------------------------------------------
		//------------------------------------------- THRESHOLD ------------------------------------------
		//------------------------------------------------------------------------------------------------
		if(fabs(prom_offset_x - valorAntX) < THRESHOLD )
 8002c9a:	4b3c      	ldr	r3, [pc, #240]	; (8002d8c <tarea_display+0x264>)
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	4619      	mov	r1, r3
 8002ca0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002ca2:	f7fd ff45 	bl	8000b30 <__aeabi_fsub>
 8002ca6:	4603      	mov	r3, r0
 8002ca8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002cac:	4618      	mov	r0, r3
 8002cae:	f7fd fbbb 	bl	8000428 <__aeabi_f2d>
 8002cb2:	a32d      	add	r3, pc, #180	; (adr r3, 8002d68 <tarea_display+0x240>)
 8002cb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002cb8:	f7fd fe80 	bl	80009bc <__aeabi_dcmplt>
 8002cbc:	4603      	mov	r3, r0
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d002      	beq.n	8002cc8 <tarea_display+0x1a0>
			prom_offset_x = valorAntX;
 8002cc2:	4b32      	ldr	r3, [pc, #200]	; (8002d8c <tarea_display+0x264>)
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	62fb      	str	r3, [r7, #44]	; 0x2c
		if(fabs(prom_offset_x - valorAntY) < THRESHOLD )
 8002cc8:	4b31      	ldr	r3, [pc, #196]	; (8002d90 <tarea_display+0x268>)
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	4619      	mov	r1, r3
 8002cce:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002cd0:	f7fd ff2e 	bl	8000b30 <__aeabi_fsub>
 8002cd4:	4603      	mov	r3, r0
 8002cd6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002cda:	4618      	mov	r0, r3
 8002cdc:	f7fd fba4 	bl	8000428 <__aeabi_f2d>
 8002ce0:	a321      	add	r3, pc, #132	; (adr r3, 8002d68 <tarea_display+0x240>)
 8002ce2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ce6:	f7fd fe69 	bl	80009bc <__aeabi_dcmplt>
 8002cea:	4603      	mov	r3, r0
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d002      	beq.n	8002cf6 <tarea_display+0x1ce>
			prom_offset_y = valorAntY;
 8002cf0:	4b27      	ldr	r3, [pc, #156]	; (8002d90 <tarea_display+0x268>)
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	62bb      	str	r3, [r7, #40]	; 0x28

		//------------------------------------------------------------------------------------------------
		//-------------------------------------------- Valor Anterior ------------------------------------
		//------------------------------------------------------------------------------------------------
		valorAntX = prom_offset_x;
 8002cf6:	4a25      	ldr	r2, [pc, #148]	; (8002d8c <tarea_display+0x264>)
 8002cf8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002cfa:	6013      	str	r3, [r2, #0]
		valorAntY = prom_offset_y;
 8002cfc:	4a24      	ldr	r2, [pc, #144]	; (8002d90 <tarea_display+0x268>)
 8002cfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d00:	6013      	str	r3, [r2, #0]

		//------------------------------------------------------------------------------------------------
		//---------------------------------------- Redondeo ----------------------------------------------
		//------------------------------------------------------------------------------------------------
		if(fabs(prom_offset_x) >= 10 ){
 8002d02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d04:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002d08:	4922      	ldr	r1, [pc, #136]	; (8002d94 <tarea_display+0x26c>)
 8002d0a:	4618      	mov	r0, r3
 8002d0c:	f7fe f9cc 	bl	80010a8 <__aeabi_fcmpge>
 8002d10:	4603      	mov	r3, r0
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d046      	beq.n	8002da4 <tarea_display+0x27c>
			valuetoSave = prom_offset_x;
 8002d16:	4a20      	ldr	r2, [pc, #128]	; (8002d98 <tarea_display+0x270>)
 8002d18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d1a:	6013      	str	r3, [r2, #0]
			sprintf(str_x,"%.2f", roundf(fabs(prom_offset_x) * 100)/100);
 8002d1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d1e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002d22:	491e      	ldr	r1, [pc, #120]	; (8002d9c <tarea_display+0x274>)
 8002d24:	4618      	mov	r0, r3
 8002d26:	f7fe f80d 	bl	8000d44 <__aeabi_fmul>
 8002d2a:	4603      	mov	r3, r0
 8002d2c:	4618      	mov	r0, r3
 8002d2e:	f004 fdf5 	bl	800791c <roundf>
 8002d32:	4603      	mov	r3, r0
 8002d34:	4919      	ldr	r1, [pc, #100]	; (8002d9c <tarea_display+0x274>)
 8002d36:	4618      	mov	r0, r3
 8002d38:	f7fe f8b8 	bl	8000eac <__aeabi_fdiv>
 8002d3c:	4603      	mov	r3, r0
 8002d3e:	4618      	mov	r0, r3
 8002d40:	f7fd fb72 	bl	8000428 <__aeabi_f2d>
 8002d44:	4603      	mov	r3, r0
 8002d46:	460c      	mov	r4, r1
 8002d48:	f107 0020 	add.w	r0, r7, #32
 8002d4c:	461a      	mov	r2, r3
 8002d4e:	4623      	mov	r3, r4
 8002d50:	4913      	ldr	r1, [pc, #76]	; (8002da0 <tarea_display+0x278>)
 8002d52:	f003 f855 	bl	8005e00 <siprintf>
			strcat(str1, str_x);
 8002d56:	f107 0220 	add.w	r2, r7, #32
 8002d5a:	f107 0310 	add.w	r3, r7, #16
 8002d5e:	4611      	mov	r1, r2
 8002d60:	4618      	mov	r0, r3
 8002d62:	f003 f86d 	bl	8005e40 <strcat>
 8002d66:	e045      	b.n	8002df4 <tarea_display+0x2cc>
 8002d68:	0a3d70a4 	.word	0x0a3d70a4
 8002d6c:	3fc0a3d7 	.word	0x3fc0a3d7
 8002d70:	20000700 	.word	0x20000700
 8002d74:	20000704 	.word	0x20000704
 8002d78:	42480000 	.word	0x42480000
 8002d7c:	20000708 	.word	0x20000708
 8002d80:	200006e8 	.word	0x200006e8
 8002d84:	200006ec 	.word	0x200006ec
 8002d88:	200006f6 	.word	0x200006f6
 8002d8c:	2000070c 	.word	0x2000070c
 8002d90:	20000710 	.word	0x20000710
 8002d94:	41200000 	.word	0x41200000
 8002d98:	200006f0 	.word	0x200006f0
 8002d9c:	42c80000 	.word	0x42c80000
 8002da0:	08007d48 	.word	0x08007d48
		}
		else{
			valuetoSave = prom_offset_x;
 8002da4:	4a7f      	ldr	r2, [pc, #508]	; (8002fa4 <tarea_display+0x47c>)
 8002da6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002da8:	6013      	str	r3, [r2, #0]
			sprintf(str_x,"0%.2f", roundf(fabs(prom_offset_x) * 100)/100);
 8002daa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002dac:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002db0:	497d      	ldr	r1, [pc, #500]	; (8002fa8 <tarea_display+0x480>)
 8002db2:	4618      	mov	r0, r3
 8002db4:	f7fd ffc6 	bl	8000d44 <__aeabi_fmul>
 8002db8:	4603      	mov	r3, r0
 8002dba:	4618      	mov	r0, r3
 8002dbc:	f004 fdae 	bl	800791c <roundf>
 8002dc0:	4603      	mov	r3, r0
 8002dc2:	4979      	ldr	r1, [pc, #484]	; (8002fa8 <tarea_display+0x480>)
 8002dc4:	4618      	mov	r0, r3
 8002dc6:	f7fe f871 	bl	8000eac <__aeabi_fdiv>
 8002dca:	4603      	mov	r3, r0
 8002dcc:	4618      	mov	r0, r3
 8002dce:	f7fd fb2b 	bl	8000428 <__aeabi_f2d>
 8002dd2:	4603      	mov	r3, r0
 8002dd4:	460c      	mov	r4, r1
 8002dd6:	f107 0020 	add.w	r0, r7, #32
 8002dda:	461a      	mov	r2, r3
 8002ddc:	4623      	mov	r3, r4
 8002dde:	4973      	ldr	r1, [pc, #460]	; (8002fac <tarea_display+0x484>)
 8002de0:	f003 f80e 	bl	8005e00 <siprintf>
			strcat(str1, str_x);
 8002de4:	f107 0220 	add.w	r2, r7, #32
 8002de8:	f107 0310 	add.w	r3, r7, #16
 8002dec:	4611      	mov	r1, r2
 8002dee:	4618      	mov	r0, r3
 8002df0:	f003 f826 	bl	8005e40 <strcat>
		}
		if(prom_offset_y >= 10 ){
 8002df4:	496e      	ldr	r1, [pc, #440]	; (8002fb0 <tarea_display+0x488>)
 8002df6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002df8:	f7fe f956 	bl	80010a8 <__aeabi_fcmpge>
 8002dfc:	4603      	mov	r3, r0
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d025      	beq.n	8002e4e <tarea_display+0x326>
			sprintf(str_y,"%.2f", roundf(fabs(prom_offset_y) * 100)/100);
 8002e02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e04:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002e08:	4967      	ldr	r1, [pc, #412]	; (8002fa8 <tarea_display+0x480>)
 8002e0a:	4618      	mov	r0, r3
 8002e0c:	f7fd ff9a 	bl	8000d44 <__aeabi_fmul>
 8002e10:	4603      	mov	r3, r0
 8002e12:	4618      	mov	r0, r3
 8002e14:	f004 fd82 	bl	800791c <roundf>
 8002e18:	4603      	mov	r3, r0
 8002e1a:	4963      	ldr	r1, [pc, #396]	; (8002fa8 <tarea_display+0x480>)
 8002e1c:	4618      	mov	r0, r3
 8002e1e:	f7fe f845 	bl	8000eac <__aeabi_fdiv>
 8002e22:	4603      	mov	r3, r0
 8002e24:	4618      	mov	r0, r3
 8002e26:	f7fd faff 	bl	8000428 <__aeabi_f2d>
 8002e2a:	4603      	mov	r3, r0
 8002e2c:	460c      	mov	r4, r1
 8002e2e:	f107 0018 	add.w	r0, r7, #24
 8002e32:	461a      	mov	r2, r3
 8002e34:	4623      	mov	r3, r4
 8002e36:	495f      	ldr	r1, [pc, #380]	; (8002fb4 <tarea_display+0x48c>)
 8002e38:	f002 ffe2 	bl	8005e00 <siprintf>
			strcat(str2, str_y);
 8002e3c:	f107 0218 	add.w	r2, r7, #24
 8002e40:	f107 0308 	add.w	r3, r7, #8
 8002e44:	4611      	mov	r1, r2
 8002e46:	4618      	mov	r0, r3
 8002e48:	f002 fffa 	bl	8005e40 <strcat>
 8002e4c:	e024      	b.n	8002e98 <tarea_display+0x370>
		}
		else{
			sprintf(str_y,"0%.2f", roundf(fabs(prom_offset_y) * 100)/100);
 8002e4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e50:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002e54:	4954      	ldr	r1, [pc, #336]	; (8002fa8 <tarea_display+0x480>)
 8002e56:	4618      	mov	r0, r3
 8002e58:	f7fd ff74 	bl	8000d44 <__aeabi_fmul>
 8002e5c:	4603      	mov	r3, r0
 8002e5e:	4618      	mov	r0, r3
 8002e60:	f004 fd5c 	bl	800791c <roundf>
 8002e64:	4603      	mov	r3, r0
 8002e66:	4950      	ldr	r1, [pc, #320]	; (8002fa8 <tarea_display+0x480>)
 8002e68:	4618      	mov	r0, r3
 8002e6a:	f7fe f81f 	bl	8000eac <__aeabi_fdiv>
 8002e6e:	4603      	mov	r3, r0
 8002e70:	4618      	mov	r0, r3
 8002e72:	f7fd fad9 	bl	8000428 <__aeabi_f2d>
 8002e76:	4603      	mov	r3, r0
 8002e78:	460c      	mov	r4, r1
 8002e7a:	f107 0018 	add.w	r0, r7, #24
 8002e7e:	461a      	mov	r2, r3
 8002e80:	4623      	mov	r3, r4
 8002e82:	494a      	ldr	r1, [pc, #296]	; (8002fac <tarea_display+0x484>)
 8002e84:	f002 ffbc 	bl	8005e00 <siprintf>
			strcat(str2, str_y);
 8002e88:	f107 0218 	add.w	r2, r7, #24
 8002e8c:	f107 0308 	add.w	r3, r7, #8
 8002e90:	4611      	mov	r1, r2
 8002e92:	4618      	mov	r0, r3
 8002e94:	f002 ffd4 	bl	8005e40 <strcat>


		//------------------------------------------------------------------------------------------------
		//-------------------------------------- MODO 1 o MODO 2 -----------------------------------------
		//------------------------------------------------------------------------------------------------
		if(fEjeY == OFF){	// Solo eje X
 8002e98:	4b47      	ldr	r3, [pc, #284]	; (8002fb8 <tarea_display+0x490>)
 8002e9a:	781b      	ldrb	r3, [r3, #0]
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d12b      	bne.n	8002ef8 <tarea_display+0x3d0>
			if(fAlarms == OFF){
 8002ea0:	4b46      	ldr	r3, [pc, #280]	; (8002fbc <tarea_display+0x494>)
 8002ea2:	781b      	ldrb	r3, [r3, #0]
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d10b      	bne.n	8002ec0 <tarea_display+0x398>
				SSD1306_GotoXY (POS_GRADOS);
 8002ea8:	211e      	movs	r1, #30
 8002eaa:	200a      	movs	r0, #10
 8002eac:	f7ff fa4a 	bl	8002344 <SSD1306_GotoXY>
				SSD1306_Puts(str1, &Font_16x26, SSD1306_COLOR_WHITE);
 8002eb0:	f107 0310 	add.w	r3, r7, #16
 8002eb4:	2201      	movs	r2, #1
 8002eb6:	4942      	ldr	r1, [pc, #264]	; (8002fc0 <tarea_display+0x498>)
 8002eb8:	4618      	mov	r0, r3
 8002eba:	f7ff fad9 	bl	8002470 <SSD1306_Puts>
 8002ebe:	e031      	b.n	8002f24 <tarea_display+0x3fc>
			}
			else{
				SSD1306_GotoXY(POS_GRADOSX);
 8002ec0:	210f      	movs	r1, #15
 8002ec2:	2014      	movs	r0, #20
 8002ec4:	f7ff fa3e 	bl	8002344 <SSD1306_GotoXY>
				SSD1306_Puts(str1, &Font_11x18, SSD1306_COLOR_WHITE);
 8002ec8:	f107 0310 	add.w	r3, r7, #16
 8002ecc:	2201      	movs	r2, #1
 8002ece:	493d      	ldr	r1, [pc, #244]	; (8002fc4 <tarea_display+0x49c>)
 8002ed0:	4618      	mov	r0, r3
 8002ed2:	f7ff facd 	bl	8002470 <SSD1306_Puts>
				SSD1306_GotoXY(POS_GRADOSA);
 8002ed6:	2128      	movs	r1, #40	; 0x28
 8002ed8:	2014      	movs	r0, #20
 8002eda:	f7ff fa33 	bl	8002344 <SSD1306_GotoXY>
				lastAlarm(str2);
 8002ede:	f107 0308 	add.w	r3, r7, #8
 8002ee2:	4618      	mov	r0, r3
 8002ee4:	f7ff fc94 	bl	8002810 <lastAlarm>
				SSD1306_Puts(str2, &Font_11x18, SSD1306_COLOR_WHITE);
 8002ee8:	f107 0308 	add.w	r3, r7, #8
 8002eec:	2201      	movs	r2, #1
 8002eee:	4935      	ldr	r1, [pc, #212]	; (8002fc4 <tarea_display+0x49c>)
 8002ef0:	4618      	mov	r0, r3
 8002ef2:	f7ff fabd 	bl	8002470 <SSD1306_Puts>
 8002ef6:	e015      	b.n	8002f24 <tarea_display+0x3fc>
			}
		}
		else{	// Solo eje Y
			SSD1306_GotoXY(POS_GRADOSX);
 8002ef8:	210f      	movs	r1, #15
 8002efa:	2014      	movs	r0, #20
 8002efc:	f7ff fa22 	bl	8002344 <SSD1306_GotoXY>
			SSD1306_Puts(str1, &Font_11x18, SSD1306_COLOR_WHITE);
 8002f00:	f107 0310 	add.w	r3, r7, #16
 8002f04:	2201      	movs	r2, #1
 8002f06:	492f      	ldr	r1, [pc, #188]	; (8002fc4 <tarea_display+0x49c>)
 8002f08:	4618      	mov	r0, r3
 8002f0a:	f7ff fab1 	bl	8002470 <SSD1306_Puts>
			SSD1306_GotoXY(POS_GRADOSY);
 8002f0e:	2128      	movs	r1, #40	; 0x28
 8002f10:	2014      	movs	r0, #20
 8002f12:	f7ff fa17 	bl	8002344 <SSD1306_GotoXY>
			SSD1306_Puts(str2, &Font_11x18, SSD1306_COLOR_WHITE);
 8002f16:	f107 0308 	add.w	r3, r7, #8
 8002f1a:	2201      	movs	r2, #1
 8002f1c:	4929      	ldr	r1, [pc, #164]	; (8002fc4 <tarea_display+0x49c>)
 8002f1e:	4618      	mov	r0, r3
 8002f20:	f7ff faa6 	bl	8002470 <SSD1306_Puts>
		}

		prom_x = 0;
 8002f24:	4b28      	ldr	r3, [pc, #160]	; (8002fc8 <tarea_display+0x4a0>)
 8002f26:	f04f 0200 	mov.w	r2, #0
 8002f2a:	601a      	str	r2, [r3, #0]
		prom_y = 0;
 8002f2c:	4b27      	ldr	r3, [pc, #156]	; (8002fcc <tarea_display+0x4a4>)
 8002f2e:	f04f 0200 	mov.w	r2, #0
 8002f32:	601a      	str	r2, [r3, #0]
		prom_y += MPU6050.KalmanAngleY;
		cont++;
	}


}
 8002f34:	e032      	b.n	8002f9c <tarea_display+0x474>
		prom_x += MPU6050.KalmanAngleX;
 8002f36:	4b24      	ldr	r3, [pc, #144]	; (8002fc8 <tarea_display+0x4a0>)
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	4618      	mov	r0, r3
 8002f3c:	f7fd fa74 	bl	8000428 <__aeabi_f2d>
 8002f40:	4b23      	ldr	r3, [pc, #140]	; (8002fd0 <tarea_display+0x4a8>)
 8002f42:	f103 0448 	add.w	r4, r3, #72	; 0x48
 8002f46:	e9d4 3400 	ldrd	r3, r4, [r4]
 8002f4a:	461a      	mov	r2, r3
 8002f4c:	4623      	mov	r3, r4
 8002f4e:	f7fd f90d 	bl	800016c <__adddf3>
 8002f52:	4603      	mov	r3, r0
 8002f54:	460c      	mov	r4, r1
 8002f56:	4618      	mov	r0, r3
 8002f58:	4621      	mov	r1, r4
 8002f5a:	f7fd fd95 	bl	8000a88 <__aeabi_d2f>
 8002f5e:	4602      	mov	r2, r0
 8002f60:	4b19      	ldr	r3, [pc, #100]	; (8002fc8 <tarea_display+0x4a0>)
 8002f62:	601a      	str	r2, [r3, #0]
		prom_y += MPU6050.KalmanAngleY;
 8002f64:	4b19      	ldr	r3, [pc, #100]	; (8002fcc <tarea_display+0x4a4>)
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	4618      	mov	r0, r3
 8002f6a:	f7fd fa5d 	bl	8000428 <__aeabi_f2d>
 8002f6e:	4b18      	ldr	r3, [pc, #96]	; (8002fd0 <tarea_display+0x4a8>)
 8002f70:	f103 0450 	add.w	r4, r3, #80	; 0x50
 8002f74:	e9d4 3400 	ldrd	r3, r4, [r4]
 8002f78:	461a      	mov	r2, r3
 8002f7a:	4623      	mov	r3, r4
 8002f7c:	f7fd f8f6 	bl	800016c <__adddf3>
 8002f80:	4603      	mov	r3, r0
 8002f82:	460c      	mov	r4, r1
 8002f84:	4618      	mov	r0, r3
 8002f86:	4621      	mov	r1, r4
 8002f88:	f7fd fd7e 	bl	8000a88 <__aeabi_d2f>
 8002f8c:	4602      	mov	r2, r0
 8002f8e:	4b0f      	ldr	r3, [pc, #60]	; (8002fcc <tarea_display+0x4a4>)
 8002f90:	601a      	str	r2, [r3, #0]
		cont++;
 8002f92:	4b10      	ldr	r3, [pc, #64]	; (8002fd4 <tarea_display+0x4ac>)
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	3301      	adds	r3, #1
 8002f98:	4a0e      	ldr	r2, [pc, #56]	; (8002fd4 <tarea_display+0x4ac>)
 8002f9a:	6013      	str	r3, [r2, #0]
}
 8002f9c:	bf00      	nop
 8002f9e:	3734      	adds	r7, #52	; 0x34
 8002fa0:	46bd      	mov	sp, r7
 8002fa2:	bd90      	pop	{r4, r7, pc}
 8002fa4:	200006f0 	.word	0x200006f0
 8002fa8:	42c80000 	.word	0x42c80000
 8002fac:	08007d40 	.word	0x08007d40
 8002fb0:	41200000 	.word	0x41200000
 8002fb4:	08007d48 	.word	0x08007d48
 8002fb8:	200006f7 	.word	0x200006f7
 8002fbc:	200006f8 	.word	0x200006f8
 8002fc0:	20000010 	.word	0x20000010
 8002fc4:	20000008 	.word	0x20000008
 8002fc8:	20000704 	.word	0x20000704
 8002fcc:	20000708 	.word	0x20000708
 8002fd0:	20000890 	.word	0x20000890
 8002fd4:	20000700 	.word	0x20000700

08002fd8 <tarea_orienta>:

void tarea_orienta(void *p)
{
 8002fd8:	b580      	push	{r7, lr}
 8002fda:	b082      	sub	sp, #8
 8002fdc:	af00      	add	r7, sp, #0
 8002fde:	6078      	str	r0, [r7, #4]
	MPU6050_Read_All(&hi2c1, &MPU6050);
 8002fe0:	4903      	ldr	r1, [pc, #12]	; (8002ff0 <tarea_orienta+0x18>)
 8002fe2:	4804      	ldr	r0, [pc, #16]	; (8002ff4 <tarea_orienta+0x1c>)
 8002fe4:	f7fe fcf0 	bl	80019c8 <MPU6050_Read_All>
}
 8002fe8:	bf00      	nop
 8002fea:	3708      	adds	r7, #8
 8002fec:	46bd      	mov	sp, r7
 8002fee:	bd80      	pop	{r7, pc}
 8002ff0:	20000890 	.word	0x20000890
 8002ff4:	20000734 	.word	0x20000734

08002ff8 <tarea_led_blinking>:


void tarea_led_blinking(void *p)
{
 8002ff8:	b580      	push	{r7, lr}
 8002ffa:	b082      	sub	sp, #8
 8002ffc:	af00      	add	r7, sp, #0
 8002ffe:	6078      	str	r0, [r7, #4]
	HAL_GPIO_TogglePin(GPIOC, Led_Blink_Pin);
 8003000:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003004:	4803      	ldr	r0, [pc, #12]	; (8003014 <tarea_led_blinking+0x1c>)
 8003006:	f000 fc34 	bl	8003872 <HAL_GPIO_TogglePin>
}
 800300a:	bf00      	nop
 800300c:	3708      	adds	r7, #8
 800300e:	46bd      	mov	sp, r7
 8003010:	bd80      	pop	{r7, pc}
 8003012:	bf00      	nop
 8003014:	40011000 	.word	0x40011000

08003018 <tarea_refresh>:


void tarea_refresh(void *p)
{
 8003018:	b580      	push	{r7, lr}
 800301a:	b082      	sub	sp, #8
 800301c:	af00      	add	r7, sp, #0
 800301e:	6078      	str	r0, [r7, #4]
	if(f_hold == OFF)
 8003020:	4b04      	ldr	r3, [pc, #16]	; (8003034 <tarea_refresh+0x1c>)
 8003022:	781b      	ldrb	r3, [r3, #0]
 8003024:	2b00      	cmp	r3, #0
 8003026:	d101      	bne.n	800302c <tarea_refresh+0x14>
		SSD1306_UpdateScreen();
 8003028:	f7ff f8d2 	bl	80021d0 <SSD1306_UpdateScreen>
}
 800302c:	bf00      	nop
 800302e:	3708      	adds	r7, #8
 8003030:	46bd      	mov	sp, r7
 8003032:	bd80      	pop	{r7, pc}
 8003034:	200006f5 	.word	0x200006f5

08003038 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8003038:	2100      	movs	r1, #0
  b LoopCopyDataInit
 800303a:	e003      	b.n	8003044 <LoopCopyDataInit>

0800303c <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 800303c:	4b0b      	ldr	r3, [pc, #44]	; (800306c <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 800303e:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8003040:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8003042:	3104      	adds	r1, #4

08003044 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8003044:	480a      	ldr	r0, [pc, #40]	; (8003070 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8003046:	4b0b      	ldr	r3, [pc, #44]	; (8003074 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8003048:	1842      	adds	r2, r0, r1
  cmp r2, r3
 800304a:	429a      	cmp	r2, r3
  bcc CopyDataInit
 800304c:	d3f6      	bcc.n	800303c <CopyDataInit>
  ldr r2, =_sbss
 800304e:	4a0a      	ldr	r2, [pc, #40]	; (8003078 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8003050:	e002      	b.n	8003058 <LoopFillZerobss>

08003052 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8003052:	2300      	movs	r3, #0
  str r3, [r2], #4
 8003054:	f842 3b04 	str.w	r3, [r2], #4

08003058 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8003058:	4b08      	ldr	r3, [pc, #32]	; (800307c <LoopFillZerobss+0x24>)
  cmp r2, r3
 800305a:	429a      	cmp	r2, r3
  bcc FillZerobss
 800305c:	d3f9      	bcc.n	8003052 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800305e:	f7ff fb79 	bl	8002754 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003062:	f002 fa51 	bl	8005508 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8003066:	f7fe fa4b 	bl	8001500 <main>
  bx lr
 800306a:	4770      	bx	lr
  ldr r3, =_sidata
 800306c:	0800a860 	.word	0x0800a860
  ldr r0, =_sdata
 8003070:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8003074:	200002a4 	.word	0x200002a4
  ldr r2, =_sbss
 8003078:	200002a8 	.word	0x200002a8
  ldr r3, = _ebss
 800307c:	200008f0 	.word	0x200008f0

08003080 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003080:	e7fe      	b.n	8003080 <ADC1_2_IRQHandler>
	...

08003084 <inicializar_despachador>:
static TaskStat *lista_tareas;

void inicializar_despachador(TaskStat *lista, uint32_t len,
		void (*start_timer)(void), uint32_t (*stop_timer)(void),
		void (*falla_sistema)(void))
{
 8003084:	b580      	push	{r7, lr}
 8003086:	b086      	sub	sp, #24
 8003088:	af00      	add	r7, sp, #0
 800308a:	60f8      	str	r0, [r7, #12]
 800308c:	60b9      	str	r1, [r7, #8]
 800308e:	607a      	str	r2, [r7, #4]
 8003090:	603b      	str	r3, [r7, #0]
	uint32_t i;
	monitor_start = start_timer;
 8003092:	4a14      	ldr	r2, [pc, #80]	; (80030e4 <inicializar_despachador+0x60>)
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	6013      	str	r3, [r2, #0]
	monitor_stop = stop_timer;
 8003098:	4a13      	ldr	r2, [pc, #76]	; (80030e8 <inicializar_despachador+0x64>)
 800309a:	683b      	ldr	r3, [r7, #0]
 800309c:	6013      	str	r3, [r2, #0]
	fallar_sistema = falla_sistema;
 800309e:	4a13      	ldr	r2, [pc, #76]	; (80030ec <inicializar_despachador+0x68>)
 80030a0:	6a3b      	ldr	r3, [r7, #32]
 80030a2:	6013      	str	r3, [r2, #0]
	tareas_a_despachar = 0;
 80030a4:	4b12      	ldr	r3, [pc, #72]	; (80030f0 <inicializar_despachador+0x6c>)
 80030a6:	2200      	movs	r2, #0
 80030a8:	601a      	str	r2, [r3, #0]
	max_len_lista_tareas = len;
 80030aa:	4a12      	ldr	r2, [pc, #72]	; (80030f4 <inicializar_despachador+0x70>)
 80030ac:	68bb      	ldr	r3, [r7, #8]
 80030ae:	6013      	str	r3, [r2, #0]
	lista_tareas = lista;
 80030b0:	4a11      	ldr	r2, [pc, #68]	; (80030f8 <inicializar_despachador+0x74>)
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	6013      	str	r3, [r2, #0]
	for (i = 0; i < len; i++)
 80030b6:	2300      	movs	r3, #0
 80030b8:	617b      	str	r3, [r7, #20]
 80030ba:	e00b      	b.n	80030d4 <inicializar_despachador+0x50>
		memset(&lista[i], 0, sizeof(TaskStat));
 80030bc:	697b      	ldr	r3, [r7, #20]
 80030be:	015b      	lsls	r3, r3, #5
 80030c0:	68fa      	ldr	r2, [r7, #12]
 80030c2:	4413      	add	r3, r2
 80030c4:	2220      	movs	r2, #32
 80030c6:	2100      	movs	r1, #0
 80030c8:	4618      	mov	r0, r3
 80030ca:	f002 fa41 	bl	8005550 <memset>
	for (i = 0; i < len; i++)
 80030ce:	697b      	ldr	r3, [r7, #20]
 80030d0:	3301      	adds	r3, #1
 80030d2:	617b      	str	r3, [r7, #20]
 80030d4:	697a      	ldr	r2, [r7, #20]
 80030d6:	68bb      	ldr	r3, [r7, #8]
 80030d8:	429a      	cmp	r2, r3
 80030da:	d3ef      	bcc.n	80030bc <inicializar_despachador+0x38>
}
 80030dc:	bf00      	nop
 80030de:	3718      	adds	r7, #24
 80030e0:	46bd      	mov	sp, r7
 80030e2:	bd80      	pop	{r7, pc}
 80030e4:	20000718 	.word	0x20000718
 80030e8:	2000071c 	.word	0x2000071c
 80030ec:	20000714 	.word	0x20000714
 80030f0:	20000724 	.word	0x20000724
 80030f4:	20000720 	.word	0x20000720
 80030f8:	20000728 	.word	0x20000728

080030fc <agregar_tarea>:

int agregar_tarea(TaskStat *lista, void (*tarea)(void *p), void *param,
		int offset, int periodo, int bcet, int wcet)
{
 80030fc:	b480      	push	{r7}
 80030fe:	b085      	sub	sp, #20
 8003100:	af00      	add	r7, sp, #0
 8003102:	60f8      	str	r0, [r7, #12]
 8003104:	60b9      	str	r1, [r7, #8]
 8003106:	607a      	str	r2, [r7, #4]
 8003108:	603b      	str	r3, [r7, #0]
	// Chequeos
	if ((periodo == 0) || (tarea == NULL)
 800310a:	69bb      	ldr	r3, [r7, #24]
 800310c:	2b00      	cmp	r3, #0
 800310e:	d008      	beq.n	8003122 <agregar_tarea+0x26>
 8003110:	68bb      	ldr	r3, [r7, #8]
 8003112:	2b00      	cmp	r3, #0
 8003114:	d005      	beq.n	8003122 <agregar_tarea+0x26>
			|| tareas_a_despachar == max_len_lista_tareas)
 8003116:	4b22      	ldr	r3, [pc, #136]	; (80031a0 <agregar_tarea+0xa4>)
 8003118:	681a      	ldr	r2, [r3, #0]
 800311a:	4b22      	ldr	r3, [pc, #136]	; (80031a4 <agregar_tarea+0xa8>)
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	429a      	cmp	r2, r3
 8003120:	d102      	bne.n	8003128 <agregar_tarea+0x2c>
		return -1;
 8003122:	f04f 33ff 	mov.w	r3, #4294967295
 8003126:	e036      	b.n	8003196 <agregar_tarea+0x9a>

	//Punteros de la tarea.
	lista[tareas_a_despachar].task = tarea;
 8003128:	4b1d      	ldr	r3, [pc, #116]	; (80031a0 <agregar_tarea+0xa4>)
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	015b      	lsls	r3, r3, #5
 800312e:	68fa      	ldr	r2, [r7, #12]
 8003130:	4413      	add	r3, r2
 8003132:	68ba      	ldr	r2, [r7, #8]
 8003134:	619a      	str	r2, [r3, #24]
	lista[tareas_a_despachar].param = param;
 8003136:	4b1a      	ldr	r3, [pc, #104]	; (80031a0 <agregar_tarea+0xa4>)
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	015b      	lsls	r3, r3, #5
 800313c:	68fa      	ldr	r2, [r7, #12]
 800313e:	4413      	add	r3, r2
 8003140:	687a      	ldr	r2, [r7, #4]
 8003142:	61da      	str	r2, [r3, #28]

	//Periodo y offset
	lista[tareas_a_despachar].period = periodo;
 8003144:	4b16      	ldr	r3, [pc, #88]	; (80031a0 <agregar_tarea+0xa4>)
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	015b      	lsls	r3, r3, #5
 800314a:	68fa      	ldr	r2, [r7, #12]
 800314c:	4413      	add	r3, r2
 800314e:	69ba      	ldr	r2, [r7, #24]
 8003150:	615a      	str	r2, [r3, #20]
	lista[tareas_a_despachar].offset = offset;
 8003152:	4b13      	ldr	r3, [pc, #76]	; (80031a0 <agregar_tarea+0xa4>)
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	015b      	lsls	r3, r3, #5
 8003158:	68fa      	ldr	r2, [r7, #12]
 800315a:	4413      	add	r3, r2
 800315c:	683a      	ldr	r2, [r7, #0]
 800315e:	611a      	str	r2, [r3, #16]

	//Cargo los tiempos.
	lista[tareas_a_despachar].et = 0;
 8003160:	4b0f      	ldr	r3, [pc, #60]	; (80031a0 <agregar_tarea+0xa4>)
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	015b      	lsls	r3, r3, #5
 8003166:	68fa      	ldr	r2, [r7, #12]
 8003168:	4413      	add	r3, r2
 800316a:	2200      	movs	r2, #0
 800316c:	609a      	str	r2, [r3, #8]
	lista[tareas_a_despachar].bcet = bcet;
 800316e:	4b0c      	ldr	r3, [pc, #48]	; (80031a0 <agregar_tarea+0xa4>)
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	015b      	lsls	r3, r3, #5
 8003174:	68fa      	ldr	r2, [r7, #12]
 8003176:	4413      	add	r3, r2
 8003178:	69fa      	ldr	r2, [r7, #28]
 800317a:	601a      	str	r2, [r3, #0]
	lista[tareas_a_despachar].wcet = wcet;
 800317c:	4b08      	ldr	r3, [pc, #32]	; (80031a0 <agregar_tarea+0xa4>)
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	015b      	lsls	r3, r3, #5
 8003182:	68fa      	ldr	r2, [r7, #12]
 8003184:	4413      	add	r3, r2
 8003186:	6a3a      	ldr	r2, [r7, #32]
 8003188:	605a      	str	r2, [r3, #4]
	tareas_a_despachar++;
 800318a:	4b05      	ldr	r3, [pc, #20]	; (80031a0 <agregar_tarea+0xa4>)
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	3301      	adds	r3, #1
 8003190:	4a03      	ldr	r2, [pc, #12]	; (80031a0 <agregar_tarea+0xa4>)
 8003192:	6013      	str	r3, [r2, #0]
	return 0;
 8003194:	2300      	movs	r3, #0
}
 8003196:	4618      	mov	r0, r3
 8003198:	3714      	adds	r7, #20
 800319a:	46bd      	mov	sp, r7
 800319c:	bc80      	pop	{r7}
 800319e:	4770      	bx	lr
 80031a0:	20000724 	.word	0x20000724
 80031a4:	20000720 	.word	0x20000720

080031a8 <despachar_tarea>:

int despachar_tarea(TaskStat *estado)
{
 80031a8:	b580      	push	{r7, lr}
 80031aa:	b084      	sub	sp, #16
 80031ac:	af00      	add	r7, sp, #0
 80031ae:	6078      	str	r0, [r7, #4]
	int ret = 0;
 80031b0:	2300      	movs	r3, #0
 80031b2:	60fb      	str	r3, [r7, #12]
	int valor_us;
	if (!estado->offset)
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	691b      	ldr	r3, [r3, #16]
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d12d      	bne.n	8003218 <despachar_tarea+0x70>
	{
		estado->offset = estado->period - 1;
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	695b      	ldr	r3, [r3, #20]
 80031c0:	1e5a      	subs	r2, r3, #1
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	611a      	str	r2, [r3, #16]
		monitor_start();
 80031c6:	4b19      	ldr	r3, [pc, #100]	; (800322c <despachar_tarea+0x84>)
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	4798      	blx	r3
		estado->task(estado->param);
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	699b      	ldr	r3, [r3, #24]
 80031d0:	687a      	ldr	r2, [r7, #4]
 80031d2:	69d2      	ldr	r2, [r2, #28]
 80031d4:	4610      	mov	r0, r2
 80031d6:	4798      	blx	r3
		valor_us = monitor_stop();
 80031d8:	4b15      	ldr	r3, [pc, #84]	; (8003230 <despachar_tarea+0x88>)
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	4798      	blx	r3
 80031de:	4603      	mov	r3, r0
 80031e0:	60bb      	str	r3, [r7, #8]
		estado->et = valor_us;
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	68ba      	ldr	r2, [r7, #8]
 80031e6:	609a      	str	r2, [r3, #8]
		if (valor_us < estado->bcet || valor_us > estado->wcet)
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	68ba      	ldr	r2, [r7, #8]
 80031ee:	429a      	cmp	r2, r3
 80031f0:	db04      	blt.n	80031fc <despachar_tarea+0x54>
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	685b      	ldr	r3, [r3, #4]
 80031f6:	68ba      	ldr	r2, [r7, #8]
 80031f8:	429a      	cmp	r2, r3
 80031fa:	dd02      	ble.n	8003202 <despachar_tarea+0x5a>
			ret--;
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	3b01      	subs	r3, #1
 8003200:	60fb      	str	r3, [r7, #12]
		if (estado->et_wcet < estado->et)
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	68da      	ldr	r2, [r3, #12]
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	689b      	ldr	r3, [r3, #8]
 800320a:	429a      	cmp	r2, r3
 800320c:	da09      	bge.n	8003222 <despachar_tarea+0x7a>
			estado->et_wcet = estado->et;
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	689a      	ldr	r2, [r3, #8]
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	60da      	str	r2, [r3, #12]
 8003216:	e004      	b.n	8003222 <despachar_tarea+0x7a>
	}
	else
	{
		estado->offset--;
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	691b      	ldr	r3, [r3, #16]
 800321c:	1e5a      	subs	r2, r3, #1
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	611a      	str	r2, [r3, #16]
	}
	return ret;
 8003222:	68fb      	ldr	r3, [r7, #12]
}
 8003224:	4618      	mov	r0, r3
 8003226:	3710      	adds	r7, #16
 8003228:	46bd      	mov	sp, r7
 800322a:	bd80      	pop	{r7, pc}
 800322c:	20000718 	.word	0x20000718
 8003230:	2000071c 	.word	0x2000071c

08003234 <despachar_tareas>:

void despachar_tareas(void)
{
 8003234:	b580      	push	{r7, lr}
 8003236:	b082      	sub	sp, #8
 8003238:	af00      	add	r7, sp, #0
	uint32_t i;
	int fallar = 0;
 800323a:	2300      	movs	r3, #0
 800323c:	603b      	str	r3, [r7, #0]
	for (i = 0; i < tareas_a_despachar; i++)
 800323e:	2300      	movs	r3, #0
 8003240:	607b      	str	r3, [r7, #4]
 8003242:	e00e      	b.n	8003262 <despachar_tareas+0x2e>
	{
		fallar = despachar_tarea(&lista_tareas[i]);
 8003244:	4b0f      	ldr	r3, [pc, #60]	; (8003284 <despachar_tareas+0x50>)
 8003246:	681a      	ldr	r2, [r3, #0]
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	015b      	lsls	r3, r3, #5
 800324c:	4413      	add	r3, r2
 800324e:	4618      	mov	r0, r3
 8003250:	f7ff ffaa 	bl	80031a8 <despachar_tarea>
 8003254:	6038      	str	r0, [r7, #0]
		if (fallar)
 8003256:	683b      	ldr	r3, [r7, #0]
 8003258:	2b00      	cmp	r3, #0
 800325a:	d108      	bne.n	800326e <despachar_tareas+0x3a>
	for (i = 0; i < tareas_a_despachar; i++)
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	3301      	adds	r3, #1
 8003260:	607b      	str	r3, [r7, #4]
 8003262:	4b09      	ldr	r3, [pc, #36]	; (8003288 <despachar_tareas+0x54>)
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	687a      	ldr	r2, [r7, #4]
 8003268:	429a      	cmp	r2, r3
 800326a:	d3eb      	bcc.n	8003244 <despachar_tareas+0x10>
 800326c:	e000      	b.n	8003270 <despachar_tareas+0x3c>
		{
			break;
 800326e:	bf00      	nop
		}
	}
	if (fallar)
 8003270:	683b      	ldr	r3, [r7, #0]
 8003272:	2b00      	cmp	r3, #0
 8003274:	d002      	beq.n	800327c <despachar_tareas+0x48>
	{
		fallar_sistema();
 8003276:	4b05      	ldr	r3, [pc, #20]	; (800328c <despachar_tareas+0x58>)
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	4798      	blx	r3
	}
}
 800327c:	bf00      	nop
 800327e:	3708      	adds	r7, #8
 8003280:	46bd      	mov	sp, r7
 8003282:	bd80      	pop	{r7, pc}
 8003284:	20000728 	.word	0x20000728
 8003288:	20000724 	.word	0x20000724
 800328c:	20000714 	.word	0x20000714

08003290 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003290:	b580      	push	{r7, lr}
 8003292:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003294:	4b08      	ldr	r3, [pc, #32]	; (80032b8 <HAL_Init+0x28>)
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	4a07      	ldr	r2, [pc, #28]	; (80032b8 <HAL_Init+0x28>)
 800329a:	f043 0310 	orr.w	r3, r3, #16
 800329e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80032a0:	2003      	movs	r0, #3
 80032a2:	f000 f929 	bl	80034f8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80032a6:	2000      	movs	r0, #0
 80032a8:	f000 f808 	bl	80032bc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80032ac:	f7ff f980 	bl	80025b0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80032b0:	2300      	movs	r3, #0
}
 80032b2:	4618      	mov	r0, r3
 80032b4:	bd80      	pop	{r7, pc}
 80032b6:	bf00      	nop
 80032b8:	40022000 	.word	0x40022000

080032bc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80032bc:	b580      	push	{r7, lr}
 80032be:	b082      	sub	sp, #8
 80032c0:	af00      	add	r7, sp, #0
 80032c2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80032c4:	4b12      	ldr	r3, [pc, #72]	; (8003310 <HAL_InitTick+0x54>)
 80032c6:	681a      	ldr	r2, [r3, #0]
 80032c8:	4b12      	ldr	r3, [pc, #72]	; (8003314 <HAL_InitTick+0x58>)
 80032ca:	781b      	ldrb	r3, [r3, #0]
 80032cc:	4619      	mov	r1, r3
 80032ce:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80032d2:	fbb3 f3f1 	udiv	r3, r3, r1
 80032d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80032da:	4618      	mov	r0, r3
 80032dc:	f000 f933 	bl	8003546 <HAL_SYSTICK_Config>
 80032e0:	4603      	mov	r3, r0
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d001      	beq.n	80032ea <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80032e6:	2301      	movs	r3, #1
 80032e8:	e00e      	b.n	8003308 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	2b0f      	cmp	r3, #15
 80032ee:	d80a      	bhi.n	8003306 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80032f0:	2200      	movs	r2, #0
 80032f2:	6879      	ldr	r1, [r7, #4]
 80032f4:	f04f 30ff 	mov.w	r0, #4294967295
 80032f8:	f000 f909 	bl	800350e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80032fc:	4a06      	ldr	r2, [pc, #24]	; (8003318 <HAL_InitTick+0x5c>)
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003302:	2300      	movs	r3, #0
 8003304:	e000      	b.n	8003308 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003306:	2301      	movs	r3, #1
}
 8003308:	4618      	mov	r0, r3
 800330a:	3708      	adds	r7, #8
 800330c:	46bd      	mov	sp, r7
 800330e:	bd80      	pop	{r7, pc}
 8003310:	200000a8 	.word	0x200000a8
 8003314:	200000cc 	.word	0x200000cc
 8003318:	200000c8 	.word	0x200000c8

0800331c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800331c:	b480      	push	{r7}
 800331e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003320:	4b05      	ldr	r3, [pc, #20]	; (8003338 <HAL_IncTick+0x1c>)
 8003322:	781b      	ldrb	r3, [r3, #0]
 8003324:	461a      	mov	r2, r3
 8003326:	4b05      	ldr	r3, [pc, #20]	; (800333c <HAL_IncTick+0x20>)
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	4413      	add	r3, r2
 800332c:	4a03      	ldr	r2, [pc, #12]	; (800333c <HAL_IncTick+0x20>)
 800332e:	6013      	str	r3, [r2, #0]
}
 8003330:	bf00      	nop
 8003332:	46bd      	mov	sp, r7
 8003334:	bc80      	pop	{r7}
 8003336:	4770      	bx	lr
 8003338:	200000cc 	.word	0x200000cc
 800333c:	200008e8 	.word	0x200008e8

08003340 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003340:	b480      	push	{r7}
 8003342:	af00      	add	r7, sp, #0
  return uwTick;
 8003344:	4b02      	ldr	r3, [pc, #8]	; (8003350 <HAL_GetTick+0x10>)
 8003346:	681b      	ldr	r3, [r3, #0]
}
 8003348:	4618      	mov	r0, r3
 800334a:	46bd      	mov	sp, r7
 800334c:	bc80      	pop	{r7}
 800334e:	4770      	bx	lr
 8003350:	200008e8 	.word	0x200008e8

08003354 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003354:	b580      	push	{r7, lr}
 8003356:	b084      	sub	sp, #16
 8003358:	af00      	add	r7, sp, #0
 800335a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800335c:	f7ff fff0 	bl	8003340 <HAL_GetTick>
 8003360:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	f1b3 3fff 	cmp.w	r3, #4294967295
 800336c:	d005      	beq.n	800337a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800336e:	4b09      	ldr	r3, [pc, #36]	; (8003394 <HAL_Delay+0x40>)
 8003370:	781b      	ldrb	r3, [r3, #0]
 8003372:	461a      	mov	r2, r3
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	4413      	add	r3, r2
 8003378:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800337a:	bf00      	nop
 800337c:	f7ff ffe0 	bl	8003340 <HAL_GetTick>
 8003380:	4602      	mov	r2, r0
 8003382:	68bb      	ldr	r3, [r7, #8]
 8003384:	1ad3      	subs	r3, r2, r3
 8003386:	68fa      	ldr	r2, [r7, #12]
 8003388:	429a      	cmp	r2, r3
 800338a:	d8f7      	bhi.n	800337c <HAL_Delay+0x28>
  {
  }
}
 800338c:	bf00      	nop
 800338e:	3710      	adds	r7, #16
 8003390:	46bd      	mov	sp, r7
 8003392:	bd80      	pop	{r7, pc}
 8003394:	200000cc 	.word	0x200000cc

08003398 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003398:	b480      	push	{r7}
 800339a:	b085      	sub	sp, #20
 800339c:	af00      	add	r7, sp, #0
 800339e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	f003 0307 	and.w	r3, r3, #7
 80033a6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80033a8:	4b0c      	ldr	r3, [pc, #48]	; (80033dc <__NVIC_SetPriorityGrouping+0x44>)
 80033aa:	68db      	ldr	r3, [r3, #12]
 80033ac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80033ae:	68ba      	ldr	r2, [r7, #8]
 80033b0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80033b4:	4013      	ands	r3, r2
 80033b6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80033bc:	68bb      	ldr	r3, [r7, #8]
 80033be:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80033c0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80033c4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80033c8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80033ca:	4a04      	ldr	r2, [pc, #16]	; (80033dc <__NVIC_SetPriorityGrouping+0x44>)
 80033cc:	68bb      	ldr	r3, [r7, #8]
 80033ce:	60d3      	str	r3, [r2, #12]
}
 80033d0:	bf00      	nop
 80033d2:	3714      	adds	r7, #20
 80033d4:	46bd      	mov	sp, r7
 80033d6:	bc80      	pop	{r7}
 80033d8:	4770      	bx	lr
 80033da:	bf00      	nop
 80033dc:	e000ed00 	.word	0xe000ed00

080033e0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80033e0:	b480      	push	{r7}
 80033e2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80033e4:	4b04      	ldr	r3, [pc, #16]	; (80033f8 <__NVIC_GetPriorityGrouping+0x18>)
 80033e6:	68db      	ldr	r3, [r3, #12]
 80033e8:	0a1b      	lsrs	r3, r3, #8
 80033ea:	f003 0307 	and.w	r3, r3, #7
}
 80033ee:	4618      	mov	r0, r3
 80033f0:	46bd      	mov	sp, r7
 80033f2:	bc80      	pop	{r7}
 80033f4:	4770      	bx	lr
 80033f6:	bf00      	nop
 80033f8:	e000ed00 	.word	0xe000ed00

080033fc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80033fc:	b480      	push	{r7}
 80033fe:	b083      	sub	sp, #12
 8003400:	af00      	add	r7, sp, #0
 8003402:	4603      	mov	r3, r0
 8003404:	6039      	str	r1, [r7, #0]
 8003406:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003408:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800340c:	2b00      	cmp	r3, #0
 800340e:	db0a      	blt.n	8003426 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003410:	683b      	ldr	r3, [r7, #0]
 8003412:	b2da      	uxtb	r2, r3
 8003414:	490c      	ldr	r1, [pc, #48]	; (8003448 <__NVIC_SetPriority+0x4c>)
 8003416:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800341a:	0112      	lsls	r2, r2, #4
 800341c:	b2d2      	uxtb	r2, r2
 800341e:	440b      	add	r3, r1
 8003420:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003424:	e00a      	b.n	800343c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003426:	683b      	ldr	r3, [r7, #0]
 8003428:	b2da      	uxtb	r2, r3
 800342a:	4908      	ldr	r1, [pc, #32]	; (800344c <__NVIC_SetPriority+0x50>)
 800342c:	79fb      	ldrb	r3, [r7, #7]
 800342e:	f003 030f 	and.w	r3, r3, #15
 8003432:	3b04      	subs	r3, #4
 8003434:	0112      	lsls	r2, r2, #4
 8003436:	b2d2      	uxtb	r2, r2
 8003438:	440b      	add	r3, r1
 800343a:	761a      	strb	r2, [r3, #24]
}
 800343c:	bf00      	nop
 800343e:	370c      	adds	r7, #12
 8003440:	46bd      	mov	sp, r7
 8003442:	bc80      	pop	{r7}
 8003444:	4770      	bx	lr
 8003446:	bf00      	nop
 8003448:	e000e100 	.word	0xe000e100
 800344c:	e000ed00 	.word	0xe000ed00

08003450 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003450:	b480      	push	{r7}
 8003452:	b089      	sub	sp, #36	; 0x24
 8003454:	af00      	add	r7, sp, #0
 8003456:	60f8      	str	r0, [r7, #12]
 8003458:	60b9      	str	r1, [r7, #8]
 800345a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	f003 0307 	and.w	r3, r3, #7
 8003462:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003464:	69fb      	ldr	r3, [r7, #28]
 8003466:	f1c3 0307 	rsb	r3, r3, #7
 800346a:	2b04      	cmp	r3, #4
 800346c:	bf28      	it	cs
 800346e:	2304      	movcs	r3, #4
 8003470:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003472:	69fb      	ldr	r3, [r7, #28]
 8003474:	3304      	adds	r3, #4
 8003476:	2b06      	cmp	r3, #6
 8003478:	d902      	bls.n	8003480 <NVIC_EncodePriority+0x30>
 800347a:	69fb      	ldr	r3, [r7, #28]
 800347c:	3b03      	subs	r3, #3
 800347e:	e000      	b.n	8003482 <NVIC_EncodePriority+0x32>
 8003480:	2300      	movs	r3, #0
 8003482:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003484:	f04f 32ff 	mov.w	r2, #4294967295
 8003488:	69bb      	ldr	r3, [r7, #24]
 800348a:	fa02 f303 	lsl.w	r3, r2, r3
 800348e:	43da      	mvns	r2, r3
 8003490:	68bb      	ldr	r3, [r7, #8]
 8003492:	401a      	ands	r2, r3
 8003494:	697b      	ldr	r3, [r7, #20]
 8003496:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003498:	f04f 31ff 	mov.w	r1, #4294967295
 800349c:	697b      	ldr	r3, [r7, #20]
 800349e:	fa01 f303 	lsl.w	r3, r1, r3
 80034a2:	43d9      	mvns	r1, r3
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80034a8:	4313      	orrs	r3, r2
         );
}
 80034aa:	4618      	mov	r0, r3
 80034ac:	3724      	adds	r7, #36	; 0x24
 80034ae:	46bd      	mov	sp, r7
 80034b0:	bc80      	pop	{r7}
 80034b2:	4770      	bx	lr

080034b4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80034b4:	b580      	push	{r7, lr}
 80034b6:	b082      	sub	sp, #8
 80034b8:	af00      	add	r7, sp, #0
 80034ba:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	3b01      	subs	r3, #1
 80034c0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80034c4:	d301      	bcc.n	80034ca <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80034c6:	2301      	movs	r3, #1
 80034c8:	e00f      	b.n	80034ea <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80034ca:	4a0a      	ldr	r2, [pc, #40]	; (80034f4 <SysTick_Config+0x40>)
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	3b01      	subs	r3, #1
 80034d0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80034d2:	210f      	movs	r1, #15
 80034d4:	f04f 30ff 	mov.w	r0, #4294967295
 80034d8:	f7ff ff90 	bl	80033fc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80034dc:	4b05      	ldr	r3, [pc, #20]	; (80034f4 <SysTick_Config+0x40>)
 80034de:	2200      	movs	r2, #0
 80034e0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80034e2:	4b04      	ldr	r3, [pc, #16]	; (80034f4 <SysTick_Config+0x40>)
 80034e4:	2207      	movs	r2, #7
 80034e6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80034e8:	2300      	movs	r3, #0
}
 80034ea:	4618      	mov	r0, r3
 80034ec:	3708      	adds	r7, #8
 80034ee:	46bd      	mov	sp, r7
 80034f0:	bd80      	pop	{r7, pc}
 80034f2:	bf00      	nop
 80034f4:	e000e010 	.word	0xe000e010

080034f8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80034f8:	b580      	push	{r7, lr}
 80034fa:	b082      	sub	sp, #8
 80034fc:	af00      	add	r7, sp, #0
 80034fe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003500:	6878      	ldr	r0, [r7, #4]
 8003502:	f7ff ff49 	bl	8003398 <__NVIC_SetPriorityGrouping>
}
 8003506:	bf00      	nop
 8003508:	3708      	adds	r7, #8
 800350a:	46bd      	mov	sp, r7
 800350c:	bd80      	pop	{r7, pc}

0800350e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800350e:	b580      	push	{r7, lr}
 8003510:	b086      	sub	sp, #24
 8003512:	af00      	add	r7, sp, #0
 8003514:	4603      	mov	r3, r0
 8003516:	60b9      	str	r1, [r7, #8]
 8003518:	607a      	str	r2, [r7, #4]
 800351a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800351c:	2300      	movs	r3, #0
 800351e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003520:	f7ff ff5e 	bl	80033e0 <__NVIC_GetPriorityGrouping>
 8003524:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003526:	687a      	ldr	r2, [r7, #4]
 8003528:	68b9      	ldr	r1, [r7, #8]
 800352a:	6978      	ldr	r0, [r7, #20]
 800352c:	f7ff ff90 	bl	8003450 <NVIC_EncodePriority>
 8003530:	4602      	mov	r2, r0
 8003532:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003536:	4611      	mov	r1, r2
 8003538:	4618      	mov	r0, r3
 800353a:	f7ff ff5f 	bl	80033fc <__NVIC_SetPriority>
}
 800353e:	bf00      	nop
 8003540:	3718      	adds	r7, #24
 8003542:	46bd      	mov	sp, r7
 8003544:	bd80      	pop	{r7, pc}

08003546 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003546:	b580      	push	{r7, lr}
 8003548:	b082      	sub	sp, #8
 800354a:	af00      	add	r7, sp, #0
 800354c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800354e:	6878      	ldr	r0, [r7, #4]
 8003550:	f7ff ffb0 	bl	80034b4 <SysTick_Config>
 8003554:	4603      	mov	r3, r0
}
 8003556:	4618      	mov	r0, r3
 8003558:	3708      	adds	r7, #8
 800355a:	46bd      	mov	sp, r7
 800355c:	bd80      	pop	{r7, pc}
	...

08003560 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003560:	b480      	push	{r7}
 8003562:	b08b      	sub	sp, #44	; 0x2c
 8003564:	af00      	add	r7, sp, #0
 8003566:	6078      	str	r0, [r7, #4]
 8003568:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800356a:	2300      	movs	r3, #0
 800356c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800356e:	2300      	movs	r3, #0
 8003570:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003572:	e127      	b.n	80037c4 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8003574:	2201      	movs	r2, #1
 8003576:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003578:	fa02 f303 	lsl.w	r3, r2, r3
 800357c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800357e:	683b      	ldr	r3, [r7, #0]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	69fa      	ldr	r2, [r7, #28]
 8003584:	4013      	ands	r3, r2
 8003586:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8003588:	69ba      	ldr	r2, [r7, #24]
 800358a:	69fb      	ldr	r3, [r7, #28]
 800358c:	429a      	cmp	r2, r3
 800358e:	f040 8116 	bne.w	80037be <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8003592:	683b      	ldr	r3, [r7, #0]
 8003594:	685b      	ldr	r3, [r3, #4]
 8003596:	2b12      	cmp	r3, #18
 8003598:	d034      	beq.n	8003604 <HAL_GPIO_Init+0xa4>
 800359a:	2b12      	cmp	r3, #18
 800359c:	d80d      	bhi.n	80035ba <HAL_GPIO_Init+0x5a>
 800359e:	2b02      	cmp	r3, #2
 80035a0:	d02b      	beq.n	80035fa <HAL_GPIO_Init+0x9a>
 80035a2:	2b02      	cmp	r3, #2
 80035a4:	d804      	bhi.n	80035b0 <HAL_GPIO_Init+0x50>
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d031      	beq.n	800360e <HAL_GPIO_Init+0xae>
 80035aa:	2b01      	cmp	r3, #1
 80035ac:	d01c      	beq.n	80035e8 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80035ae:	e048      	b.n	8003642 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80035b0:	2b03      	cmp	r3, #3
 80035b2:	d043      	beq.n	800363c <HAL_GPIO_Init+0xdc>
 80035b4:	2b11      	cmp	r3, #17
 80035b6:	d01b      	beq.n	80035f0 <HAL_GPIO_Init+0x90>
          break;
 80035b8:	e043      	b.n	8003642 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80035ba:	4a89      	ldr	r2, [pc, #548]	; (80037e0 <HAL_GPIO_Init+0x280>)
 80035bc:	4293      	cmp	r3, r2
 80035be:	d026      	beq.n	800360e <HAL_GPIO_Init+0xae>
 80035c0:	4a87      	ldr	r2, [pc, #540]	; (80037e0 <HAL_GPIO_Init+0x280>)
 80035c2:	4293      	cmp	r3, r2
 80035c4:	d806      	bhi.n	80035d4 <HAL_GPIO_Init+0x74>
 80035c6:	4a87      	ldr	r2, [pc, #540]	; (80037e4 <HAL_GPIO_Init+0x284>)
 80035c8:	4293      	cmp	r3, r2
 80035ca:	d020      	beq.n	800360e <HAL_GPIO_Init+0xae>
 80035cc:	4a86      	ldr	r2, [pc, #536]	; (80037e8 <HAL_GPIO_Init+0x288>)
 80035ce:	4293      	cmp	r3, r2
 80035d0:	d01d      	beq.n	800360e <HAL_GPIO_Init+0xae>
          break;
 80035d2:	e036      	b.n	8003642 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80035d4:	4a85      	ldr	r2, [pc, #532]	; (80037ec <HAL_GPIO_Init+0x28c>)
 80035d6:	4293      	cmp	r3, r2
 80035d8:	d019      	beq.n	800360e <HAL_GPIO_Init+0xae>
 80035da:	4a85      	ldr	r2, [pc, #532]	; (80037f0 <HAL_GPIO_Init+0x290>)
 80035dc:	4293      	cmp	r3, r2
 80035de:	d016      	beq.n	800360e <HAL_GPIO_Init+0xae>
 80035e0:	4a84      	ldr	r2, [pc, #528]	; (80037f4 <HAL_GPIO_Init+0x294>)
 80035e2:	4293      	cmp	r3, r2
 80035e4:	d013      	beq.n	800360e <HAL_GPIO_Init+0xae>
          break;
 80035e6:	e02c      	b.n	8003642 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80035e8:	683b      	ldr	r3, [r7, #0]
 80035ea:	68db      	ldr	r3, [r3, #12]
 80035ec:	623b      	str	r3, [r7, #32]
          break;
 80035ee:	e028      	b.n	8003642 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80035f0:	683b      	ldr	r3, [r7, #0]
 80035f2:	68db      	ldr	r3, [r3, #12]
 80035f4:	3304      	adds	r3, #4
 80035f6:	623b      	str	r3, [r7, #32]
          break;
 80035f8:	e023      	b.n	8003642 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80035fa:	683b      	ldr	r3, [r7, #0]
 80035fc:	68db      	ldr	r3, [r3, #12]
 80035fe:	3308      	adds	r3, #8
 8003600:	623b      	str	r3, [r7, #32]
          break;
 8003602:	e01e      	b.n	8003642 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8003604:	683b      	ldr	r3, [r7, #0]
 8003606:	68db      	ldr	r3, [r3, #12]
 8003608:	330c      	adds	r3, #12
 800360a:	623b      	str	r3, [r7, #32]
          break;
 800360c:	e019      	b.n	8003642 <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800360e:	683b      	ldr	r3, [r7, #0]
 8003610:	689b      	ldr	r3, [r3, #8]
 8003612:	2b00      	cmp	r3, #0
 8003614:	d102      	bne.n	800361c <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8003616:	2304      	movs	r3, #4
 8003618:	623b      	str	r3, [r7, #32]
          break;
 800361a:	e012      	b.n	8003642 <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800361c:	683b      	ldr	r3, [r7, #0]
 800361e:	689b      	ldr	r3, [r3, #8]
 8003620:	2b01      	cmp	r3, #1
 8003622:	d105      	bne.n	8003630 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003624:	2308      	movs	r3, #8
 8003626:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	69fa      	ldr	r2, [r7, #28]
 800362c:	611a      	str	r2, [r3, #16]
          break;
 800362e:	e008      	b.n	8003642 <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003630:	2308      	movs	r3, #8
 8003632:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	69fa      	ldr	r2, [r7, #28]
 8003638:	615a      	str	r2, [r3, #20]
          break;
 800363a:	e002      	b.n	8003642 <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800363c:	2300      	movs	r3, #0
 800363e:	623b      	str	r3, [r7, #32]
          break;
 8003640:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8003642:	69bb      	ldr	r3, [r7, #24]
 8003644:	2bff      	cmp	r3, #255	; 0xff
 8003646:	d801      	bhi.n	800364c <HAL_GPIO_Init+0xec>
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	e001      	b.n	8003650 <HAL_GPIO_Init+0xf0>
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	3304      	adds	r3, #4
 8003650:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8003652:	69bb      	ldr	r3, [r7, #24]
 8003654:	2bff      	cmp	r3, #255	; 0xff
 8003656:	d802      	bhi.n	800365e <HAL_GPIO_Init+0xfe>
 8003658:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800365a:	009b      	lsls	r3, r3, #2
 800365c:	e002      	b.n	8003664 <HAL_GPIO_Init+0x104>
 800365e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003660:	3b08      	subs	r3, #8
 8003662:	009b      	lsls	r3, r3, #2
 8003664:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8003666:	697b      	ldr	r3, [r7, #20]
 8003668:	681a      	ldr	r2, [r3, #0]
 800366a:	210f      	movs	r1, #15
 800366c:	693b      	ldr	r3, [r7, #16]
 800366e:	fa01 f303 	lsl.w	r3, r1, r3
 8003672:	43db      	mvns	r3, r3
 8003674:	401a      	ands	r2, r3
 8003676:	6a39      	ldr	r1, [r7, #32]
 8003678:	693b      	ldr	r3, [r7, #16]
 800367a:	fa01 f303 	lsl.w	r3, r1, r3
 800367e:	431a      	orrs	r2, r3
 8003680:	697b      	ldr	r3, [r7, #20]
 8003682:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003684:	683b      	ldr	r3, [r7, #0]
 8003686:	685b      	ldr	r3, [r3, #4]
 8003688:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800368c:	2b00      	cmp	r3, #0
 800368e:	f000 8096 	beq.w	80037be <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8003692:	4b59      	ldr	r3, [pc, #356]	; (80037f8 <HAL_GPIO_Init+0x298>)
 8003694:	699b      	ldr	r3, [r3, #24]
 8003696:	4a58      	ldr	r2, [pc, #352]	; (80037f8 <HAL_GPIO_Init+0x298>)
 8003698:	f043 0301 	orr.w	r3, r3, #1
 800369c:	6193      	str	r3, [r2, #24]
 800369e:	4b56      	ldr	r3, [pc, #344]	; (80037f8 <HAL_GPIO_Init+0x298>)
 80036a0:	699b      	ldr	r3, [r3, #24]
 80036a2:	f003 0301 	and.w	r3, r3, #1
 80036a6:	60bb      	str	r3, [r7, #8]
 80036a8:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80036aa:	4a54      	ldr	r2, [pc, #336]	; (80037fc <HAL_GPIO_Init+0x29c>)
 80036ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036ae:	089b      	lsrs	r3, r3, #2
 80036b0:	3302      	adds	r3, #2
 80036b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80036b6:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80036b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036ba:	f003 0303 	and.w	r3, r3, #3
 80036be:	009b      	lsls	r3, r3, #2
 80036c0:	220f      	movs	r2, #15
 80036c2:	fa02 f303 	lsl.w	r3, r2, r3
 80036c6:	43db      	mvns	r3, r3
 80036c8:	68fa      	ldr	r2, [r7, #12]
 80036ca:	4013      	ands	r3, r2
 80036cc:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	4a4b      	ldr	r2, [pc, #300]	; (8003800 <HAL_GPIO_Init+0x2a0>)
 80036d2:	4293      	cmp	r3, r2
 80036d4:	d013      	beq.n	80036fe <HAL_GPIO_Init+0x19e>
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	4a4a      	ldr	r2, [pc, #296]	; (8003804 <HAL_GPIO_Init+0x2a4>)
 80036da:	4293      	cmp	r3, r2
 80036dc:	d00d      	beq.n	80036fa <HAL_GPIO_Init+0x19a>
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	4a49      	ldr	r2, [pc, #292]	; (8003808 <HAL_GPIO_Init+0x2a8>)
 80036e2:	4293      	cmp	r3, r2
 80036e4:	d007      	beq.n	80036f6 <HAL_GPIO_Init+0x196>
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	4a48      	ldr	r2, [pc, #288]	; (800380c <HAL_GPIO_Init+0x2ac>)
 80036ea:	4293      	cmp	r3, r2
 80036ec:	d101      	bne.n	80036f2 <HAL_GPIO_Init+0x192>
 80036ee:	2303      	movs	r3, #3
 80036f0:	e006      	b.n	8003700 <HAL_GPIO_Init+0x1a0>
 80036f2:	2304      	movs	r3, #4
 80036f4:	e004      	b.n	8003700 <HAL_GPIO_Init+0x1a0>
 80036f6:	2302      	movs	r3, #2
 80036f8:	e002      	b.n	8003700 <HAL_GPIO_Init+0x1a0>
 80036fa:	2301      	movs	r3, #1
 80036fc:	e000      	b.n	8003700 <HAL_GPIO_Init+0x1a0>
 80036fe:	2300      	movs	r3, #0
 8003700:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003702:	f002 0203 	and.w	r2, r2, #3
 8003706:	0092      	lsls	r2, r2, #2
 8003708:	4093      	lsls	r3, r2
 800370a:	68fa      	ldr	r2, [r7, #12]
 800370c:	4313      	orrs	r3, r2
 800370e:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8003710:	493a      	ldr	r1, [pc, #232]	; (80037fc <HAL_GPIO_Init+0x29c>)
 8003712:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003714:	089b      	lsrs	r3, r3, #2
 8003716:	3302      	adds	r3, #2
 8003718:	68fa      	ldr	r2, [r7, #12]
 800371a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800371e:	683b      	ldr	r3, [r7, #0]
 8003720:	685b      	ldr	r3, [r3, #4]
 8003722:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003726:	2b00      	cmp	r3, #0
 8003728:	d006      	beq.n	8003738 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800372a:	4b39      	ldr	r3, [pc, #228]	; (8003810 <HAL_GPIO_Init+0x2b0>)
 800372c:	681a      	ldr	r2, [r3, #0]
 800372e:	4938      	ldr	r1, [pc, #224]	; (8003810 <HAL_GPIO_Init+0x2b0>)
 8003730:	69bb      	ldr	r3, [r7, #24]
 8003732:	4313      	orrs	r3, r2
 8003734:	600b      	str	r3, [r1, #0]
 8003736:	e006      	b.n	8003746 <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8003738:	4b35      	ldr	r3, [pc, #212]	; (8003810 <HAL_GPIO_Init+0x2b0>)
 800373a:	681a      	ldr	r2, [r3, #0]
 800373c:	69bb      	ldr	r3, [r7, #24]
 800373e:	43db      	mvns	r3, r3
 8003740:	4933      	ldr	r1, [pc, #204]	; (8003810 <HAL_GPIO_Init+0x2b0>)
 8003742:	4013      	ands	r3, r2
 8003744:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003746:	683b      	ldr	r3, [r7, #0]
 8003748:	685b      	ldr	r3, [r3, #4]
 800374a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800374e:	2b00      	cmp	r3, #0
 8003750:	d006      	beq.n	8003760 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8003752:	4b2f      	ldr	r3, [pc, #188]	; (8003810 <HAL_GPIO_Init+0x2b0>)
 8003754:	685a      	ldr	r2, [r3, #4]
 8003756:	492e      	ldr	r1, [pc, #184]	; (8003810 <HAL_GPIO_Init+0x2b0>)
 8003758:	69bb      	ldr	r3, [r7, #24]
 800375a:	4313      	orrs	r3, r2
 800375c:	604b      	str	r3, [r1, #4]
 800375e:	e006      	b.n	800376e <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8003760:	4b2b      	ldr	r3, [pc, #172]	; (8003810 <HAL_GPIO_Init+0x2b0>)
 8003762:	685a      	ldr	r2, [r3, #4]
 8003764:	69bb      	ldr	r3, [r7, #24]
 8003766:	43db      	mvns	r3, r3
 8003768:	4929      	ldr	r1, [pc, #164]	; (8003810 <HAL_GPIO_Init+0x2b0>)
 800376a:	4013      	ands	r3, r2
 800376c:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800376e:	683b      	ldr	r3, [r7, #0]
 8003770:	685b      	ldr	r3, [r3, #4]
 8003772:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003776:	2b00      	cmp	r3, #0
 8003778:	d006      	beq.n	8003788 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800377a:	4b25      	ldr	r3, [pc, #148]	; (8003810 <HAL_GPIO_Init+0x2b0>)
 800377c:	689a      	ldr	r2, [r3, #8]
 800377e:	4924      	ldr	r1, [pc, #144]	; (8003810 <HAL_GPIO_Init+0x2b0>)
 8003780:	69bb      	ldr	r3, [r7, #24]
 8003782:	4313      	orrs	r3, r2
 8003784:	608b      	str	r3, [r1, #8]
 8003786:	e006      	b.n	8003796 <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8003788:	4b21      	ldr	r3, [pc, #132]	; (8003810 <HAL_GPIO_Init+0x2b0>)
 800378a:	689a      	ldr	r2, [r3, #8]
 800378c:	69bb      	ldr	r3, [r7, #24]
 800378e:	43db      	mvns	r3, r3
 8003790:	491f      	ldr	r1, [pc, #124]	; (8003810 <HAL_GPIO_Init+0x2b0>)
 8003792:	4013      	ands	r3, r2
 8003794:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003796:	683b      	ldr	r3, [r7, #0]
 8003798:	685b      	ldr	r3, [r3, #4]
 800379a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d006      	beq.n	80037b0 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80037a2:	4b1b      	ldr	r3, [pc, #108]	; (8003810 <HAL_GPIO_Init+0x2b0>)
 80037a4:	68da      	ldr	r2, [r3, #12]
 80037a6:	491a      	ldr	r1, [pc, #104]	; (8003810 <HAL_GPIO_Init+0x2b0>)
 80037a8:	69bb      	ldr	r3, [r7, #24]
 80037aa:	4313      	orrs	r3, r2
 80037ac:	60cb      	str	r3, [r1, #12]
 80037ae:	e006      	b.n	80037be <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80037b0:	4b17      	ldr	r3, [pc, #92]	; (8003810 <HAL_GPIO_Init+0x2b0>)
 80037b2:	68da      	ldr	r2, [r3, #12]
 80037b4:	69bb      	ldr	r3, [r7, #24]
 80037b6:	43db      	mvns	r3, r3
 80037b8:	4915      	ldr	r1, [pc, #84]	; (8003810 <HAL_GPIO_Init+0x2b0>)
 80037ba:	4013      	ands	r3, r2
 80037bc:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80037be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037c0:	3301      	adds	r3, #1
 80037c2:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80037c4:	683b      	ldr	r3, [r7, #0]
 80037c6:	681a      	ldr	r2, [r3, #0]
 80037c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037ca:	fa22 f303 	lsr.w	r3, r2, r3
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	f47f aed0 	bne.w	8003574 <HAL_GPIO_Init+0x14>
  }
}
 80037d4:	bf00      	nop
 80037d6:	372c      	adds	r7, #44	; 0x2c
 80037d8:	46bd      	mov	sp, r7
 80037da:	bc80      	pop	{r7}
 80037dc:	4770      	bx	lr
 80037de:	bf00      	nop
 80037e0:	10210000 	.word	0x10210000
 80037e4:	10110000 	.word	0x10110000
 80037e8:	10120000 	.word	0x10120000
 80037ec:	10310000 	.word	0x10310000
 80037f0:	10320000 	.word	0x10320000
 80037f4:	10220000 	.word	0x10220000
 80037f8:	40021000 	.word	0x40021000
 80037fc:	40010000 	.word	0x40010000
 8003800:	40010800 	.word	0x40010800
 8003804:	40010c00 	.word	0x40010c00
 8003808:	40011000 	.word	0x40011000
 800380c:	40011400 	.word	0x40011400
 8003810:	40010400 	.word	0x40010400

08003814 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003814:	b480      	push	{r7}
 8003816:	b085      	sub	sp, #20
 8003818:	af00      	add	r7, sp, #0
 800381a:	6078      	str	r0, [r7, #4]
 800381c:	460b      	mov	r3, r1
 800381e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	689a      	ldr	r2, [r3, #8]
 8003824:	887b      	ldrh	r3, [r7, #2]
 8003826:	4013      	ands	r3, r2
 8003828:	2b00      	cmp	r3, #0
 800382a:	d002      	beq.n	8003832 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800382c:	2301      	movs	r3, #1
 800382e:	73fb      	strb	r3, [r7, #15]
 8003830:	e001      	b.n	8003836 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003832:	2300      	movs	r3, #0
 8003834:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003836:	7bfb      	ldrb	r3, [r7, #15]
}
 8003838:	4618      	mov	r0, r3
 800383a:	3714      	adds	r7, #20
 800383c:	46bd      	mov	sp, r7
 800383e:	bc80      	pop	{r7}
 8003840:	4770      	bx	lr

08003842 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003842:	b480      	push	{r7}
 8003844:	b083      	sub	sp, #12
 8003846:	af00      	add	r7, sp, #0
 8003848:	6078      	str	r0, [r7, #4]
 800384a:	460b      	mov	r3, r1
 800384c:	807b      	strh	r3, [r7, #2]
 800384e:	4613      	mov	r3, r2
 8003850:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003852:	787b      	ldrb	r3, [r7, #1]
 8003854:	2b00      	cmp	r3, #0
 8003856:	d003      	beq.n	8003860 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003858:	887a      	ldrh	r2, [r7, #2]
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800385e:	e003      	b.n	8003868 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003860:	887b      	ldrh	r3, [r7, #2]
 8003862:	041a      	lsls	r2, r3, #16
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	611a      	str	r2, [r3, #16]
}
 8003868:	bf00      	nop
 800386a:	370c      	adds	r7, #12
 800386c:	46bd      	mov	sp, r7
 800386e:	bc80      	pop	{r7}
 8003870:	4770      	bx	lr

08003872 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003872:	b480      	push	{r7}
 8003874:	b083      	sub	sp, #12
 8003876:	af00      	add	r7, sp, #0
 8003878:	6078      	str	r0, [r7, #4]
 800387a:	460b      	mov	r3, r1
 800387c:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != 0x00u)
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	68da      	ldr	r2, [r3, #12]
 8003882:	887b      	ldrh	r3, [r7, #2]
 8003884:	4013      	ands	r3, r2
 8003886:	2b00      	cmp	r3, #0
 8003888:	d003      	beq.n	8003892 <HAL_GPIO_TogglePin+0x20>
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800388a:	887a      	ldrh	r2, [r7, #2]
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	615a      	str	r2, [r3, #20]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
}
 8003890:	e002      	b.n	8003898 <HAL_GPIO_TogglePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003892:	887a      	ldrh	r2, [r7, #2]
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	611a      	str	r2, [r3, #16]
}
 8003898:	bf00      	nop
 800389a:	370c      	adds	r7, #12
 800389c:	46bd      	mov	sp, r7
 800389e:	bc80      	pop	{r7}
 80038a0:	4770      	bx	lr
	...

080038a4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80038a4:	b580      	push	{r7, lr}
 80038a6:	b084      	sub	sp, #16
 80038a8:	af00      	add	r7, sp, #0
 80038aa:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d101      	bne.n	80038b6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80038b2:	2301      	movs	r3, #1
 80038b4:	e10f      	b.n	8003ad6 <HAL_I2C_Init+0x232>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80038bc:	b2db      	uxtb	r3, r3
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d106      	bne.n	80038d0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	2200      	movs	r2, #0
 80038c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80038ca:	6878      	ldr	r0, [r7, #4]
 80038cc:	f7fe fea2 	bl	8002614 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	2224      	movs	r2, #36	; 0x24
 80038d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	681a      	ldr	r2, [r3, #0]
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	f022 0201 	bic.w	r2, r2, #1
 80038e6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80038e8:	f001 fdd6 	bl	8005498 <HAL_RCC_GetPCLK1Freq>
 80038ec:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	685b      	ldr	r3, [r3, #4]
 80038f2:	4a7b      	ldr	r2, [pc, #492]	; (8003ae0 <HAL_I2C_Init+0x23c>)
 80038f4:	4293      	cmp	r3, r2
 80038f6:	d807      	bhi.n	8003908 <HAL_I2C_Init+0x64>
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	4a7a      	ldr	r2, [pc, #488]	; (8003ae4 <HAL_I2C_Init+0x240>)
 80038fc:	4293      	cmp	r3, r2
 80038fe:	bf94      	ite	ls
 8003900:	2301      	movls	r3, #1
 8003902:	2300      	movhi	r3, #0
 8003904:	b2db      	uxtb	r3, r3
 8003906:	e006      	b.n	8003916 <HAL_I2C_Init+0x72>
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	4a77      	ldr	r2, [pc, #476]	; (8003ae8 <HAL_I2C_Init+0x244>)
 800390c:	4293      	cmp	r3, r2
 800390e:	bf94      	ite	ls
 8003910:	2301      	movls	r3, #1
 8003912:	2300      	movhi	r3, #0
 8003914:	b2db      	uxtb	r3, r3
 8003916:	2b00      	cmp	r3, #0
 8003918:	d001      	beq.n	800391e <HAL_I2C_Init+0x7a>
  {
    return HAL_ERROR;
 800391a:	2301      	movs	r3, #1
 800391c:	e0db      	b.n	8003ad6 <HAL_I2C_Init+0x232>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	4a72      	ldr	r2, [pc, #456]	; (8003aec <HAL_I2C_Init+0x248>)
 8003922:	fba2 2303 	umull	r2, r3, r2, r3
 8003926:	0c9b      	lsrs	r3, r3, #18
 8003928:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	685b      	ldr	r3, [r3, #4]
 8003930:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	68ba      	ldr	r2, [r7, #8]
 800393a:	430a      	orrs	r2, r1
 800393c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	6a1b      	ldr	r3, [r3, #32]
 8003944:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	685b      	ldr	r3, [r3, #4]
 800394c:	4a64      	ldr	r2, [pc, #400]	; (8003ae0 <HAL_I2C_Init+0x23c>)
 800394e:	4293      	cmp	r3, r2
 8003950:	d802      	bhi.n	8003958 <HAL_I2C_Init+0xb4>
 8003952:	68bb      	ldr	r3, [r7, #8]
 8003954:	3301      	adds	r3, #1
 8003956:	e009      	b.n	800396c <HAL_I2C_Init+0xc8>
 8003958:	68bb      	ldr	r3, [r7, #8]
 800395a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800395e:	fb02 f303 	mul.w	r3, r2, r3
 8003962:	4a63      	ldr	r2, [pc, #396]	; (8003af0 <HAL_I2C_Init+0x24c>)
 8003964:	fba2 2303 	umull	r2, r3, r2, r3
 8003968:	099b      	lsrs	r3, r3, #6
 800396a:	3301      	adds	r3, #1
 800396c:	687a      	ldr	r2, [r7, #4]
 800396e:	6812      	ldr	r2, [r2, #0]
 8003970:	430b      	orrs	r3, r1
 8003972:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	69db      	ldr	r3, [r3, #28]
 800397a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800397e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	685b      	ldr	r3, [r3, #4]
 8003986:	4956      	ldr	r1, [pc, #344]	; (8003ae0 <HAL_I2C_Init+0x23c>)
 8003988:	428b      	cmp	r3, r1
 800398a:	d80d      	bhi.n	80039a8 <HAL_I2C_Init+0x104>
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	1e59      	subs	r1, r3, #1
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	685b      	ldr	r3, [r3, #4]
 8003994:	005b      	lsls	r3, r3, #1
 8003996:	fbb1 f3f3 	udiv	r3, r1, r3
 800399a:	3301      	adds	r3, #1
 800399c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80039a0:	2b04      	cmp	r3, #4
 80039a2:	bf38      	it	cc
 80039a4:	2304      	movcc	r3, #4
 80039a6:	e04f      	b.n	8003a48 <HAL_I2C_Init+0x1a4>
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	689b      	ldr	r3, [r3, #8]
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d111      	bne.n	80039d4 <HAL_I2C_Init+0x130>
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	1e58      	subs	r0, r3, #1
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	6859      	ldr	r1, [r3, #4]
 80039b8:	460b      	mov	r3, r1
 80039ba:	005b      	lsls	r3, r3, #1
 80039bc:	440b      	add	r3, r1
 80039be:	fbb0 f3f3 	udiv	r3, r0, r3
 80039c2:	3301      	adds	r3, #1
 80039c4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	bf0c      	ite	eq
 80039cc:	2301      	moveq	r3, #1
 80039ce:	2300      	movne	r3, #0
 80039d0:	b2db      	uxtb	r3, r3
 80039d2:	e012      	b.n	80039fa <HAL_I2C_Init+0x156>
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	1e58      	subs	r0, r3, #1
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	6859      	ldr	r1, [r3, #4]
 80039dc:	460b      	mov	r3, r1
 80039de:	009b      	lsls	r3, r3, #2
 80039e0:	440b      	add	r3, r1
 80039e2:	0099      	lsls	r1, r3, #2
 80039e4:	440b      	add	r3, r1
 80039e6:	fbb0 f3f3 	udiv	r3, r0, r3
 80039ea:	3301      	adds	r3, #1
 80039ec:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	bf0c      	ite	eq
 80039f4:	2301      	moveq	r3, #1
 80039f6:	2300      	movne	r3, #0
 80039f8:	b2db      	uxtb	r3, r3
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d001      	beq.n	8003a02 <HAL_I2C_Init+0x15e>
 80039fe:	2301      	movs	r3, #1
 8003a00:	e022      	b.n	8003a48 <HAL_I2C_Init+0x1a4>
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	689b      	ldr	r3, [r3, #8]
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d10e      	bne.n	8003a28 <HAL_I2C_Init+0x184>
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	1e58      	subs	r0, r3, #1
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	6859      	ldr	r1, [r3, #4]
 8003a12:	460b      	mov	r3, r1
 8003a14:	005b      	lsls	r3, r3, #1
 8003a16:	440b      	add	r3, r1
 8003a18:	fbb0 f3f3 	udiv	r3, r0, r3
 8003a1c:	3301      	adds	r3, #1
 8003a1e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003a22:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003a26:	e00f      	b.n	8003a48 <HAL_I2C_Init+0x1a4>
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	1e58      	subs	r0, r3, #1
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	6859      	ldr	r1, [r3, #4]
 8003a30:	460b      	mov	r3, r1
 8003a32:	009b      	lsls	r3, r3, #2
 8003a34:	440b      	add	r3, r1
 8003a36:	0099      	lsls	r1, r3, #2
 8003a38:	440b      	add	r3, r1
 8003a3a:	fbb0 f3f3 	udiv	r3, r0, r3
 8003a3e:	3301      	adds	r3, #1
 8003a40:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003a44:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003a48:	6879      	ldr	r1, [r7, #4]
 8003a4a:	6809      	ldr	r1, [r1, #0]
 8003a4c:	4313      	orrs	r3, r2
 8003a4e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	69da      	ldr	r2, [r3, #28]
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	6a1b      	ldr	r3, [r3, #32]
 8003a62:	431a      	orrs	r2, r3
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	430a      	orrs	r2, r1
 8003a6a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	689b      	ldr	r3, [r3, #8]
 8003a72:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003a76:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003a7a:	687a      	ldr	r2, [r7, #4]
 8003a7c:	6911      	ldr	r1, [r2, #16]
 8003a7e:	687a      	ldr	r2, [r7, #4]
 8003a80:	68d2      	ldr	r2, [r2, #12]
 8003a82:	4311      	orrs	r1, r2
 8003a84:	687a      	ldr	r2, [r7, #4]
 8003a86:	6812      	ldr	r2, [r2, #0]
 8003a88:	430b      	orrs	r3, r1
 8003a8a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	68db      	ldr	r3, [r3, #12]
 8003a92:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	695a      	ldr	r2, [r3, #20]
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	699b      	ldr	r3, [r3, #24]
 8003a9e:	431a      	orrs	r2, r3
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	430a      	orrs	r2, r1
 8003aa6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	681a      	ldr	r2, [r3, #0]
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	f042 0201 	orr.w	r2, r2, #1
 8003ab6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	2200      	movs	r2, #0
 8003abc:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	2220      	movs	r2, #32
 8003ac2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	2200      	movs	r2, #0
 8003aca:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	2200      	movs	r2, #0
 8003ad0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003ad4:	2300      	movs	r3, #0
}
 8003ad6:	4618      	mov	r0, r3
 8003ad8:	3710      	adds	r7, #16
 8003ada:	46bd      	mov	sp, r7
 8003adc:	bd80      	pop	{r7, pc}
 8003ade:	bf00      	nop
 8003ae0:	000186a0 	.word	0x000186a0
 8003ae4:	001e847f 	.word	0x001e847f
 8003ae8:	003d08ff 	.word	0x003d08ff
 8003aec:	431bde83 	.word	0x431bde83
 8003af0:	10624dd3 	.word	0x10624dd3

08003af4 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003af4:	b580      	push	{r7, lr}
 8003af6:	b088      	sub	sp, #32
 8003af8:	af02      	add	r7, sp, #8
 8003afa:	60f8      	str	r0, [r7, #12]
 8003afc:	607a      	str	r2, [r7, #4]
 8003afe:	461a      	mov	r2, r3
 8003b00:	460b      	mov	r3, r1
 8003b02:	817b      	strh	r3, [r7, #10]
 8003b04:	4613      	mov	r3, r2
 8003b06:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003b08:	f7ff fc1a 	bl	8003340 <HAL_GetTick>
 8003b0c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b14:	b2db      	uxtb	r3, r3
 8003b16:	2b20      	cmp	r3, #32
 8003b18:	f040 80e0 	bne.w	8003cdc <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003b1c:	697b      	ldr	r3, [r7, #20]
 8003b1e:	9300      	str	r3, [sp, #0]
 8003b20:	2319      	movs	r3, #25
 8003b22:	2201      	movs	r2, #1
 8003b24:	4970      	ldr	r1, [pc, #448]	; (8003ce8 <HAL_I2C_Master_Transmit+0x1f4>)
 8003b26:	68f8      	ldr	r0, [r7, #12]
 8003b28:	f000 ff04 	bl	8004934 <I2C_WaitOnFlagUntilTimeout>
 8003b2c:	4603      	mov	r3, r0
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d001      	beq.n	8003b36 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8003b32:	2302      	movs	r3, #2
 8003b34:	e0d3      	b.n	8003cde <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003b3c:	2b01      	cmp	r3, #1
 8003b3e:	d101      	bne.n	8003b44 <HAL_I2C_Master_Transmit+0x50>
 8003b40:	2302      	movs	r3, #2
 8003b42:	e0cc      	b.n	8003cde <HAL_I2C_Master_Transmit+0x1ea>
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	2201      	movs	r2, #1
 8003b48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	f003 0301 	and.w	r3, r3, #1
 8003b56:	2b01      	cmp	r3, #1
 8003b58:	d007      	beq.n	8003b6a <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	681a      	ldr	r2, [r3, #0]
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	f042 0201 	orr.w	r2, r2, #1
 8003b68:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	681a      	ldr	r2, [r3, #0]
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003b78:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	2221      	movs	r2, #33	; 0x21
 8003b7e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	2210      	movs	r2, #16
 8003b86:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	2200      	movs	r2, #0
 8003b8e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	687a      	ldr	r2, [r7, #4]
 8003b94:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	893a      	ldrh	r2, [r7, #8]
 8003b9a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ba0:	b29a      	uxth	r2, r3
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	4a50      	ldr	r2, [pc, #320]	; (8003cec <HAL_I2C_Master_Transmit+0x1f8>)
 8003baa:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003bac:	8979      	ldrh	r1, [r7, #10]
 8003bae:	697b      	ldr	r3, [r7, #20]
 8003bb0:	6a3a      	ldr	r2, [r7, #32]
 8003bb2:	68f8      	ldr	r0, [r7, #12]
 8003bb4:	f000 fcee 	bl	8004594 <I2C_MasterRequestWrite>
 8003bb8:	4603      	mov	r3, r0
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d001      	beq.n	8003bc2 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8003bbe:	2301      	movs	r3, #1
 8003bc0:	e08d      	b.n	8003cde <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003bc2:	2300      	movs	r3, #0
 8003bc4:	613b      	str	r3, [r7, #16]
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	695b      	ldr	r3, [r3, #20]
 8003bcc:	613b      	str	r3, [r7, #16]
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	699b      	ldr	r3, [r3, #24]
 8003bd4:	613b      	str	r3, [r7, #16]
 8003bd6:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8003bd8:	e066      	b.n	8003ca8 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003bda:	697a      	ldr	r2, [r7, #20]
 8003bdc:	6a39      	ldr	r1, [r7, #32]
 8003bde:	68f8      	ldr	r0, [r7, #12]
 8003be0:	f000 ff7e 	bl	8004ae0 <I2C_WaitOnTXEFlagUntilTimeout>
 8003be4:	4603      	mov	r3, r0
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d00d      	beq.n	8003c06 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bee:	2b04      	cmp	r3, #4
 8003bf0:	d107      	bne.n	8003c02 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	681a      	ldr	r2, [r3, #0]
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003c00:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003c02:	2301      	movs	r3, #1
 8003c04:	e06b      	b.n	8003cde <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c0a:	781a      	ldrb	r2, [r3, #0]
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c16:	1c5a      	adds	r2, r3, #1
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c20:	b29b      	uxth	r3, r3
 8003c22:	3b01      	subs	r3, #1
 8003c24:	b29a      	uxth	r2, r3
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c2e:	3b01      	subs	r3, #1
 8003c30:	b29a      	uxth	r2, r3
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	695b      	ldr	r3, [r3, #20]
 8003c3c:	f003 0304 	and.w	r3, r3, #4
 8003c40:	2b04      	cmp	r3, #4
 8003c42:	d11b      	bne.n	8003c7c <HAL_I2C_Master_Transmit+0x188>
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d017      	beq.n	8003c7c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c50:	781a      	ldrb	r2, [r3, #0]
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c5c:	1c5a      	adds	r2, r3, #1
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c66:	b29b      	uxth	r3, r3
 8003c68:	3b01      	subs	r3, #1
 8003c6a:	b29a      	uxth	r2, r3
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c74:	3b01      	subs	r3, #1
 8003c76:	b29a      	uxth	r2, r3
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003c7c:	697a      	ldr	r2, [r7, #20]
 8003c7e:	6a39      	ldr	r1, [r7, #32]
 8003c80:	68f8      	ldr	r0, [r7, #12]
 8003c82:	f000 ff6e 	bl	8004b62 <I2C_WaitOnBTFFlagUntilTimeout>
 8003c86:	4603      	mov	r3, r0
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d00d      	beq.n	8003ca8 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c90:	2b04      	cmp	r3, #4
 8003c92:	d107      	bne.n	8003ca4 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	681a      	ldr	r2, [r3, #0]
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003ca2:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003ca4:	2301      	movs	r3, #1
 8003ca6:	e01a      	b.n	8003cde <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d194      	bne.n	8003bda <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	681a      	ldr	r2, [r3, #0]
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003cbe:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	2220      	movs	r2, #32
 8003cc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	2200      	movs	r2, #0
 8003ccc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	2200      	movs	r2, #0
 8003cd4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003cd8:	2300      	movs	r3, #0
 8003cda:	e000      	b.n	8003cde <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8003cdc:	2302      	movs	r3, #2
  }
}
 8003cde:	4618      	mov	r0, r3
 8003ce0:	3718      	adds	r7, #24
 8003ce2:	46bd      	mov	sp, r7
 8003ce4:	bd80      	pop	{r7, pc}
 8003ce6:	bf00      	nop
 8003ce8:	00100002 	.word	0x00100002
 8003cec:	ffff0000 	.word	0xffff0000

08003cf0 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003cf0:	b580      	push	{r7, lr}
 8003cf2:	b088      	sub	sp, #32
 8003cf4:	af02      	add	r7, sp, #8
 8003cf6:	60f8      	str	r0, [r7, #12]
 8003cf8:	4608      	mov	r0, r1
 8003cfa:	4611      	mov	r1, r2
 8003cfc:	461a      	mov	r2, r3
 8003cfe:	4603      	mov	r3, r0
 8003d00:	817b      	strh	r3, [r7, #10]
 8003d02:	460b      	mov	r3, r1
 8003d04:	813b      	strh	r3, [r7, #8]
 8003d06:	4613      	mov	r3, r2
 8003d08:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003d0a:	f7ff fb19 	bl	8003340 <HAL_GetTick>
 8003d0e:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d16:	b2db      	uxtb	r3, r3
 8003d18:	2b20      	cmp	r3, #32
 8003d1a:	f040 80d9 	bne.w	8003ed0 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003d1e:	697b      	ldr	r3, [r7, #20]
 8003d20:	9300      	str	r3, [sp, #0]
 8003d22:	2319      	movs	r3, #25
 8003d24:	2201      	movs	r2, #1
 8003d26:	496d      	ldr	r1, [pc, #436]	; (8003edc <HAL_I2C_Mem_Write+0x1ec>)
 8003d28:	68f8      	ldr	r0, [r7, #12]
 8003d2a:	f000 fe03 	bl	8004934 <I2C_WaitOnFlagUntilTimeout>
 8003d2e:	4603      	mov	r3, r0
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d001      	beq.n	8003d38 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8003d34:	2302      	movs	r3, #2
 8003d36:	e0cc      	b.n	8003ed2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003d3e:	2b01      	cmp	r3, #1
 8003d40:	d101      	bne.n	8003d46 <HAL_I2C_Mem_Write+0x56>
 8003d42:	2302      	movs	r3, #2
 8003d44:	e0c5      	b.n	8003ed2 <HAL_I2C_Mem_Write+0x1e2>
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	2201      	movs	r2, #1
 8003d4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	f003 0301 	and.w	r3, r3, #1
 8003d58:	2b01      	cmp	r3, #1
 8003d5a:	d007      	beq.n	8003d6c <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	681a      	ldr	r2, [r3, #0]
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	f042 0201 	orr.w	r2, r2, #1
 8003d6a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	681a      	ldr	r2, [r3, #0]
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003d7a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	2221      	movs	r2, #33	; 0x21
 8003d80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	2240      	movs	r2, #64	; 0x40
 8003d88:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	2200      	movs	r2, #0
 8003d90:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	6a3a      	ldr	r2, [r7, #32]
 8003d96:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003d9c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003da2:	b29a      	uxth	r2, r3
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	4a4d      	ldr	r2, [pc, #308]	; (8003ee0 <HAL_I2C_Mem_Write+0x1f0>)
 8003dac:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003dae:	88f8      	ldrh	r0, [r7, #6]
 8003db0:	893a      	ldrh	r2, [r7, #8]
 8003db2:	8979      	ldrh	r1, [r7, #10]
 8003db4:	697b      	ldr	r3, [r7, #20]
 8003db6:	9301      	str	r3, [sp, #4]
 8003db8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003dba:	9300      	str	r3, [sp, #0]
 8003dbc:	4603      	mov	r3, r0
 8003dbe:	68f8      	ldr	r0, [r7, #12]
 8003dc0:	f000 fc5e 	bl	8004680 <I2C_RequestMemoryWrite>
 8003dc4:	4603      	mov	r3, r0
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d052      	beq.n	8003e70 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8003dca:	2301      	movs	r3, #1
 8003dcc:	e081      	b.n	8003ed2 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003dce:	697a      	ldr	r2, [r7, #20]
 8003dd0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003dd2:	68f8      	ldr	r0, [r7, #12]
 8003dd4:	f000 fe84 	bl	8004ae0 <I2C_WaitOnTXEFlagUntilTimeout>
 8003dd8:	4603      	mov	r3, r0
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d00d      	beq.n	8003dfa <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003de2:	2b04      	cmp	r3, #4
 8003de4:	d107      	bne.n	8003df6 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	681a      	ldr	r2, [r3, #0]
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003df4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003df6:	2301      	movs	r3, #1
 8003df8:	e06b      	b.n	8003ed2 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dfe:	781a      	ldrb	r2, [r3, #0]
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e0a:	1c5a      	adds	r2, r3, #1
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e14:	3b01      	subs	r3, #1
 8003e16:	b29a      	uxth	r2, r3
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e20:	b29b      	uxth	r3, r3
 8003e22:	3b01      	subs	r3, #1
 8003e24:	b29a      	uxth	r2, r3
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	695b      	ldr	r3, [r3, #20]
 8003e30:	f003 0304 	and.w	r3, r3, #4
 8003e34:	2b04      	cmp	r3, #4
 8003e36:	d11b      	bne.n	8003e70 <HAL_I2C_Mem_Write+0x180>
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d017      	beq.n	8003e70 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e44:	781a      	ldrb	r2, [r3, #0]
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e50:	1c5a      	adds	r2, r3, #1
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e5a:	3b01      	subs	r3, #1
 8003e5c:	b29a      	uxth	r2, r3
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e66:	b29b      	uxth	r3, r3
 8003e68:	3b01      	subs	r3, #1
 8003e6a:	b29a      	uxth	r2, r3
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d1aa      	bne.n	8003dce <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003e78:	697a      	ldr	r2, [r7, #20]
 8003e7a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003e7c:	68f8      	ldr	r0, [r7, #12]
 8003e7e:	f000 fe70 	bl	8004b62 <I2C_WaitOnBTFFlagUntilTimeout>
 8003e82:	4603      	mov	r3, r0
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d00d      	beq.n	8003ea4 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e8c:	2b04      	cmp	r3, #4
 8003e8e:	d107      	bne.n	8003ea0 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	681a      	ldr	r2, [r3, #0]
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003e9e:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003ea0:	2301      	movs	r3, #1
 8003ea2:	e016      	b.n	8003ed2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	681a      	ldr	r2, [r3, #0]
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003eb2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	2220      	movs	r2, #32
 8003eb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	2200      	movs	r2, #0
 8003ec0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	2200      	movs	r2, #0
 8003ec8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003ecc:	2300      	movs	r3, #0
 8003ece:	e000      	b.n	8003ed2 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8003ed0:	2302      	movs	r3, #2
  }
}
 8003ed2:	4618      	mov	r0, r3
 8003ed4:	3718      	adds	r7, #24
 8003ed6:	46bd      	mov	sp, r7
 8003ed8:	bd80      	pop	{r7, pc}
 8003eda:	bf00      	nop
 8003edc:	00100002 	.word	0x00100002
 8003ee0:	ffff0000 	.word	0xffff0000

08003ee4 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003ee4:	b580      	push	{r7, lr}
 8003ee6:	b08c      	sub	sp, #48	; 0x30
 8003ee8:	af02      	add	r7, sp, #8
 8003eea:	60f8      	str	r0, [r7, #12]
 8003eec:	4608      	mov	r0, r1
 8003eee:	4611      	mov	r1, r2
 8003ef0:	461a      	mov	r2, r3
 8003ef2:	4603      	mov	r3, r0
 8003ef4:	817b      	strh	r3, [r7, #10]
 8003ef6:	460b      	mov	r3, r1
 8003ef8:	813b      	strh	r3, [r7, #8]
 8003efa:	4613      	mov	r3, r2
 8003efc:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003efe:	f7ff fa1f 	bl	8003340 <HAL_GetTick>
 8003f02:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f0a:	b2db      	uxtb	r3, r3
 8003f0c:	2b20      	cmp	r3, #32
 8003f0e:	f040 8218 	bne.w	8004342 <HAL_I2C_Mem_Read+0x45e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003f12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f14:	9300      	str	r3, [sp, #0]
 8003f16:	2319      	movs	r3, #25
 8003f18:	2201      	movs	r2, #1
 8003f1a:	4981      	ldr	r1, [pc, #516]	; (8004120 <HAL_I2C_Mem_Read+0x23c>)
 8003f1c:	68f8      	ldr	r0, [r7, #12]
 8003f1e:	f000 fd09 	bl	8004934 <I2C_WaitOnFlagUntilTimeout>
 8003f22:	4603      	mov	r3, r0
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d001      	beq.n	8003f2c <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8003f28:	2302      	movs	r3, #2
 8003f2a:	e20b      	b.n	8004344 <HAL_I2C_Mem_Read+0x460>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003f32:	2b01      	cmp	r3, #1
 8003f34:	d101      	bne.n	8003f3a <HAL_I2C_Mem_Read+0x56>
 8003f36:	2302      	movs	r3, #2
 8003f38:	e204      	b.n	8004344 <HAL_I2C_Mem_Read+0x460>
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	2201      	movs	r2, #1
 8003f3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	f003 0301 	and.w	r3, r3, #1
 8003f4c:	2b01      	cmp	r3, #1
 8003f4e:	d007      	beq.n	8003f60 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	681a      	ldr	r2, [r3, #0]
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	f042 0201 	orr.w	r2, r2, #1
 8003f5e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	681a      	ldr	r2, [r3, #0]
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003f6e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	2222      	movs	r2, #34	; 0x22
 8003f74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	2240      	movs	r2, #64	; 0x40
 8003f7c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	2200      	movs	r2, #0
 8003f84:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003f8a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8003f90:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f96:	b29a      	uxth	r2, r3
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	4a61      	ldr	r2, [pc, #388]	; (8004124 <HAL_I2C_Mem_Read+0x240>)
 8003fa0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003fa2:	88f8      	ldrh	r0, [r7, #6]
 8003fa4:	893a      	ldrh	r2, [r7, #8]
 8003fa6:	8979      	ldrh	r1, [r7, #10]
 8003fa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003faa:	9301      	str	r3, [sp, #4]
 8003fac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003fae:	9300      	str	r3, [sp, #0]
 8003fb0:	4603      	mov	r3, r0
 8003fb2:	68f8      	ldr	r0, [r7, #12]
 8003fb4:	f000 fbee 	bl	8004794 <I2C_RequestMemoryRead>
 8003fb8:	4603      	mov	r3, r0
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d001      	beq.n	8003fc2 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8003fbe:	2301      	movs	r3, #1
 8003fc0:	e1c0      	b.n	8004344 <HAL_I2C_Mem_Read+0x460>
    }

    if (hi2c->XferSize == 0U)
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d113      	bne.n	8003ff2 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003fca:	2300      	movs	r3, #0
 8003fcc:	623b      	str	r3, [r7, #32]
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	695b      	ldr	r3, [r3, #20]
 8003fd4:	623b      	str	r3, [r7, #32]
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	699b      	ldr	r3, [r3, #24]
 8003fdc:	623b      	str	r3, [r7, #32]
 8003fde:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	681a      	ldr	r2, [r3, #0]
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003fee:	601a      	str	r2, [r3, #0]
 8003ff0:	e194      	b.n	800431c <HAL_I2C_Mem_Read+0x438>
    }
    else if (hi2c->XferSize == 1U)
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ff6:	2b01      	cmp	r3, #1
 8003ff8:	d11d      	bne.n	8004036 <HAL_I2C_Mem_Read+0x152>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	681a      	ldr	r2, [r3, #0]
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004008:	601a      	str	r2, [r3, #0]
 800400a:	b672      	cpsid	i
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800400c:	2300      	movs	r3, #0
 800400e:	61fb      	str	r3, [r7, #28]
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	695b      	ldr	r3, [r3, #20]
 8004016:	61fb      	str	r3, [r7, #28]
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	699b      	ldr	r3, [r3, #24]
 800401e:	61fb      	str	r3, [r7, #28]
 8004020:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	681a      	ldr	r2, [r3, #0]
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004030:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8004032:	b662      	cpsie	i
 8004034:	e172      	b.n	800431c <HAL_I2C_Mem_Read+0x438>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800403a:	2b02      	cmp	r3, #2
 800403c:	d11d      	bne.n	800407a <HAL_I2C_Mem_Read+0x196>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	681a      	ldr	r2, [r3, #0]
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800404c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800404e:	b672      	cpsid	i
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004050:	2300      	movs	r3, #0
 8004052:	61bb      	str	r3, [r7, #24]
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	695b      	ldr	r3, [r3, #20]
 800405a:	61bb      	str	r3, [r7, #24]
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	699b      	ldr	r3, [r3, #24]
 8004062:	61bb      	str	r3, [r7, #24]
 8004064:	69bb      	ldr	r3, [r7, #24]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	681a      	ldr	r2, [r3, #0]
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004074:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8004076:	b662      	cpsie	i
 8004078:	e150      	b.n	800431c <HAL_I2C_Mem_Read+0x438>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	681a      	ldr	r2, [r3, #0]
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004088:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800408a:	2300      	movs	r3, #0
 800408c:	617b      	str	r3, [r7, #20]
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	695b      	ldr	r3, [r3, #20]
 8004094:	617b      	str	r3, [r7, #20]
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	699b      	ldr	r3, [r3, #24]
 800409c:	617b      	str	r3, [r7, #20]
 800409e:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80040a0:	e13c      	b.n	800431c <HAL_I2C_Mem_Read+0x438>
    {
      if (hi2c->XferSize <= 3U)
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80040a6:	2b03      	cmp	r3, #3
 80040a8:	f200 80f5 	bhi.w	8004296 <HAL_I2C_Mem_Read+0x3b2>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80040b0:	2b01      	cmp	r3, #1
 80040b2:	d123      	bne.n	80040fc <HAL_I2C_Mem_Read+0x218>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80040b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80040b6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80040b8:	68f8      	ldr	r0, [r7, #12]
 80040ba:	f000 fd93 	bl	8004be4 <I2C_WaitOnRXNEFlagUntilTimeout>
 80040be:	4603      	mov	r3, r0
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d001      	beq.n	80040c8 <HAL_I2C_Mem_Read+0x1e4>
          {
            return HAL_ERROR;
 80040c4:	2301      	movs	r3, #1
 80040c6:	e13d      	b.n	8004344 <HAL_I2C_Mem_Read+0x460>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	691a      	ldr	r2, [r3, #16]
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040d2:	b2d2      	uxtb	r2, r2
 80040d4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040da:	1c5a      	adds	r2, r3, #1
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80040e4:	3b01      	subs	r3, #1
 80040e6:	b29a      	uxth	r2, r3
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80040f0:	b29b      	uxth	r3, r3
 80040f2:	3b01      	subs	r3, #1
 80040f4:	b29a      	uxth	r2, r3
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	855a      	strh	r2, [r3, #42]	; 0x2a
 80040fa:	e10f      	b.n	800431c <HAL_I2C_Mem_Read+0x438>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004100:	2b02      	cmp	r3, #2
 8004102:	d150      	bne.n	80041a6 <HAL_I2C_Mem_Read+0x2c2>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004104:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004106:	9300      	str	r3, [sp, #0]
 8004108:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800410a:	2200      	movs	r2, #0
 800410c:	4906      	ldr	r1, [pc, #24]	; (8004128 <HAL_I2C_Mem_Read+0x244>)
 800410e:	68f8      	ldr	r0, [r7, #12]
 8004110:	f000 fc10 	bl	8004934 <I2C_WaitOnFlagUntilTimeout>
 8004114:	4603      	mov	r3, r0
 8004116:	2b00      	cmp	r3, #0
 8004118:	d008      	beq.n	800412c <HAL_I2C_Mem_Read+0x248>
          {
            return HAL_ERROR;
 800411a:	2301      	movs	r3, #1
 800411c:	e112      	b.n	8004344 <HAL_I2C_Mem_Read+0x460>
 800411e:	bf00      	nop
 8004120:	00100002 	.word	0x00100002
 8004124:	ffff0000 	.word	0xffff0000
 8004128:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 800412c:	b672      	cpsid	i
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	681a      	ldr	r2, [r3, #0]
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800413c:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	691a      	ldr	r2, [r3, #16]
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004148:	b2d2      	uxtb	r2, r2
 800414a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004150:	1c5a      	adds	r2, r3, #1
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800415a:	3b01      	subs	r3, #1
 800415c:	b29a      	uxth	r2, r3
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004166:	b29b      	uxth	r3, r3
 8004168:	3b01      	subs	r3, #1
 800416a:	b29a      	uxth	r2, r3
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8004170:	b662      	cpsie	i

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	691a      	ldr	r2, [r3, #16]
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800417c:	b2d2      	uxtb	r2, r2
 800417e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004184:	1c5a      	adds	r2, r3, #1
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800418e:	3b01      	subs	r3, #1
 8004190:	b29a      	uxth	r2, r3
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800419a:	b29b      	uxth	r3, r3
 800419c:	3b01      	subs	r3, #1
 800419e:	b29a      	uxth	r2, r3
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	855a      	strh	r2, [r3, #42]	; 0x2a
 80041a4:	e0ba      	b.n	800431c <HAL_I2C_Mem_Read+0x438>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80041a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041a8:	9300      	str	r3, [sp, #0]
 80041aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80041ac:	2200      	movs	r2, #0
 80041ae:	4967      	ldr	r1, [pc, #412]	; (800434c <HAL_I2C_Mem_Read+0x468>)
 80041b0:	68f8      	ldr	r0, [r7, #12]
 80041b2:	f000 fbbf 	bl	8004934 <I2C_WaitOnFlagUntilTimeout>
 80041b6:	4603      	mov	r3, r0
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d001      	beq.n	80041c0 <HAL_I2C_Mem_Read+0x2dc>
          {
            return HAL_ERROR;
 80041bc:	2301      	movs	r3, #1
 80041be:	e0c1      	b.n	8004344 <HAL_I2C_Mem_Read+0x460>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	681a      	ldr	r2, [r3, #0]
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80041ce:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80041d0:	b672      	cpsid	i
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	691a      	ldr	r2, [r3, #16]
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041dc:	b2d2      	uxtb	r2, r2
 80041de:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041e4:	1c5a      	adds	r2, r3, #1
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80041ee:	3b01      	subs	r3, #1
 80041f0:	b29a      	uxth	r2, r3
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80041fa:	b29b      	uxth	r3, r3
 80041fc:	3b01      	subs	r3, #1
 80041fe:	b29a      	uxth	r2, r3
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004204:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004206:	9300      	str	r3, [sp, #0]
 8004208:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800420a:	2200      	movs	r2, #0
 800420c:	494f      	ldr	r1, [pc, #316]	; (800434c <HAL_I2C_Mem_Read+0x468>)
 800420e:	68f8      	ldr	r0, [r7, #12]
 8004210:	f000 fb90 	bl	8004934 <I2C_WaitOnFlagUntilTimeout>
 8004214:	4603      	mov	r3, r0
 8004216:	2b00      	cmp	r3, #0
 8004218:	d001      	beq.n	800421e <HAL_I2C_Mem_Read+0x33a>
          {
            return HAL_ERROR;
 800421a:	2301      	movs	r3, #1
 800421c:	e092      	b.n	8004344 <HAL_I2C_Mem_Read+0x460>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	681a      	ldr	r2, [r3, #0]
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800422c:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	691a      	ldr	r2, [r3, #16]
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004238:	b2d2      	uxtb	r2, r2
 800423a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004240:	1c5a      	adds	r2, r3, #1
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800424a:	3b01      	subs	r3, #1
 800424c:	b29a      	uxth	r2, r3
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004256:	b29b      	uxth	r3, r3
 8004258:	3b01      	subs	r3, #1
 800425a:	b29a      	uxth	r2, r3
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8004260:	b662      	cpsie	i

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	691a      	ldr	r2, [r3, #16]
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800426c:	b2d2      	uxtb	r2, r2
 800426e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004274:	1c5a      	adds	r2, r3, #1
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800427e:	3b01      	subs	r3, #1
 8004280:	b29a      	uxth	r2, r3
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800428a:	b29b      	uxth	r3, r3
 800428c:	3b01      	subs	r3, #1
 800428e:	b29a      	uxth	r2, r3
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004294:	e042      	b.n	800431c <HAL_I2C_Mem_Read+0x438>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004296:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004298:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800429a:	68f8      	ldr	r0, [r7, #12]
 800429c:	f000 fca2 	bl	8004be4 <I2C_WaitOnRXNEFlagUntilTimeout>
 80042a0:	4603      	mov	r3, r0
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d001      	beq.n	80042aa <HAL_I2C_Mem_Read+0x3c6>
        {
          return HAL_ERROR;
 80042a6:	2301      	movs	r3, #1
 80042a8:	e04c      	b.n	8004344 <HAL_I2C_Mem_Read+0x460>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	691a      	ldr	r2, [r3, #16]
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042b4:	b2d2      	uxtb	r2, r2
 80042b6:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042bc:	1c5a      	adds	r2, r3, #1
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80042c6:	3b01      	subs	r3, #1
 80042c8:	b29a      	uxth	r2, r3
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80042d2:	b29b      	uxth	r3, r3
 80042d4:	3b01      	subs	r3, #1
 80042d6:	b29a      	uxth	r2, r3
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	695b      	ldr	r3, [r3, #20]
 80042e2:	f003 0304 	and.w	r3, r3, #4
 80042e6:	2b04      	cmp	r3, #4
 80042e8:	d118      	bne.n	800431c <HAL_I2C_Mem_Read+0x438>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	691a      	ldr	r2, [r3, #16]
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042f4:	b2d2      	uxtb	r2, r2
 80042f6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042fc:	1c5a      	adds	r2, r3, #1
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004306:	3b01      	subs	r3, #1
 8004308:	b29a      	uxth	r2, r3
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004312:	b29b      	uxth	r3, r3
 8004314:	3b01      	subs	r3, #1
 8004316:	b29a      	uxth	r2, r3
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004320:	2b00      	cmp	r3, #0
 8004322:	f47f aebe 	bne.w	80040a2 <HAL_I2C_Mem_Read+0x1be>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	2220      	movs	r2, #32
 800432a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	2200      	movs	r2, #0
 8004332:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	2200      	movs	r2, #0
 800433a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800433e:	2300      	movs	r3, #0
 8004340:	e000      	b.n	8004344 <HAL_I2C_Mem_Read+0x460>
  }
  else
  {
    return HAL_BUSY;
 8004342:	2302      	movs	r3, #2
  }
}
 8004344:	4618      	mov	r0, r3
 8004346:	3728      	adds	r7, #40	; 0x28
 8004348:	46bd      	mov	sp, r7
 800434a:	bd80      	pop	{r7, pc}
 800434c:	00010004 	.word	0x00010004

08004350 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8004350:	b580      	push	{r7, lr}
 8004352:	b08a      	sub	sp, #40	; 0x28
 8004354:	af02      	add	r7, sp, #8
 8004356:	60f8      	str	r0, [r7, #12]
 8004358:	607a      	str	r2, [r7, #4]
 800435a:	603b      	str	r3, [r7, #0]
 800435c:	460b      	mov	r3, r1
 800435e:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8004360:	f7fe ffee 	bl	8003340 <HAL_GetTick>
 8004364:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 1U;
 8004366:	2301      	movs	r3, #1
 8004368:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004370:	b2db      	uxtb	r3, r3
 8004372:	2b20      	cmp	r3, #32
 8004374:	f040 8105 	bne.w	8004582 <HAL_I2C_IsDeviceReady+0x232>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004378:	69fb      	ldr	r3, [r7, #28]
 800437a:	9300      	str	r3, [sp, #0]
 800437c:	2319      	movs	r3, #25
 800437e:	2201      	movs	r2, #1
 8004380:	4982      	ldr	r1, [pc, #520]	; (800458c <HAL_I2C_IsDeviceReady+0x23c>)
 8004382:	68f8      	ldr	r0, [r7, #12]
 8004384:	f000 fad6 	bl	8004934 <I2C_WaitOnFlagUntilTimeout>
 8004388:	4603      	mov	r3, r0
 800438a:	2b00      	cmp	r3, #0
 800438c:	d001      	beq.n	8004392 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 800438e:	2302      	movs	r3, #2
 8004390:	e0f8      	b.n	8004584 <HAL_I2C_IsDeviceReady+0x234>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004398:	2b01      	cmp	r3, #1
 800439a:	d101      	bne.n	80043a0 <HAL_I2C_IsDeviceReady+0x50>
 800439c:	2302      	movs	r3, #2
 800439e:	e0f1      	b.n	8004584 <HAL_I2C_IsDeviceReady+0x234>
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	2201      	movs	r2, #1
 80043a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	f003 0301 	and.w	r3, r3, #1
 80043b2:	2b01      	cmp	r3, #1
 80043b4:	d007      	beq.n	80043c6 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	681a      	ldr	r2, [r3, #0]
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	f042 0201 	orr.w	r2, r2, #1
 80043c4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	681a      	ldr	r2, [r3, #0]
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80043d4:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	2224      	movs	r2, #36	; 0x24
 80043da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	2200      	movs	r2, #0
 80043e2:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	4a6a      	ldr	r2, [pc, #424]	; (8004590 <HAL_I2C_IsDeviceReady+0x240>)
 80043e8:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	681a      	ldr	r2, [r3, #0]
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80043f8:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 80043fa:	69fb      	ldr	r3, [r7, #28]
 80043fc:	9300      	str	r3, [sp, #0]
 80043fe:	683b      	ldr	r3, [r7, #0]
 8004400:	2200      	movs	r2, #0
 8004402:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004406:	68f8      	ldr	r0, [r7, #12]
 8004408:	f000 fa94 	bl	8004934 <I2C_WaitOnFlagUntilTimeout>
 800440c:	4603      	mov	r3, r0
 800440e:	2b00      	cmp	r3, #0
 8004410:	d001      	beq.n	8004416 <HAL_I2C_IsDeviceReady+0xc6>
      {
        return HAL_ERROR;
 8004412:	2301      	movs	r3, #1
 8004414:	e0b6      	b.n	8004584 <HAL_I2C_IsDeviceReady+0x234>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004416:	897b      	ldrh	r3, [r7, #10]
 8004418:	b2db      	uxtb	r3, r3
 800441a:	461a      	mov	r2, r3
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004424:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8004426:	f7fe ff8b 	bl	8003340 <HAL_GetTick>
 800442a:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	695b      	ldr	r3, [r3, #20]
 8004432:	f003 0302 	and.w	r3, r3, #2
 8004436:	2b02      	cmp	r3, #2
 8004438:	bf0c      	ite	eq
 800443a:	2301      	moveq	r3, #1
 800443c:	2300      	movne	r3, #0
 800443e:	b2db      	uxtb	r3, r3
 8004440:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	695b      	ldr	r3, [r3, #20]
 8004448:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800444c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004450:	bf0c      	ite	eq
 8004452:	2301      	moveq	r3, #1
 8004454:	2300      	movne	r3, #0
 8004456:	b2db      	uxtb	r3, r3
 8004458:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 800445a:	e025      	b.n	80044a8 <HAL_I2C_IsDeviceReady+0x158>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800445c:	f7fe ff70 	bl	8003340 <HAL_GetTick>
 8004460:	4602      	mov	r2, r0
 8004462:	69fb      	ldr	r3, [r7, #28]
 8004464:	1ad3      	subs	r3, r2, r3
 8004466:	683a      	ldr	r2, [r7, #0]
 8004468:	429a      	cmp	r2, r3
 800446a:	d302      	bcc.n	8004472 <HAL_I2C_IsDeviceReady+0x122>
 800446c:	683b      	ldr	r3, [r7, #0]
 800446e:	2b00      	cmp	r3, #0
 8004470:	d103      	bne.n	800447a <HAL_I2C_IsDeviceReady+0x12a>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	22a0      	movs	r2, #160	; 0xa0
 8004476:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	695b      	ldr	r3, [r3, #20]
 8004480:	f003 0302 	and.w	r3, r3, #2
 8004484:	2b02      	cmp	r3, #2
 8004486:	bf0c      	ite	eq
 8004488:	2301      	moveq	r3, #1
 800448a:	2300      	movne	r3, #0
 800448c:	b2db      	uxtb	r3, r3
 800448e:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	695b      	ldr	r3, [r3, #20]
 8004496:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800449a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800449e:	bf0c      	ite	eq
 80044a0:	2301      	moveq	r3, #1
 80044a2:	2300      	movne	r3, #0
 80044a4:	b2db      	uxtb	r3, r3
 80044a6:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80044ae:	b2db      	uxtb	r3, r3
 80044b0:	2ba0      	cmp	r3, #160	; 0xa0
 80044b2:	d005      	beq.n	80044c0 <HAL_I2C_IsDeviceReady+0x170>
 80044b4:	7dfb      	ldrb	r3, [r7, #23]
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d102      	bne.n	80044c0 <HAL_I2C_IsDeviceReady+0x170>
 80044ba:	7dbb      	ldrb	r3, [r7, #22]
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d0cd      	beq.n	800445c <HAL_I2C_IsDeviceReady+0x10c>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	2220      	movs	r2, #32
 80044c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	695b      	ldr	r3, [r3, #20]
 80044ce:	f003 0302 	and.w	r3, r3, #2
 80044d2:	2b02      	cmp	r3, #2
 80044d4:	d129      	bne.n	800452a <HAL_I2C_IsDeviceReady+0x1da>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	681a      	ldr	r2, [r3, #0]
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80044e4:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80044e6:	2300      	movs	r3, #0
 80044e8:	613b      	str	r3, [r7, #16]
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	695b      	ldr	r3, [r3, #20]
 80044f0:	613b      	str	r3, [r7, #16]
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	699b      	ldr	r3, [r3, #24]
 80044f8:	613b      	str	r3, [r7, #16]
 80044fa:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80044fc:	69fb      	ldr	r3, [r7, #28]
 80044fe:	9300      	str	r3, [sp, #0]
 8004500:	2319      	movs	r3, #25
 8004502:	2201      	movs	r2, #1
 8004504:	4921      	ldr	r1, [pc, #132]	; (800458c <HAL_I2C_IsDeviceReady+0x23c>)
 8004506:	68f8      	ldr	r0, [r7, #12]
 8004508:	f000 fa14 	bl	8004934 <I2C_WaitOnFlagUntilTimeout>
 800450c:	4603      	mov	r3, r0
 800450e:	2b00      	cmp	r3, #0
 8004510:	d001      	beq.n	8004516 <HAL_I2C_IsDeviceReady+0x1c6>
        {
          return HAL_ERROR;
 8004512:	2301      	movs	r3, #1
 8004514:	e036      	b.n	8004584 <HAL_I2C_IsDeviceReady+0x234>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	2220      	movs	r2, #32
 800451a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	2200      	movs	r2, #0
 8004522:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 8004526:	2300      	movs	r3, #0
 8004528:	e02c      	b.n	8004584 <HAL_I2C_IsDeviceReady+0x234>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	681a      	ldr	r2, [r3, #0]
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004538:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004542:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004544:	69fb      	ldr	r3, [r7, #28]
 8004546:	9300      	str	r3, [sp, #0]
 8004548:	2319      	movs	r3, #25
 800454a:	2201      	movs	r2, #1
 800454c:	490f      	ldr	r1, [pc, #60]	; (800458c <HAL_I2C_IsDeviceReady+0x23c>)
 800454e:	68f8      	ldr	r0, [r7, #12]
 8004550:	f000 f9f0 	bl	8004934 <I2C_WaitOnFlagUntilTimeout>
 8004554:	4603      	mov	r3, r0
 8004556:	2b00      	cmp	r3, #0
 8004558:	d001      	beq.n	800455e <HAL_I2C_IsDeviceReady+0x20e>
        {
          return HAL_ERROR;
 800455a:	2301      	movs	r3, #1
 800455c:	e012      	b.n	8004584 <HAL_I2C_IsDeviceReady+0x234>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 800455e:	69bb      	ldr	r3, [r7, #24]
 8004560:	3301      	adds	r3, #1
 8004562:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8004564:	69ba      	ldr	r2, [r7, #24]
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	429a      	cmp	r2, r3
 800456a:	f4ff af3e 	bcc.w	80043ea <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	2220      	movs	r2, #32
 8004572:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	2200      	movs	r2, #0
 800457a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800457e:	2301      	movs	r3, #1
 8004580:	e000      	b.n	8004584 <HAL_I2C_IsDeviceReady+0x234>
  }
  else
  {
    return HAL_BUSY;
 8004582:	2302      	movs	r3, #2
  }
}
 8004584:	4618      	mov	r0, r3
 8004586:	3720      	adds	r7, #32
 8004588:	46bd      	mov	sp, r7
 800458a:	bd80      	pop	{r7, pc}
 800458c:	00100002 	.word	0x00100002
 8004590:	ffff0000 	.word	0xffff0000

08004594 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8004594:	b580      	push	{r7, lr}
 8004596:	b088      	sub	sp, #32
 8004598:	af02      	add	r7, sp, #8
 800459a:	60f8      	str	r0, [r7, #12]
 800459c:	607a      	str	r2, [r7, #4]
 800459e:	603b      	str	r3, [r7, #0]
 80045a0:	460b      	mov	r3, r1
 80045a2:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045a8:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80045aa:	697b      	ldr	r3, [r7, #20]
 80045ac:	2b08      	cmp	r3, #8
 80045ae:	d006      	beq.n	80045be <I2C_MasterRequestWrite+0x2a>
 80045b0:	697b      	ldr	r3, [r7, #20]
 80045b2:	2b01      	cmp	r3, #1
 80045b4:	d003      	beq.n	80045be <I2C_MasterRequestWrite+0x2a>
 80045b6:	697b      	ldr	r3, [r7, #20]
 80045b8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80045bc:	d108      	bne.n	80045d0 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	681a      	ldr	r2, [r3, #0]
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80045cc:	601a      	str	r2, [r3, #0]
 80045ce:	e00b      	b.n	80045e8 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045d4:	2b12      	cmp	r3, #18
 80045d6:	d107      	bne.n	80045e8 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	681a      	ldr	r2, [r3, #0]
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80045e6:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80045e8:	683b      	ldr	r3, [r7, #0]
 80045ea:	9300      	str	r3, [sp, #0]
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	2200      	movs	r2, #0
 80045f0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80045f4:	68f8      	ldr	r0, [r7, #12]
 80045f6:	f000 f99d 	bl	8004934 <I2C_WaitOnFlagUntilTimeout>
 80045fa:	4603      	mov	r3, r0
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d001      	beq.n	8004604 <I2C_MasterRequestWrite+0x70>
  {
    return HAL_ERROR;
 8004600:	2301      	movs	r3, #1
 8004602:	e035      	b.n	8004670 <I2C_MasterRequestWrite+0xdc>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	691b      	ldr	r3, [r3, #16]
 8004608:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800460c:	d108      	bne.n	8004620 <I2C_MasterRequestWrite+0x8c>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800460e:	897b      	ldrh	r3, [r7, #10]
 8004610:	b2db      	uxtb	r3, r3
 8004612:	461a      	mov	r2, r3
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800461c:	611a      	str	r2, [r3, #16]
 800461e:	e01b      	b.n	8004658 <I2C_MasterRequestWrite+0xc4>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004620:	897b      	ldrh	r3, [r7, #10]
 8004622:	11db      	asrs	r3, r3, #7
 8004624:	b2db      	uxtb	r3, r3
 8004626:	f003 0306 	and.w	r3, r3, #6
 800462a:	b2db      	uxtb	r3, r3
 800462c:	f063 030f 	orn	r3, r3, #15
 8004630:	b2da      	uxtb	r2, r3
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004638:	683b      	ldr	r3, [r7, #0]
 800463a:	687a      	ldr	r2, [r7, #4]
 800463c:	490e      	ldr	r1, [pc, #56]	; (8004678 <I2C_MasterRequestWrite+0xe4>)
 800463e:	68f8      	ldr	r0, [r7, #12]
 8004640:	f000 f9cf 	bl	80049e2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004644:	4603      	mov	r3, r0
 8004646:	2b00      	cmp	r3, #0
 8004648:	d001      	beq.n	800464e <I2C_MasterRequestWrite+0xba>
    {
      return HAL_ERROR;
 800464a:	2301      	movs	r3, #1
 800464c:	e010      	b.n	8004670 <I2C_MasterRequestWrite+0xdc>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800464e:	897b      	ldrh	r3, [r7, #10]
 8004650:	b2da      	uxtb	r2, r3
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004658:	683b      	ldr	r3, [r7, #0]
 800465a:	687a      	ldr	r2, [r7, #4]
 800465c:	4907      	ldr	r1, [pc, #28]	; (800467c <I2C_MasterRequestWrite+0xe8>)
 800465e:	68f8      	ldr	r0, [r7, #12]
 8004660:	f000 f9bf 	bl	80049e2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004664:	4603      	mov	r3, r0
 8004666:	2b00      	cmp	r3, #0
 8004668:	d001      	beq.n	800466e <I2C_MasterRequestWrite+0xda>
  {
    return HAL_ERROR;
 800466a:	2301      	movs	r3, #1
 800466c:	e000      	b.n	8004670 <I2C_MasterRequestWrite+0xdc>
  }

  return HAL_OK;
 800466e:	2300      	movs	r3, #0
}
 8004670:	4618      	mov	r0, r3
 8004672:	3718      	adds	r7, #24
 8004674:	46bd      	mov	sp, r7
 8004676:	bd80      	pop	{r7, pc}
 8004678:	00010008 	.word	0x00010008
 800467c:	00010002 	.word	0x00010002

08004680 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004680:	b580      	push	{r7, lr}
 8004682:	b088      	sub	sp, #32
 8004684:	af02      	add	r7, sp, #8
 8004686:	60f8      	str	r0, [r7, #12]
 8004688:	4608      	mov	r0, r1
 800468a:	4611      	mov	r1, r2
 800468c:	461a      	mov	r2, r3
 800468e:	4603      	mov	r3, r0
 8004690:	817b      	strh	r3, [r7, #10]
 8004692:	460b      	mov	r3, r1
 8004694:	813b      	strh	r3, [r7, #8]
 8004696:	4613      	mov	r3, r2
 8004698:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	681a      	ldr	r2, [r3, #0]
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80046a8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80046aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046ac:	9300      	str	r3, [sp, #0]
 80046ae:	6a3b      	ldr	r3, [r7, #32]
 80046b0:	2200      	movs	r2, #0
 80046b2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80046b6:	68f8      	ldr	r0, [r7, #12]
 80046b8:	f000 f93c 	bl	8004934 <I2C_WaitOnFlagUntilTimeout>
 80046bc:	4603      	mov	r3, r0
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d001      	beq.n	80046c6 <I2C_RequestMemoryWrite+0x46>
  {
    return HAL_ERROR;
 80046c2:	2301      	movs	r3, #1
 80046c4:	e05f      	b.n	8004786 <I2C_RequestMemoryWrite+0x106>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80046c6:	897b      	ldrh	r3, [r7, #10]
 80046c8:	b2db      	uxtb	r3, r3
 80046ca:	461a      	mov	r2, r3
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80046d4:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80046d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046d8:	6a3a      	ldr	r2, [r7, #32]
 80046da:	492d      	ldr	r1, [pc, #180]	; (8004790 <I2C_RequestMemoryWrite+0x110>)
 80046dc:	68f8      	ldr	r0, [r7, #12]
 80046de:	f000 f980 	bl	80049e2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80046e2:	4603      	mov	r3, r0
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d001      	beq.n	80046ec <I2C_RequestMemoryWrite+0x6c>
  {
    return HAL_ERROR;
 80046e8:	2301      	movs	r3, #1
 80046ea:	e04c      	b.n	8004786 <I2C_RequestMemoryWrite+0x106>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80046ec:	2300      	movs	r3, #0
 80046ee:	617b      	str	r3, [r7, #20]
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	695b      	ldr	r3, [r3, #20]
 80046f6:	617b      	str	r3, [r7, #20]
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	699b      	ldr	r3, [r3, #24]
 80046fe:	617b      	str	r3, [r7, #20]
 8004700:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004702:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004704:	6a39      	ldr	r1, [r7, #32]
 8004706:	68f8      	ldr	r0, [r7, #12]
 8004708:	f000 f9ea 	bl	8004ae0 <I2C_WaitOnTXEFlagUntilTimeout>
 800470c:	4603      	mov	r3, r0
 800470e:	2b00      	cmp	r3, #0
 8004710:	d00d      	beq.n	800472e <I2C_RequestMemoryWrite+0xae>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004716:	2b04      	cmp	r3, #4
 8004718:	d107      	bne.n	800472a <I2C_RequestMemoryWrite+0xaa>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	681a      	ldr	r2, [r3, #0]
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004728:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800472a:	2301      	movs	r3, #1
 800472c:	e02b      	b.n	8004786 <I2C_RequestMemoryWrite+0x106>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800472e:	88fb      	ldrh	r3, [r7, #6]
 8004730:	2b01      	cmp	r3, #1
 8004732:	d105      	bne.n	8004740 <I2C_RequestMemoryWrite+0xc0>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004734:	893b      	ldrh	r3, [r7, #8]
 8004736:	b2da      	uxtb	r2, r3
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	611a      	str	r2, [r3, #16]
 800473e:	e021      	b.n	8004784 <I2C_RequestMemoryWrite+0x104>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004740:	893b      	ldrh	r3, [r7, #8]
 8004742:	0a1b      	lsrs	r3, r3, #8
 8004744:	b29b      	uxth	r3, r3
 8004746:	b2da      	uxtb	r2, r3
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800474e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004750:	6a39      	ldr	r1, [r7, #32]
 8004752:	68f8      	ldr	r0, [r7, #12]
 8004754:	f000 f9c4 	bl	8004ae0 <I2C_WaitOnTXEFlagUntilTimeout>
 8004758:	4603      	mov	r3, r0
 800475a:	2b00      	cmp	r3, #0
 800475c:	d00d      	beq.n	800477a <I2C_RequestMemoryWrite+0xfa>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004762:	2b04      	cmp	r3, #4
 8004764:	d107      	bne.n	8004776 <I2C_RequestMemoryWrite+0xf6>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	681a      	ldr	r2, [r3, #0]
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004774:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004776:	2301      	movs	r3, #1
 8004778:	e005      	b.n	8004786 <I2C_RequestMemoryWrite+0x106>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800477a:	893b      	ldrh	r3, [r7, #8]
 800477c:	b2da      	uxtb	r2, r3
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8004784:	2300      	movs	r3, #0
}
 8004786:	4618      	mov	r0, r3
 8004788:	3718      	adds	r7, #24
 800478a:	46bd      	mov	sp, r7
 800478c:	bd80      	pop	{r7, pc}
 800478e:	bf00      	nop
 8004790:	00010002 	.word	0x00010002

08004794 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004794:	b580      	push	{r7, lr}
 8004796:	b088      	sub	sp, #32
 8004798:	af02      	add	r7, sp, #8
 800479a:	60f8      	str	r0, [r7, #12]
 800479c:	4608      	mov	r0, r1
 800479e:	4611      	mov	r1, r2
 80047a0:	461a      	mov	r2, r3
 80047a2:	4603      	mov	r3, r0
 80047a4:	817b      	strh	r3, [r7, #10]
 80047a6:	460b      	mov	r3, r1
 80047a8:	813b      	strh	r3, [r7, #8]
 80047aa:	4613      	mov	r3, r2
 80047ac:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	681a      	ldr	r2, [r3, #0]
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80047bc:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	681a      	ldr	r2, [r3, #0]
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80047cc:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80047ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047d0:	9300      	str	r3, [sp, #0]
 80047d2:	6a3b      	ldr	r3, [r7, #32]
 80047d4:	2200      	movs	r2, #0
 80047d6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80047da:	68f8      	ldr	r0, [r7, #12]
 80047dc:	f000 f8aa 	bl	8004934 <I2C_WaitOnFlagUntilTimeout>
 80047e0:	4603      	mov	r3, r0
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d001      	beq.n	80047ea <I2C_RequestMemoryRead+0x56>
  {
    return HAL_ERROR;
 80047e6:	2301      	movs	r3, #1
 80047e8:	e09e      	b.n	8004928 <I2C_RequestMemoryRead+0x194>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80047ea:	897b      	ldrh	r3, [r7, #10]
 80047ec:	b2db      	uxtb	r3, r3
 80047ee:	461a      	mov	r2, r3
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80047f8:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80047fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047fc:	6a3a      	ldr	r2, [r7, #32]
 80047fe:	494c      	ldr	r1, [pc, #304]	; (8004930 <I2C_RequestMemoryRead+0x19c>)
 8004800:	68f8      	ldr	r0, [r7, #12]
 8004802:	f000 f8ee 	bl	80049e2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004806:	4603      	mov	r3, r0
 8004808:	2b00      	cmp	r3, #0
 800480a:	d001      	beq.n	8004810 <I2C_RequestMemoryRead+0x7c>
  {
    return HAL_ERROR;
 800480c:	2301      	movs	r3, #1
 800480e:	e08b      	b.n	8004928 <I2C_RequestMemoryRead+0x194>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004810:	2300      	movs	r3, #0
 8004812:	617b      	str	r3, [r7, #20]
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	695b      	ldr	r3, [r3, #20]
 800481a:	617b      	str	r3, [r7, #20]
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	699b      	ldr	r3, [r3, #24]
 8004822:	617b      	str	r3, [r7, #20]
 8004824:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004826:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004828:	6a39      	ldr	r1, [r7, #32]
 800482a:	68f8      	ldr	r0, [r7, #12]
 800482c:	f000 f958 	bl	8004ae0 <I2C_WaitOnTXEFlagUntilTimeout>
 8004830:	4603      	mov	r3, r0
 8004832:	2b00      	cmp	r3, #0
 8004834:	d00d      	beq.n	8004852 <I2C_RequestMemoryRead+0xbe>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800483a:	2b04      	cmp	r3, #4
 800483c:	d107      	bne.n	800484e <I2C_RequestMemoryRead+0xba>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	681a      	ldr	r2, [r3, #0]
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800484c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800484e:	2301      	movs	r3, #1
 8004850:	e06a      	b.n	8004928 <I2C_RequestMemoryRead+0x194>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004852:	88fb      	ldrh	r3, [r7, #6]
 8004854:	2b01      	cmp	r3, #1
 8004856:	d105      	bne.n	8004864 <I2C_RequestMemoryRead+0xd0>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004858:	893b      	ldrh	r3, [r7, #8]
 800485a:	b2da      	uxtb	r2, r3
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	611a      	str	r2, [r3, #16]
 8004862:	e021      	b.n	80048a8 <I2C_RequestMemoryRead+0x114>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004864:	893b      	ldrh	r3, [r7, #8]
 8004866:	0a1b      	lsrs	r3, r3, #8
 8004868:	b29b      	uxth	r3, r3
 800486a:	b2da      	uxtb	r2, r3
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004872:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004874:	6a39      	ldr	r1, [r7, #32]
 8004876:	68f8      	ldr	r0, [r7, #12]
 8004878:	f000 f932 	bl	8004ae0 <I2C_WaitOnTXEFlagUntilTimeout>
 800487c:	4603      	mov	r3, r0
 800487e:	2b00      	cmp	r3, #0
 8004880:	d00d      	beq.n	800489e <I2C_RequestMemoryRead+0x10a>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004886:	2b04      	cmp	r3, #4
 8004888:	d107      	bne.n	800489a <I2C_RequestMemoryRead+0x106>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	681a      	ldr	r2, [r3, #0]
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004898:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800489a:	2301      	movs	r3, #1
 800489c:	e044      	b.n	8004928 <I2C_RequestMemoryRead+0x194>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800489e:	893b      	ldrh	r3, [r7, #8]
 80048a0:	b2da      	uxtb	r2, r3
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80048a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80048aa:	6a39      	ldr	r1, [r7, #32]
 80048ac:	68f8      	ldr	r0, [r7, #12]
 80048ae:	f000 f917 	bl	8004ae0 <I2C_WaitOnTXEFlagUntilTimeout>
 80048b2:	4603      	mov	r3, r0
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d00d      	beq.n	80048d4 <I2C_RequestMemoryRead+0x140>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048bc:	2b04      	cmp	r3, #4
 80048be:	d107      	bne.n	80048d0 <I2C_RequestMemoryRead+0x13c>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	681a      	ldr	r2, [r3, #0]
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80048ce:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80048d0:	2301      	movs	r3, #1
 80048d2:	e029      	b.n	8004928 <I2C_RequestMemoryRead+0x194>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	681a      	ldr	r2, [r3, #0]
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80048e2:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80048e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048e6:	9300      	str	r3, [sp, #0]
 80048e8:	6a3b      	ldr	r3, [r7, #32]
 80048ea:	2200      	movs	r2, #0
 80048ec:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80048f0:	68f8      	ldr	r0, [r7, #12]
 80048f2:	f000 f81f 	bl	8004934 <I2C_WaitOnFlagUntilTimeout>
 80048f6:	4603      	mov	r3, r0
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	d001      	beq.n	8004900 <I2C_RequestMemoryRead+0x16c>
  {
    return HAL_ERROR;
 80048fc:	2301      	movs	r3, #1
 80048fe:	e013      	b.n	8004928 <I2C_RequestMemoryRead+0x194>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8004900:	897b      	ldrh	r3, [r7, #10]
 8004902:	b2db      	uxtb	r3, r3
 8004904:	f043 0301 	orr.w	r3, r3, #1
 8004908:	b2da      	uxtb	r2, r3
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004910:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004912:	6a3a      	ldr	r2, [r7, #32]
 8004914:	4906      	ldr	r1, [pc, #24]	; (8004930 <I2C_RequestMemoryRead+0x19c>)
 8004916:	68f8      	ldr	r0, [r7, #12]
 8004918:	f000 f863 	bl	80049e2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800491c:	4603      	mov	r3, r0
 800491e:	2b00      	cmp	r3, #0
 8004920:	d001      	beq.n	8004926 <I2C_RequestMemoryRead+0x192>
  {
    return HAL_ERROR;
 8004922:	2301      	movs	r3, #1
 8004924:	e000      	b.n	8004928 <I2C_RequestMemoryRead+0x194>
  }

  return HAL_OK;
 8004926:	2300      	movs	r3, #0
}
 8004928:	4618      	mov	r0, r3
 800492a:	3718      	adds	r7, #24
 800492c:	46bd      	mov	sp, r7
 800492e:	bd80      	pop	{r7, pc}
 8004930:	00010002 	.word	0x00010002

08004934 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004934:	b580      	push	{r7, lr}
 8004936:	b084      	sub	sp, #16
 8004938:	af00      	add	r7, sp, #0
 800493a:	60f8      	str	r0, [r7, #12]
 800493c:	60b9      	str	r1, [r7, #8]
 800493e:	603b      	str	r3, [r7, #0]
 8004940:	4613      	mov	r3, r2
 8004942:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004944:	e025      	b.n	8004992 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004946:	683b      	ldr	r3, [r7, #0]
 8004948:	f1b3 3fff 	cmp.w	r3, #4294967295
 800494c:	d021      	beq.n	8004992 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800494e:	f7fe fcf7 	bl	8003340 <HAL_GetTick>
 8004952:	4602      	mov	r2, r0
 8004954:	69bb      	ldr	r3, [r7, #24]
 8004956:	1ad3      	subs	r3, r2, r3
 8004958:	683a      	ldr	r2, [r7, #0]
 800495a:	429a      	cmp	r2, r3
 800495c:	d302      	bcc.n	8004964 <I2C_WaitOnFlagUntilTimeout+0x30>
 800495e:	683b      	ldr	r3, [r7, #0]
 8004960:	2b00      	cmp	r3, #0
 8004962:	d116      	bne.n	8004992 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	2200      	movs	r2, #0
 8004968:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	2220      	movs	r2, #32
 800496e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	2200      	movs	r2, #0
 8004976:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800497e:	f043 0220 	orr.w	r2, r3, #32
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	2200      	movs	r2, #0
 800498a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800498e:	2301      	movs	r3, #1
 8004990:	e023      	b.n	80049da <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004992:	68bb      	ldr	r3, [r7, #8]
 8004994:	0c1b      	lsrs	r3, r3, #16
 8004996:	b2db      	uxtb	r3, r3
 8004998:	2b01      	cmp	r3, #1
 800499a:	d10d      	bne.n	80049b8 <I2C_WaitOnFlagUntilTimeout+0x84>
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	695b      	ldr	r3, [r3, #20]
 80049a2:	43da      	mvns	r2, r3
 80049a4:	68bb      	ldr	r3, [r7, #8]
 80049a6:	4013      	ands	r3, r2
 80049a8:	b29b      	uxth	r3, r3
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	bf0c      	ite	eq
 80049ae:	2301      	moveq	r3, #1
 80049b0:	2300      	movne	r3, #0
 80049b2:	b2db      	uxtb	r3, r3
 80049b4:	461a      	mov	r2, r3
 80049b6:	e00c      	b.n	80049d2 <I2C_WaitOnFlagUntilTimeout+0x9e>
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	699b      	ldr	r3, [r3, #24]
 80049be:	43da      	mvns	r2, r3
 80049c0:	68bb      	ldr	r3, [r7, #8]
 80049c2:	4013      	ands	r3, r2
 80049c4:	b29b      	uxth	r3, r3
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	bf0c      	ite	eq
 80049ca:	2301      	moveq	r3, #1
 80049cc:	2300      	movne	r3, #0
 80049ce:	b2db      	uxtb	r3, r3
 80049d0:	461a      	mov	r2, r3
 80049d2:	79fb      	ldrb	r3, [r7, #7]
 80049d4:	429a      	cmp	r2, r3
 80049d6:	d0b6      	beq.n	8004946 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80049d8:	2300      	movs	r3, #0
}
 80049da:	4618      	mov	r0, r3
 80049dc:	3710      	adds	r7, #16
 80049de:	46bd      	mov	sp, r7
 80049e0:	bd80      	pop	{r7, pc}

080049e2 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80049e2:	b580      	push	{r7, lr}
 80049e4:	b084      	sub	sp, #16
 80049e6:	af00      	add	r7, sp, #0
 80049e8:	60f8      	str	r0, [r7, #12]
 80049ea:	60b9      	str	r1, [r7, #8]
 80049ec:	607a      	str	r2, [r7, #4]
 80049ee:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80049f0:	e051      	b.n	8004a96 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	695b      	ldr	r3, [r3, #20]
 80049f8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80049fc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004a00:	d123      	bne.n	8004a4a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	681a      	ldr	r2, [r3, #0]
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004a10:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004a1a:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	2200      	movs	r2, #0
 8004a20:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	2220      	movs	r2, #32
 8004a26:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	2200      	movs	r2, #0
 8004a2e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a36:	f043 0204 	orr.w	r2, r3, #4
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	2200      	movs	r2, #0
 8004a42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004a46:	2301      	movs	r3, #1
 8004a48:	e046      	b.n	8004ad8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a50:	d021      	beq.n	8004a96 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004a52:	f7fe fc75 	bl	8003340 <HAL_GetTick>
 8004a56:	4602      	mov	r2, r0
 8004a58:	683b      	ldr	r3, [r7, #0]
 8004a5a:	1ad3      	subs	r3, r2, r3
 8004a5c:	687a      	ldr	r2, [r7, #4]
 8004a5e:	429a      	cmp	r2, r3
 8004a60:	d302      	bcc.n	8004a68 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d116      	bne.n	8004a96 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	2200      	movs	r2, #0
 8004a6c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	2220      	movs	r2, #32
 8004a72:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	2200      	movs	r2, #0
 8004a7a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a82:	f043 0220 	orr.w	r2, r3, #32
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	2200      	movs	r2, #0
 8004a8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004a92:	2301      	movs	r3, #1
 8004a94:	e020      	b.n	8004ad8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004a96:	68bb      	ldr	r3, [r7, #8]
 8004a98:	0c1b      	lsrs	r3, r3, #16
 8004a9a:	b2db      	uxtb	r3, r3
 8004a9c:	2b01      	cmp	r3, #1
 8004a9e:	d10c      	bne.n	8004aba <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	695b      	ldr	r3, [r3, #20]
 8004aa6:	43da      	mvns	r2, r3
 8004aa8:	68bb      	ldr	r3, [r7, #8]
 8004aaa:	4013      	ands	r3, r2
 8004aac:	b29b      	uxth	r3, r3
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	bf14      	ite	ne
 8004ab2:	2301      	movne	r3, #1
 8004ab4:	2300      	moveq	r3, #0
 8004ab6:	b2db      	uxtb	r3, r3
 8004ab8:	e00b      	b.n	8004ad2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	699b      	ldr	r3, [r3, #24]
 8004ac0:	43da      	mvns	r2, r3
 8004ac2:	68bb      	ldr	r3, [r7, #8]
 8004ac4:	4013      	ands	r3, r2
 8004ac6:	b29b      	uxth	r3, r3
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	bf14      	ite	ne
 8004acc:	2301      	movne	r3, #1
 8004ace:	2300      	moveq	r3, #0
 8004ad0:	b2db      	uxtb	r3, r3
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d18d      	bne.n	80049f2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8004ad6:	2300      	movs	r3, #0
}
 8004ad8:	4618      	mov	r0, r3
 8004ada:	3710      	adds	r7, #16
 8004adc:	46bd      	mov	sp, r7
 8004ade:	bd80      	pop	{r7, pc}

08004ae0 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004ae0:	b580      	push	{r7, lr}
 8004ae2:	b084      	sub	sp, #16
 8004ae4:	af00      	add	r7, sp, #0
 8004ae6:	60f8      	str	r0, [r7, #12]
 8004ae8:	60b9      	str	r1, [r7, #8]
 8004aea:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004aec:	e02d      	b.n	8004b4a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004aee:	68f8      	ldr	r0, [r7, #12]
 8004af0:	f000 f8ce 	bl	8004c90 <I2C_IsAcknowledgeFailed>
 8004af4:	4603      	mov	r3, r0
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d001      	beq.n	8004afe <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004afa:	2301      	movs	r3, #1
 8004afc:	e02d      	b.n	8004b5a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004afe:	68bb      	ldr	r3, [r7, #8]
 8004b00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b04:	d021      	beq.n	8004b4a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004b06:	f7fe fc1b 	bl	8003340 <HAL_GetTick>
 8004b0a:	4602      	mov	r2, r0
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	1ad3      	subs	r3, r2, r3
 8004b10:	68ba      	ldr	r2, [r7, #8]
 8004b12:	429a      	cmp	r2, r3
 8004b14:	d302      	bcc.n	8004b1c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004b16:	68bb      	ldr	r3, [r7, #8]
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d116      	bne.n	8004b4a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	2200      	movs	r2, #0
 8004b20:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	2220      	movs	r2, #32
 8004b26:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	2200      	movs	r2, #0
 8004b2e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b36:	f043 0220 	orr.w	r2, r3, #32
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	2200      	movs	r2, #0
 8004b42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004b46:	2301      	movs	r3, #1
 8004b48:	e007      	b.n	8004b5a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	695b      	ldr	r3, [r3, #20]
 8004b50:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b54:	2b80      	cmp	r3, #128	; 0x80
 8004b56:	d1ca      	bne.n	8004aee <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004b58:	2300      	movs	r3, #0
}
 8004b5a:	4618      	mov	r0, r3
 8004b5c:	3710      	adds	r7, #16
 8004b5e:	46bd      	mov	sp, r7
 8004b60:	bd80      	pop	{r7, pc}

08004b62 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004b62:	b580      	push	{r7, lr}
 8004b64:	b084      	sub	sp, #16
 8004b66:	af00      	add	r7, sp, #0
 8004b68:	60f8      	str	r0, [r7, #12]
 8004b6a:	60b9      	str	r1, [r7, #8]
 8004b6c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004b6e:	e02d      	b.n	8004bcc <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004b70:	68f8      	ldr	r0, [r7, #12]
 8004b72:	f000 f88d 	bl	8004c90 <I2C_IsAcknowledgeFailed>
 8004b76:	4603      	mov	r3, r0
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	d001      	beq.n	8004b80 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004b7c:	2301      	movs	r3, #1
 8004b7e:	e02d      	b.n	8004bdc <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004b80:	68bb      	ldr	r3, [r7, #8]
 8004b82:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b86:	d021      	beq.n	8004bcc <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004b88:	f7fe fbda 	bl	8003340 <HAL_GetTick>
 8004b8c:	4602      	mov	r2, r0
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	1ad3      	subs	r3, r2, r3
 8004b92:	68ba      	ldr	r2, [r7, #8]
 8004b94:	429a      	cmp	r2, r3
 8004b96:	d302      	bcc.n	8004b9e <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004b98:	68bb      	ldr	r3, [r7, #8]
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d116      	bne.n	8004bcc <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	2200      	movs	r2, #0
 8004ba2:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	2220      	movs	r2, #32
 8004ba8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	2200      	movs	r2, #0
 8004bb0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bb8:	f043 0220 	orr.w	r2, r3, #32
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	2200      	movs	r2, #0
 8004bc4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004bc8:	2301      	movs	r3, #1
 8004bca:	e007      	b.n	8004bdc <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	695b      	ldr	r3, [r3, #20]
 8004bd2:	f003 0304 	and.w	r3, r3, #4
 8004bd6:	2b04      	cmp	r3, #4
 8004bd8:	d1ca      	bne.n	8004b70 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004bda:	2300      	movs	r3, #0
}
 8004bdc:	4618      	mov	r0, r3
 8004bde:	3710      	adds	r7, #16
 8004be0:	46bd      	mov	sp, r7
 8004be2:	bd80      	pop	{r7, pc}

08004be4 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004be4:	b580      	push	{r7, lr}
 8004be6:	b084      	sub	sp, #16
 8004be8:	af00      	add	r7, sp, #0
 8004bea:	60f8      	str	r0, [r7, #12]
 8004bec:	60b9      	str	r1, [r7, #8]
 8004bee:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004bf0:	e042      	b.n	8004c78 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	695b      	ldr	r3, [r3, #20]
 8004bf8:	f003 0310 	and.w	r3, r3, #16
 8004bfc:	2b10      	cmp	r3, #16
 8004bfe:	d119      	bne.n	8004c34 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	f06f 0210 	mvn.w	r2, #16
 8004c08:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	2200      	movs	r2, #0
 8004c0e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	2220      	movs	r2, #32
 8004c14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	2200      	movs	r2, #0
 8004c1c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	2200      	movs	r2, #0
 8004c2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004c30:	2301      	movs	r3, #1
 8004c32:	e029      	b.n	8004c88 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004c34:	f7fe fb84 	bl	8003340 <HAL_GetTick>
 8004c38:	4602      	mov	r2, r0
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	1ad3      	subs	r3, r2, r3
 8004c3e:	68ba      	ldr	r2, [r7, #8]
 8004c40:	429a      	cmp	r2, r3
 8004c42:	d302      	bcc.n	8004c4a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8004c44:	68bb      	ldr	r3, [r7, #8]
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d116      	bne.n	8004c78 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	2200      	movs	r2, #0
 8004c4e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	2220      	movs	r2, #32
 8004c54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	2200      	movs	r2, #0
 8004c5c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c64:	f043 0220 	orr.w	r2, r3, #32
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	2200      	movs	r2, #0
 8004c70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004c74:	2301      	movs	r3, #1
 8004c76:	e007      	b.n	8004c88 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	695b      	ldr	r3, [r3, #20]
 8004c7e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c82:	2b40      	cmp	r3, #64	; 0x40
 8004c84:	d1b5      	bne.n	8004bf2 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8004c86:	2300      	movs	r3, #0
}
 8004c88:	4618      	mov	r0, r3
 8004c8a:	3710      	adds	r7, #16
 8004c8c:	46bd      	mov	sp, r7
 8004c8e:	bd80      	pop	{r7, pc}

08004c90 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004c90:	b480      	push	{r7}
 8004c92:	b083      	sub	sp, #12
 8004c94:	af00      	add	r7, sp, #0
 8004c96:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	695b      	ldr	r3, [r3, #20]
 8004c9e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004ca2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004ca6:	d11b      	bne.n	8004ce0 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004cb0:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	2200      	movs	r2, #0
 8004cb6:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	2220      	movs	r2, #32
 8004cbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	2200      	movs	r2, #0
 8004cc4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ccc:	f043 0204 	orr.w	r2, r3, #4
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	2200      	movs	r2, #0
 8004cd8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8004cdc:	2301      	movs	r3, #1
 8004cde:	e000      	b.n	8004ce2 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004ce0:	2300      	movs	r3, #0
}
 8004ce2:	4618      	mov	r0, r3
 8004ce4:	370c      	adds	r7, #12
 8004ce6:	46bd      	mov	sp, r7
 8004ce8:	bc80      	pop	{r7}
 8004cea:	4770      	bx	lr

08004cec <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004cec:	b580      	push	{r7, lr}
 8004cee:	b086      	sub	sp, #24
 8004cf0:	af00      	add	r7, sp, #0
 8004cf2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d101      	bne.n	8004cfe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004cfa:	2301      	movs	r3, #1
 8004cfc:	e26c      	b.n	80051d8 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	f003 0301 	and.w	r3, r3, #1
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	f000 8087 	beq.w	8004e1a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004d0c:	4b92      	ldr	r3, [pc, #584]	; (8004f58 <HAL_RCC_OscConfig+0x26c>)
 8004d0e:	685b      	ldr	r3, [r3, #4]
 8004d10:	f003 030c 	and.w	r3, r3, #12
 8004d14:	2b04      	cmp	r3, #4
 8004d16:	d00c      	beq.n	8004d32 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004d18:	4b8f      	ldr	r3, [pc, #572]	; (8004f58 <HAL_RCC_OscConfig+0x26c>)
 8004d1a:	685b      	ldr	r3, [r3, #4]
 8004d1c:	f003 030c 	and.w	r3, r3, #12
 8004d20:	2b08      	cmp	r3, #8
 8004d22:	d112      	bne.n	8004d4a <HAL_RCC_OscConfig+0x5e>
 8004d24:	4b8c      	ldr	r3, [pc, #560]	; (8004f58 <HAL_RCC_OscConfig+0x26c>)
 8004d26:	685b      	ldr	r3, [r3, #4]
 8004d28:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004d2c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004d30:	d10b      	bne.n	8004d4a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004d32:	4b89      	ldr	r3, [pc, #548]	; (8004f58 <HAL_RCC_OscConfig+0x26c>)
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d06c      	beq.n	8004e18 <HAL_RCC_OscConfig+0x12c>
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	685b      	ldr	r3, [r3, #4]
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d168      	bne.n	8004e18 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8004d46:	2301      	movs	r3, #1
 8004d48:	e246      	b.n	80051d8 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	685b      	ldr	r3, [r3, #4]
 8004d4e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004d52:	d106      	bne.n	8004d62 <HAL_RCC_OscConfig+0x76>
 8004d54:	4b80      	ldr	r3, [pc, #512]	; (8004f58 <HAL_RCC_OscConfig+0x26c>)
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	4a7f      	ldr	r2, [pc, #508]	; (8004f58 <HAL_RCC_OscConfig+0x26c>)
 8004d5a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004d5e:	6013      	str	r3, [r2, #0]
 8004d60:	e02e      	b.n	8004dc0 <HAL_RCC_OscConfig+0xd4>
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	685b      	ldr	r3, [r3, #4]
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d10c      	bne.n	8004d84 <HAL_RCC_OscConfig+0x98>
 8004d6a:	4b7b      	ldr	r3, [pc, #492]	; (8004f58 <HAL_RCC_OscConfig+0x26c>)
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	4a7a      	ldr	r2, [pc, #488]	; (8004f58 <HAL_RCC_OscConfig+0x26c>)
 8004d70:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004d74:	6013      	str	r3, [r2, #0]
 8004d76:	4b78      	ldr	r3, [pc, #480]	; (8004f58 <HAL_RCC_OscConfig+0x26c>)
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	4a77      	ldr	r2, [pc, #476]	; (8004f58 <HAL_RCC_OscConfig+0x26c>)
 8004d7c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004d80:	6013      	str	r3, [r2, #0]
 8004d82:	e01d      	b.n	8004dc0 <HAL_RCC_OscConfig+0xd4>
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	685b      	ldr	r3, [r3, #4]
 8004d88:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004d8c:	d10c      	bne.n	8004da8 <HAL_RCC_OscConfig+0xbc>
 8004d8e:	4b72      	ldr	r3, [pc, #456]	; (8004f58 <HAL_RCC_OscConfig+0x26c>)
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	4a71      	ldr	r2, [pc, #452]	; (8004f58 <HAL_RCC_OscConfig+0x26c>)
 8004d94:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004d98:	6013      	str	r3, [r2, #0]
 8004d9a:	4b6f      	ldr	r3, [pc, #444]	; (8004f58 <HAL_RCC_OscConfig+0x26c>)
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	4a6e      	ldr	r2, [pc, #440]	; (8004f58 <HAL_RCC_OscConfig+0x26c>)
 8004da0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004da4:	6013      	str	r3, [r2, #0]
 8004da6:	e00b      	b.n	8004dc0 <HAL_RCC_OscConfig+0xd4>
 8004da8:	4b6b      	ldr	r3, [pc, #428]	; (8004f58 <HAL_RCC_OscConfig+0x26c>)
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	4a6a      	ldr	r2, [pc, #424]	; (8004f58 <HAL_RCC_OscConfig+0x26c>)
 8004dae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004db2:	6013      	str	r3, [r2, #0]
 8004db4:	4b68      	ldr	r3, [pc, #416]	; (8004f58 <HAL_RCC_OscConfig+0x26c>)
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	4a67      	ldr	r2, [pc, #412]	; (8004f58 <HAL_RCC_OscConfig+0x26c>)
 8004dba:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004dbe:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	685b      	ldr	r3, [r3, #4]
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	d013      	beq.n	8004df0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004dc8:	f7fe faba 	bl	8003340 <HAL_GetTick>
 8004dcc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004dce:	e008      	b.n	8004de2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004dd0:	f7fe fab6 	bl	8003340 <HAL_GetTick>
 8004dd4:	4602      	mov	r2, r0
 8004dd6:	693b      	ldr	r3, [r7, #16]
 8004dd8:	1ad3      	subs	r3, r2, r3
 8004dda:	2b64      	cmp	r3, #100	; 0x64
 8004ddc:	d901      	bls.n	8004de2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8004dde:	2303      	movs	r3, #3
 8004de0:	e1fa      	b.n	80051d8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004de2:	4b5d      	ldr	r3, [pc, #372]	; (8004f58 <HAL_RCC_OscConfig+0x26c>)
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d0f0      	beq.n	8004dd0 <HAL_RCC_OscConfig+0xe4>
 8004dee:	e014      	b.n	8004e1a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004df0:	f7fe faa6 	bl	8003340 <HAL_GetTick>
 8004df4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004df6:	e008      	b.n	8004e0a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004df8:	f7fe faa2 	bl	8003340 <HAL_GetTick>
 8004dfc:	4602      	mov	r2, r0
 8004dfe:	693b      	ldr	r3, [r7, #16]
 8004e00:	1ad3      	subs	r3, r2, r3
 8004e02:	2b64      	cmp	r3, #100	; 0x64
 8004e04:	d901      	bls.n	8004e0a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8004e06:	2303      	movs	r3, #3
 8004e08:	e1e6      	b.n	80051d8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004e0a:	4b53      	ldr	r3, [pc, #332]	; (8004f58 <HAL_RCC_OscConfig+0x26c>)
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d1f0      	bne.n	8004df8 <HAL_RCC_OscConfig+0x10c>
 8004e16:	e000      	b.n	8004e1a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004e18:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	f003 0302 	and.w	r3, r3, #2
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	d063      	beq.n	8004eee <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004e26:	4b4c      	ldr	r3, [pc, #304]	; (8004f58 <HAL_RCC_OscConfig+0x26c>)
 8004e28:	685b      	ldr	r3, [r3, #4]
 8004e2a:	f003 030c 	and.w	r3, r3, #12
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d00b      	beq.n	8004e4a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8004e32:	4b49      	ldr	r3, [pc, #292]	; (8004f58 <HAL_RCC_OscConfig+0x26c>)
 8004e34:	685b      	ldr	r3, [r3, #4]
 8004e36:	f003 030c 	and.w	r3, r3, #12
 8004e3a:	2b08      	cmp	r3, #8
 8004e3c:	d11c      	bne.n	8004e78 <HAL_RCC_OscConfig+0x18c>
 8004e3e:	4b46      	ldr	r3, [pc, #280]	; (8004f58 <HAL_RCC_OscConfig+0x26c>)
 8004e40:	685b      	ldr	r3, [r3, #4]
 8004e42:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d116      	bne.n	8004e78 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004e4a:	4b43      	ldr	r3, [pc, #268]	; (8004f58 <HAL_RCC_OscConfig+0x26c>)
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	f003 0302 	and.w	r3, r3, #2
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d005      	beq.n	8004e62 <HAL_RCC_OscConfig+0x176>
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	691b      	ldr	r3, [r3, #16]
 8004e5a:	2b01      	cmp	r3, #1
 8004e5c:	d001      	beq.n	8004e62 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8004e5e:	2301      	movs	r3, #1
 8004e60:	e1ba      	b.n	80051d8 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004e62:	4b3d      	ldr	r3, [pc, #244]	; (8004f58 <HAL_RCC_OscConfig+0x26c>)
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	695b      	ldr	r3, [r3, #20]
 8004e6e:	00db      	lsls	r3, r3, #3
 8004e70:	4939      	ldr	r1, [pc, #228]	; (8004f58 <HAL_RCC_OscConfig+0x26c>)
 8004e72:	4313      	orrs	r3, r2
 8004e74:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004e76:	e03a      	b.n	8004eee <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	691b      	ldr	r3, [r3, #16]
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d020      	beq.n	8004ec2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004e80:	4b36      	ldr	r3, [pc, #216]	; (8004f5c <HAL_RCC_OscConfig+0x270>)
 8004e82:	2201      	movs	r2, #1
 8004e84:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e86:	f7fe fa5b 	bl	8003340 <HAL_GetTick>
 8004e8a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004e8c:	e008      	b.n	8004ea0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004e8e:	f7fe fa57 	bl	8003340 <HAL_GetTick>
 8004e92:	4602      	mov	r2, r0
 8004e94:	693b      	ldr	r3, [r7, #16]
 8004e96:	1ad3      	subs	r3, r2, r3
 8004e98:	2b02      	cmp	r3, #2
 8004e9a:	d901      	bls.n	8004ea0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8004e9c:	2303      	movs	r3, #3
 8004e9e:	e19b      	b.n	80051d8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004ea0:	4b2d      	ldr	r3, [pc, #180]	; (8004f58 <HAL_RCC_OscConfig+0x26c>)
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	f003 0302 	and.w	r3, r3, #2
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d0f0      	beq.n	8004e8e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004eac:	4b2a      	ldr	r3, [pc, #168]	; (8004f58 <HAL_RCC_OscConfig+0x26c>)
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	695b      	ldr	r3, [r3, #20]
 8004eb8:	00db      	lsls	r3, r3, #3
 8004eba:	4927      	ldr	r1, [pc, #156]	; (8004f58 <HAL_RCC_OscConfig+0x26c>)
 8004ebc:	4313      	orrs	r3, r2
 8004ebe:	600b      	str	r3, [r1, #0]
 8004ec0:	e015      	b.n	8004eee <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004ec2:	4b26      	ldr	r3, [pc, #152]	; (8004f5c <HAL_RCC_OscConfig+0x270>)
 8004ec4:	2200      	movs	r2, #0
 8004ec6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ec8:	f7fe fa3a 	bl	8003340 <HAL_GetTick>
 8004ecc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004ece:	e008      	b.n	8004ee2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004ed0:	f7fe fa36 	bl	8003340 <HAL_GetTick>
 8004ed4:	4602      	mov	r2, r0
 8004ed6:	693b      	ldr	r3, [r7, #16]
 8004ed8:	1ad3      	subs	r3, r2, r3
 8004eda:	2b02      	cmp	r3, #2
 8004edc:	d901      	bls.n	8004ee2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8004ede:	2303      	movs	r3, #3
 8004ee0:	e17a      	b.n	80051d8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004ee2:	4b1d      	ldr	r3, [pc, #116]	; (8004f58 <HAL_RCC_OscConfig+0x26c>)
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	f003 0302 	and.w	r3, r3, #2
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d1f0      	bne.n	8004ed0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	f003 0308 	and.w	r3, r3, #8
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d03a      	beq.n	8004f70 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	699b      	ldr	r3, [r3, #24]
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d019      	beq.n	8004f36 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004f02:	4b17      	ldr	r3, [pc, #92]	; (8004f60 <HAL_RCC_OscConfig+0x274>)
 8004f04:	2201      	movs	r2, #1
 8004f06:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004f08:	f7fe fa1a 	bl	8003340 <HAL_GetTick>
 8004f0c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004f0e:	e008      	b.n	8004f22 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004f10:	f7fe fa16 	bl	8003340 <HAL_GetTick>
 8004f14:	4602      	mov	r2, r0
 8004f16:	693b      	ldr	r3, [r7, #16]
 8004f18:	1ad3      	subs	r3, r2, r3
 8004f1a:	2b02      	cmp	r3, #2
 8004f1c:	d901      	bls.n	8004f22 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8004f1e:	2303      	movs	r3, #3
 8004f20:	e15a      	b.n	80051d8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004f22:	4b0d      	ldr	r3, [pc, #52]	; (8004f58 <HAL_RCC_OscConfig+0x26c>)
 8004f24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f26:	f003 0302 	and.w	r3, r3, #2
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d0f0      	beq.n	8004f10 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8004f2e:	2001      	movs	r0, #1
 8004f30:	f000 fac6 	bl	80054c0 <RCC_Delay>
 8004f34:	e01c      	b.n	8004f70 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004f36:	4b0a      	ldr	r3, [pc, #40]	; (8004f60 <HAL_RCC_OscConfig+0x274>)
 8004f38:	2200      	movs	r2, #0
 8004f3a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004f3c:	f7fe fa00 	bl	8003340 <HAL_GetTick>
 8004f40:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004f42:	e00f      	b.n	8004f64 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004f44:	f7fe f9fc 	bl	8003340 <HAL_GetTick>
 8004f48:	4602      	mov	r2, r0
 8004f4a:	693b      	ldr	r3, [r7, #16]
 8004f4c:	1ad3      	subs	r3, r2, r3
 8004f4e:	2b02      	cmp	r3, #2
 8004f50:	d908      	bls.n	8004f64 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8004f52:	2303      	movs	r3, #3
 8004f54:	e140      	b.n	80051d8 <HAL_RCC_OscConfig+0x4ec>
 8004f56:	bf00      	nop
 8004f58:	40021000 	.word	0x40021000
 8004f5c:	42420000 	.word	0x42420000
 8004f60:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004f64:	4b9e      	ldr	r3, [pc, #632]	; (80051e0 <HAL_RCC_OscConfig+0x4f4>)
 8004f66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f68:	f003 0302 	and.w	r3, r3, #2
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	d1e9      	bne.n	8004f44 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	f003 0304 	and.w	r3, r3, #4
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	f000 80a6 	beq.w	80050ca <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004f7e:	2300      	movs	r3, #0
 8004f80:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004f82:	4b97      	ldr	r3, [pc, #604]	; (80051e0 <HAL_RCC_OscConfig+0x4f4>)
 8004f84:	69db      	ldr	r3, [r3, #28]
 8004f86:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d10d      	bne.n	8004faa <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004f8e:	4b94      	ldr	r3, [pc, #592]	; (80051e0 <HAL_RCC_OscConfig+0x4f4>)
 8004f90:	69db      	ldr	r3, [r3, #28]
 8004f92:	4a93      	ldr	r2, [pc, #588]	; (80051e0 <HAL_RCC_OscConfig+0x4f4>)
 8004f94:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004f98:	61d3      	str	r3, [r2, #28]
 8004f9a:	4b91      	ldr	r3, [pc, #580]	; (80051e0 <HAL_RCC_OscConfig+0x4f4>)
 8004f9c:	69db      	ldr	r3, [r3, #28]
 8004f9e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004fa2:	60bb      	str	r3, [r7, #8]
 8004fa4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004fa6:	2301      	movs	r3, #1
 8004fa8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004faa:	4b8e      	ldr	r3, [pc, #568]	; (80051e4 <HAL_RCC_OscConfig+0x4f8>)
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d118      	bne.n	8004fe8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004fb6:	4b8b      	ldr	r3, [pc, #556]	; (80051e4 <HAL_RCC_OscConfig+0x4f8>)
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	4a8a      	ldr	r2, [pc, #552]	; (80051e4 <HAL_RCC_OscConfig+0x4f8>)
 8004fbc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004fc0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004fc2:	f7fe f9bd 	bl	8003340 <HAL_GetTick>
 8004fc6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004fc8:	e008      	b.n	8004fdc <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004fca:	f7fe f9b9 	bl	8003340 <HAL_GetTick>
 8004fce:	4602      	mov	r2, r0
 8004fd0:	693b      	ldr	r3, [r7, #16]
 8004fd2:	1ad3      	subs	r3, r2, r3
 8004fd4:	2b64      	cmp	r3, #100	; 0x64
 8004fd6:	d901      	bls.n	8004fdc <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8004fd8:	2303      	movs	r3, #3
 8004fda:	e0fd      	b.n	80051d8 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004fdc:	4b81      	ldr	r3, [pc, #516]	; (80051e4 <HAL_RCC_OscConfig+0x4f8>)
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	d0f0      	beq.n	8004fca <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	68db      	ldr	r3, [r3, #12]
 8004fec:	2b01      	cmp	r3, #1
 8004fee:	d106      	bne.n	8004ffe <HAL_RCC_OscConfig+0x312>
 8004ff0:	4b7b      	ldr	r3, [pc, #492]	; (80051e0 <HAL_RCC_OscConfig+0x4f4>)
 8004ff2:	6a1b      	ldr	r3, [r3, #32]
 8004ff4:	4a7a      	ldr	r2, [pc, #488]	; (80051e0 <HAL_RCC_OscConfig+0x4f4>)
 8004ff6:	f043 0301 	orr.w	r3, r3, #1
 8004ffa:	6213      	str	r3, [r2, #32]
 8004ffc:	e02d      	b.n	800505a <HAL_RCC_OscConfig+0x36e>
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	68db      	ldr	r3, [r3, #12]
 8005002:	2b00      	cmp	r3, #0
 8005004:	d10c      	bne.n	8005020 <HAL_RCC_OscConfig+0x334>
 8005006:	4b76      	ldr	r3, [pc, #472]	; (80051e0 <HAL_RCC_OscConfig+0x4f4>)
 8005008:	6a1b      	ldr	r3, [r3, #32]
 800500a:	4a75      	ldr	r2, [pc, #468]	; (80051e0 <HAL_RCC_OscConfig+0x4f4>)
 800500c:	f023 0301 	bic.w	r3, r3, #1
 8005010:	6213      	str	r3, [r2, #32]
 8005012:	4b73      	ldr	r3, [pc, #460]	; (80051e0 <HAL_RCC_OscConfig+0x4f4>)
 8005014:	6a1b      	ldr	r3, [r3, #32]
 8005016:	4a72      	ldr	r2, [pc, #456]	; (80051e0 <HAL_RCC_OscConfig+0x4f4>)
 8005018:	f023 0304 	bic.w	r3, r3, #4
 800501c:	6213      	str	r3, [r2, #32]
 800501e:	e01c      	b.n	800505a <HAL_RCC_OscConfig+0x36e>
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	68db      	ldr	r3, [r3, #12]
 8005024:	2b05      	cmp	r3, #5
 8005026:	d10c      	bne.n	8005042 <HAL_RCC_OscConfig+0x356>
 8005028:	4b6d      	ldr	r3, [pc, #436]	; (80051e0 <HAL_RCC_OscConfig+0x4f4>)
 800502a:	6a1b      	ldr	r3, [r3, #32]
 800502c:	4a6c      	ldr	r2, [pc, #432]	; (80051e0 <HAL_RCC_OscConfig+0x4f4>)
 800502e:	f043 0304 	orr.w	r3, r3, #4
 8005032:	6213      	str	r3, [r2, #32]
 8005034:	4b6a      	ldr	r3, [pc, #424]	; (80051e0 <HAL_RCC_OscConfig+0x4f4>)
 8005036:	6a1b      	ldr	r3, [r3, #32]
 8005038:	4a69      	ldr	r2, [pc, #420]	; (80051e0 <HAL_RCC_OscConfig+0x4f4>)
 800503a:	f043 0301 	orr.w	r3, r3, #1
 800503e:	6213      	str	r3, [r2, #32]
 8005040:	e00b      	b.n	800505a <HAL_RCC_OscConfig+0x36e>
 8005042:	4b67      	ldr	r3, [pc, #412]	; (80051e0 <HAL_RCC_OscConfig+0x4f4>)
 8005044:	6a1b      	ldr	r3, [r3, #32]
 8005046:	4a66      	ldr	r2, [pc, #408]	; (80051e0 <HAL_RCC_OscConfig+0x4f4>)
 8005048:	f023 0301 	bic.w	r3, r3, #1
 800504c:	6213      	str	r3, [r2, #32]
 800504e:	4b64      	ldr	r3, [pc, #400]	; (80051e0 <HAL_RCC_OscConfig+0x4f4>)
 8005050:	6a1b      	ldr	r3, [r3, #32]
 8005052:	4a63      	ldr	r2, [pc, #396]	; (80051e0 <HAL_RCC_OscConfig+0x4f4>)
 8005054:	f023 0304 	bic.w	r3, r3, #4
 8005058:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	68db      	ldr	r3, [r3, #12]
 800505e:	2b00      	cmp	r3, #0
 8005060:	d015      	beq.n	800508e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005062:	f7fe f96d 	bl	8003340 <HAL_GetTick>
 8005066:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005068:	e00a      	b.n	8005080 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800506a:	f7fe f969 	bl	8003340 <HAL_GetTick>
 800506e:	4602      	mov	r2, r0
 8005070:	693b      	ldr	r3, [r7, #16]
 8005072:	1ad3      	subs	r3, r2, r3
 8005074:	f241 3288 	movw	r2, #5000	; 0x1388
 8005078:	4293      	cmp	r3, r2
 800507a:	d901      	bls.n	8005080 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800507c:	2303      	movs	r3, #3
 800507e:	e0ab      	b.n	80051d8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005080:	4b57      	ldr	r3, [pc, #348]	; (80051e0 <HAL_RCC_OscConfig+0x4f4>)
 8005082:	6a1b      	ldr	r3, [r3, #32]
 8005084:	f003 0302 	and.w	r3, r3, #2
 8005088:	2b00      	cmp	r3, #0
 800508a:	d0ee      	beq.n	800506a <HAL_RCC_OscConfig+0x37e>
 800508c:	e014      	b.n	80050b8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800508e:	f7fe f957 	bl	8003340 <HAL_GetTick>
 8005092:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005094:	e00a      	b.n	80050ac <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005096:	f7fe f953 	bl	8003340 <HAL_GetTick>
 800509a:	4602      	mov	r2, r0
 800509c:	693b      	ldr	r3, [r7, #16]
 800509e:	1ad3      	subs	r3, r2, r3
 80050a0:	f241 3288 	movw	r2, #5000	; 0x1388
 80050a4:	4293      	cmp	r3, r2
 80050a6:	d901      	bls.n	80050ac <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80050a8:	2303      	movs	r3, #3
 80050aa:	e095      	b.n	80051d8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80050ac:	4b4c      	ldr	r3, [pc, #304]	; (80051e0 <HAL_RCC_OscConfig+0x4f4>)
 80050ae:	6a1b      	ldr	r3, [r3, #32]
 80050b0:	f003 0302 	and.w	r3, r3, #2
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	d1ee      	bne.n	8005096 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80050b8:	7dfb      	ldrb	r3, [r7, #23]
 80050ba:	2b01      	cmp	r3, #1
 80050bc:	d105      	bne.n	80050ca <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80050be:	4b48      	ldr	r3, [pc, #288]	; (80051e0 <HAL_RCC_OscConfig+0x4f4>)
 80050c0:	69db      	ldr	r3, [r3, #28]
 80050c2:	4a47      	ldr	r2, [pc, #284]	; (80051e0 <HAL_RCC_OscConfig+0x4f4>)
 80050c4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80050c8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	69db      	ldr	r3, [r3, #28]
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	f000 8081 	beq.w	80051d6 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80050d4:	4b42      	ldr	r3, [pc, #264]	; (80051e0 <HAL_RCC_OscConfig+0x4f4>)
 80050d6:	685b      	ldr	r3, [r3, #4]
 80050d8:	f003 030c 	and.w	r3, r3, #12
 80050dc:	2b08      	cmp	r3, #8
 80050de:	d061      	beq.n	80051a4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	69db      	ldr	r3, [r3, #28]
 80050e4:	2b02      	cmp	r3, #2
 80050e6:	d146      	bne.n	8005176 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80050e8:	4b3f      	ldr	r3, [pc, #252]	; (80051e8 <HAL_RCC_OscConfig+0x4fc>)
 80050ea:	2200      	movs	r2, #0
 80050ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80050ee:	f7fe f927 	bl	8003340 <HAL_GetTick>
 80050f2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80050f4:	e008      	b.n	8005108 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80050f6:	f7fe f923 	bl	8003340 <HAL_GetTick>
 80050fa:	4602      	mov	r2, r0
 80050fc:	693b      	ldr	r3, [r7, #16]
 80050fe:	1ad3      	subs	r3, r2, r3
 8005100:	2b02      	cmp	r3, #2
 8005102:	d901      	bls.n	8005108 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8005104:	2303      	movs	r3, #3
 8005106:	e067      	b.n	80051d8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005108:	4b35      	ldr	r3, [pc, #212]	; (80051e0 <HAL_RCC_OscConfig+0x4f4>)
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005110:	2b00      	cmp	r3, #0
 8005112:	d1f0      	bne.n	80050f6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	6a1b      	ldr	r3, [r3, #32]
 8005118:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800511c:	d108      	bne.n	8005130 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800511e:	4b30      	ldr	r3, [pc, #192]	; (80051e0 <HAL_RCC_OscConfig+0x4f4>)
 8005120:	685b      	ldr	r3, [r3, #4]
 8005122:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	689b      	ldr	r3, [r3, #8]
 800512a:	492d      	ldr	r1, [pc, #180]	; (80051e0 <HAL_RCC_OscConfig+0x4f4>)
 800512c:	4313      	orrs	r3, r2
 800512e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005130:	4b2b      	ldr	r3, [pc, #172]	; (80051e0 <HAL_RCC_OscConfig+0x4f4>)
 8005132:	685b      	ldr	r3, [r3, #4]
 8005134:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	6a19      	ldr	r1, [r3, #32]
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005140:	430b      	orrs	r3, r1
 8005142:	4927      	ldr	r1, [pc, #156]	; (80051e0 <HAL_RCC_OscConfig+0x4f4>)
 8005144:	4313      	orrs	r3, r2
 8005146:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005148:	4b27      	ldr	r3, [pc, #156]	; (80051e8 <HAL_RCC_OscConfig+0x4fc>)
 800514a:	2201      	movs	r2, #1
 800514c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800514e:	f7fe f8f7 	bl	8003340 <HAL_GetTick>
 8005152:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005154:	e008      	b.n	8005168 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005156:	f7fe f8f3 	bl	8003340 <HAL_GetTick>
 800515a:	4602      	mov	r2, r0
 800515c:	693b      	ldr	r3, [r7, #16]
 800515e:	1ad3      	subs	r3, r2, r3
 8005160:	2b02      	cmp	r3, #2
 8005162:	d901      	bls.n	8005168 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8005164:	2303      	movs	r3, #3
 8005166:	e037      	b.n	80051d8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005168:	4b1d      	ldr	r3, [pc, #116]	; (80051e0 <HAL_RCC_OscConfig+0x4f4>)
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005170:	2b00      	cmp	r3, #0
 8005172:	d0f0      	beq.n	8005156 <HAL_RCC_OscConfig+0x46a>
 8005174:	e02f      	b.n	80051d6 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005176:	4b1c      	ldr	r3, [pc, #112]	; (80051e8 <HAL_RCC_OscConfig+0x4fc>)
 8005178:	2200      	movs	r2, #0
 800517a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800517c:	f7fe f8e0 	bl	8003340 <HAL_GetTick>
 8005180:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005182:	e008      	b.n	8005196 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005184:	f7fe f8dc 	bl	8003340 <HAL_GetTick>
 8005188:	4602      	mov	r2, r0
 800518a:	693b      	ldr	r3, [r7, #16]
 800518c:	1ad3      	subs	r3, r2, r3
 800518e:	2b02      	cmp	r3, #2
 8005190:	d901      	bls.n	8005196 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8005192:	2303      	movs	r3, #3
 8005194:	e020      	b.n	80051d8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005196:	4b12      	ldr	r3, [pc, #72]	; (80051e0 <HAL_RCC_OscConfig+0x4f4>)
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d1f0      	bne.n	8005184 <HAL_RCC_OscConfig+0x498>
 80051a2:	e018      	b.n	80051d6 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	69db      	ldr	r3, [r3, #28]
 80051a8:	2b01      	cmp	r3, #1
 80051aa:	d101      	bne.n	80051b0 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 80051ac:	2301      	movs	r3, #1
 80051ae:	e013      	b.n	80051d8 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80051b0:	4b0b      	ldr	r3, [pc, #44]	; (80051e0 <HAL_RCC_OscConfig+0x4f4>)
 80051b2:	685b      	ldr	r3, [r3, #4]
 80051b4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	6a1b      	ldr	r3, [r3, #32]
 80051c0:	429a      	cmp	r2, r3
 80051c2:	d106      	bne.n	80051d2 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80051ce:	429a      	cmp	r2, r3
 80051d0:	d001      	beq.n	80051d6 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 80051d2:	2301      	movs	r3, #1
 80051d4:	e000      	b.n	80051d8 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80051d6:	2300      	movs	r3, #0
}
 80051d8:	4618      	mov	r0, r3
 80051da:	3718      	adds	r7, #24
 80051dc:	46bd      	mov	sp, r7
 80051de:	bd80      	pop	{r7, pc}
 80051e0:	40021000 	.word	0x40021000
 80051e4:	40007000 	.word	0x40007000
 80051e8:	42420060 	.word	0x42420060

080051ec <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80051ec:	b580      	push	{r7, lr}
 80051ee:	b084      	sub	sp, #16
 80051f0:	af00      	add	r7, sp, #0
 80051f2:	6078      	str	r0, [r7, #4]
 80051f4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	d101      	bne.n	8005200 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80051fc:	2301      	movs	r3, #1
 80051fe:	e0d0      	b.n	80053a2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005200:	4b6a      	ldr	r3, [pc, #424]	; (80053ac <HAL_RCC_ClockConfig+0x1c0>)
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	f003 0307 	and.w	r3, r3, #7
 8005208:	683a      	ldr	r2, [r7, #0]
 800520a:	429a      	cmp	r2, r3
 800520c:	d910      	bls.n	8005230 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800520e:	4b67      	ldr	r3, [pc, #412]	; (80053ac <HAL_RCC_ClockConfig+0x1c0>)
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	f023 0207 	bic.w	r2, r3, #7
 8005216:	4965      	ldr	r1, [pc, #404]	; (80053ac <HAL_RCC_ClockConfig+0x1c0>)
 8005218:	683b      	ldr	r3, [r7, #0]
 800521a:	4313      	orrs	r3, r2
 800521c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800521e:	4b63      	ldr	r3, [pc, #396]	; (80053ac <HAL_RCC_ClockConfig+0x1c0>)
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	f003 0307 	and.w	r3, r3, #7
 8005226:	683a      	ldr	r2, [r7, #0]
 8005228:	429a      	cmp	r2, r3
 800522a:	d001      	beq.n	8005230 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800522c:	2301      	movs	r3, #1
 800522e:	e0b8      	b.n	80053a2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	f003 0302 	and.w	r3, r3, #2
 8005238:	2b00      	cmp	r3, #0
 800523a:	d020      	beq.n	800527e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	f003 0304 	and.w	r3, r3, #4
 8005244:	2b00      	cmp	r3, #0
 8005246:	d005      	beq.n	8005254 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005248:	4b59      	ldr	r3, [pc, #356]	; (80053b0 <HAL_RCC_ClockConfig+0x1c4>)
 800524a:	685b      	ldr	r3, [r3, #4]
 800524c:	4a58      	ldr	r2, [pc, #352]	; (80053b0 <HAL_RCC_ClockConfig+0x1c4>)
 800524e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8005252:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	f003 0308 	and.w	r3, r3, #8
 800525c:	2b00      	cmp	r3, #0
 800525e:	d005      	beq.n	800526c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005260:	4b53      	ldr	r3, [pc, #332]	; (80053b0 <HAL_RCC_ClockConfig+0x1c4>)
 8005262:	685b      	ldr	r3, [r3, #4]
 8005264:	4a52      	ldr	r2, [pc, #328]	; (80053b0 <HAL_RCC_ClockConfig+0x1c4>)
 8005266:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800526a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800526c:	4b50      	ldr	r3, [pc, #320]	; (80053b0 <HAL_RCC_ClockConfig+0x1c4>)
 800526e:	685b      	ldr	r3, [r3, #4]
 8005270:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	689b      	ldr	r3, [r3, #8]
 8005278:	494d      	ldr	r1, [pc, #308]	; (80053b0 <HAL_RCC_ClockConfig+0x1c4>)
 800527a:	4313      	orrs	r3, r2
 800527c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	f003 0301 	and.w	r3, r3, #1
 8005286:	2b00      	cmp	r3, #0
 8005288:	d040      	beq.n	800530c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	685b      	ldr	r3, [r3, #4]
 800528e:	2b01      	cmp	r3, #1
 8005290:	d107      	bne.n	80052a2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005292:	4b47      	ldr	r3, [pc, #284]	; (80053b0 <HAL_RCC_ClockConfig+0x1c4>)
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800529a:	2b00      	cmp	r3, #0
 800529c:	d115      	bne.n	80052ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800529e:	2301      	movs	r3, #1
 80052a0:	e07f      	b.n	80053a2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	685b      	ldr	r3, [r3, #4]
 80052a6:	2b02      	cmp	r3, #2
 80052a8:	d107      	bne.n	80052ba <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80052aa:	4b41      	ldr	r3, [pc, #260]	; (80053b0 <HAL_RCC_ClockConfig+0x1c4>)
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d109      	bne.n	80052ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80052b6:	2301      	movs	r3, #1
 80052b8:	e073      	b.n	80053a2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80052ba:	4b3d      	ldr	r3, [pc, #244]	; (80053b0 <HAL_RCC_ClockConfig+0x1c4>)
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	f003 0302 	and.w	r3, r3, #2
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d101      	bne.n	80052ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80052c6:	2301      	movs	r3, #1
 80052c8:	e06b      	b.n	80053a2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80052ca:	4b39      	ldr	r3, [pc, #228]	; (80053b0 <HAL_RCC_ClockConfig+0x1c4>)
 80052cc:	685b      	ldr	r3, [r3, #4]
 80052ce:	f023 0203 	bic.w	r2, r3, #3
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	685b      	ldr	r3, [r3, #4]
 80052d6:	4936      	ldr	r1, [pc, #216]	; (80053b0 <HAL_RCC_ClockConfig+0x1c4>)
 80052d8:	4313      	orrs	r3, r2
 80052da:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80052dc:	f7fe f830 	bl	8003340 <HAL_GetTick>
 80052e0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80052e2:	e00a      	b.n	80052fa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80052e4:	f7fe f82c 	bl	8003340 <HAL_GetTick>
 80052e8:	4602      	mov	r2, r0
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	1ad3      	subs	r3, r2, r3
 80052ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80052f2:	4293      	cmp	r3, r2
 80052f4:	d901      	bls.n	80052fa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80052f6:	2303      	movs	r3, #3
 80052f8:	e053      	b.n	80053a2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80052fa:	4b2d      	ldr	r3, [pc, #180]	; (80053b0 <HAL_RCC_ClockConfig+0x1c4>)
 80052fc:	685b      	ldr	r3, [r3, #4]
 80052fe:	f003 020c 	and.w	r2, r3, #12
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	685b      	ldr	r3, [r3, #4]
 8005306:	009b      	lsls	r3, r3, #2
 8005308:	429a      	cmp	r2, r3
 800530a:	d1eb      	bne.n	80052e4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800530c:	4b27      	ldr	r3, [pc, #156]	; (80053ac <HAL_RCC_ClockConfig+0x1c0>)
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	f003 0307 	and.w	r3, r3, #7
 8005314:	683a      	ldr	r2, [r7, #0]
 8005316:	429a      	cmp	r2, r3
 8005318:	d210      	bcs.n	800533c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800531a:	4b24      	ldr	r3, [pc, #144]	; (80053ac <HAL_RCC_ClockConfig+0x1c0>)
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	f023 0207 	bic.w	r2, r3, #7
 8005322:	4922      	ldr	r1, [pc, #136]	; (80053ac <HAL_RCC_ClockConfig+0x1c0>)
 8005324:	683b      	ldr	r3, [r7, #0]
 8005326:	4313      	orrs	r3, r2
 8005328:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800532a:	4b20      	ldr	r3, [pc, #128]	; (80053ac <HAL_RCC_ClockConfig+0x1c0>)
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	f003 0307 	and.w	r3, r3, #7
 8005332:	683a      	ldr	r2, [r7, #0]
 8005334:	429a      	cmp	r2, r3
 8005336:	d001      	beq.n	800533c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8005338:	2301      	movs	r3, #1
 800533a:	e032      	b.n	80053a2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	f003 0304 	and.w	r3, r3, #4
 8005344:	2b00      	cmp	r3, #0
 8005346:	d008      	beq.n	800535a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005348:	4b19      	ldr	r3, [pc, #100]	; (80053b0 <HAL_RCC_ClockConfig+0x1c4>)
 800534a:	685b      	ldr	r3, [r3, #4]
 800534c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	68db      	ldr	r3, [r3, #12]
 8005354:	4916      	ldr	r1, [pc, #88]	; (80053b0 <HAL_RCC_ClockConfig+0x1c4>)
 8005356:	4313      	orrs	r3, r2
 8005358:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	f003 0308 	and.w	r3, r3, #8
 8005362:	2b00      	cmp	r3, #0
 8005364:	d009      	beq.n	800537a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8005366:	4b12      	ldr	r3, [pc, #72]	; (80053b0 <HAL_RCC_ClockConfig+0x1c4>)
 8005368:	685b      	ldr	r3, [r3, #4]
 800536a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	691b      	ldr	r3, [r3, #16]
 8005372:	00db      	lsls	r3, r3, #3
 8005374:	490e      	ldr	r1, [pc, #56]	; (80053b0 <HAL_RCC_ClockConfig+0x1c4>)
 8005376:	4313      	orrs	r3, r2
 8005378:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800537a:	f000 f821 	bl	80053c0 <HAL_RCC_GetSysClockFreq>
 800537e:	4601      	mov	r1, r0
 8005380:	4b0b      	ldr	r3, [pc, #44]	; (80053b0 <HAL_RCC_ClockConfig+0x1c4>)
 8005382:	685b      	ldr	r3, [r3, #4]
 8005384:	091b      	lsrs	r3, r3, #4
 8005386:	f003 030f 	and.w	r3, r3, #15
 800538a:	4a0a      	ldr	r2, [pc, #40]	; (80053b4 <HAL_RCC_ClockConfig+0x1c8>)
 800538c:	5cd3      	ldrb	r3, [r2, r3]
 800538e:	fa21 f303 	lsr.w	r3, r1, r3
 8005392:	4a09      	ldr	r2, [pc, #36]	; (80053b8 <HAL_RCC_ClockConfig+0x1cc>)
 8005394:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8005396:	4b09      	ldr	r3, [pc, #36]	; (80053bc <HAL_RCC_ClockConfig+0x1d0>)
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	4618      	mov	r0, r3
 800539c:	f7fd ff8e 	bl	80032bc <HAL_InitTick>

  return HAL_OK;
 80053a0:	2300      	movs	r3, #0
}
 80053a2:	4618      	mov	r0, r3
 80053a4:	3710      	adds	r7, #16
 80053a6:	46bd      	mov	sp, r7
 80053a8:	bd80      	pop	{r7, pc}
 80053aa:	bf00      	nop
 80053ac:	40022000 	.word	0x40022000
 80053b0:	40021000 	.word	0x40021000
 80053b4:	0800a598 	.word	0x0800a598
 80053b8:	200000a8 	.word	0x200000a8
 80053bc:	200000c8 	.word	0x200000c8

080053c0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80053c0:	b490      	push	{r4, r7}
 80053c2:	b08a      	sub	sp, #40	; 0x28
 80053c4:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80053c6:	4b2a      	ldr	r3, [pc, #168]	; (8005470 <HAL_RCC_GetSysClockFreq+0xb0>)
 80053c8:	1d3c      	adds	r4, r7, #4
 80053ca:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80053cc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80053d0:	4b28      	ldr	r3, [pc, #160]	; (8005474 <HAL_RCC_GetSysClockFreq+0xb4>)
 80053d2:	881b      	ldrh	r3, [r3, #0]
 80053d4:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80053d6:	2300      	movs	r3, #0
 80053d8:	61fb      	str	r3, [r7, #28]
 80053da:	2300      	movs	r3, #0
 80053dc:	61bb      	str	r3, [r7, #24]
 80053de:	2300      	movs	r3, #0
 80053e0:	627b      	str	r3, [r7, #36]	; 0x24
 80053e2:	2300      	movs	r3, #0
 80053e4:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80053e6:	2300      	movs	r3, #0
 80053e8:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80053ea:	4b23      	ldr	r3, [pc, #140]	; (8005478 <HAL_RCC_GetSysClockFreq+0xb8>)
 80053ec:	685b      	ldr	r3, [r3, #4]
 80053ee:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80053f0:	69fb      	ldr	r3, [r7, #28]
 80053f2:	f003 030c 	and.w	r3, r3, #12
 80053f6:	2b04      	cmp	r3, #4
 80053f8:	d002      	beq.n	8005400 <HAL_RCC_GetSysClockFreq+0x40>
 80053fa:	2b08      	cmp	r3, #8
 80053fc:	d003      	beq.n	8005406 <HAL_RCC_GetSysClockFreq+0x46>
 80053fe:	e02d      	b.n	800545c <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8005400:	4b1e      	ldr	r3, [pc, #120]	; (800547c <HAL_RCC_GetSysClockFreq+0xbc>)
 8005402:	623b      	str	r3, [r7, #32]
      break;
 8005404:	e02d      	b.n	8005462 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8005406:	69fb      	ldr	r3, [r7, #28]
 8005408:	0c9b      	lsrs	r3, r3, #18
 800540a:	f003 030f 	and.w	r3, r3, #15
 800540e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8005412:	4413      	add	r3, r2
 8005414:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8005418:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800541a:	69fb      	ldr	r3, [r7, #28]
 800541c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005420:	2b00      	cmp	r3, #0
 8005422:	d013      	beq.n	800544c <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8005424:	4b14      	ldr	r3, [pc, #80]	; (8005478 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005426:	685b      	ldr	r3, [r3, #4]
 8005428:	0c5b      	lsrs	r3, r3, #17
 800542a:	f003 0301 	and.w	r3, r3, #1
 800542e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8005432:	4413      	add	r3, r2
 8005434:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8005438:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800543a:	697b      	ldr	r3, [r7, #20]
 800543c:	4a0f      	ldr	r2, [pc, #60]	; (800547c <HAL_RCC_GetSysClockFreq+0xbc>)
 800543e:	fb02 f203 	mul.w	r2, r2, r3
 8005442:	69bb      	ldr	r3, [r7, #24]
 8005444:	fbb2 f3f3 	udiv	r3, r2, r3
 8005448:	627b      	str	r3, [r7, #36]	; 0x24
 800544a:	e004      	b.n	8005456 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800544c:	697b      	ldr	r3, [r7, #20]
 800544e:	4a0c      	ldr	r2, [pc, #48]	; (8005480 <HAL_RCC_GetSysClockFreq+0xc0>)
 8005450:	fb02 f303 	mul.w	r3, r2, r3
 8005454:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8005456:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005458:	623b      	str	r3, [r7, #32]
      break;
 800545a:	e002      	b.n	8005462 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800545c:	4b07      	ldr	r3, [pc, #28]	; (800547c <HAL_RCC_GetSysClockFreq+0xbc>)
 800545e:	623b      	str	r3, [r7, #32]
      break;
 8005460:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005462:	6a3b      	ldr	r3, [r7, #32]
}
 8005464:	4618      	mov	r0, r3
 8005466:	3728      	adds	r7, #40	; 0x28
 8005468:	46bd      	mov	sp, r7
 800546a:	bc90      	pop	{r4, r7}
 800546c:	4770      	bx	lr
 800546e:	bf00      	nop
 8005470:	08007d70 	.word	0x08007d70
 8005474:	08007d80 	.word	0x08007d80
 8005478:	40021000 	.word	0x40021000
 800547c:	007a1200 	.word	0x007a1200
 8005480:	003d0900 	.word	0x003d0900

08005484 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005484:	b480      	push	{r7}
 8005486:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005488:	4b02      	ldr	r3, [pc, #8]	; (8005494 <HAL_RCC_GetHCLKFreq+0x10>)
 800548a:	681b      	ldr	r3, [r3, #0]
}
 800548c:	4618      	mov	r0, r3
 800548e:	46bd      	mov	sp, r7
 8005490:	bc80      	pop	{r7}
 8005492:	4770      	bx	lr
 8005494:	200000a8 	.word	0x200000a8

08005498 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005498:	b580      	push	{r7, lr}
 800549a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800549c:	f7ff fff2 	bl	8005484 <HAL_RCC_GetHCLKFreq>
 80054a0:	4601      	mov	r1, r0
 80054a2:	4b05      	ldr	r3, [pc, #20]	; (80054b8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80054a4:	685b      	ldr	r3, [r3, #4]
 80054a6:	0a1b      	lsrs	r3, r3, #8
 80054a8:	f003 0307 	and.w	r3, r3, #7
 80054ac:	4a03      	ldr	r2, [pc, #12]	; (80054bc <HAL_RCC_GetPCLK1Freq+0x24>)
 80054ae:	5cd3      	ldrb	r3, [r2, r3]
 80054b0:	fa21 f303 	lsr.w	r3, r1, r3
}
 80054b4:	4618      	mov	r0, r3
 80054b6:	bd80      	pop	{r7, pc}
 80054b8:	40021000 	.word	0x40021000
 80054bc:	0800a5a8 	.word	0x0800a5a8

080054c0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80054c0:	b480      	push	{r7}
 80054c2:	b085      	sub	sp, #20
 80054c4:	af00      	add	r7, sp, #0
 80054c6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80054c8:	4b0a      	ldr	r3, [pc, #40]	; (80054f4 <RCC_Delay+0x34>)
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	4a0a      	ldr	r2, [pc, #40]	; (80054f8 <RCC_Delay+0x38>)
 80054ce:	fba2 2303 	umull	r2, r3, r2, r3
 80054d2:	0a5b      	lsrs	r3, r3, #9
 80054d4:	687a      	ldr	r2, [r7, #4]
 80054d6:	fb02 f303 	mul.w	r3, r2, r3
 80054da:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80054dc:	bf00      	nop
  }
  while (Delay --);
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	1e5a      	subs	r2, r3, #1
 80054e2:	60fa      	str	r2, [r7, #12]
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	d1f9      	bne.n	80054dc <RCC_Delay+0x1c>
}
 80054e8:	bf00      	nop
 80054ea:	3714      	adds	r7, #20
 80054ec:	46bd      	mov	sp, r7
 80054ee:	bc80      	pop	{r7}
 80054f0:	4770      	bx	lr
 80054f2:	bf00      	nop
 80054f4:	200000a8 	.word	0x200000a8
 80054f8:	10624dd3 	.word	0x10624dd3

080054fc <__errno>:
 80054fc:	4b01      	ldr	r3, [pc, #4]	; (8005504 <__errno+0x8>)
 80054fe:	6818      	ldr	r0, [r3, #0]
 8005500:	4770      	bx	lr
 8005502:	bf00      	nop
 8005504:	200000d0 	.word	0x200000d0

08005508 <__libc_init_array>:
 8005508:	b570      	push	{r4, r5, r6, lr}
 800550a:	2500      	movs	r5, #0
 800550c:	4e0c      	ldr	r6, [pc, #48]	; (8005540 <__libc_init_array+0x38>)
 800550e:	4c0d      	ldr	r4, [pc, #52]	; (8005544 <__libc_init_array+0x3c>)
 8005510:	1ba4      	subs	r4, r4, r6
 8005512:	10a4      	asrs	r4, r4, #2
 8005514:	42a5      	cmp	r5, r4
 8005516:	d109      	bne.n	800552c <__libc_init_array+0x24>
 8005518:	f002 fc06 	bl	8007d28 <_init>
 800551c:	2500      	movs	r5, #0
 800551e:	4e0a      	ldr	r6, [pc, #40]	; (8005548 <__libc_init_array+0x40>)
 8005520:	4c0a      	ldr	r4, [pc, #40]	; (800554c <__libc_init_array+0x44>)
 8005522:	1ba4      	subs	r4, r4, r6
 8005524:	10a4      	asrs	r4, r4, #2
 8005526:	42a5      	cmp	r5, r4
 8005528:	d105      	bne.n	8005536 <__libc_init_array+0x2e>
 800552a:	bd70      	pop	{r4, r5, r6, pc}
 800552c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005530:	4798      	blx	r3
 8005532:	3501      	adds	r5, #1
 8005534:	e7ee      	b.n	8005514 <__libc_init_array+0xc>
 8005536:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800553a:	4798      	blx	r3
 800553c:	3501      	adds	r5, #1
 800553e:	e7f2      	b.n	8005526 <__libc_init_array+0x1e>
 8005540:	0800a858 	.word	0x0800a858
 8005544:	0800a858 	.word	0x0800a858
 8005548:	0800a858 	.word	0x0800a858
 800554c:	0800a85c 	.word	0x0800a85c

08005550 <memset>:
 8005550:	4603      	mov	r3, r0
 8005552:	4402      	add	r2, r0
 8005554:	4293      	cmp	r3, r2
 8005556:	d100      	bne.n	800555a <memset+0xa>
 8005558:	4770      	bx	lr
 800555a:	f803 1b01 	strb.w	r1, [r3], #1
 800555e:	e7f9      	b.n	8005554 <memset+0x4>

08005560 <__cvt>:
 8005560:	2b00      	cmp	r3, #0
 8005562:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005566:	461e      	mov	r6, r3
 8005568:	bfbb      	ittet	lt
 800556a:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 800556e:	461e      	movlt	r6, r3
 8005570:	2300      	movge	r3, #0
 8005572:	232d      	movlt	r3, #45	; 0x2d
 8005574:	b088      	sub	sp, #32
 8005576:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8005578:	e9dd 1a12 	ldrd	r1, sl, [sp, #72]	; 0x48
 800557c:	f027 0720 	bic.w	r7, r7, #32
 8005580:	2f46      	cmp	r7, #70	; 0x46
 8005582:	4614      	mov	r4, r2
 8005584:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8005586:	700b      	strb	r3, [r1, #0]
 8005588:	d004      	beq.n	8005594 <__cvt+0x34>
 800558a:	2f45      	cmp	r7, #69	; 0x45
 800558c:	d100      	bne.n	8005590 <__cvt+0x30>
 800558e:	3501      	adds	r5, #1
 8005590:	2302      	movs	r3, #2
 8005592:	e000      	b.n	8005596 <__cvt+0x36>
 8005594:	2303      	movs	r3, #3
 8005596:	aa07      	add	r2, sp, #28
 8005598:	9204      	str	r2, [sp, #16]
 800559a:	aa06      	add	r2, sp, #24
 800559c:	e9cd a202 	strd	sl, r2, [sp, #8]
 80055a0:	e9cd 3500 	strd	r3, r5, [sp]
 80055a4:	4622      	mov	r2, r4
 80055a6:	4633      	mov	r3, r6
 80055a8:	f000 fcea 	bl	8005f80 <_dtoa_r>
 80055ac:	2f47      	cmp	r7, #71	; 0x47
 80055ae:	4680      	mov	r8, r0
 80055b0:	d102      	bne.n	80055b8 <__cvt+0x58>
 80055b2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80055b4:	07db      	lsls	r3, r3, #31
 80055b6:	d526      	bpl.n	8005606 <__cvt+0xa6>
 80055b8:	2f46      	cmp	r7, #70	; 0x46
 80055ba:	eb08 0905 	add.w	r9, r8, r5
 80055be:	d111      	bne.n	80055e4 <__cvt+0x84>
 80055c0:	f898 3000 	ldrb.w	r3, [r8]
 80055c4:	2b30      	cmp	r3, #48	; 0x30
 80055c6:	d10a      	bne.n	80055de <__cvt+0x7e>
 80055c8:	2200      	movs	r2, #0
 80055ca:	2300      	movs	r3, #0
 80055cc:	4620      	mov	r0, r4
 80055ce:	4631      	mov	r1, r6
 80055d0:	f7fb f9ea 	bl	80009a8 <__aeabi_dcmpeq>
 80055d4:	b918      	cbnz	r0, 80055de <__cvt+0x7e>
 80055d6:	f1c5 0501 	rsb	r5, r5, #1
 80055da:	f8ca 5000 	str.w	r5, [sl]
 80055de:	f8da 3000 	ldr.w	r3, [sl]
 80055e2:	4499      	add	r9, r3
 80055e4:	2200      	movs	r2, #0
 80055e6:	2300      	movs	r3, #0
 80055e8:	4620      	mov	r0, r4
 80055ea:	4631      	mov	r1, r6
 80055ec:	f7fb f9dc 	bl	80009a8 <__aeabi_dcmpeq>
 80055f0:	b938      	cbnz	r0, 8005602 <__cvt+0xa2>
 80055f2:	2230      	movs	r2, #48	; 0x30
 80055f4:	9b07      	ldr	r3, [sp, #28]
 80055f6:	454b      	cmp	r3, r9
 80055f8:	d205      	bcs.n	8005606 <__cvt+0xa6>
 80055fa:	1c59      	adds	r1, r3, #1
 80055fc:	9107      	str	r1, [sp, #28]
 80055fe:	701a      	strb	r2, [r3, #0]
 8005600:	e7f8      	b.n	80055f4 <__cvt+0x94>
 8005602:	f8cd 901c 	str.w	r9, [sp, #28]
 8005606:	4640      	mov	r0, r8
 8005608:	9b07      	ldr	r3, [sp, #28]
 800560a:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800560c:	eba3 0308 	sub.w	r3, r3, r8
 8005610:	6013      	str	r3, [r2, #0]
 8005612:	b008      	add	sp, #32
 8005614:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08005618 <__exponent>:
 8005618:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800561a:	2900      	cmp	r1, #0
 800561c:	bfb4      	ite	lt
 800561e:	232d      	movlt	r3, #45	; 0x2d
 8005620:	232b      	movge	r3, #43	; 0x2b
 8005622:	4604      	mov	r4, r0
 8005624:	bfb8      	it	lt
 8005626:	4249      	neglt	r1, r1
 8005628:	2909      	cmp	r1, #9
 800562a:	f804 2b02 	strb.w	r2, [r4], #2
 800562e:	7043      	strb	r3, [r0, #1]
 8005630:	dd21      	ble.n	8005676 <__exponent+0x5e>
 8005632:	f10d 0307 	add.w	r3, sp, #7
 8005636:	461f      	mov	r7, r3
 8005638:	260a      	movs	r6, #10
 800563a:	fb91 f5f6 	sdiv	r5, r1, r6
 800563e:	fb06 1115 	mls	r1, r6, r5, r1
 8005642:	2d09      	cmp	r5, #9
 8005644:	f101 0130 	add.w	r1, r1, #48	; 0x30
 8005648:	f803 1c01 	strb.w	r1, [r3, #-1]
 800564c:	f103 32ff 	add.w	r2, r3, #4294967295
 8005650:	4629      	mov	r1, r5
 8005652:	dc09      	bgt.n	8005668 <__exponent+0x50>
 8005654:	3130      	adds	r1, #48	; 0x30
 8005656:	3b02      	subs	r3, #2
 8005658:	f802 1c01 	strb.w	r1, [r2, #-1]
 800565c:	42bb      	cmp	r3, r7
 800565e:	4622      	mov	r2, r4
 8005660:	d304      	bcc.n	800566c <__exponent+0x54>
 8005662:	1a10      	subs	r0, r2, r0
 8005664:	b003      	add	sp, #12
 8005666:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005668:	4613      	mov	r3, r2
 800566a:	e7e6      	b.n	800563a <__exponent+0x22>
 800566c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005670:	f804 2b01 	strb.w	r2, [r4], #1
 8005674:	e7f2      	b.n	800565c <__exponent+0x44>
 8005676:	2330      	movs	r3, #48	; 0x30
 8005678:	4419      	add	r1, r3
 800567a:	7083      	strb	r3, [r0, #2]
 800567c:	1d02      	adds	r2, r0, #4
 800567e:	70c1      	strb	r1, [r0, #3]
 8005680:	e7ef      	b.n	8005662 <__exponent+0x4a>
	...

08005684 <_printf_float>:
 8005684:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005688:	b091      	sub	sp, #68	; 0x44
 800568a:	460c      	mov	r4, r1
 800568c:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 800568e:	4693      	mov	fp, r2
 8005690:	461e      	mov	r6, r3
 8005692:	4605      	mov	r5, r0
 8005694:	f001 fa28 	bl	8006ae8 <_localeconv_r>
 8005698:	6803      	ldr	r3, [r0, #0]
 800569a:	4618      	mov	r0, r3
 800569c:	9309      	str	r3, [sp, #36]	; 0x24
 800569e:	f7fa fd57 	bl	8000150 <strlen>
 80056a2:	2300      	movs	r3, #0
 80056a4:	930e      	str	r3, [sp, #56]	; 0x38
 80056a6:	683b      	ldr	r3, [r7, #0]
 80056a8:	900a      	str	r0, [sp, #40]	; 0x28
 80056aa:	3307      	adds	r3, #7
 80056ac:	f023 0307 	bic.w	r3, r3, #7
 80056b0:	f103 0208 	add.w	r2, r3, #8
 80056b4:	f894 8018 	ldrb.w	r8, [r4, #24]
 80056b8:	f8d4 a000 	ldr.w	sl, [r4]
 80056bc:	603a      	str	r2, [r7, #0]
 80056be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056c2:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80056c6:	e9d4 7912 	ldrd	r7, r9, [r4, #72]	; 0x48
 80056ca:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80056ce:	930b      	str	r3, [sp, #44]	; 0x2c
 80056d0:	f04f 32ff 	mov.w	r2, #4294967295
 80056d4:	4ba6      	ldr	r3, [pc, #664]	; (8005970 <_printf_float+0x2ec>)
 80056d6:	4638      	mov	r0, r7
 80056d8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80056da:	f7fb f997 	bl	8000a0c <__aeabi_dcmpun>
 80056de:	bb68      	cbnz	r0, 800573c <_printf_float+0xb8>
 80056e0:	f04f 32ff 	mov.w	r2, #4294967295
 80056e4:	4ba2      	ldr	r3, [pc, #648]	; (8005970 <_printf_float+0x2ec>)
 80056e6:	4638      	mov	r0, r7
 80056e8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80056ea:	f7fb f971 	bl	80009d0 <__aeabi_dcmple>
 80056ee:	bb28      	cbnz	r0, 800573c <_printf_float+0xb8>
 80056f0:	2200      	movs	r2, #0
 80056f2:	2300      	movs	r3, #0
 80056f4:	4638      	mov	r0, r7
 80056f6:	4649      	mov	r1, r9
 80056f8:	f7fb f960 	bl	80009bc <__aeabi_dcmplt>
 80056fc:	b110      	cbz	r0, 8005704 <_printf_float+0x80>
 80056fe:	232d      	movs	r3, #45	; 0x2d
 8005700:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005704:	4f9b      	ldr	r7, [pc, #620]	; (8005974 <_printf_float+0x2f0>)
 8005706:	4b9c      	ldr	r3, [pc, #624]	; (8005978 <_printf_float+0x2f4>)
 8005708:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800570c:	bf98      	it	ls
 800570e:	461f      	movls	r7, r3
 8005710:	2303      	movs	r3, #3
 8005712:	f04f 0900 	mov.w	r9, #0
 8005716:	6123      	str	r3, [r4, #16]
 8005718:	f02a 0304 	bic.w	r3, sl, #4
 800571c:	6023      	str	r3, [r4, #0]
 800571e:	9600      	str	r6, [sp, #0]
 8005720:	465b      	mov	r3, fp
 8005722:	aa0f      	add	r2, sp, #60	; 0x3c
 8005724:	4621      	mov	r1, r4
 8005726:	4628      	mov	r0, r5
 8005728:	f000 f9e2 	bl	8005af0 <_printf_common>
 800572c:	3001      	adds	r0, #1
 800572e:	f040 8090 	bne.w	8005852 <_printf_float+0x1ce>
 8005732:	f04f 30ff 	mov.w	r0, #4294967295
 8005736:	b011      	add	sp, #68	; 0x44
 8005738:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800573c:	463a      	mov	r2, r7
 800573e:	464b      	mov	r3, r9
 8005740:	4638      	mov	r0, r7
 8005742:	4649      	mov	r1, r9
 8005744:	f7fb f962 	bl	8000a0c <__aeabi_dcmpun>
 8005748:	b110      	cbz	r0, 8005750 <_printf_float+0xcc>
 800574a:	4f8c      	ldr	r7, [pc, #560]	; (800597c <_printf_float+0x2f8>)
 800574c:	4b8c      	ldr	r3, [pc, #560]	; (8005980 <_printf_float+0x2fc>)
 800574e:	e7db      	b.n	8005708 <_printf_float+0x84>
 8005750:	6863      	ldr	r3, [r4, #4]
 8005752:	f44a 6280 	orr.w	r2, sl, #1024	; 0x400
 8005756:	1c59      	adds	r1, r3, #1
 8005758:	a80d      	add	r0, sp, #52	; 0x34
 800575a:	a90e      	add	r1, sp, #56	; 0x38
 800575c:	d140      	bne.n	80057e0 <_printf_float+0x15c>
 800575e:	2306      	movs	r3, #6
 8005760:	6063      	str	r3, [r4, #4]
 8005762:	f04f 0c00 	mov.w	ip, #0
 8005766:	f10d 0333 	add.w	r3, sp, #51	; 0x33
 800576a:	e9cd 2301 	strd	r2, r3, [sp, #4]
 800576e:	6863      	ldr	r3, [r4, #4]
 8005770:	6022      	str	r2, [r4, #0]
 8005772:	e9cd 0803 	strd	r0, r8, [sp, #12]
 8005776:	9300      	str	r3, [sp, #0]
 8005778:	463a      	mov	r2, r7
 800577a:	464b      	mov	r3, r9
 800577c:	e9cd 1c05 	strd	r1, ip, [sp, #20]
 8005780:	4628      	mov	r0, r5
 8005782:	f7ff feed 	bl	8005560 <__cvt>
 8005786:	f008 03df 	and.w	r3, r8, #223	; 0xdf
 800578a:	2b47      	cmp	r3, #71	; 0x47
 800578c:	4607      	mov	r7, r0
 800578e:	d109      	bne.n	80057a4 <_printf_float+0x120>
 8005790:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005792:	1cd8      	adds	r0, r3, #3
 8005794:	db02      	blt.n	800579c <_printf_float+0x118>
 8005796:	6862      	ldr	r2, [r4, #4]
 8005798:	4293      	cmp	r3, r2
 800579a:	dd47      	ble.n	800582c <_printf_float+0x1a8>
 800579c:	f1a8 0802 	sub.w	r8, r8, #2
 80057a0:	fa5f f888 	uxtb.w	r8, r8
 80057a4:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
 80057a8:	990d      	ldr	r1, [sp, #52]	; 0x34
 80057aa:	d824      	bhi.n	80057f6 <_printf_float+0x172>
 80057ac:	3901      	subs	r1, #1
 80057ae:	4642      	mov	r2, r8
 80057b0:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80057b4:	910d      	str	r1, [sp, #52]	; 0x34
 80057b6:	f7ff ff2f 	bl	8005618 <__exponent>
 80057ba:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80057bc:	4681      	mov	r9, r0
 80057be:	1813      	adds	r3, r2, r0
 80057c0:	2a01      	cmp	r2, #1
 80057c2:	6123      	str	r3, [r4, #16]
 80057c4:	dc02      	bgt.n	80057cc <_printf_float+0x148>
 80057c6:	6822      	ldr	r2, [r4, #0]
 80057c8:	07d1      	lsls	r1, r2, #31
 80057ca:	d501      	bpl.n	80057d0 <_printf_float+0x14c>
 80057cc:	3301      	adds	r3, #1
 80057ce:	6123      	str	r3, [r4, #16]
 80057d0:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	d0a2      	beq.n	800571e <_printf_float+0x9a>
 80057d8:	232d      	movs	r3, #45	; 0x2d
 80057da:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80057de:	e79e      	b.n	800571e <_printf_float+0x9a>
 80057e0:	f1b8 0f67 	cmp.w	r8, #103	; 0x67
 80057e4:	f000 816e 	beq.w	8005ac4 <_printf_float+0x440>
 80057e8:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80057ec:	d1b9      	bne.n	8005762 <_printf_float+0xde>
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	d1b7      	bne.n	8005762 <_printf_float+0xde>
 80057f2:	2301      	movs	r3, #1
 80057f4:	e7b4      	b.n	8005760 <_printf_float+0xdc>
 80057f6:	f1b8 0f66 	cmp.w	r8, #102	; 0x66
 80057fa:	d119      	bne.n	8005830 <_printf_float+0x1ac>
 80057fc:	2900      	cmp	r1, #0
 80057fe:	6863      	ldr	r3, [r4, #4]
 8005800:	dd0c      	ble.n	800581c <_printf_float+0x198>
 8005802:	6121      	str	r1, [r4, #16]
 8005804:	b913      	cbnz	r3, 800580c <_printf_float+0x188>
 8005806:	6822      	ldr	r2, [r4, #0]
 8005808:	07d2      	lsls	r2, r2, #31
 800580a:	d502      	bpl.n	8005812 <_printf_float+0x18e>
 800580c:	3301      	adds	r3, #1
 800580e:	440b      	add	r3, r1
 8005810:	6123      	str	r3, [r4, #16]
 8005812:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005814:	f04f 0900 	mov.w	r9, #0
 8005818:	65a3      	str	r3, [r4, #88]	; 0x58
 800581a:	e7d9      	b.n	80057d0 <_printf_float+0x14c>
 800581c:	b913      	cbnz	r3, 8005824 <_printf_float+0x1a0>
 800581e:	6822      	ldr	r2, [r4, #0]
 8005820:	07d0      	lsls	r0, r2, #31
 8005822:	d501      	bpl.n	8005828 <_printf_float+0x1a4>
 8005824:	3302      	adds	r3, #2
 8005826:	e7f3      	b.n	8005810 <_printf_float+0x18c>
 8005828:	2301      	movs	r3, #1
 800582a:	e7f1      	b.n	8005810 <_printf_float+0x18c>
 800582c:	f04f 0867 	mov.w	r8, #103	; 0x67
 8005830:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 8005834:	4293      	cmp	r3, r2
 8005836:	db05      	blt.n	8005844 <_printf_float+0x1c0>
 8005838:	6822      	ldr	r2, [r4, #0]
 800583a:	6123      	str	r3, [r4, #16]
 800583c:	07d1      	lsls	r1, r2, #31
 800583e:	d5e8      	bpl.n	8005812 <_printf_float+0x18e>
 8005840:	3301      	adds	r3, #1
 8005842:	e7e5      	b.n	8005810 <_printf_float+0x18c>
 8005844:	2b00      	cmp	r3, #0
 8005846:	bfcc      	ite	gt
 8005848:	2301      	movgt	r3, #1
 800584a:	f1c3 0302 	rsble	r3, r3, #2
 800584e:	4413      	add	r3, r2
 8005850:	e7de      	b.n	8005810 <_printf_float+0x18c>
 8005852:	6823      	ldr	r3, [r4, #0]
 8005854:	055a      	lsls	r2, r3, #21
 8005856:	d407      	bmi.n	8005868 <_printf_float+0x1e4>
 8005858:	6923      	ldr	r3, [r4, #16]
 800585a:	463a      	mov	r2, r7
 800585c:	4659      	mov	r1, fp
 800585e:	4628      	mov	r0, r5
 8005860:	47b0      	blx	r6
 8005862:	3001      	adds	r0, #1
 8005864:	d129      	bne.n	80058ba <_printf_float+0x236>
 8005866:	e764      	b.n	8005732 <_printf_float+0xae>
 8005868:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
 800586c:	f240 80d7 	bls.w	8005a1e <_printf_float+0x39a>
 8005870:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005874:	2200      	movs	r2, #0
 8005876:	2300      	movs	r3, #0
 8005878:	f7fb f896 	bl	80009a8 <__aeabi_dcmpeq>
 800587c:	b388      	cbz	r0, 80058e2 <_printf_float+0x25e>
 800587e:	2301      	movs	r3, #1
 8005880:	4a40      	ldr	r2, [pc, #256]	; (8005984 <_printf_float+0x300>)
 8005882:	4659      	mov	r1, fp
 8005884:	4628      	mov	r0, r5
 8005886:	47b0      	blx	r6
 8005888:	3001      	adds	r0, #1
 800588a:	f43f af52 	beq.w	8005732 <_printf_float+0xae>
 800588e:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8005892:	429a      	cmp	r2, r3
 8005894:	db02      	blt.n	800589c <_printf_float+0x218>
 8005896:	6823      	ldr	r3, [r4, #0]
 8005898:	07d8      	lsls	r0, r3, #31
 800589a:	d50e      	bpl.n	80058ba <_printf_float+0x236>
 800589c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80058a0:	4659      	mov	r1, fp
 80058a2:	4628      	mov	r0, r5
 80058a4:	47b0      	blx	r6
 80058a6:	3001      	adds	r0, #1
 80058a8:	f43f af43 	beq.w	8005732 <_printf_float+0xae>
 80058ac:	2700      	movs	r7, #0
 80058ae:	f104 081a 	add.w	r8, r4, #26
 80058b2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80058b4:	3b01      	subs	r3, #1
 80058b6:	42bb      	cmp	r3, r7
 80058b8:	dc09      	bgt.n	80058ce <_printf_float+0x24a>
 80058ba:	6823      	ldr	r3, [r4, #0]
 80058bc:	079f      	lsls	r7, r3, #30
 80058be:	f100 80fd 	bmi.w	8005abc <_printf_float+0x438>
 80058c2:	68e0      	ldr	r0, [r4, #12]
 80058c4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80058c6:	4298      	cmp	r0, r3
 80058c8:	bfb8      	it	lt
 80058ca:	4618      	movlt	r0, r3
 80058cc:	e733      	b.n	8005736 <_printf_float+0xb2>
 80058ce:	2301      	movs	r3, #1
 80058d0:	4642      	mov	r2, r8
 80058d2:	4659      	mov	r1, fp
 80058d4:	4628      	mov	r0, r5
 80058d6:	47b0      	blx	r6
 80058d8:	3001      	adds	r0, #1
 80058da:	f43f af2a 	beq.w	8005732 <_printf_float+0xae>
 80058de:	3701      	adds	r7, #1
 80058e0:	e7e7      	b.n	80058b2 <_printf_float+0x22e>
 80058e2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	dc2b      	bgt.n	8005940 <_printf_float+0x2bc>
 80058e8:	2301      	movs	r3, #1
 80058ea:	4a26      	ldr	r2, [pc, #152]	; (8005984 <_printf_float+0x300>)
 80058ec:	4659      	mov	r1, fp
 80058ee:	4628      	mov	r0, r5
 80058f0:	47b0      	blx	r6
 80058f2:	3001      	adds	r0, #1
 80058f4:	f43f af1d 	beq.w	8005732 <_printf_float+0xae>
 80058f8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80058fa:	b923      	cbnz	r3, 8005906 <_printf_float+0x282>
 80058fc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80058fe:	b913      	cbnz	r3, 8005906 <_printf_float+0x282>
 8005900:	6823      	ldr	r3, [r4, #0]
 8005902:	07d9      	lsls	r1, r3, #31
 8005904:	d5d9      	bpl.n	80058ba <_printf_float+0x236>
 8005906:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800590a:	4659      	mov	r1, fp
 800590c:	4628      	mov	r0, r5
 800590e:	47b0      	blx	r6
 8005910:	3001      	adds	r0, #1
 8005912:	f43f af0e 	beq.w	8005732 <_printf_float+0xae>
 8005916:	f04f 0800 	mov.w	r8, #0
 800591a:	f104 091a 	add.w	r9, r4, #26
 800591e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005920:	425b      	negs	r3, r3
 8005922:	4543      	cmp	r3, r8
 8005924:	dc01      	bgt.n	800592a <_printf_float+0x2a6>
 8005926:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005928:	e797      	b.n	800585a <_printf_float+0x1d6>
 800592a:	2301      	movs	r3, #1
 800592c:	464a      	mov	r2, r9
 800592e:	4659      	mov	r1, fp
 8005930:	4628      	mov	r0, r5
 8005932:	47b0      	blx	r6
 8005934:	3001      	adds	r0, #1
 8005936:	f43f aefc 	beq.w	8005732 <_printf_float+0xae>
 800593a:	f108 0801 	add.w	r8, r8, #1
 800593e:	e7ee      	b.n	800591e <_printf_float+0x29a>
 8005940:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005942:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005944:	429a      	cmp	r2, r3
 8005946:	bfa8      	it	ge
 8005948:	461a      	movge	r2, r3
 800594a:	2a00      	cmp	r2, #0
 800594c:	4690      	mov	r8, r2
 800594e:	dd07      	ble.n	8005960 <_printf_float+0x2dc>
 8005950:	4613      	mov	r3, r2
 8005952:	4659      	mov	r1, fp
 8005954:	463a      	mov	r2, r7
 8005956:	4628      	mov	r0, r5
 8005958:	47b0      	blx	r6
 800595a:	3001      	adds	r0, #1
 800595c:	f43f aee9 	beq.w	8005732 <_printf_float+0xae>
 8005960:	f104 031a 	add.w	r3, r4, #26
 8005964:	f04f 0a00 	mov.w	sl, #0
 8005968:	ea28 78e8 	bic.w	r8, r8, r8, asr #31
 800596c:	930b      	str	r3, [sp, #44]	; 0x2c
 800596e:	e015      	b.n	800599c <_printf_float+0x318>
 8005970:	7fefffff 	.word	0x7fefffff
 8005974:	0800a5b4 	.word	0x0800a5b4
 8005978:	0800a5b0 	.word	0x0800a5b0
 800597c:	0800a5bc 	.word	0x0800a5bc
 8005980:	0800a5b8 	.word	0x0800a5b8
 8005984:	0800a5c0 	.word	0x0800a5c0
 8005988:	2301      	movs	r3, #1
 800598a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800598c:	4659      	mov	r1, fp
 800598e:	4628      	mov	r0, r5
 8005990:	47b0      	blx	r6
 8005992:	3001      	adds	r0, #1
 8005994:	f43f aecd 	beq.w	8005732 <_printf_float+0xae>
 8005998:	f10a 0a01 	add.w	sl, sl, #1
 800599c:	f8d4 9058 	ldr.w	r9, [r4, #88]	; 0x58
 80059a0:	eba9 0308 	sub.w	r3, r9, r8
 80059a4:	4553      	cmp	r3, sl
 80059a6:	dcef      	bgt.n	8005988 <_printf_float+0x304>
 80059a8:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80059ac:	429a      	cmp	r2, r3
 80059ae:	444f      	add	r7, r9
 80059b0:	db14      	blt.n	80059dc <_printf_float+0x358>
 80059b2:	6823      	ldr	r3, [r4, #0]
 80059b4:	07da      	lsls	r2, r3, #31
 80059b6:	d411      	bmi.n	80059dc <_printf_float+0x358>
 80059b8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80059ba:	990d      	ldr	r1, [sp, #52]	; 0x34
 80059bc:	eba3 0209 	sub.w	r2, r3, r9
 80059c0:	eba3 0901 	sub.w	r9, r3, r1
 80059c4:	4591      	cmp	r9, r2
 80059c6:	bfa8      	it	ge
 80059c8:	4691      	movge	r9, r2
 80059ca:	f1b9 0f00 	cmp.w	r9, #0
 80059ce:	dc0d      	bgt.n	80059ec <_printf_float+0x368>
 80059d0:	2700      	movs	r7, #0
 80059d2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80059d6:	f104 081a 	add.w	r8, r4, #26
 80059da:	e018      	b.n	8005a0e <_printf_float+0x38a>
 80059dc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80059e0:	4659      	mov	r1, fp
 80059e2:	4628      	mov	r0, r5
 80059e4:	47b0      	blx	r6
 80059e6:	3001      	adds	r0, #1
 80059e8:	d1e6      	bne.n	80059b8 <_printf_float+0x334>
 80059ea:	e6a2      	b.n	8005732 <_printf_float+0xae>
 80059ec:	464b      	mov	r3, r9
 80059ee:	463a      	mov	r2, r7
 80059f0:	4659      	mov	r1, fp
 80059f2:	4628      	mov	r0, r5
 80059f4:	47b0      	blx	r6
 80059f6:	3001      	adds	r0, #1
 80059f8:	d1ea      	bne.n	80059d0 <_printf_float+0x34c>
 80059fa:	e69a      	b.n	8005732 <_printf_float+0xae>
 80059fc:	2301      	movs	r3, #1
 80059fe:	4642      	mov	r2, r8
 8005a00:	4659      	mov	r1, fp
 8005a02:	4628      	mov	r0, r5
 8005a04:	47b0      	blx	r6
 8005a06:	3001      	adds	r0, #1
 8005a08:	f43f ae93 	beq.w	8005732 <_printf_float+0xae>
 8005a0c:	3701      	adds	r7, #1
 8005a0e:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8005a12:	1a9b      	subs	r3, r3, r2
 8005a14:	eba3 0309 	sub.w	r3, r3, r9
 8005a18:	42bb      	cmp	r3, r7
 8005a1a:	dcef      	bgt.n	80059fc <_printf_float+0x378>
 8005a1c:	e74d      	b.n	80058ba <_printf_float+0x236>
 8005a1e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005a20:	2a01      	cmp	r2, #1
 8005a22:	dc01      	bgt.n	8005a28 <_printf_float+0x3a4>
 8005a24:	07db      	lsls	r3, r3, #31
 8005a26:	d538      	bpl.n	8005a9a <_printf_float+0x416>
 8005a28:	2301      	movs	r3, #1
 8005a2a:	463a      	mov	r2, r7
 8005a2c:	4659      	mov	r1, fp
 8005a2e:	4628      	mov	r0, r5
 8005a30:	47b0      	blx	r6
 8005a32:	3001      	adds	r0, #1
 8005a34:	f43f ae7d 	beq.w	8005732 <_printf_float+0xae>
 8005a38:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005a3c:	4659      	mov	r1, fp
 8005a3e:	4628      	mov	r0, r5
 8005a40:	47b0      	blx	r6
 8005a42:	3001      	adds	r0, #1
 8005a44:	f107 0701 	add.w	r7, r7, #1
 8005a48:	f43f ae73 	beq.w	8005732 <_printf_float+0xae>
 8005a4c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005a50:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005a52:	2200      	movs	r2, #0
 8005a54:	f103 38ff 	add.w	r8, r3, #4294967295
 8005a58:	2300      	movs	r3, #0
 8005a5a:	f7fa ffa5 	bl	80009a8 <__aeabi_dcmpeq>
 8005a5e:	b9c0      	cbnz	r0, 8005a92 <_printf_float+0x40e>
 8005a60:	4643      	mov	r3, r8
 8005a62:	463a      	mov	r2, r7
 8005a64:	4659      	mov	r1, fp
 8005a66:	4628      	mov	r0, r5
 8005a68:	47b0      	blx	r6
 8005a6a:	3001      	adds	r0, #1
 8005a6c:	d10d      	bne.n	8005a8a <_printf_float+0x406>
 8005a6e:	e660      	b.n	8005732 <_printf_float+0xae>
 8005a70:	2301      	movs	r3, #1
 8005a72:	4642      	mov	r2, r8
 8005a74:	4659      	mov	r1, fp
 8005a76:	4628      	mov	r0, r5
 8005a78:	47b0      	blx	r6
 8005a7a:	3001      	adds	r0, #1
 8005a7c:	f43f ae59 	beq.w	8005732 <_printf_float+0xae>
 8005a80:	3701      	adds	r7, #1
 8005a82:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005a84:	3b01      	subs	r3, #1
 8005a86:	42bb      	cmp	r3, r7
 8005a88:	dcf2      	bgt.n	8005a70 <_printf_float+0x3ec>
 8005a8a:	464b      	mov	r3, r9
 8005a8c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8005a90:	e6e4      	b.n	800585c <_printf_float+0x1d8>
 8005a92:	2700      	movs	r7, #0
 8005a94:	f104 081a 	add.w	r8, r4, #26
 8005a98:	e7f3      	b.n	8005a82 <_printf_float+0x3fe>
 8005a9a:	2301      	movs	r3, #1
 8005a9c:	e7e1      	b.n	8005a62 <_printf_float+0x3de>
 8005a9e:	2301      	movs	r3, #1
 8005aa0:	4642      	mov	r2, r8
 8005aa2:	4659      	mov	r1, fp
 8005aa4:	4628      	mov	r0, r5
 8005aa6:	47b0      	blx	r6
 8005aa8:	3001      	adds	r0, #1
 8005aaa:	f43f ae42 	beq.w	8005732 <_printf_float+0xae>
 8005aae:	3701      	adds	r7, #1
 8005ab0:	68e3      	ldr	r3, [r4, #12]
 8005ab2:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8005ab4:	1a9b      	subs	r3, r3, r2
 8005ab6:	42bb      	cmp	r3, r7
 8005ab8:	dcf1      	bgt.n	8005a9e <_printf_float+0x41a>
 8005aba:	e702      	b.n	80058c2 <_printf_float+0x23e>
 8005abc:	2700      	movs	r7, #0
 8005abe:	f104 0819 	add.w	r8, r4, #25
 8005ac2:	e7f5      	b.n	8005ab0 <_printf_float+0x42c>
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	f43f ae94 	beq.w	80057f2 <_printf_float+0x16e>
 8005aca:	f04f 0c00 	mov.w	ip, #0
 8005ace:	e9cd 1c05 	strd	r1, ip, [sp, #20]
 8005ad2:	f10d 0133 	add.w	r1, sp, #51	; 0x33
 8005ad6:	6022      	str	r2, [r4, #0]
 8005ad8:	e9cd 0803 	strd	r0, r8, [sp, #12]
 8005adc:	e9cd 2101 	strd	r2, r1, [sp, #4]
 8005ae0:	9300      	str	r3, [sp, #0]
 8005ae2:	463a      	mov	r2, r7
 8005ae4:	464b      	mov	r3, r9
 8005ae6:	4628      	mov	r0, r5
 8005ae8:	f7ff fd3a 	bl	8005560 <__cvt>
 8005aec:	4607      	mov	r7, r0
 8005aee:	e64f      	b.n	8005790 <_printf_float+0x10c>

08005af0 <_printf_common>:
 8005af0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005af4:	4691      	mov	r9, r2
 8005af6:	461f      	mov	r7, r3
 8005af8:	688a      	ldr	r2, [r1, #8]
 8005afa:	690b      	ldr	r3, [r1, #16]
 8005afc:	4606      	mov	r6, r0
 8005afe:	4293      	cmp	r3, r2
 8005b00:	bfb8      	it	lt
 8005b02:	4613      	movlt	r3, r2
 8005b04:	f8c9 3000 	str.w	r3, [r9]
 8005b08:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005b0c:	460c      	mov	r4, r1
 8005b0e:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005b12:	b112      	cbz	r2, 8005b1a <_printf_common+0x2a>
 8005b14:	3301      	adds	r3, #1
 8005b16:	f8c9 3000 	str.w	r3, [r9]
 8005b1a:	6823      	ldr	r3, [r4, #0]
 8005b1c:	0699      	lsls	r1, r3, #26
 8005b1e:	bf42      	ittt	mi
 8005b20:	f8d9 3000 	ldrmi.w	r3, [r9]
 8005b24:	3302      	addmi	r3, #2
 8005b26:	f8c9 3000 	strmi.w	r3, [r9]
 8005b2a:	6825      	ldr	r5, [r4, #0]
 8005b2c:	f015 0506 	ands.w	r5, r5, #6
 8005b30:	d107      	bne.n	8005b42 <_printf_common+0x52>
 8005b32:	f104 0a19 	add.w	sl, r4, #25
 8005b36:	68e3      	ldr	r3, [r4, #12]
 8005b38:	f8d9 2000 	ldr.w	r2, [r9]
 8005b3c:	1a9b      	subs	r3, r3, r2
 8005b3e:	42ab      	cmp	r3, r5
 8005b40:	dc29      	bgt.n	8005b96 <_printf_common+0xa6>
 8005b42:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8005b46:	6822      	ldr	r2, [r4, #0]
 8005b48:	3300      	adds	r3, #0
 8005b4a:	bf18      	it	ne
 8005b4c:	2301      	movne	r3, #1
 8005b4e:	0692      	lsls	r2, r2, #26
 8005b50:	d42e      	bmi.n	8005bb0 <_printf_common+0xc0>
 8005b52:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005b56:	4639      	mov	r1, r7
 8005b58:	4630      	mov	r0, r6
 8005b5a:	47c0      	blx	r8
 8005b5c:	3001      	adds	r0, #1
 8005b5e:	d021      	beq.n	8005ba4 <_printf_common+0xb4>
 8005b60:	6823      	ldr	r3, [r4, #0]
 8005b62:	68e5      	ldr	r5, [r4, #12]
 8005b64:	f003 0306 	and.w	r3, r3, #6
 8005b68:	2b04      	cmp	r3, #4
 8005b6a:	bf18      	it	ne
 8005b6c:	2500      	movne	r5, #0
 8005b6e:	f8d9 2000 	ldr.w	r2, [r9]
 8005b72:	f04f 0900 	mov.w	r9, #0
 8005b76:	bf08      	it	eq
 8005b78:	1aad      	subeq	r5, r5, r2
 8005b7a:	68a3      	ldr	r3, [r4, #8]
 8005b7c:	6922      	ldr	r2, [r4, #16]
 8005b7e:	bf08      	it	eq
 8005b80:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005b84:	4293      	cmp	r3, r2
 8005b86:	bfc4      	itt	gt
 8005b88:	1a9b      	subgt	r3, r3, r2
 8005b8a:	18ed      	addgt	r5, r5, r3
 8005b8c:	341a      	adds	r4, #26
 8005b8e:	454d      	cmp	r5, r9
 8005b90:	d11a      	bne.n	8005bc8 <_printf_common+0xd8>
 8005b92:	2000      	movs	r0, #0
 8005b94:	e008      	b.n	8005ba8 <_printf_common+0xb8>
 8005b96:	2301      	movs	r3, #1
 8005b98:	4652      	mov	r2, sl
 8005b9a:	4639      	mov	r1, r7
 8005b9c:	4630      	mov	r0, r6
 8005b9e:	47c0      	blx	r8
 8005ba0:	3001      	adds	r0, #1
 8005ba2:	d103      	bne.n	8005bac <_printf_common+0xbc>
 8005ba4:	f04f 30ff 	mov.w	r0, #4294967295
 8005ba8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005bac:	3501      	adds	r5, #1
 8005bae:	e7c2      	b.n	8005b36 <_printf_common+0x46>
 8005bb0:	2030      	movs	r0, #48	; 0x30
 8005bb2:	18e1      	adds	r1, r4, r3
 8005bb4:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005bb8:	1c5a      	adds	r2, r3, #1
 8005bba:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005bbe:	4422      	add	r2, r4
 8005bc0:	3302      	adds	r3, #2
 8005bc2:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005bc6:	e7c4      	b.n	8005b52 <_printf_common+0x62>
 8005bc8:	2301      	movs	r3, #1
 8005bca:	4622      	mov	r2, r4
 8005bcc:	4639      	mov	r1, r7
 8005bce:	4630      	mov	r0, r6
 8005bd0:	47c0      	blx	r8
 8005bd2:	3001      	adds	r0, #1
 8005bd4:	d0e6      	beq.n	8005ba4 <_printf_common+0xb4>
 8005bd6:	f109 0901 	add.w	r9, r9, #1
 8005bda:	e7d8      	b.n	8005b8e <_printf_common+0x9e>

08005bdc <_printf_i>:
 8005bdc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005be0:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8005be4:	460c      	mov	r4, r1
 8005be6:	7e09      	ldrb	r1, [r1, #24]
 8005be8:	b085      	sub	sp, #20
 8005bea:	296e      	cmp	r1, #110	; 0x6e
 8005bec:	4617      	mov	r7, r2
 8005bee:	4606      	mov	r6, r0
 8005bf0:	4698      	mov	r8, r3
 8005bf2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005bf4:	f000 80b3 	beq.w	8005d5e <_printf_i+0x182>
 8005bf8:	d822      	bhi.n	8005c40 <_printf_i+0x64>
 8005bfa:	2963      	cmp	r1, #99	; 0x63
 8005bfc:	d036      	beq.n	8005c6c <_printf_i+0x90>
 8005bfe:	d80a      	bhi.n	8005c16 <_printf_i+0x3a>
 8005c00:	2900      	cmp	r1, #0
 8005c02:	f000 80b9 	beq.w	8005d78 <_printf_i+0x19c>
 8005c06:	2958      	cmp	r1, #88	; 0x58
 8005c08:	f000 8083 	beq.w	8005d12 <_printf_i+0x136>
 8005c0c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005c10:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8005c14:	e032      	b.n	8005c7c <_printf_i+0xa0>
 8005c16:	2964      	cmp	r1, #100	; 0x64
 8005c18:	d001      	beq.n	8005c1e <_printf_i+0x42>
 8005c1a:	2969      	cmp	r1, #105	; 0x69
 8005c1c:	d1f6      	bne.n	8005c0c <_printf_i+0x30>
 8005c1e:	6820      	ldr	r0, [r4, #0]
 8005c20:	6813      	ldr	r3, [r2, #0]
 8005c22:	0605      	lsls	r5, r0, #24
 8005c24:	f103 0104 	add.w	r1, r3, #4
 8005c28:	d52a      	bpl.n	8005c80 <_printf_i+0xa4>
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	6011      	str	r1, [r2, #0]
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	da03      	bge.n	8005c3a <_printf_i+0x5e>
 8005c32:	222d      	movs	r2, #45	; 0x2d
 8005c34:	425b      	negs	r3, r3
 8005c36:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8005c3a:	486f      	ldr	r0, [pc, #444]	; (8005df8 <_printf_i+0x21c>)
 8005c3c:	220a      	movs	r2, #10
 8005c3e:	e039      	b.n	8005cb4 <_printf_i+0xd8>
 8005c40:	2973      	cmp	r1, #115	; 0x73
 8005c42:	f000 809d 	beq.w	8005d80 <_printf_i+0x1a4>
 8005c46:	d808      	bhi.n	8005c5a <_printf_i+0x7e>
 8005c48:	296f      	cmp	r1, #111	; 0x6f
 8005c4a:	d020      	beq.n	8005c8e <_printf_i+0xb2>
 8005c4c:	2970      	cmp	r1, #112	; 0x70
 8005c4e:	d1dd      	bne.n	8005c0c <_printf_i+0x30>
 8005c50:	6823      	ldr	r3, [r4, #0]
 8005c52:	f043 0320 	orr.w	r3, r3, #32
 8005c56:	6023      	str	r3, [r4, #0]
 8005c58:	e003      	b.n	8005c62 <_printf_i+0x86>
 8005c5a:	2975      	cmp	r1, #117	; 0x75
 8005c5c:	d017      	beq.n	8005c8e <_printf_i+0xb2>
 8005c5e:	2978      	cmp	r1, #120	; 0x78
 8005c60:	d1d4      	bne.n	8005c0c <_printf_i+0x30>
 8005c62:	2378      	movs	r3, #120	; 0x78
 8005c64:	4865      	ldr	r0, [pc, #404]	; (8005dfc <_printf_i+0x220>)
 8005c66:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005c6a:	e055      	b.n	8005d18 <_printf_i+0x13c>
 8005c6c:	6813      	ldr	r3, [r2, #0]
 8005c6e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005c72:	1d19      	adds	r1, r3, #4
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	6011      	str	r1, [r2, #0]
 8005c78:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005c7c:	2301      	movs	r3, #1
 8005c7e:	e08c      	b.n	8005d9a <_printf_i+0x1be>
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005c86:	6011      	str	r1, [r2, #0]
 8005c88:	bf18      	it	ne
 8005c8a:	b21b      	sxthne	r3, r3
 8005c8c:	e7cf      	b.n	8005c2e <_printf_i+0x52>
 8005c8e:	6813      	ldr	r3, [r2, #0]
 8005c90:	6825      	ldr	r5, [r4, #0]
 8005c92:	1d18      	adds	r0, r3, #4
 8005c94:	6010      	str	r0, [r2, #0]
 8005c96:	0628      	lsls	r0, r5, #24
 8005c98:	d501      	bpl.n	8005c9e <_printf_i+0xc2>
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	e002      	b.n	8005ca4 <_printf_i+0xc8>
 8005c9e:	0668      	lsls	r0, r5, #25
 8005ca0:	d5fb      	bpl.n	8005c9a <_printf_i+0xbe>
 8005ca2:	881b      	ldrh	r3, [r3, #0]
 8005ca4:	296f      	cmp	r1, #111	; 0x6f
 8005ca6:	bf14      	ite	ne
 8005ca8:	220a      	movne	r2, #10
 8005caa:	2208      	moveq	r2, #8
 8005cac:	4852      	ldr	r0, [pc, #328]	; (8005df8 <_printf_i+0x21c>)
 8005cae:	2100      	movs	r1, #0
 8005cb0:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005cb4:	6865      	ldr	r5, [r4, #4]
 8005cb6:	2d00      	cmp	r5, #0
 8005cb8:	60a5      	str	r5, [r4, #8]
 8005cba:	f2c0 8095 	blt.w	8005de8 <_printf_i+0x20c>
 8005cbe:	6821      	ldr	r1, [r4, #0]
 8005cc0:	f021 0104 	bic.w	r1, r1, #4
 8005cc4:	6021      	str	r1, [r4, #0]
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	d13d      	bne.n	8005d46 <_printf_i+0x16a>
 8005cca:	2d00      	cmp	r5, #0
 8005ccc:	f040 808e 	bne.w	8005dec <_printf_i+0x210>
 8005cd0:	4665      	mov	r5, ip
 8005cd2:	2a08      	cmp	r2, #8
 8005cd4:	d10b      	bne.n	8005cee <_printf_i+0x112>
 8005cd6:	6823      	ldr	r3, [r4, #0]
 8005cd8:	07db      	lsls	r3, r3, #31
 8005cda:	d508      	bpl.n	8005cee <_printf_i+0x112>
 8005cdc:	6923      	ldr	r3, [r4, #16]
 8005cde:	6862      	ldr	r2, [r4, #4]
 8005ce0:	429a      	cmp	r2, r3
 8005ce2:	bfde      	ittt	le
 8005ce4:	2330      	movle	r3, #48	; 0x30
 8005ce6:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005cea:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005cee:	ebac 0305 	sub.w	r3, ip, r5
 8005cf2:	6123      	str	r3, [r4, #16]
 8005cf4:	f8cd 8000 	str.w	r8, [sp]
 8005cf8:	463b      	mov	r3, r7
 8005cfa:	aa03      	add	r2, sp, #12
 8005cfc:	4621      	mov	r1, r4
 8005cfe:	4630      	mov	r0, r6
 8005d00:	f7ff fef6 	bl	8005af0 <_printf_common>
 8005d04:	3001      	adds	r0, #1
 8005d06:	d14d      	bne.n	8005da4 <_printf_i+0x1c8>
 8005d08:	f04f 30ff 	mov.w	r0, #4294967295
 8005d0c:	b005      	add	sp, #20
 8005d0e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005d12:	4839      	ldr	r0, [pc, #228]	; (8005df8 <_printf_i+0x21c>)
 8005d14:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8005d18:	6813      	ldr	r3, [r2, #0]
 8005d1a:	6821      	ldr	r1, [r4, #0]
 8005d1c:	1d1d      	adds	r5, r3, #4
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	6015      	str	r5, [r2, #0]
 8005d22:	060a      	lsls	r2, r1, #24
 8005d24:	d50b      	bpl.n	8005d3e <_printf_i+0x162>
 8005d26:	07ca      	lsls	r2, r1, #31
 8005d28:	bf44      	itt	mi
 8005d2a:	f041 0120 	orrmi.w	r1, r1, #32
 8005d2e:	6021      	strmi	r1, [r4, #0]
 8005d30:	b91b      	cbnz	r3, 8005d3a <_printf_i+0x15e>
 8005d32:	6822      	ldr	r2, [r4, #0]
 8005d34:	f022 0220 	bic.w	r2, r2, #32
 8005d38:	6022      	str	r2, [r4, #0]
 8005d3a:	2210      	movs	r2, #16
 8005d3c:	e7b7      	b.n	8005cae <_printf_i+0xd2>
 8005d3e:	064d      	lsls	r5, r1, #25
 8005d40:	bf48      	it	mi
 8005d42:	b29b      	uxthmi	r3, r3
 8005d44:	e7ef      	b.n	8005d26 <_printf_i+0x14a>
 8005d46:	4665      	mov	r5, ip
 8005d48:	fbb3 f1f2 	udiv	r1, r3, r2
 8005d4c:	fb02 3311 	mls	r3, r2, r1, r3
 8005d50:	5cc3      	ldrb	r3, [r0, r3]
 8005d52:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8005d56:	460b      	mov	r3, r1
 8005d58:	2900      	cmp	r1, #0
 8005d5a:	d1f5      	bne.n	8005d48 <_printf_i+0x16c>
 8005d5c:	e7b9      	b.n	8005cd2 <_printf_i+0xf6>
 8005d5e:	6813      	ldr	r3, [r2, #0]
 8005d60:	6825      	ldr	r5, [r4, #0]
 8005d62:	1d18      	adds	r0, r3, #4
 8005d64:	6961      	ldr	r1, [r4, #20]
 8005d66:	6010      	str	r0, [r2, #0]
 8005d68:	0628      	lsls	r0, r5, #24
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	d501      	bpl.n	8005d72 <_printf_i+0x196>
 8005d6e:	6019      	str	r1, [r3, #0]
 8005d70:	e002      	b.n	8005d78 <_printf_i+0x19c>
 8005d72:	066a      	lsls	r2, r5, #25
 8005d74:	d5fb      	bpl.n	8005d6e <_printf_i+0x192>
 8005d76:	8019      	strh	r1, [r3, #0]
 8005d78:	2300      	movs	r3, #0
 8005d7a:	4665      	mov	r5, ip
 8005d7c:	6123      	str	r3, [r4, #16]
 8005d7e:	e7b9      	b.n	8005cf4 <_printf_i+0x118>
 8005d80:	6813      	ldr	r3, [r2, #0]
 8005d82:	1d19      	adds	r1, r3, #4
 8005d84:	6011      	str	r1, [r2, #0]
 8005d86:	681d      	ldr	r5, [r3, #0]
 8005d88:	6862      	ldr	r2, [r4, #4]
 8005d8a:	2100      	movs	r1, #0
 8005d8c:	4628      	mov	r0, r5
 8005d8e:	f000 fec1 	bl	8006b14 <memchr>
 8005d92:	b108      	cbz	r0, 8005d98 <_printf_i+0x1bc>
 8005d94:	1b40      	subs	r0, r0, r5
 8005d96:	6060      	str	r0, [r4, #4]
 8005d98:	6863      	ldr	r3, [r4, #4]
 8005d9a:	6123      	str	r3, [r4, #16]
 8005d9c:	2300      	movs	r3, #0
 8005d9e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005da2:	e7a7      	b.n	8005cf4 <_printf_i+0x118>
 8005da4:	6923      	ldr	r3, [r4, #16]
 8005da6:	462a      	mov	r2, r5
 8005da8:	4639      	mov	r1, r7
 8005daa:	4630      	mov	r0, r6
 8005dac:	47c0      	blx	r8
 8005dae:	3001      	adds	r0, #1
 8005db0:	d0aa      	beq.n	8005d08 <_printf_i+0x12c>
 8005db2:	6823      	ldr	r3, [r4, #0]
 8005db4:	079b      	lsls	r3, r3, #30
 8005db6:	d413      	bmi.n	8005de0 <_printf_i+0x204>
 8005db8:	68e0      	ldr	r0, [r4, #12]
 8005dba:	9b03      	ldr	r3, [sp, #12]
 8005dbc:	4298      	cmp	r0, r3
 8005dbe:	bfb8      	it	lt
 8005dc0:	4618      	movlt	r0, r3
 8005dc2:	e7a3      	b.n	8005d0c <_printf_i+0x130>
 8005dc4:	2301      	movs	r3, #1
 8005dc6:	464a      	mov	r2, r9
 8005dc8:	4639      	mov	r1, r7
 8005dca:	4630      	mov	r0, r6
 8005dcc:	47c0      	blx	r8
 8005dce:	3001      	adds	r0, #1
 8005dd0:	d09a      	beq.n	8005d08 <_printf_i+0x12c>
 8005dd2:	3501      	adds	r5, #1
 8005dd4:	68e3      	ldr	r3, [r4, #12]
 8005dd6:	9a03      	ldr	r2, [sp, #12]
 8005dd8:	1a9b      	subs	r3, r3, r2
 8005dda:	42ab      	cmp	r3, r5
 8005ddc:	dcf2      	bgt.n	8005dc4 <_printf_i+0x1e8>
 8005dde:	e7eb      	b.n	8005db8 <_printf_i+0x1dc>
 8005de0:	2500      	movs	r5, #0
 8005de2:	f104 0919 	add.w	r9, r4, #25
 8005de6:	e7f5      	b.n	8005dd4 <_printf_i+0x1f8>
 8005de8:	2b00      	cmp	r3, #0
 8005dea:	d1ac      	bne.n	8005d46 <_printf_i+0x16a>
 8005dec:	7803      	ldrb	r3, [r0, #0]
 8005dee:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005df2:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005df6:	e76c      	b.n	8005cd2 <_printf_i+0xf6>
 8005df8:	0800a5c2 	.word	0x0800a5c2
 8005dfc:	0800a5d3 	.word	0x0800a5d3

08005e00 <siprintf>:
 8005e00:	b40e      	push	{r1, r2, r3}
 8005e02:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005e06:	b500      	push	{lr}
 8005e08:	b09c      	sub	sp, #112	; 0x70
 8005e0a:	ab1d      	add	r3, sp, #116	; 0x74
 8005e0c:	9002      	str	r0, [sp, #8]
 8005e0e:	9006      	str	r0, [sp, #24]
 8005e10:	9107      	str	r1, [sp, #28]
 8005e12:	9104      	str	r1, [sp, #16]
 8005e14:	4808      	ldr	r0, [pc, #32]	; (8005e38 <siprintf+0x38>)
 8005e16:	4909      	ldr	r1, [pc, #36]	; (8005e3c <siprintf+0x3c>)
 8005e18:	f853 2b04 	ldr.w	r2, [r3], #4
 8005e1c:	9105      	str	r1, [sp, #20]
 8005e1e:	6800      	ldr	r0, [r0, #0]
 8005e20:	a902      	add	r1, sp, #8
 8005e22:	9301      	str	r3, [sp, #4]
 8005e24:	f001 fa7a 	bl	800731c <_svfiprintf_r>
 8005e28:	2200      	movs	r2, #0
 8005e2a:	9b02      	ldr	r3, [sp, #8]
 8005e2c:	701a      	strb	r2, [r3, #0]
 8005e2e:	b01c      	add	sp, #112	; 0x70
 8005e30:	f85d eb04 	ldr.w	lr, [sp], #4
 8005e34:	b003      	add	sp, #12
 8005e36:	4770      	bx	lr
 8005e38:	200000d0 	.word	0x200000d0
 8005e3c:	ffff0208 	.word	0xffff0208

08005e40 <strcat>:
 8005e40:	4603      	mov	r3, r0
 8005e42:	b510      	push	{r4, lr}
 8005e44:	781a      	ldrb	r2, [r3, #0]
 8005e46:	1c5c      	adds	r4, r3, #1
 8005e48:	b93a      	cbnz	r2, 8005e5a <strcat+0x1a>
 8005e4a:	3b01      	subs	r3, #1
 8005e4c:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005e50:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005e54:	2a00      	cmp	r2, #0
 8005e56:	d1f9      	bne.n	8005e4c <strcat+0xc>
 8005e58:	bd10      	pop	{r4, pc}
 8005e5a:	4623      	mov	r3, r4
 8005e5c:	e7f2      	b.n	8005e44 <strcat+0x4>

08005e5e <quorem>:
 8005e5e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005e62:	6903      	ldr	r3, [r0, #16]
 8005e64:	690c      	ldr	r4, [r1, #16]
 8005e66:	4680      	mov	r8, r0
 8005e68:	42a3      	cmp	r3, r4
 8005e6a:	f2c0 8084 	blt.w	8005f76 <quorem+0x118>
 8005e6e:	3c01      	subs	r4, #1
 8005e70:	f101 0714 	add.w	r7, r1, #20
 8005e74:	f100 0614 	add.w	r6, r0, #20
 8005e78:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 8005e7c:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8005e80:	3501      	adds	r5, #1
 8005e82:	fbb0 f5f5 	udiv	r5, r0, r5
 8005e86:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8005e8a:	eb06 030c 	add.w	r3, r6, ip
 8005e8e:	eb07 090c 	add.w	r9, r7, ip
 8005e92:	9301      	str	r3, [sp, #4]
 8005e94:	b39d      	cbz	r5, 8005efe <quorem+0xa0>
 8005e96:	f04f 0a00 	mov.w	sl, #0
 8005e9a:	4638      	mov	r0, r7
 8005e9c:	46b6      	mov	lr, r6
 8005e9e:	46d3      	mov	fp, sl
 8005ea0:	f850 2b04 	ldr.w	r2, [r0], #4
 8005ea4:	b293      	uxth	r3, r2
 8005ea6:	fb05 a303 	mla	r3, r5, r3, sl
 8005eaa:	0c12      	lsrs	r2, r2, #16
 8005eac:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8005eb0:	fb05 a202 	mla	r2, r5, r2, sl
 8005eb4:	b29b      	uxth	r3, r3
 8005eb6:	ebab 0303 	sub.w	r3, fp, r3
 8005eba:	f8de b000 	ldr.w	fp, [lr]
 8005ebe:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8005ec2:	fa1f fb8b 	uxth.w	fp, fp
 8005ec6:	445b      	add	r3, fp
 8005ec8:	fa1f fb82 	uxth.w	fp, r2
 8005ecc:	f8de 2000 	ldr.w	r2, [lr]
 8005ed0:	4581      	cmp	r9, r0
 8005ed2:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8005ed6:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005eda:	b29b      	uxth	r3, r3
 8005edc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005ee0:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8005ee4:	f84e 3b04 	str.w	r3, [lr], #4
 8005ee8:	d2da      	bcs.n	8005ea0 <quorem+0x42>
 8005eea:	f856 300c 	ldr.w	r3, [r6, ip]
 8005eee:	b933      	cbnz	r3, 8005efe <quorem+0xa0>
 8005ef0:	9b01      	ldr	r3, [sp, #4]
 8005ef2:	3b04      	subs	r3, #4
 8005ef4:	429e      	cmp	r6, r3
 8005ef6:	461a      	mov	r2, r3
 8005ef8:	d331      	bcc.n	8005f5e <quorem+0x100>
 8005efa:	f8c8 4010 	str.w	r4, [r8, #16]
 8005efe:	4640      	mov	r0, r8
 8005f00:	f001 f836 	bl	8006f70 <__mcmp>
 8005f04:	2800      	cmp	r0, #0
 8005f06:	db26      	blt.n	8005f56 <quorem+0xf8>
 8005f08:	4630      	mov	r0, r6
 8005f0a:	f04f 0c00 	mov.w	ip, #0
 8005f0e:	3501      	adds	r5, #1
 8005f10:	f857 1b04 	ldr.w	r1, [r7], #4
 8005f14:	f8d0 e000 	ldr.w	lr, [r0]
 8005f18:	b28b      	uxth	r3, r1
 8005f1a:	ebac 0303 	sub.w	r3, ip, r3
 8005f1e:	fa1f f28e 	uxth.w	r2, lr
 8005f22:	4413      	add	r3, r2
 8005f24:	0c0a      	lsrs	r2, r1, #16
 8005f26:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8005f2a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005f2e:	b29b      	uxth	r3, r3
 8005f30:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005f34:	45b9      	cmp	r9, r7
 8005f36:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8005f3a:	f840 3b04 	str.w	r3, [r0], #4
 8005f3e:	d2e7      	bcs.n	8005f10 <quorem+0xb2>
 8005f40:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8005f44:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8005f48:	b92a      	cbnz	r2, 8005f56 <quorem+0xf8>
 8005f4a:	3b04      	subs	r3, #4
 8005f4c:	429e      	cmp	r6, r3
 8005f4e:	461a      	mov	r2, r3
 8005f50:	d30b      	bcc.n	8005f6a <quorem+0x10c>
 8005f52:	f8c8 4010 	str.w	r4, [r8, #16]
 8005f56:	4628      	mov	r0, r5
 8005f58:	b003      	add	sp, #12
 8005f5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005f5e:	6812      	ldr	r2, [r2, #0]
 8005f60:	3b04      	subs	r3, #4
 8005f62:	2a00      	cmp	r2, #0
 8005f64:	d1c9      	bne.n	8005efa <quorem+0x9c>
 8005f66:	3c01      	subs	r4, #1
 8005f68:	e7c4      	b.n	8005ef4 <quorem+0x96>
 8005f6a:	6812      	ldr	r2, [r2, #0]
 8005f6c:	3b04      	subs	r3, #4
 8005f6e:	2a00      	cmp	r2, #0
 8005f70:	d1ef      	bne.n	8005f52 <quorem+0xf4>
 8005f72:	3c01      	subs	r4, #1
 8005f74:	e7ea      	b.n	8005f4c <quorem+0xee>
 8005f76:	2000      	movs	r0, #0
 8005f78:	e7ee      	b.n	8005f58 <quorem+0xfa>
 8005f7a:	0000      	movs	r0, r0
 8005f7c:	0000      	movs	r0, r0
	...

08005f80 <_dtoa_r>:
 8005f80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005f84:	4616      	mov	r6, r2
 8005f86:	461f      	mov	r7, r3
 8005f88:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8005f8a:	b095      	sub	sp, #84	; 0x54
 8005f8c:	4604      	mov	r4, r0
 8005f8e:	f8dd 8084 	ldr.w	r8, [sp, #132]	; 0x84
 8005f92:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8005f96:	b93d      	cbnz	r5, 8005fa8 <_dtoa_r+0x28>
 8005f98:	2010      	movs	r0, #16
 8005f9a:	f000 fdb3 	bl	8006b04 <malloc>
 8005f9e:	6260      	str	r0, [r4, #36]	; 0x24
 8005fa0:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8005fa4:	6005      	str	r5, [r0, #0]
 8005fa6:	60c5      	str	r5, [r0, #12]
 8005fa8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005faa:	6819      	ldr	r1, [r3, #0]
 8005fac:	b151      	cbz	r1, 8005fc4 <_dtoa_r+0x44>
 8005fae:	685a      	ldr	r2, [r3, #4]
 8005fb0:	2301      	movs	r3, #1
 8005fb2:	4093      	lsls	r3, r2
 8005fb4:	604a      	str	r2, [r1, #4]
 8005fb6:	608b      	str	r3, [r1, #8]
 8005fb8:	4620      	mov	r0, r4
 8005fba:	f000 fdf8 	bl	8006bae <_Bfree>
 8005fbe:	2200      	movs	r2, #0
 8005fc0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005fc2:	601a      	str	r2, [r3, #0]
 8005fc4:	1e3b      	subs	r3, r7, #0
 8005fc6:	bfaf      	iteee	ge
 8005fc8:	2300      	movge	r3, #0
 8005fca:	2201      	movlt	r2, #1
 8005fcc:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8005fd0:	9303      	strlt	r3, [sp, #12]
 8005fd2:	bfac      	ite	ge
 8005fd4:	f8c8 3000 	strge.w	r3, [r8]
 8005fd8:	f8c8 2000 	strlt.w	r2, [r8]
 8005fdc:	4bae      	ldr	r3, [pc, #696]	; (8006298 <_dtoa_r+0x318>)
 8005fde:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8005fe2:	ea33 0308 	bics.w	r3, r3, r8
 8005fe6:	d11b      	bne.n	8006020 <_dtoa_r+0xa0>
 8005fe8:	f242 730f 	movw	r3, #9999	; 0x270f
 8005fec:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8005fee:	6013      	str	r3, [r2, #0]
 8005ff0:	9b02      	ldr	r3, [sp, #8]
 8005ff2:	b923      	cbnz	r3, 8005ffe <_dtoa_r+0x7e>
 8005ff4:	f3c8 0013 	ubfx	r0, r8, #0, #20
 8005ff8:	2800      	cmp	r0, #0
 8005ffa:	f000 8545 	beq.w	8006a88 <_dtoa_r+0xb08>
 8005ffe:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006000:	b953      	cbnz	r3, 8006018 <_dtoa_r+0x98>
 8006002:	4ba6      	ldr	r3, [pc, #664]	; (800629c <_dtoa_r+0x31c>)
 8006004:	e021      	b.n	800604a <_dtoa_r+0xca>
 8006006:	4ba6      	ldr	r3, [pc, #664]	; (80062a0 <_dtoa_r+0x320>)
 8006008:	9306      	str	r3, [sp, #24]
 800600a:	3308      	adds	r3, #8
 800600c:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800600e:	6013      	str	r3, [r2, #0]
 8006010:	9806      	ldr	r0, [sp, #24]
 8006012:	b015      	add	sp, #84	; 0x54
 8006014:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006018:	4ba0      	ldr	r3, [pc, #640]	; (800629c <_dtoa_r+0x31c>)
 800601a:	9306      	str	r3, [sp, #24]
 800601c:	3303      	adds	r3, #3
 800601e:	e7f5      	b.n	800600c <_dtoa_r+0x8c>
 8006020:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8006024:	2200      	movs	r2, #0
 8006026:	2300      	movs	r3, #0
 8006028:	4630      	mov	r0, r6
 800602a:	4639      	mov	r1, r7
 800602c:	f7fa fcbc 	bl	80009a8 <__aeabi_dcmpeq>
 8006030:	4682      	mov	sl, r0
 8006032:	b160      	cbz	r0, 800604e <_dtoa_r+0xce>
 8006034:	2301      	movs	r3, #1
 8006036:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8006038:	6013      	str	r3, [r2, #0]
 800603a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800603c:	2b00      	cmp	r3, #0
 800603e:	f000 8520 	beq.w	8006a82 <_dtoa_r+0xb02>
 8006042:	4b98      	ldr	r3, [pc, #608]	; (80062a4 <_dtoa_r+0x324>)
 8006044:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8006046:	6013      	str	r3, [r2, #0]
 8006048:	3b01      	subs	r3, #1
 800604a:	9306      	str	r3, [sp, #24]
 800604c:	e7e0      	b.n	8006010 <_dtoa_r+0x90>
 800604e:	ab12      	add	r3, sp, #72	; 0x48
 8006050:	9301      	str	r3, [sp, #4]
 8006052:	ab13      	add	r3, sp, #76	; 0x4c
 8006054:	9300      	str	r3, [sp, #0]
 8006056:	4632      	mov	r2, r6
 8006058:	463b      	mov	r3, r7
 800605a:	4620      	mov	r0, r4
 800605c:	f001 f800 	bl	8007060 <__d2b>
 8006060:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8006064:	4683      	mov	fp, r0
 8006066:	2d00      	cmp	r5, #0
 8006068:	d07d      	beq.n	8006166 <_dtoa_r+0x1e6>
 800606a:	46b0      	mov	r8, r6
 800606c:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8006070:	f043 597f 	orr.w	r9, r3, #1069547520	; 0x3fc00000
 8006074:	f449 1940 	orr.w	r9, r9, #3145728	; 0x300000
 8006078:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800607c:	f8cd a040 	str.w	sl, [sp, #64]	; 0x40
 8006080:	2200      	movs	r2, #0
 8006082:	4b89      	ldr	r3, [pc, #548]	; (80062a8 <_dtoa_r+0x328>)
 8006084:	4640      	mov	r0, r8
 8006086:	4649      	mov	r1, r9
 8006088:	f7fa f86e 	bl	8000168 <__aeabi_dsub>
 800608c:	a37c      	add	r3, pc, #496	; (adr r3, 8006280 <_dtoa_r+0x300>)
 800608e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006092:	f7fa fa21 	bl	80004d8 <__aeabi_dmul>
 8006096:	a37c      	add	r3, pc, #496	; (adr r3, 8006288 <_dtoa_r+0x308>)
 8006098:	e9d3 2300 	ldrd	r2, r3, [r3]
 800609c:	f7fa f866 	bl	800016c <__adddf3>
 80060a0:	4606      	mov	r6, r0
 80060a2:	4628      	mov	r0, r5
 80060a4:	460f      	mov	r7, r1
 80060a6:	f7fa f9ad 	bl	8000404 <__aeabi_i2d>
 80060aa:	a379      	add	r3, pc, #484	; (adr r3, 8006290 <_dtoa_r+0x310>)
 80060ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060b0:	f7fa fa12 	bl	80004d8 <__aeabi_dmul>
 80060b4:	4602      	mov	r2, r0
 80060b6:	460b      	mov	r3, r1
 80060b8:	4630      	mov	r0, r6
 80060ba:	4639      	mov	r1, r7
 80060bc:	f7fa f856 	bl	800016c <__adddf3>
 80060c0:	4606      	mov	r6, r0
 80060c2:	460f      	mov	r7, r1
 80060c4:	f7fa fcb8 	bl	8000a38 <__aeabi_d2iz>
 80060c8:	2200      	movs	r2, #0
 80060ca:	4682      	mov	sl, r0
 80060cc:	2300      	movs	r3, #0
 80060ce:	4630      	mov	r0, r6
 80060d0:	4639      	mov	r1, r7
 80060d2:	f7fa fc73 	bl	80009bc <__aeabi_dcmplt>
 80060d6:	b148      	cbz	r0, 80060ec <_dtoa_r+0x16c>
 80060d8:	4650      	mov	r0, sl
 80060da:	f7fa f993 	bl	8000404 <__aeabi_i2d>
 80060de:	4632      	mov	r2, r6
 80060e0:	463b      	mov	r3, r7
 80060e2:	f7fa fc61 	bl	80009a8 <__aeabi_dcmpeq>
 80060e6:	b908      	cbnz	r0, 80060ec <_dtoa_r+0x16c>
 80060e8:	f10a 3aff 	add.w	sl, sl, #4294967295
 80060ec:	f1ba 0f16 	cmp.w	sl, #22
 80060f0:	d85a      	bhi.n	80061a8 <_dtoa_r+0x228>
 80060f2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80060f6:	496d      	ldr	r1, [pc, #436]	; (80062ac <_dtoa_r+0x32c>)
 80060f8:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 80060fc:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006100:	f7fa fc7a 	bl	80009f8 <__aeabi_dcmpgt>
 8006104:	2800      	cmp	r0, #0
 8006106:	d051      	beq.n	80061ac <_dtoa_r+0x22c>
 8006108:	2300      	movs	r3, #0
 800610a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800610e:	930d      	str	r3, [sp, #52]	; 0x34
 8006110:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006112:	1b5d      	subs	r5, r3, r5
 8006114:	1e6b      	subs	r3, r5, #1
 8006116:	9307      	str	r3, [sp, #28]
 8006118:	bf43      	ittte	mi
 800611a:	2300      	movmi	r3, #0
 800611c:	f1c5 0901 	rsbmi	r9, r5, #1
 8006120:	9307      	strmi	r3, [sp, #28]
 8006122:	f04f 0900 	movpl.w	r9, #0
 8006126:	f1ba 0f00 	cmp.w	sl, #0
 800612a:	db41      	blt.n	80061b0 <_dtoa_r+0x230>
 800612c:	9b07      	ldr	r3, [sp, #28]
 800612e:	f8cd a030 	str.w	sl, [sp, #48]	; 0x30
 8006132:	4453      	add	r3, sl
 8006134:	9307      	str	r3, [sp, #28]
 8006136:	2300      	movs	r3, #0
 8006138:	9308      	str	r3, [sp, #32]
 800613a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800613c:	2b09      	cmp	r3, #9
 800613e:	f200 808f 	bhi.w	8006260 <_dtoa_r+0x2e0>
 8006142:	2b05      	cmp	r3, #5
 8006144:	bfc4      	itt	gt
 8006146:	3b04      	subgt	r3, #4
 8006148:	931e      	strgt	r3, [sp, #120]	; 0x78
 800614a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800614c:	bfc8      	it	gt
 800614e:	2500      	movgt	r5, #0
 8006150:	f1a3 0302 	sub.w	r3, r3, #2
 8006154:	bfd8      	it	le
 8006156:	2501      	movle	r5, #1
 8006158:	2b03      	cmp	r3, #3
 800615a:	f200 808d 	bhi.w	8006278 <_dtoa_r+0x2f8>
 800615e:	e8df f003 	tbb	[pc, r3]
 8006162:	7d7b      	.short	0x7d7b
 8006164:	6f2f      	.short	0x6f2f
 8006166:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 800616a:	441d      	add	r5, r3
 800616c:	f205 4032 	addw	r0, r5, #1074	; 0x432
 8006170:	2820      	cmp	r0, #32
 8006172:	dd13      	ble.n	800619c <_dtoa_r+0x21c>
 8006174:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 8006178:	9b02      	ldr	r3, [sp, #8]
 800617a:	fa08 f800 	lsl.w	r8, r8, r0
 800617e:	f205 4012 	addw	r0, r5, #1042	; 0x412
 8006182:	fa23 f000 	lsr.w	r0, r3, r0
 8006186:	ea48 0000 	orr.w	r0, r8, r0
 800618a:	f7fa f92b 	bl	80003e4 <__aeabi_ui2d>
 800618e:	2301      	movs	r3, #1
 8006190:	4680      	mov	r8, r0
 8006192:	f1a1 79f8 	sub.w	r9, r1, #32505856	; 0x1f00000
 8006196:	3d01      	subs	r5, #1
 8006198:	9310      	str	r3, [sp, #64]	; 0x40
 800619a:	e771      	b.n	8006080 <_dtoa_r+0x100>
 800619c:	9b02      	ldr	r3, [sp, #8]
 800619e:	f1c0 0020 	rsb	r0, r0, #32
 80061a2:	fa03 f000 	lsl.w	r0, r3, r0
 80061a6:	e7f0      	b.n	800618a <_dtoa_r+0x20a>
 80061a8:	2301      	movs	r3, #1
 80061aa:	e7b0      	b.n	800610e <_dtoa_r+0x18e>
 80061ac:	900d      	str	r0, [sp, #52]	; 0x34
 80061ae:	e7af      	b.n	8006110 <_dtoa_r+0x190>
 80061b0:	f1ca 0300 	rsb	r3, sl, #0
 80061b4:	9308      	str	r3, [sp, #32]
 80061b6:	2300      	movs	r3, #0
 80061b8:	eba9 090a 	sub.w	r9, r9, sl
 80061bc:	930c      	str	r3, [sp, #48]	; 0x30
 80061be:	e7bc      	b.n	800613a <_dtoa_r+0x1ba>
 80061c0:	2301      	movs	r3, #1
 80061c2:	9309      	str	r3, [sp, #36]	; 0x24
 80061c4:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80061c6:	2b00      	cmp	r3, #0
 80061c8:	dd74      	ble.n	80062b4 <_dtoa_r+0x334>
 80061ca:	4698      	mov	r8, r3
 80061cc:	9304      	str	r3, [sp, #16]
 80061ce:	2200      	movs	r2, #0
 80061d0:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80061d2:	6072      	str	r2, [r6, #4]
 80061d4:	2204      	movs	r2, #4
 80061d6:	f102 0014 	add.w	r0, r2, #20
 80061da:	4298      	cmp	r0, r3
 80061dc:	6871      	ldr	r1, [r6, #4]
 80061de:	d96e      	bls.n	80062be <_dtoa_r+0x33e>
 80061e0:	4620      	mov	r0, r4
 80061e2:	f000 fcb0 	bl	8006b46 <_Balloc>
 80061e6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80061e8:	6030      	str	r0, [r6, #0]
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	f1b8 0f0e 	cmp.w	r8, #14
 80061f0:	9306      	str	r3, [sp, #24]
 80061f2:	f200 80ed 	bhi.w	80063d0 <_dtoa_r+0x450>
 80061f6:	2d00      	cmp	r5, #0
 80061f8:	f000 80ea 	beq.w	80063d0 <_dtoa_r+0x450>
 80061fc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006200:	f1ba 0f00 	cmp.w	sl, #0
 8006204:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 8006208:	dd77      	ble.n	80062fa <_dtoa_r+0x37a>
 800620a:	4a28      	ldr	r2, [pc, #160]	; (80062ac <_dtoa_r+0x32c>)
 800620c:	f00a 030f 	and.w	r3, sl, #15
 8006210:	ea4f 162a 	mov.w	r6, sl, asr #4
 8006214:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8006218:	06f0      	lsls	r0, r6, #27
 800621a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800621e:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8006222:	d568      	bpl.n	80062f6 <_dtoa_r+0x376>
 8006224:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8006228:	4b21      	ldr	r3, [pc, #132]	; (80062b0 <_dtoa_r+0x330>)
 800622a:	2503      	movs	r5, #3
 800622c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006230:	f7fa fa7c 	bl	800072c <__aeabi_ddiv>
 8006234:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006238:	f006 060f 	and.w	r6, r6, #15
 800623c:	4f1c      	ldr	r7, [pc, #112]	; (80062b0 <_dtoa_r+0x330>)
 800623e:	e04f      	b.n	80062e0 <_dtoa_r+0x360>
 8006240:	2301      	movs	r3, #1
 8006242:	9309      	str	r3, [sp, #36]	; 0x24
 8006244:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8006246:	4453      	add	r3, sl
 8006248:	f103 0801 	add.w	r8, r3, #1
 800624c:	9304      	str	r3, [sp, #16]
 800624e:	4643      	mov	r3, r8
 8006250:	2b01      	cmp	r3, #1
 8006252:	bfb8      	it	lt
 8006254:	2301      	movlt	r3, #1
 8006256:	e7ba      	b.n	80061ce <_dtoa_r+0x24e>
 8006258:	2300      	movs	r3, #0
 800625a:	e7b2      	b.n	80061c2 <_dtoa_r+0x242>
 800625c:	2300      	movs	r3, #0
 800625e:	e7f0      	b.n	8006242 <_dtoa_r+0x2c2>
 8006260:	2501      	movs	r5, #1
 8006262:	2300      	movs	r3, #0
 8006264:	9509      	str	r5, [sp, #36]	; 0x24
 8006266:	931e      	str	r3, [sp, #120]	; 0x78
 8006268:	f04f 33ff 	mov.w	r3, #4294967295
 800626c:	2200      	movs	r2, #0
 800626e:	9304      	str	r3, [sp, #16]
 8006270:	4698      	mov	r8, r3
 8006272:	2312      	movs	r3, #18
 8006274:	921f      	str	r2, [sp, #124]	; 0x7c
 8006276:	e7aa      	b.n	80061ce <_dtoa_r+0x24e>
 8006278:	2301      	movs	r3, #1
 800627a:	9309      	str	r3, [sp, #36]	; 0x24
 800627c:	e7f4      	b.n	8006268 <_dtoa_r+0x2e8>
 800627e:	bf00      	nop
 8006280:	636f4361 	.word	0x636f4361
 8006284:	3fd287a7 	.word	0x3fd287a7
 8006288:	8b60c8b3 	.word	0x8b60c8b3
 800628c:	3fc68a28 	.word	0x3fc68a28
 8006290:	509f79fb 	.word	0x509f79fb
 8006294:	3fd34413 	.word	0x3fd34413
 8006298:	7ff00000 	.word	0x7ff00000
 800629c:	0800a5ed 	.word	0x0800a5ed
 80062a0:	0800a5e4 	.word	0x0800a5e4
 80062a4:	0800a5c1 	.word	0x0800a5c1
 80062a8:	3ff80000 	.word	0x3ff80000
 80062ac:	0800a620 	.word	0x0800a620
 80062b0:	0800a5f8 	.word	0x0800a5f8
 80062b4:	2301      	movs	r3, #1
 80062b6:	9304      	str	r3, [sp, #16]
 80062b8:	4698      	mov	r8, r3
 80062ba:	461a      	mov	r2, r3
 80062bc:	e7da      	b.n	8006274 <_dtoa_r+0x2f4>
 80062be:	3101      	adds	r1, #1
 80062c0:	6071      	str	r1, [r6, #4]
 80062c2:	0052      	lsls	r2, r2, #1
 80062c4:	e787      	b.n	80061d6 <_dtoa_r+0x256>
 80062c6:	07f1      	lsls	r1, r6, #31
 80062c8:	d508      	bpl.n	80062dc <_dtoa_r+0x35c>
 80062ca:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80062ce:	e9d7 2300 	ldrd	r2, r3, [r7]
 80062d2:	f7fa f901 	bl	80004d8 <__aeabi_dmul>
 80062d6:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80062da:	3501      	adds	r5, #1
 80062dc:	1076      	asrs	r6, r6, #1
 80062de:	3708      	adds	r7, #8
 80062e0:	2e00      	cmp	r6, #0
 80062e2:	d1f0      	bne.n	80062c6 <_dtoa_r+0x346>
 80062e4:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80062e8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80062ec:	f7fa fa1e 	bl	800072c <__aeabi_ddiv>
 80062f0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80062f4:	e01b      	b.n	800632e <_dtoa_r+0x3ae>
 80062f6:	2502      	movs	r5, #2
 80062f8:	e7a0      	b.n	800623c <_dtoa_r+0x2bc>
 80062fa:	f000 80a4 	beq.w	8006446 <_dtoa_r+0x4c6>
 80062fe:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8006302:	f1ca 0600 	rsb	r6, sl, #0
 8006306:	4ba0      	ldr	r3, [pc, #640]	; (8006588 <_dtoa_r+0x608>)
 8006308:	f006 020f 	and.w	r2, r6, #15
 800630c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006310:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006314:	f7fa f8e0 	bl	80004d8 <__aeabi_dmul>
 8006318:	2502      	movs	r5, #2
 800631a:	2300      	movs	r3, #0
 800631c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006320:	4f9a      	ldr	r7, [pc, #616]	; (800658c <_dtoa_r+0x60c>)
 8006322:	1136      	asrs	r6, r6, #4
 8006324:	2e00      	cmp	r6, #0
 8006326:	f040 8083 	bne.w	8006430 <_dtoa_r+0x4b0>
 800632a:	2b00      	cmp	r3, #0
 800632c:	d1e0      	bne.n	80062f0 <_dtoa_r+0x370>
 800632e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006330:	2b00      	cmp	r3, #0
 8006332:	f000 808a 	beq.w	800644a <_dtoa_r+0x4ca>
 8006336:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800633a:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800633e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8006342:	2200      	movs	r2, #0
 8006344:	4b92      	ldr	r3, [pc, #584]	; (8006590 <_dtoa_r+0x610>)
 8006346:	f7fa fb39 	bl	80009bc <__aeabi_dcmplt>
 800634a:	2800      	cmp	r0, #0
 800634c:	d07d      	beq.n	800644a <_dtoa_r+0x4ca>
 800634e:	f1b8 0f00 	cmp.w	r8, #0
 8006352:	d07a      	beq.n	800644a <_dtoa_r+0x4ca>
 8006354:	9b04      	ldr	r3, [sp, #16]
 8006356:	2b00      	cmp	r3, #0
 8006358:	dd36      	ble.n	80063c8 <_dtoa_r+0x448>
 800635a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800635e:	2200      	movs	r2, #0
 8006360:	4b8c      	ldr	r3, [pc, #560]	; (8006594 <_dtoa_r+0x614>)
 8006362:	f7fa f8b9 	bl	80004d8 <__aeabi_dmul>
 8006366:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800636a:	9e04      	ldr	r6, [sp, #16]
 800636c:	f10a 37ff 	add.w	r7, sl, #4294967295
 8006370:	3501      	adds	r5, #1
 8006372:	4628      	mov	r0, r5
 8006374:	f7fa f846 	bl	8000404 <__aeabi_i2d>
 8006378:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800637c:	f7fa f8ac 	bl	80004d8 <__aeabi_dmul>
 8006380:	2200      	movs	r2, #0
 8006382:	4b85      	ldr	r3, [pc, #532]	; (8006598 <_dtoa_r+0x618>)
 8006384:	f7f9 fef2 	bl	800016c <__adddf3>
 8006388:	f1a1 7550 	sub.w	r5, r1, #54525952	; 0x3400000
 800638c:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8006390:	950b      	str	r5, [sp, #44]	; 0x2c
 8006392:	2e00      	cmp	r6, #0
 8006394:	d15c      	bne.n	8006450 <_dtoa_r+0x4d0>
 8006396:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800639a:	2200      	movs	r2, #0
 800639c:	4b7f      	ldr	r3, [pc, #508]	; (800659c <_dtoa_r+0x61c>)
 800639e:	f7f9 fee3 	bl	8000168 <__aeabi_dsub>
 80063a2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80063a4:	462b      	mov	r3, r5
 80063a6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80063aa:	f7fa fb25 	bl	80009f8 <__aeabi_dcmpgt>
 80063ae:	2800      	cmp	r0, #0
 80063b0:	f040 8281 	bne.w	80068b6 <_dtoa_r+0x936>
 80063b4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80063b8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80063ba:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 80063be:	f7fa fafd 	bl	80009bc <__aeabi_dcmplt>
 80063c2:	2800      	cmp	r0, #0
 80063c4:	f040 8275 	bne.w	80068b2 <_dtoa_r+0x932>
 80063c8:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 80063cc:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80063d0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80063d2:	2b00      	cmp	r3, #0
 80063d4:	f2c0 814b 	blt.w	800666e <_dtoa_r+0x6ee>
 80063d8:	f1ba 0f0e 	cmp.w	sl, #14
 80063dc:	f300 8147 	bgt.w	800666e <_dtoa_r+0x6ee>
 80063e0:	4b69      	ldr	r3, [pc, #420]	; (8006588 <_dtoa_r+0x608>)
 80063e2:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80063e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063ea:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80063ee:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80063f0:	2b00      	cmp	r3, #0
 80063f2:	f280 80d7 	bge.w	80065a4 <_dtoa_r+0x624>
 80063f6:	f1b8 0f00 	cmp.w	r8, #0
 80063fa:	f300 80d3 	bgt.w	80065a4 <_dtoa_r+0x624>
 80063fe:	f040 8257 	bne.w	80068b0 <_dtoa_r+0x930>
 8006402:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006406:	2200      	movs	r2, #0
 8006408:	4b64      	ldr	r3, [pc, #400]	; (800659c <_dtoa_r+0x61c>)
 800640a:	f7fa f865 	bl	80004d8 <__aeabi_dmul>
 800640e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006412:	f7fa fae7 	bl	80009e4 <__aeabi_dcmpge>
 8006416:	4646      	mov	r6, r8
 8006418:	4647      	mov	r7, r8
 800641a:	2800      	cmp	r0, #0
 800641c:	f040 822d 	bne.w	800687a <_dtoa_r+0x8fa>
 8006420:	9b06      	ldr	r3, [sp, #24]
 8006422:	9a06      	ldr	r2, [sp, #24]
 8006424:	1c5d      	adds	r5, r3, #1
 8006426:	2331      	movs	r3, #49	; 0x31
 8006428:	f10a 0a01 	add.w	sl, sl, #1
 800642c:	7013      	strb	r3, [r2, #0]
 800642e:	e228      	b.n	8006882 <_dtoa_r+0x902>
 8006430:	07f2      	lsls	r2, r6, #31
 8006432:	d505      	bpl.n	8006440 <_dtoa_r+0x4c0>
 8006434:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006438:	f7fa f84e 	bl	80004d8 <__aeabi_dmul>
 800643c:	2301      	movs	r3, #1
 800643e:	3501      	adds	r5, #1
 8006440:	1076      	asrs	r6, r6, #1
 8006442:	3708      	adds	r7, #8
 8006444:	e76e      	b.n	8006324 <_dtoa_r+0x3a4>
 8006446:	2502      	movs	r5, #2
 8006448:	e771      	b.n	800632e <_dtoa_r+0x3ae>
 800644a:	4657      	mov	r7, sl
 800644c:	4646      	mov	r6, r8
 800644e:	e790      	b.n	8006372 <_dtoa_r+0x3f2>
 8006450:	4b4d      	ldr	r3, [pc, #308]	; (8006588 <_dtoa_r+0x608>)
 8006452:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8006456:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 800645a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800645c:	2b00      	cmp	r3, #0
 800645e:	d048      	beq.n	80064f2 <_dtoa_r+0x572>
 8006460:	4602      	mov	r2, r0
 8006462:	460b      	mov	r3, r1
 8006464:	2000      	movs	r0, #0
 8006466:	494e      	ldr	r1, [pc, #312]	; (80065a0 <_dtoa_r+0x620>)
 8006468:	f7fa f960 	bl	800072c <__aeabi_ddiv>
 800646c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8006470:	f7f9 fe7a 	bl	8000168 <__aeabi_dsub>
 8006474:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8006478:	9d06      	ldr	r5, [sp, #24]
 800647a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800647e:	f7fa fadb 	bl	8000a38 <__aeabi_d2iz>
 8006482:	9011      	str	r0, [sp, #68]	; 0x44
 8006484:	f7f9 ffbe 	bl	8000404 <__aeabi_i2d>
 8006488:	4602      	mov	r2, r0
 800648a:	460b      	mov	r3, r1
 800648c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006490:	f7f9 fe6a 	bl	8000168 <__aeabi_dsub>
 8006494:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006496:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800649a:	3330      	adds	r3, #48	; 0x30
 800649c:	f805 3b01 	strb.w	r3, [r5], #1
 80064a0:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80064a4:	f7fa fa8a 	bl	80009bc <__aeabi_dcmplt>
 80064a8:	2800      	cmp	r0, #0
 80064aa:	d163      	bne.n	8006574 <_dtoa_r+0x5f4>
 80064ac:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80064b0:	2000      	movs	r0, #0
 80064b2:	4937      	ldr	r1, [pc, #220]	; (8006590 <_dtoa_r+0x610>)
 80064b4:	f7f9 fe58 	bl	8000168 <__aeabi_dsub>
 80064b8:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80064bc:	f7fa fa7e 	bl	80009bc <__aeabi_dcmplt>
 80064c0:	2800      	cmp	r0, #0
 80064c2:	f040 80b5 	bne.w	8006630 <_dtoa_r+0x6b0>
 80064c6:	9b06      	ldr	r3, [sp, #24]
 80064c8:	1aeb      	subs	r3, r5, r3
 80064ca:	429e      	cmp	r6, r3
 80064cc:	f77f af7c 	ble.w	80063c8 <_dtoa_r+0x448>
 80064d0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80064d4:	2200      	movs	r2, #0
 80064d6:	4b2f      	ldr	r3, [pc, #188]	; (8006594 <_dtoa_r+0x614>)
 80064d8:	f7f9 fffe 	bl	80004d8 <__aeabi_dmul>
 80064dc:	2200      	movs	r2, #0
 80064de:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80064e2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80064e6:	4b2b      	ldr	r3, [pc, #172]	; (8006594 <_dtoa_r+0x614>)
 80064e8:	f7f9 fff6 	bl	80004d8 <__aeabi_dmul>
 80064ec:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80064f0:	e7c3      	b.n	800647a <_dtoa_r+0x4fa>
 80064f2:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80064f6:	f7f9 ffef 	bl	80004d8 <__aeabi_dmul>
 80064fa:	9b06      	ldr	r3, [sp, #24]
 80064fc:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8006500:	199d      	adds	r5, r3, r6
 8006502:	461e      	mov	r6, r3
 8006504:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006508:	f7fa fa96 	bl	8000a38 <__aeabi_d2iz>
 800650c:	9011      	str	r0, [sp, #68]	; 0x44
 800650e:	f7f9 ff79 	bl	8000404 <__aeabi_i2d>
 8006512:	4602      	mov	r2, r0
 8006514:	460b      	mov	r3, r1
 8006516:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800651a:	f7f9 fe25 	bl	8000168 <__aeabi_dsub>
 800651e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006520:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006524:	3330      	adds	r3, #48	; 0x30
 8006526:	f806 3b01 	strb.w	r3, [r6], #1
 800652a:	42ae      	cmp	r6, r5
 800652c:	f04f 0200 	mov.w	r2, #0
 8006530:	d124      	bne.n	800657c <_dtoa_r+0x5fc>
 8006532:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8006536:	4b1a      	ldr	r3, [pc, #104]	; (80065a0 <_dtoa_r+0x620>)
 8006538:	f7f9 fe18 	bl	800016c <__adddf3>
 800653c:	4602      	mov	r2, r0
 800653e:	460b      	mov	r3, r1
 8006540:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006544:	f7fa fa58 	bl	80009f8 <__aeabi_dcmpgt>
 8006548:	2800      	cmp	r0, #0
 800654a:	d171      	bne.n	8006630 <_dtoa_r+0x6b0>
 800654c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8006550:	2000      	movs	r0, #0
 8006552:	4913      	ldr	r1, [pc, #76]	; (80065a0 <_dtoa_r+0x620>)
 8006554:	f7f9 fe08 	bl	8000168 <__aeabi_dsub>
 8006558:	4602      	mov	r2, r0
 800655a:	460b      	mov	r3, r1
 800655c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006560:	f7fa fa2c 	bl	80009bc <__aeabi_dcmplt>
 8006564:	2800      	cmp	r0, #0
 8006566:	f43f af2f 	beq.w	80063c8 <_dtoa_r+0x448>
 800656a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800656e:	1e6a      	subs	r2, r5, #1
 8006570:	2b30      	cmp	r3, #48	; 0x30
 8006572:	d001      	beq.n	8006578 <_dtoa_r+0x5f8>
 8006574:	46ba      	mov	sl, r7
 8006576:	e04a      	b.n	800660e <_dtoa_r+0x68e>
 8006578:	4615      	mov	r5, r2
 800657a:	e7f6      	b.n	800656a <_dtoa_r+0x5ea>
 800657c:	4b05      	ldr	r3, [pc, #20]	; (8006594 <_dtoa_r+0x614>)
 800657e:	f7f9 ffab 	bl	80004d8 <__aeabi_dmul>
 8006582:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006586:	e7bd      	b.n	8006504 <_dtoa_r+0x584>
 8006588:	0800a620 	.word	0x0800a620
 800658c:	0800a5f8 	.word	0x0800a5f8
 8006590:	3ff00000 	.word	0x3ff00000
 8006594:	40240000 	.word	0x40240000
 8006598:	401c0000 	.word	0x401c0000
 800659c:	40140000 	.word	0x40140000
 80065a0:	3fe00000 	.word	0x3fe00000
 80065a4:	9d06      	ldr	r5, [sp, #24]
 80065a6:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80065aa:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80065ae:	4630      	mov	r0, r6
 80065b0:	4639      	mov	r1, r7
 80065b2:	f7fa f8bb 	bl	800072c <__aeabi_ddiv>
 80065b6:	f7fa fa3f 	bl	8000a38 <__aeabi_d2iz>
 80065ba:	4681      	mov	r9, r0
 80065bc:	f7f9 ff22 	bl	8000404 <__aeabi_i2d>
 80065c0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80065c4:	f7f9 ff88 	bl	80004d8 <__aeabi_dmul>
 80065c8:	4602      	mov	r2, r0
 80065ca:	460b      	mov	r3, r1
 80065cc:	4630      	mov	r0, r6
 80065ce:	4639      	mov	r1, r7
 80065d0:	f7f9 fdca 	bl	8000168 <__aeabi_dsub>
 80065d4:	f109 0630 	add.w	r6, r9, #48	; 0x30
 80065d8:	f805 6b01 	strb.w	r6, [r5], #1
 80065dc:	9e06      	ldr	r6, [sp, #24]
 80065de:	4602      	mov	r2, r0
 80065e0:	1bae      	subs	r6, r5, r6
 80065e2:	45b0      	cmp	r8, r6
 80065e4:	460b      	mov	r3, r1
 80065e6:	d135      	bne.n	8006654 <_dtoa_r+0x6d4>
 80065e8:	f7f9 fdc0 	bl	800016c <__adddf3>
 80065ec:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80065f0:	4606      	mov	r6, r0
 80065f2:	460f      	mov	r7, r1
 80065f4:	f7fa fa00 	bl	80009f8 <__aeabi_dcmpgt>
 80065f8:	b9c8      	cbnz	r0, 800662e <_dtoa_r+0x6ae>
 80065fa:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80065fe:	4630      	mov	r0, r6
 8006600:	4639      	mov	r1, r7
 8006602:	f7fa f9d1 	bl	80009a8 <__aeabi_dcmpeq>
 8006606:	b110      	cbz	r0, 800660e <_dtoa_r+0x68e>
 8006608:	f019 0f01 	tst.w	r9, #1
 800660c:	d10f      	bne.n	800662e <_dtoa_r+0x6ae>
 800660e:	4659      	mov	r1, fp
 8006610:	4620      	mov	r0, r4
 8006612:	f000 facc 	bl	8006bae <_Bfree>
 8006616:	2300      	movs	r3, #0
 8006618:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800661a:	702b      	strb	r3, [r5, #0]
 800661c:	f10a 0301 	add.w	r3, sl, #1
 8006620:	6013      	str	r3, [r2, #0]
 8006622:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006624:	2b00      	cmp	r3, #0
 8006626:	f43f acf3 	beq.w	8006010 <_dtoa_r+0x90>
 800662a:	601d      	str	r5, [r3, #0]
 800662c:	e4f0      	b.n	8006010 <_dtoa_r+0x90>
 800662e:	4657      	mov	r7, sl
 8006630:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8006634:	1e6b      	subs	r3, r5, #1
 8006636:	2a39      	cmp	r2, #57	; 0x39
 8006638:	d106      	bne.n	8006648 <_dtoa_r+0x6c8>
 800663a:	9a06      	ldr	r2, [sp, #24]
 800663c:	429a      	cmp	r2, r3
 800663e:	d107      	bne.n	8006650 <_dtoa_r+0x6d0>
 8006640:	2330      	movs	r3, #48	; 0x30
 8006642:	7013      	strb	r3, [r2, #0]
 8006644:	4613      	mov	r3, r2
 8006646:	3701      	adds	r7, #1
 8006648:	781a      	ldrb	r2, [r3, #0]
 800664a:	3201      	adds	r2, #1
 800664c:	701a      	strb	r2, [r3, #0]
 800664e:	e791      	b.n	8006574 <_dtoa_r+0x5f4>
 8006650:	461d      	mov	r5, r3
 8006652:	e7ed      	b.n	8006630 <_dtoa_r+0x6b0>
 8006654:	2200      	movs	r2, #0
 8006656:	4b99      	ldr	r3, [pc, #612]	; (80068bc <_dtoa_r+0x93c>)
 8006658:	f7f9 ff3e 	bl	80004d8 <__aeabi_dmul>
 800665c:	2200      	movs	r2, #0
 800665e:	2300      	movs	r3, #0
 8006660:	4606      	mov	r6, r0
 8006662:	460f      	mov	r7, r1
 8006664:	f7fa f9a0 	bl	80009a8 <__aeabi_dcmpeq>
 8006668:	2800      	cmp	r0, #0
 800666a:	d09e      	beq.n	80065aa <_dtoa_r+0x62a>
 800666c:	e7cf      	b.n	800660e <_dtoa_r+0x68e>
 800666e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006670:	2a00      	cmp	r2, #0
 8006672:	f000 8088 	beq.w	8006786 <_dtoa_r+0x806>
 8006676:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8006678:	2a01      	cmp	r2, #1
 800667a:	dc6d      	bgt.n	8006758 <_dtoa_r+0x7d8>
 800667c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800667e:	2a00      	cmp	r2, #0
 8006680:	d066      	beq.n	8006750 <_dtoa_r+0x7d0>
 8006682:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8006686:	464d      	mov	r5, r9
 8006688:	9e08      	ldr	r6, [sp, #32]
 800668a:	9a07      	ldr	r2, [sp, #28]
 800668c:	2101      	movs	r1, #1
 800668e:	441a      	add	r2, r3
 8006690:	4620      	mov	r0, r4
 8006692:	4499      	add	r9, r3
 8006694:	9207      	str	r2, [sp, #28]
 8006696:	f000 fb2a 	bl	8006cee <__i2b>
 800669a:	4607      	mov	r7, r0
 800669c:	2d00      	cmp	r5, #0
 800669e:	dd0b      	ble.n	80066b8 <_dtoa_r+0x738>
 80066a0:	9b07      	ldr	r3, [sp, #28]
 80066a2:	2b00      	cmp	r3, #0
 80066a4:	dd08      	ble.n	80066b8 <_dtoa_r+0x738>
 80066a6:	42ab      	cmp	r3, r5
 80066a8:	bfa8      	it	ge
 80066aa:	462b      	movge	r3, r5
 80066ac:	9a07      	ldr	r2, [sp, #28]
 80066ae:	eba9 0903 	sub.w	r9, r9, r3
 80066b2:	1aed      	subs	r5, r5, r3
 80066b4:	1ad3      	subs	r3, r2, r3
 80066b6:	9307      	str	r3, [sp, #28]
 80066b8:	9b08      	ldr	r3, [sp, #32]
 80066ba:	b1eb      	cbz	r3, 80066f8 <_dtoa_r+0x778>
 80066bc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80066be:	2b00      	cmp	r3, #0
 80066c0:	d065      	beq.n	800678e <_dtoa_r+0x80e>
 80066c2:	b18e      	cbz	r6, 80066e8 <_dtoa_r+0x768>
 80066c4:	4639      	mov	r1, r7
 80066c6:	4632      	mov	r2, r6
 80066c8:	4620      	mov	r0, r4
 80066ca:	f000 fbaf 	bl	8006e2c <__pow5mult>
 80066ce:	465a      	mov	r2, fp
 80066d0:	4601      	mov	r1, r0
 80066d2:	4607      	mov	r7, r0
 80066d4:	4620      	mov	r0, r4
 80066d6:	f000 fb13 	bl	8006d00 <__multiply>
 80066da:	4659      	mov	r1, fp
 80066dc:	900a      	str	r0, [sp, #40]	; 0x28
 80066de:	4620      	mov	r0, r4
 80066e0:	f000 fa65 	bl	8006bae <_Bfree>
 80066e4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80066e6:	469b      	mov	fp, r3
 80066e8:	9b08      	ldr	r3, [sp, #32]
 80066ea:	1b9a      	subs	r2, r3, r6
 80066ec:	d004      	beq.n	80066f8 <_dtoa_r+0x778>
 80066ee:	4659      	mov	r1, fp
 80066f0:	4620      	mov	r0, r4
 80066f2:	f000 fb9b 	bl	8006e2c <__pow5mult>
 80066f6:	4683      	mov	fp, r0
 80066f8:	2101      	movs	r1, #1
 80066fa:	4620      	mov	r0, r4
 80066fc:	f000 faf7 	bl	8006cee <__i2b>
 8006700:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006702:	4606      	mov	r6, r0
 8006704:	2b00      	cmp	r3, #0
 8006706:	f000 81c6 	beq.w	8006a96 <_dtoa_r+0xb16>
 800670a:	461a      	mov	r2, r3
 800670c:	4601      	mov	r1, r0
 800670e:	4620      	mov	r0, r4
 8006710:	f000 fb8c 	bl	8006e2c <__pow5mult>
 8006714:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8006716:	4606      	mov	r6, r0
 8006718:	2b01      	cmp	r3, #1
 800671a:	dc3e      	bgt.n	800679a <_dtoa_r+0x81a>
 800671c:	9b02      	ldr	r3, [sp, #8]
 800671e:	2b00      	cmp	r3, #0
 8006720:	d137      	bne.n	8006792 <_dtoa_r+0x812>
 8006722:	9b03      	ldr	r3, [sp, #12]
 8006724:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006728:	2b00      	cmp	r3, #0
 800672a:	d134      	bne.n	8006796 <_dtoa_r+0x816>
 800672c:	9b03      	ldr	r3, [sp, #12]
 800672e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006732:	0d1b      	lsrs	r3, r3, #20
 8006734:	051b      	lsls	r3, r3, #20
 8006736:	b12b      	cbz	r3, 8006744 <_dtoa_r+0x7c4>
 8006738:	9b07      	ldr	r3, [sp, #28]
 800673a:	f109 0901 	add.w	r9, r9, #1
 800673e:	3301      	adds	r3, #1
 8006740:	9307      	str	r3, [sp, #28]
 8006742:	2301      	movs	r3, #1
 8006744:	9308      	str	r3, [sp, #32]
 8006746:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006748:	2b00      	cmp	r3, #0
 800674a:	d128      	bne.n	800679e <_dtoa_r+0x81e>
 800674c:	2001      	movs	r0, #1
 800674e:	e02e      	b.n	80067ae <_dtoa_r+0x82e>
 8006750:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006752:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8006756:	e796      	b.n	8006686 <_dtoa_r+0x706>
 8006758:	9b08      	ldr	r3, [sp, #32]
 800675a:	f108 36ff 	add.w	r6, r8, #4294967295
 800675e:	42b3      	cmp	r3, r6
 8006760:	bfb7      	itett	lt
 8006762:	9b08      	ldrlt	r3, [sp, #32]
 8006764:	1b9e      	subge	r6, r3, r6
 8006766:	1af2      	sublt	r2, r6, r3
 8006768:	9b0c      	ldrlt	r3, [sp, #48]	; 0x30
 800676a:	bfbf      	itttt	lt
 800676c:	9608      	strlt	r6, [sp, #32]
 800676e:	189b      	addlt	r3, r3, r2
 8006770:	930c      	strlt	r3, [sp, #48]	; 0x30
 8006772:	2600      	movlt	r6, #0
 8006774:	f1b8 0f00 	cmp.w	r8, #0
 8006778:	bfb9      	ittee	lt
 800677a:	eba9 0508 	sublt.w	r5, r9, r8
 800677e:	2300      	movlt	r3, #0
 8006780:	464d      	movge	r5, r9
 8006782:	4643      	movge	r3, r8
 8006784:	e781      	b.n	800668a <_dtoa_r+0x70a>
 8006786:	9e08      	ldr	r6, [sp, #32]
 8006788:	464d      	mov	r5, r9
 800678a:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800678c:	e786      	b.n	800669c <_dtoa_r+0x71c>
 800678e:	9a08      	ldr	r2, [sp, #32]
 8006790:	e7ad      	b.n	80066ee <_dtoa_r+0x76e>
 8006792:	2300      	movs	r3, #0
 8006794:	e7d6      	b.n	8006744 <_dtoa_r+0x7c4>
 8006796:	9b02      	ldr	r3, [sp, #8]
 8006798:	e7d4      	b.n	8006744 <_dtoa_r+0x7c4>
 800679a:	2300      	movs	r3, #0
 800679c:	9308      	str	r3, [sp, #32]
 800679e:	6933      	ldr	r3, [r6, #16]
 80067a0:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80067a4:	6918      	ldr	r0, [r3, #16]
 80067a6:	f000 fa54 	bl	8006c52 <__hi0bits>
 80067aa:	f1c0 0020 	rsb	r0, r0, #32
 80067ae:	9b07      	ldr	r3, [sp, #28]
 80067b0:	4418      	add	r0, r3
 80067b2:	f010 001f 	ands.w	r0, r0, #31
 80067b6:	d047      	beq.n	8006848 <_dtoa_r+0x8c8>
 80067b8:	f1c0 0320 	rsb	r3, r0, #32
 80067bc:	2b04      	cmp	r3, #4
 80067be:	dd3b      	ble.n	8006838 <_dtoa_r+0x8b8>
 80067c0:	9b07      	ldr	r3, [sp, #28]
 80067c2:	f1c0 001c 	rsb	r0, r0, #28
 80067c6:	4481      	add	r9, r0
 80067c8:	4405      	add	r5, r0
 80067ca:	4403      	add	r3, r0
 80067cc:	9307      	str	r3, [sp, #28]
 80067ce:	f1b9 0f00 	cmp.w	r9, #0
 80067d2:	dd05      	ble.n	80067e0 <_dtoa_r+0x860>
 80067d4:	4659      	mov	r1, fp
 80067d6:	464a      	mov	r2, r9
 80067d8:	4620      	mov	r0, r4
 80067da:	f000 fb75 	bl	8006ec8 <__lshift>
 80067de:	4683      	mov	fp, r0
 80067e0:	9b07      	ldr	r3, [sp, #28]
 80067e2:	2b00      	cmp	r3, #0
 80067e4:	dd05      	ble.n	80067f2 <_dtoa_r+0x872>
 80067e6:	4631      	mov	r1, r6
 80067e8:	461a      	mov	r2, r3
 80067ea:	4620      	mov	r0, r4
 80067ec:	f000 fb6c 	bl	8006ec8 <__lshift>
 80067f0:	4606      	mov	r6, r0
 80067f2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80067f4:	b353      	cbz	r3, 800684c <_dtoa_r+0x8cc>
 80067f6:	4631      	mov	r1, r6
 80067f8:	4658      	mov	r0, fp
 80067fa:	f000 fbb9 	bl	8006f70 <__mcmp>
 80067fe:	2800      	cmp	r0, #0
 8006800:	da24      	bge.n	800684c <_dtoa_r+0x8cc>
 8006802:	2300      	movs	r3, #0
 8006804:	4659      	mov	r1, fp
 8006806:	220a      	movs	r2, #10
 8006808:	4620      	mov	r0, r4
 800680a:	f000 f9e7 	bl	8006bdc <__multadd>
 800680e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006810:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006814:	4683      	mov	fp, r0
 8006816:	2b00      	cmp	r3, #0
 8006818:	f000 8144 	beq.w	8006aa4 <_dtoa_r+0xb24>
 800681c:	2300      	movs	r3, #0
 800681e:	4639      	mov	r1, r7
 8006820:	220a      	movs	r2, #10
 8006822:	4620      	mov	r0, r4
 8006824:	f000 f9da 	bl	8006bdc <__multadd>
 8006828:	9b04      	ldr	r3, [sp, #16]
 800682a:	4607      	mov	r7, r0
 800682c:	2b00      	cmp	r3, #0
 800682e:	dc4d      	bgt.n	80068cc <_dtoa_r+0x94c>
 8006830:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8006832:	2b02      	cmp	r3, #2
 8006834:	dd4a      	ble.n	80068cc <_dtoa_r+0x94c>
 8006836:	e011      	b.n	800685c <_dtoa_r+0x8dc>
 8006838:	d0c9      	beq.n	80067ce <_dtoa_r+0x84e>
 800683a:	9a07      	ldr	r2, [sp, #28]
 800683c:	331c      	adds	r3, #28
 800683e:	441a      	add	r2, r3
 8006840:	4499      	add	r9, r3
 8006842:	441d      	add	r5, r3
 8006844:	4613      	mov	r3, r2
 8006846:	e7c1      	b.n	80067cc <_dtoa_r+0x84c>
 8006848:	4603      	mov	r3, r0
 800684a:	e7f6      	b.n	800683a <_dtoa_r+0x8ba>
 800684c:	f1b8 0f00 	cmp.w	r8, #0
 8006850:	dc36      	bgt.n	80068c0 <_dtoa_r+0x940>
 8006852:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8006854:	2b02      	cmp	r3, #2
 8006856:	dd33      	ble.n	80068c0 <_dtoa_r+0x940>
 8006858:	f8cd 8010 	str.w	r8, [sp, #16]
 800685c:	9b04      	ldr	r3, [sp, #16]
 800685e:	b963      	cbnz	r3, 800687a <_dtoa_r+0x8fa>
 8006860:	4631      	mov	r1, r6
 8006862:	2205      	movs	r2, #5
 8006864:	4620      	mov	r0, r4
 8006866:	f000 f9b9 	bl	8006bdc <__multadd>
 800686a:	4601      	mov	r1, r0
 800686c:	4606      	mov	r6, r0
 800686e:	4658      	mov	r0, fp
 8006870:	f000 fb7e 	bl	8006f70 <__mcmp>
 8006874:	2800      	cmp	r0, #0
 8006876:	f73f add3 	bgt.w	8006420 <_dtoa_r+0x4a0>
 800687a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800687c:	9d06      	ldr	r5, [sp, #24]
 800687e:	ea6f 0a03 	mvn.w	sl, r3
 8006882:	f04f 0900 	mov.w	r9, #0
 8006886:	4631      	mov	r1, r6
 8006888:	4620      	mov	r0, r4
 800688a:	f000 f990 	bl	8006bae <_Bfree>
 800688e:	2f00      	cmp	r7, #0
 8006890:	f43f aebd 	beq.w	800660e <_dtoa_r+0x68e>
 8006894:	f1b9 0f00 	cmp.w	r9, #0
 8006898:	d005      	beq.n	80068a6 <_dtoa_r+0x926>
 800689a:	45b9      	cmp	r9, r7
 800689c:	d003      	beq.n	80068a6 <_dtoa_r+0x926>
 800689e:	4649      	mov	r1, r9
 80068a0:	4620      	mov	r0, r4
 80068a2:	f000 f984 	bl	8006bae <_Bfree>
 80068a6:	4639      	mov	r1, r7
 80068a8:	4620      	mov	r0, r4
 80068aa:	f000 f980 	bl	8006bae <_Bfree>
 80068ae:	e6ae      	b.n	800660e <_dtoa_r+0x68e>
 80068b0:	2600      	movs	r6, #0
 80068b2:	4637      	mov	r7, r6
 80068b4:	e7e1      	b.n	800687a <_dtoa_r+0x8fa>
 80068b6:	46ba      	mov	sl, r7
 80068b8:	4637      	mov	r7, r6
 80068ba:	e5b1      	b.n	8006420 <_dtoa_r+0x4a0>
 80068bc:	40240000 	.word	0x40240000
 80068c0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80068c2:	f8cd 8010 	str.w	r8, [sp, #16]
 80068c6:	2b00      	cmp	r3, #0
 80068c8:	f000 80f3 	beq.w	8006ab2 <_dtoa_r+0xb32>
 80068cc:	2d00      	cmp	r5, #0
 80068ce:	dd05      	ble.n	80068dc <_dtoa_r+0x95c>
 80068d0:	4639      	mov	r1, r7
 80068d2:	462a      	mov	r2, r5
 80068d4:	4620      	mov	r0, r4
 80068d6:	f000 faf7 	bl	8006ec8 <__lshift>
 80068da:	4607      	mov	r7, r0
 80068dc:	9b08      	ldr	r3, [sp, #32]
 80068de:	2b00      	cmp	r3, #0
 80068e0:	d04c      	beq.n	800697c <_dtoa_r+0x9fc>
 80068e2:	6879      	ldr	r1, [r7, #4]
 80068e4:	4620      	mov	r0, r4
 80068e6:	f000 f92e 	bl	8006b46 <_Balloc>
 80068ea:	4605      	mov	r5, r0
 80068ec:	693a      	ldr	r2, [r7, #16]
 80068ee:	f107 010c 	add.w	r1, r7, #12
 80068f2:	3202      	adds	r2, #2
 80068f4:	0092      	lsls	r2, r2, #2
 80068f6:	300c      	adds	r0, #12
 80068f8:	f000 f91a 	bl	8006b30 <memcpy>
 80068fc:	2201      	movs	r2, #1
 80068fe:	4629      	mov	r1, r5
 8006900:	4620      	mov	r0, r4
 8006902:	f000 fae1 	bl	8006ec8 <__lshift>
 8006906:	46b9      	mov	r9, r7
 8006908:	4607      	mov	r7, r0
 800690a:	9b06      	ldr	r3, [sp, #24]
 800690c:	9307      	str	r3, [sp, #28]
 800690e:	9b02      	ldr	r3, [sp, #8]
 8006910:	f003 0301 	and.w	r3, r3, #1
 8006914:	9308      	str	r3, [sp, #32]
 8006916:	4631      	mov	r1, r6
 8006918:	4658      	mov	r0, fp
 800691a:	f7ff faa0 	bl	8005e5e <quorem>
 800691e:	4649      	mov	r1, r9
 8006920:	4605      	mov	r5, r0
 8006922:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8006926:	4658      	mov	r0, fp
 8006928:	f000 fb22 	bl	8006f70 <__mcmp>
 800692c:	463a      	mov	r2, r7
 800692e:	9002      	str	r0, [sp, #8]
 8006930:	4631      	mov	r1, r6
 8006932:	4620      	mov	r0, r4
 8006934:	f000 fb36 	bl	8006fa4 <__mdiff>
 8006938:	68c3      	ldr	r3, [r0, #12]
 800693a:	4602      	mov	r2, r0
 800693c:	bb03      	cbnz	r3, 8006980 <_dtoa_r+0xa00>
 800693e:	4601      	mov	r1, r0
 8006940:	9009      	str	r0, [sp, #36]	; 0x24
 8006942:	4658      	mov	r0, fp
 8006944:	f000 fb14 	bl	8006f70 <__mcmp>
 8006948:	4603      	mov	r3, r0
 800694a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800694c:	4611      	mov	r1, r2
 800694e:	4620      	mov	r0, r4
 8006950:	9309      	str	r3, [sp, #36]	; 0x24
 8006952:	f000 f92c 	bl	8006bae <_Bfree>
 8006956:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006958:	b9a3      	cbnz	r3, 8006984 <_dtoa_r+0xa04>
 800695a:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800695c:	b992      	cbnz	r2, 8006984 <_dtoa_r+0xa04>
 800695e:	9a08      	ldr	r2, [sp, #32]
 8006960:	b982      	cbnz	r2, 8006984 <_dtoa_r+0xa04>
 8006962:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8006966:	d029      	beq.n	80069bc <_dtoa_r+0xa3c>
 8006968:	9b02      	ldr	r3, [sp, #8]
 800696a:	2b00      	cmp	r3, #0
 800696c:	dd01      	ble.n	8006972 <_dtoa_r+0x9f2>
 800696e:	f105 0831 	add.w	r8, r5, #49	; 0x31
 8006972:	9b07      	ldr	r3, [sp, #28]
 8006974:	1c5d      	adds	r5, r3, #1
 8006976:	f883 8000 	strb.w	r8, [r3]
 800697a:	e784      	b.n	8006886 <_dtoa_r+0x906>
 800697c:	4638      	mov	r0, r7
 800697e:	e7c2      	b.n	8006906 <_dtoa_r+0x986>
 8006980:	2301      	movs	r3, #1
 8006982:	e7e3      	b.n	800694c <_dtoa_r+0x9cc>
 8006984:	9a02      	ldr	r2, [sp, #8]
 8006986:	2a00      	cmp	r2, #0
 8006988:	db04      	blt.n	8006994 <_dtoa_r+0xa14>
 800698a:	d123      	bne.n	80069d4 <_dtoa_r+0xa54>
 800698c:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800698e:	bb0a      	cbnz	r2, 80069d4 <_dtoa_r+0xa54>
 8006990:	9a08      	ldr	r2, [sp, #32]
 8006992:	b9fa      	cbnz	r2, 80069d4 <_dtoa_r+0xa54>
 8006994:	2b00      	cmp	r3, #0
 8006996:	ddec      	ble.n	8006972 <_dtoa_r+0x9f2>
 8006998:	4659      	mov	r1, fp
 800699a:	2201      	movs	r2, #1
 800699c:	4620      	mov	r0, r4
 800699e:	f000 fa93 	bl	8006ec8 <__lshift>
 80069a2:	4631      	mov	r1, r6
 80069a4:	4683      	mov	fp, r0
 80069a6:	f000 fae3 	bl	8006f70 <__mcmp>
 80069aa:	2800      	cmp	r0, #0
 80069ac:	dc03      	bgt.n	80069b6 <_dtoa_r+0xa36>
 80069ae:	d1e0      	bne.n	8006972 <_dtoa_r+0x9f2>
 80069b0:	f018 0f01 	tst.w	r8, #1
 80069b4:	d0dd      	beq.n	8006972 <_dtoa_r+0x9f2>
 80069b6:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 80069ba:	d1d8      	bne.n	800696e <_dtoa_r+0x9ee>
 80069bc:	9b07      	ldr	r3, [sp, #28]
 80069be:	9a07      	ldr	r2, [sp, #28]
 80069c0:	1c5d      	adds	r5, r3, #1
 80069c2:	2339      	movs	r3, #57	; 0x39
 80069c4:	7013      	strb	r3, [r2, #0]
 80069c6:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80069ca:	1e6a      	subs	r2, r5, #1
 80069cc:	2b39      	cmp	r3, #57	; 0x39
 80069ce:	d04d      	beq.n	8006a6c <_dtoa_r+0xaec>
 80069d0:	3301      	adds	r3, #1
 80069d2:	e052      	b.n	8006a7a <_dtoa_r+0xafa>
 80069d4:	9a07      	ldr	r2, [sp, #28]
 80069d6:	2b00      	cmp	r3, #0
 80069d8:	f102 0501 	add.w	r5, r2, #1
 80069dc:	dd06      	ble.n	80069ec <_dtoa_r+0xa6c>
 80069de:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 80069e2:	d0eb      	beq.n	80069bc <_dtoa_r+0xa3c>
 80069e4:	f108 0801 	add.w	r8, r8, #1
 80069e8:	9b07      	ldr	r3, [sp, #28]
 80069ea:	e7c4      	b.n	8006976 <_dtoa_r+0x9f6>
 80069ec:	9b06      	ldr	r3, [sp, #24]
 80069ee:	9a04      	ldr	r2, [sp, #16]
 80069f0:	1aeb      	subs	r3, r5, r3
 80069f2:	4293      	cmp	r3, r2
 80069f4:	f805 8c01 	strb.w	r8, [r5, #-1]
 80069f8:	d021      	beq.n	8006a3e <_dtoa_r+0xabe>
 80069fa:	4659      	mov	r1, fp
 80069fc:	2300      	movs	r3, #0
 80069fe:	220a      	movs	r2, #10
 8006a00:	4620      	mov	r0, r4
 8006a02:	f000 f8eb 	bl	8006bdc <__multadd>
 8006a06:	45b9      	cmp	r9, r7
 8006a08:	4683      	mov	fp, r0
 8006a0a:	f04f 0300 	mov.w	r3, #0
 8006a0e:	f04f 020a 	mov.w	r2, #10
 8006a12:	4649      	mov	r1, r9
 8006a14:	4620      	mov	r0, r4
 8006a16:	d105      	bne.n	8006a24 <_dtoa_r+0xaa4>
 8006a18:	f000 f8e0 	bl	8006bdc <__multadd>
 8006a1c:	4681      	mov	r9, r0
 8006a1e:	4607      	mov	r7, r0
 8006a20:	9507      	str	r5, [sp, #28]
 8006a22:	e778      	b.n	8006916 <_dtoa_r+0x996>
 8006a24:	f000 f8da 	bl	8006bdc <__multadd>
 8006a28:	4639      	mov	r1, r7
 8006a2a:	4681      	mov	r9, r0
 8006a2c:	2300      	movs	r3, #0
 8006a2e:	220a      	movs	r2, #10
 8006a30:	4620      	mov	r0, r4
 8006a32:	f000 f8d3 	bl	8006bdc <__multadd>
 8006a36:	4607      	mov	r7, r0
 8006a38:	e7f2      	b.n	8006a20 <_dtoa_r+0xaa0>
 8006a3a:	f04f 0900 	mov.w	r9, #0
 8006a3e:	4659      	mov	r1, fp
 8006a40:	2201      	movs	r2, #1
 8006a42:	4620      	mov	r0, r4
 8006a44:	f000 fa40 	bl	8006ec8 <__lshift>
 8006a48:	4631      	mov	r1, r6
 8006a4a:	4683      	mov	fp, r0
 8006a4c:	f000 fa90 	bl	8006f70 <__mcmp>
 8006a50:	2800      	cmp	r0, #0
 8006a52:	dcb8      	bgt.n	80069c6 <_dtoa_r+0xa46>
 8006a54:	d102      	bne.n	8006a5c <_dtoa_r+0xadc>
 8006a56:	f018 0f01 	tst.w	r8, #1
 8006a5a:	d1b4      	bne.n	80069c6 <_dtoa_r+0xa46>
 8006a5c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8006a60:	1e6a      	subs	r2, r5, #1
 8006a62:	2b30      	cmp	r3, #48	; 0x30
 8006a64:	f47f af0f 	bne.w	8006886 <_dtoa_r+0x906>
 8006a68:	4615      	mov	r5, r2
 8006a6a:	e7f7      	b.n	8006a5c <_dtoa_r+0xadc>
 8006a6c:	9b06      	ldr	r3, [sp, #24]
 8006a6e:	4293      	cmp	r3, r2
 8006a70:	d105      	bne.n	8006a7e <_dtoa_r+0xafe>
 8006a72:	2331      	movs	r3, #49	; 0x31
 8006a74:	9a06      	ldr	r2, [sp, #24]
 8006a76:	f10a 0a01 	add.w	sl, sl, #1
 8006a7a:	7013      	strb	r3, [r2, #0]
 8006a7c:	e703      	b.n	8006886 <_dtoa_r+0x906>
 8006a7e:	4615      	mov	r5, r2
 8006a80:	e7a1      	b.n	80069c6 <_dtoa_r+0xa46>
 8006a82:	4b17      	ldr	r3, [pc, #92]	; (8006ae0 <_dtoa_r+0xb60>)
 8006a84:	f7ff bae1 	b.w	800604a <_dtoa_r+0xca>
 8006a88:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006a8a:	2b00      	cmp	r3, #0
 8006a8c:	f47f aabb 	bne.w	8006006 <_dtoa_r+0x86>
 8006a90:	4b14      	ldr	r3, [pc, #80]	; (8006ae4 <_dtoa_r+0xb64>)
 8006a92:	f7ff bada 	b.w	800604a <_dtoa_r+0xca>
 8006a96:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8006a98:	2b01      	cmp	r3, #1
 8006a9a:	f77f ae3f 	ble.w	800671c <_dtoa_r+0x79c>
 8006a9e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006aa0:	9308      	str	r3, [sp, #32]
 8006aa2:	e653      	b.n	800674c <_dtoa_r+0x7cc>
 8006aa4:	9b04      	ldr	r3, [sp, #16]
 8006aa6:	2b00      	cmp	r3, #0
 8006aa8:	dc03      	bgt.n	8006ab2 <_dtoa_r+0xb32>
 8006aaa:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8006aac:	2b02      	cmp	r3, #2
 8006aae:	f73f aed5 	bgt.w	800685c <_dtoa_r+0x8dc>
 8006ab2:	9d06      	ldr	r5, [sp, #24]
 8006ab4:	4631      	mov	r1, r6
 8006ab6:	4658      	mov	r0, fp
 8006ab8:	f7ff f9d1 	bl	8005e5e <quorem>
 8006abc:	9b06      	ldr	r3, [sp, #24]
 8006abe:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8006ac2:	f805 8b01 	strb.w	r8, [r5], #1
 8006ac6:	9a04      	ldr	r2, [sp, #16]
 8006ac8:	1aeb      	subs	r3, r5, r3
 8006aca:	429a      	cmp	r2, r3
 8006acc:	ddb5      	ble.n	8006a3a <_dtoa_r+0xaba>
 8006ace:	4659      	mov	r1, fp
 8006ad0:	2300      	movs	r3, #0
 8006ad2:	220a      	movs	r2, #10
 8006ad4:	4620      	mov	r0, r4
 8006ad6:	f000 f881 	bl	8006bdc <__multadd>
 8006ada:	4683      	mov	fp, r0
 8006adc:	e7ea      	b.n	8006ab4 <_dtoa_r+0xb34>
 8006ade:	bf00      	nop
 8006ae0:	0800a5c0 	.word	0x0800a5c0
 8006ae4:	0800a5e4 	.word	0x0800a5e4

08006ae8 <_localeconv_r>:
 8006ae8:	4b04      	ldr	r3, [pc, #16]	; (8006afc <_localeconv_r+0x14>)
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	6a18      	ldr	r0, [r3, #32]
 8006aee:	4b04      	ldr	r3, [pc, #16]	; (8006b00 <_localeconv_r+0x18>)
 8006af0:	2800      	cmp	r0, #0
 8006af2:	bf08      	it	eq
 8006af4:	4618      	moveq	r0, r3
 8006af6:	30f0      	adds	r0, #240	; 0xf0
 8006af8:	4770      	bx	lr
 8006afa:	bf00      	nop
 8006afc:	200000d0 	.word	0x200000d0
 8006b00:	20000134 	.word	0x20000134

08006b04 <malloc>:
 8006b04:	4b02      	ldr	r3, [pc, #8]	; (8006b10 <malloc+0xc>)
 8006b06:	4601      	mov	r1, r0
 8006b08:	6818      	ldr	r0, [r3, #0]
 8006b0a:	f000 bb53 	b.w	80071b4 <_malloc_r>
 8006b0e:	bf00      	nop
 8006b10:	200000d0 	.word	0x200000d0

08006b14 <memchr>:
 8006b14:	b510      	push	{r4, lr}
 8006b16:	b2c9      	uxtb	r1, r1
 8006b18:	4402      	add	r2, r0
 8006b1a:	4290      	cmp	r0, r2
 8006b1c:	4603      	mov	r3, r0
 8006b1e:	d101      	bne.n	8006b24 <memchr+0x10>
 8006b20:	2300      	movs	r3, #0
 8006b22:	e003      	b.n	8006b2c <memchr+0x18>
 8006b24:	781c      	ldrb	r4, [r3, #0]
 8006b26:	3001      	adds	r0, #1
 8006b28:	428c      	cmp	r4, r1
 8006b2a:	d1f6      	bne.n	8006b1a <memchr+0x6>
 8006b2c:	4618      	mov	r0, r3
 8006b2e:	bd10      	pop	{r4, pc}

08006b30 <memcpy>:
 8006b30:	b510      	push	{r4, lr}
 8006b32:	1e43      	subs	r3, r0, #1
 8006b34:	440a      	add	r2, r1
 8006b36:	4291      	cmp	r1, r2
 8006b38:	d100      	bne.n	8006b3c <memcpy+0xc>
 8006b3a:	bd10      	pop	{r4, pc}
 8006b3c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006b40:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006b44:	e7f7      	b.n	8006b36 <memcpy+0x6>

08006b46 <_Balloc>:
 8006b46:	b570      	push	{r4, r5, r6, lr}
 8006b48:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8006b4a:	4604      	mov	r4, r0
 8006b4c:	460e      	mov	r6, r1
 8006b4e:	b93d      	cbnz	r5, 8006b60 <_Balloc+0x1a>
 8006b50:	2010      	movs	r0, #16
 8006b52:	f7ff ffd7 	bl	8006b04 <malloc>
 8006b56:	6260      	str	r0, [r4, #36]	; 0x24
 8006b58:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8006b5c:	6005      	str	r5, [r0, #0]
 8006b5e:	60c5      	str	r5, [r0, #12]
 8006b60:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8006b62:	68eb      	ldr	r3, [r5, #12]
 8006b64:	b183      	cbz	r3, 8006b88 <_Balloc+0x42>
 8006b66:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006b68:	68db      	ldr	r3, [r3, #12]
 8006b6a:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8006b6e:	b9b8      	cbnz	r0, 8006ba0 <_Balloc+0x5a>
 8006b70:	2101      	movs	r1, #1
 8006b72:	fa01 f506 	lsl.w	r5, r1, r6
 8006b76:	1d6a      	adds	r2, r5, #5
 8006b78:	0092      	lsls	r2, r2, #2
 8006b7a:	4620      	mov	r0, r4
 8006b7c:	f000 fabf 	bl	80070fe <_calloc_r>
 8006b80:	b160      	cbz	r0, 8006b9c <_Balloc+0x56>
 8006b82:	e9c0 6501 	strd	r6, r5, [r0, #4]
 8006b86:	e00e      	b.n	8006ba6 <_Balloc+0x60>
 8006b88:	2221      	movs	r2, #33	; 0x21
 8006b8a:	2104      	movs	r1, #4
 8006b8c:	4620      	mov	r0, r4
 8006b8e:	f000 fab6 	bl	80070fe <_calloc_r>
 8006b92:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006b94:	60e8      	str	r0, [r5, #12]
 8006b96:	68db      	ldr	r3, [r3, #12]
 8006b98:	2b00      	cmp	r3, #0
 8006b9a:	d1e4      	bne.n	8006b66 <_Balloc+0x20>
 8006b9c:	2000      	movs	r0, #0
 8006b9e:	bd70      	pop	{r4, r5, r6, pc}
 8006ba0:	6802      	ldr	r2, [r0, #0]
 8006ba2:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8006ba6:	2300      	movs	r3, #0
 8006ba8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8006bac:	e7f7      	b.n	8006b9e <_Balloc+0x58>

08006bae <_Bfree>:
 8006bae:	b570      	push	{r4, r5, r6, lr}
 8006bb0:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8006bb2:	4606      	mov	r6, r0
 8006bb4:	460d      	mov	r5, r1
 8006bb6:	b93c      	cbnz	r4, 8006bc8 <_Bfree+0x1a>
 8006bb8:	2010      	movs	r0, #16
 8006bba:	f7ff ffa3 	bl	8006b04 <malloc>
 8006bbe:	6270      	str	r0, [r6, #36]	; 0x24
 8006bc0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006bc4:	6004      	str	r4, [r0, #0]
 8006bc6:	60c4      	str	r4, [r0, #12]
 8006bc8:	b13d      	cbz	r5, 8006bda <_Bfree+0x2c>
 8006bca:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8006bcc:	686a      	ldr	r2, [r5, #4]
 8006bce:	68db      	ldr	r3, [r3, #12]
 8006bd0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006bd4:	6029      	str	r1, [r5, #0]
 8006bd6:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8006bda:	bd70      	pop	{r4, r5, r6, pc}

08006bdc <__multadd>:
 8006bdc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006be0:	461f      	mov	r7, r3
 8006be2:	4606      	mov	r6, r0
 8006be4:	460c      	mov	r4, r1
 8006be6:	2300      	movs	r3, #0
 8006be8:	690d      	ldr	r5, [r1, #16]
 8006bea:	f101 0c14 	add.w	ip, r1, #20
 8006bee:	f8dc 0000 	ldr.w	r0, [ip]
 8006bf2:	3301      	adds	r3, #1
 8006bf4:	b281      	uxth	r1, r0
 8006bf6:	fb02 7101 	mla	r1, r2, r1, r7
 8006bfa:	0c00      	lsrs	r0, r0, #16
 8006bfc:	0c0f      	lsrs	r7, r1, #16
 8006bfe:	fb02 7000 	mla	r0, r2, r0, r7
 8006c02:	b289      	uxth	r1, r1
 8006c04:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8006c08:	429d      	cmp	r5, r3
 8006c0a:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8006c0e:	f84c 1b04 	str.w	r1, [ip], #4
 8006c12:	dcec      	bgt.n	8006bee <__multadd+0x12>
 8006c14:	b1d7      	cbz	r7, 8006c4c <__multadd+0x70>
 8006c16:	68a3      	ldr	r3, [r4, #8]
 8006c18:	42ab      	cmp	r3, r5
 8006c1a:	dc12      	bgt.n	8006c42 <__multadd+0x66>
 8006c1c:	6861      	ldr	r1, [r4, #4]
 8006c1e:	4630      	mov	r0, r6
 8006c20:	3101      	adds	r1, #1
 8006c22:	f7ff ff90 	bl	8006b46 <_Balloc>
 8006c26:	4680      	mov	r8, r0
 8006c28:	6922      	ldr	r2, [r4, #16]
 8006c2a:	f104 010c 	add.w	r1, r4, #12
 8006c2e:	3202      	adds	r2, #2
 8006c30:	0092      	lsls	r2, r2, #2
 8006c32:	300c      	adds	r0, #12
 8006c34:	f7ff ff7c 	bl	8006b30 <memcpy>
 8006c38:	4621      	mov	r1, r4
 8006c3a:	4630      	mov	r0, r6
 8006c3c:	f7ff ffb7 	bl	8006bae <_Bfree>
 8006c40:	4644      	mov	r4, r8
 8006c42:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8006c46:	3501      	adds	r5, #1
 8006c48:	615f      	str	r7, [r3, #20]
 8006c4a:	6125      	str	r5, [r4, #16]
 8006c4c:	4620      	mov	r0, r4
 8006c4e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08006c52 <__hi0bits>:
 8006c52:	0c02      	lsrs	r2, r0, #16
 8006c54:	0412      	lsls	r2, r2, #16
 8006c56:	4603      	mov	r3, r0
 8006c58:	b9b2      	cbnz	r2, 8006c88 <__hi0bits+0x36>
 8006c5a:	0403      	lsls	r3, r0, #16
 8006c5c:	2010      	movs	r0, #16
 8006c5e:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8006c62:	bf04      	itt	eq
 8006c64:	021b      	lsleq	r3, r3, #8
 8006c66:	3008      	addeq	r0, #8
 8006c68:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8006c6c:	bf04      	itt	eq
 8006c6e:	011b      	lsleq	r3, r3, #4
 8006c70:	3004      	addeq	r0, #4
 8006c72:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8006c76:	bf04      	itt	eq
 8006c78:	009b      	lsleq	r3, r3, #2
 8006c7a:	3002      	addeq	r0, #2
 8006c7c:	2b00      	cmp	r3, #0
 8006c7e:	db06      	blt.n	8006c8e <__hi0bits+0x3c>
 8006c80:	005b      	lsls	r3, r3, #1
 8006c82:	d503      	bpl.n	8006c8c <__hi0bits+0x3a>
 8006c84:	3001      	adds	r0, #1
 8006c86:	4770      	bx	lr
 8006c88:	2000      	movs	r0, #0
 8006c8a:	e7e8      	b.n	8006c5e <__hi0bits+0xc>
 8006c8c:	2020      	movs	r0, #32
 8006c8e:	4770      	bx	lr

08006c90 <__lo0bits>:
 8006c90:	6803      	ldr	r3, [r0, #0]
 8006c92:	4601      	mov	r1, r0
 8006c94:	f013 0207 	ands.w	r2, r3, #7
 8006c98:	d00b      	beq.n	8006cb2 <__lo0bits+0x22>
 8006c9a:	07da      	lsls	r2, r3, #31
 8006c9c:	d423      	bmi.n	8006ce6 <__lo0bits+0x56>
 8006c9e:	0798      	lsls	r0, r3, #30
 8006ca0:	bf49      	itett	mi
 8006ca2:	085b      	lsrmi	r3, r3, #1
 8006ca4:	089b      	lsrpl	r3, r3, #2
 8006ca6:	2001      	movmi	r0, #1
 8006ca8:	600b      	strmi	r3, [r1, #0]
 8006caa:	bf5c      	itt	pl
 8006cac:	600b      	strpl	r3, [r1, #0]
 8006cae:	2002      	movpl	r0, #2
 8006cb0:	4770      	bx	lr
 8006cb2:	b298      	uxth	r0, r3
 8006cb4:	b9a8      	cbnz	r0, 8006ce2 <__lo0bits+0x52>
 8006cb6:	2010      	movs	r0, #16
 8006cb8:	0c1b      	lsrs	r3, r3, #16
 8006cba:	f013 0fff 	tst.w	r3, #255	; 0xff
 8006cbe:	bf04      	itt	eq
 8006cc0:	0a1b      	lsreq	r3, r3, #8
 8006cc2:	3008      	addeq	r0, #8
 8006cc4:	071a      	lsls	r2, r3, #28
 8006cc6:	bf04      	itt	eq
 8006cc8:	091b      	lsreq	r3, r3, #4
 8006cca:	3004      	addeq	r0, #4
 8006ccc:	079a      	lsls	r2, r3, #30
 8006cce:	bf04      	itt	eq
 8006cd0:	089b      	lsreq	r3, r3, #2
 8006cd2:	3002      	addeq	r0, #2
 8006cd4:	07da      	lsls	r2, r3, #31
 8006cd6:	d402      	bmi.n	8006cde <__lo0bits+0x4e>
 8006cd8:	085b      	lsrs	r3, r3, #1
 8006cda:	d006      	beq.n	8006cea <__lo0bits+0x5a>
 8006cdc:	3001      	adds	r0, #1
 8006cde:	600b      	str	r3, [r1, #0]
 8006ce0:	4770      	bx	lr
 8006ce2:	4610      	mov	r0, r2
 8006ce4:	e7e9      	b.n	8006cba <__lo0bits+0x2a>
 8006ce6:	2000      	movs	r0, #0
 8006ce8:	4770      	bx	lr
 8006cea:	2020      	movs	r0, #32
 8006cec:	4770      	bx	lr

08006cee <__i2b>:
 8006cee:	b510      	push	{r4, lr}
 8006cf0:	460c      	mov	r4, r1
 8006cf2:	2101      	movs	r1, #1
 8006cf4:	f7ff ff27 	bl	8006b46 <_Balloc>
 8006cf8:	2201      	movs	r2, #1
 8006cfa:	6144      	str	r4, [r0, #20]
 8006cfc:	6102      	str	r2, [r0, #16]
 8006cfe:	bd10      	pop	{r4, pc}

08006d00 <__multiply>:
 8006d00:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006d04:	4614      	mov	r4, r2
 8006d06:	690a      	ldr	r2, [r1, #16]
 8006d08:	6923      	ldr	r3, [r4, #16]
 8006d0a:	4688      	mov	r8, r1
 8006d0c:	429a      	cmp	r2, r3
 8006d0e:	bfbe      	ittt	lt
 8006d10:	460b      	movlt	r3, r1
 8006d12:	46a0      	movlt	r8, r4
 8006d14:	461c      	movlt	r4, r3
 8006d16:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8006d1a:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8006d1e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8006d22:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8006d26:	eb07 0609 	add.w	r6, r7, r9
 8006d2a:	42b3      	cmp	r3, r6
 8006d2c:	bfb8      	it	lt
 8006d2e:	3101      	addlt	r1, #1
 8006d30:	f7ff ff09 	bl	8006b46 <_Balloc>
 8006d34:	f100 0514 	add.w	r5, r0, #20
 8006d38:	462b      	mov	r3, r5
 8006d3a:	2200      	movs	r2, #0
 8006d3c:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 8006d40:	4573      	cmp	r3, lr
 8006d42:	d316      	bcc.n	8006d72 <__multiply+0x72>
 8006d44:	f104 0214 	add.w	r2, r4, #20
 8006d48:	f108 0114 	add.w	r1, r8, #20
 8006d4c:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 8006d50:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8006d54:	9300      	str	r3, [sp, #0]
 8006d56:	9b00      	ldr	r3, [sp, #0]
 8006d58:	9201      	str	r2, [sp, #4]
 8006d5a:	4293      	cmp	r3, r2
 8006d5c:	d80c      	bhi.n	8006d78 <__multiply+0x78>
 8006d5e:	2e00      	cmp	r6, #0
 8006d60:	dd03      	ble.n	8006d6a <__multiply+0x6a>
 8006d62:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8006d66:	2b00      	cmp	r3, #0
 8006d68:	d05d      	beq.n	8006e26 <__multiply+0x126>
 8006d6a:	6106      	str	r6, [r0, #16]
 8006d6c:	b003      	add	sp, #12
 8006d6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006d72:	f843 2b04 	str.w	r2, [r3], #4
 8006d76:	e7e3      	b.n	8006d40 <__multiply+0x40>
 8006d78:	f8b2 b000 	ldrh.w	fp, [r2]
 8006d7c:	f1bb 0f00 	cmp.w	fp, #0
 8006d80:	d023      	beq.n	8006dca <__multiply+0xca>
 8006d82:	4689      	mov	r9, r1
 8006d84:	46ac      	mov	ip, r5
 8006d86:	f04f 0800 	mov.w	r8, #0
 8006d8a:	f859 4b04 	ldr.w	r4, [r9], #4
 8006d8e:	f8dc a000 	ldr.w	sl, [ip]
 8006d92:	b2a3      	uxth	r3, r4
 8006d94:	fa1f fa8a 	uxth.w	sl, sl
 8006d98:	fb0b a303 	mla	r3, fp, r3, sl
 8006d9c:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8006da0:	f8dc 4000 	ldr.w	r4, [ip]
 8006da4:	4443      	add	r3, r8
 8006da6:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8006daa:	fb0b 840a 	mla	r4, fp, sl, r8
 8006dae:	46e2      	mov	sl, ip
 8006db0:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8006db4:	b29b      	uxth	r3, r3
 8006db6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8006dba:	454f      	cmp	r7, r9
 8006dbc:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8006dc0:	f84a 3b04 	str.w	r3, [sl], #4
 8006dc4:	d82b      	bhi.n	8006e1e <__multiply+0x11e>
 8006dc6:	f8cc 8004 	str.w	r8, [ip, #4]
 8006dca:	9b01      	ldr	r3, [sp, #4]
 8006dcc:	3204      	adds	r2, #4
 8006dce:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 8006dd2:	f1ba 0f00 	cmp.w	sl, #0
 8006dd6:	d020      	beq.n	8006e1a <__multiply+0x11a>
 8006dd8:	4689      	mov	r9, r1
 8006dda:	46a8      	mov	r8, r5
 8006ddc:	f04f 0b00 	mov.w	fp, #0
 8006de0:	682b      	ldr	r3, [r5, #0]
 8006de2:	f8b9 c000 	ldrh.w	ip, [r9]
 8006de6:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 8006dea:	b29b      	uxth	r3, r3
 8006dec:	fb0a 440c 	mla	r4, sl, ip, r4
 8006df0:	46c4      	mov	ip, r8
 8006df2:	445c      	add	r4, fp
 8006df4:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8006df8:	f84c 3b04 	str.w	r3, [ip], #4
 8006dfc:	f859 3b04 	ldr.w	r3, [r9], #4
 8006e00:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 8006e04:	0c1b      	lsrs	r3, r3, #16
 8006e06:	fb0a b303 	mla	r3, sl, r3, fp
 8006e0a:	454f      	cmp	r7, r9
 8006e0c:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8006e10:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 8006e14:	d805      	bhi.n	8006e22 <__multiply+0x122>
 8006e16:	f8c8 3004 	str.w	r3, [r8, #4]
 8006e1a:	3504      	adds	r5, #4
 8006e1c:	e79b      	b.n	8006d56 <__multiply+0x56>
 8006e1e:	46d4      	mov	ip, sl
 8006e20:	e7b3      	b.n	8006d8a <__multiply+0x8a>
 8006e22:	46e0      	mov	r8, ip
 8006e24:	e7dd      	b.n	8006de2 <__multiply+0xe2>
 8006e26:	3e01      	subs	r6, #1
 8006e28:	e799      	b.n	8006d5e <__multiply+0x5e>
	...

08006e2c <__pow5mult>:
 8006e2c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006e30:	4615      	mov	r5, r2
 8006e32:	f012 0203 	ands.w	r2, r2, #3
 8006e36:	4606      	mov	r6, r0
 8006e38:	460f      	mov	r7, r1
 8006e3a:	d007      	beq.n	8006e4c <__pow5mult+0x20>
 8006e3c:	4c21      	ldr	r4, [pc, #132]	; (8006ec4 <__pow5mult+0x98>)
 8006e3e:	3a01      	subs	r2, #1
 8006e40:	2300      	movs	r3, #0
 8006e42:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8006e46:	f7ff fec9 	bl	8006bdc <__multadd>
 8006e4a:	4607      	mov	r7, r0
 8006e4c:	10ad      	asrs	r5, r5, #2
 8006e4e:	d035      	beq.n	8006ebc <__pow5mult+0x90>
 8006e50:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8006e52:	b93c      	cbnz	r4, 8006e64 <__pow5mult+0x38>
 8006e54:	2010      	movs	r0, #16
 8006e56:	f7ff fe55 	bl	8006b04 <malloc>
 8006e5a:	6270      	str	r0, [r6, #36]	; 0x24
 8006e5c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006e60:	6004      	str	r4, [r0, #0]
 8006e62:	60c4      	str	r4, [r0, #12]
 8006e64:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8006e68:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8006e6c:	b94c      	cbnz	r4, 8006e82 <__pow5mult+0x56>
 8006e6e:	f240 2171 	movw	r1, #625	; 0x271
 8006e72:	4630      	mov	r0, r6
 8006e74:	f7ff ff3b 	bl	8006cee <__i2b>
 8006e78:	2300      	movs	r3, #0
 8006e7a:	4604      	mov	r4, r0
 8006e7c:	f8c8 0008 	str.w	r0, [r8, #8]
 8006e80:	6003      	str	r3, [r0, #0]
 8006e82:	f04f 0800 	mov.w	r8, #0
 8006e86:	07eb      	lsls	r3, r5, #31
 8006e88:	d50a      	bpl.n	8006ea0 <__pow5mult+0x74>
 8006e8a:	4639      	mov	r1, r7
 8006e8c:	4622      	mov	r2, r4
 8006e8e:	4630      	mov	r0, r6
 8006e90:	f7ff ff36 	bl	8006d00 <__multiply>
 8006e94:	4681      	mov	r9, r0
 8006e96:	4639      	mov	r1, r7
 8006e98:	4630      	mov	r0, r6
 8006e9a:	f7ff fe88 	bl	8006bae <_Bfree>
 8006e9e:	464f      	mov	r7, r9
 8006ea0:	106d      	asrs	r5, r5, #1
 8006ea2:	d00b      	beq.n	8006ebc <__pow5mult+0x90>
 8006ea4:	6820      	ldr	r0, [r4, #0]
 8006ea6:	b938      	cbnz	r0, 8006eb8 <__pow5mult+0x8c>
 8006ea8:	4622      	mov	r2, r4
 8006eaa:	4621      	mov	r1, r4
 8006eac:	4630      	mov	r0, r6
 8006eae:	f7ff ff27 	bl	8006d00 <__multiply>
 8006eb2:	6020      	str	r0, [r4, #0]
 8006eb4:	f8c0 8000 	str.w	r8, [r0]
 8006eb8:	4604      	mov	r4, r0
 8006eba:	e7e4      	b.n	8006e86 <__pow5mult+0x5a>
 8006ebc:	4638      	mov	r0, r7
 8006ebe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006ec2:	bf00      	nop
 8006ec4:	0800a6e8 	.word	0x0800a6e8

08006ec8 <__lshift>:
 8006ec8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006ecc:	460c      	mov	r4, r1
 8006ece:	4607      	mov	r7, r0
 8006ed0:	4616      	mov	r6, r2
 8006ed2:	6923      	ldr	r3, [r4, #16]
 8006ed4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8006ed8:	eb0a 0903 	add.w	r9, sl, r3
 8006edc:	6849      	ldr	r1, [r1, #4]
 8006ede:	68a3      	ldr	r3, [r4, #8]
 8006ee0:	f109 0501 	add.w	r5, r9, #1
 8006ee4:	42ab      	cmp	r3, r5
 8006ee6:	db32      	blt.n	8006f4e <__lshift+0x86>
 8006ee8:	4638      	mov	r0, r7
 8006eea:	f7ff fe2c 	bl	8006b46 <_Balloc>
 8006eee:	2300      	movs	r3, #0
 8006ef0:	4680      	mov	r8, r0
 8006ef2:	461a      	mov	r2, r3
 8006ef4:	f100 0114 	add.w	r1, r0, #20
 8006ef8:	4553      	cmp	r3, sl
 8006efa:	db2b      	blt.n	8006f54 <__lshift+0x8c>
 8006efc:	6920      	ldr	r0, [r4, #16]
 8006efe:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8006f02:	f104 0314 	add.w	r3, r4, #20
 8006f06:	f016 021f 	ands.w	r2, r6, #31
 8006f0a:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8006f0e:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8006f12:	d025      	beq.n	8006f60 <__lshift+0x98>
 8006f14:	2000      	movs	r0, #0
 8006f16:	f1c2 0e20 	rsb	lr, r2, #32
 8006f1a:	468a      	mov	sl, r1
 8006f1c:	681e      	ldr	r6, [r3, #0]
 8006f1e:	4096      	lsls	r6, r2
 8006f20:	4330      	orrs	r0, r6
 8006f22:	f84a 0b04 	str.w	r0, [sl], #4
 8006f26:	f853 0b04 	ldr.w	r0, [r3], #4
 8006f2a:	459c      	cmp	ip, r3
 8006f2c:	fa20 f00e 	lsr.w	r0, r0, lr
 8006f30:	d814      	bhi.n	8006f5c <__lshift+0x94>
 8006f32:	6048      	str	r0, [r1, #4]
 8006f34:	b108      	cbz	r0, 8006f3a <__lshift+0x72>
 8006f36:	f109 0502 	add.w	r5, r9, #2
 8006f3a:	3d01      	subs	r5, #1
 8006f3c:	4638      	mov	r0, r7
 8006f3e:	f8c8 5010 	str.w	r5, [r8, #16]
 8006f42:	4621      	mov	r1, r4
 8006f44:	f7ff fe33 	bl	8006bae <_Bfree>
 8006f48:	4640      	mov	r0, r8
 8006f4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006f4e:	3101      	adds	r1, #1
 8006f50:	005b      	lsls	r3, r3, #1
 8006f52:	e7c7      	b.n	8006ee4 <__lshift+0x1c>
 8006f54:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8006f58:	3301      	adds	r3, #1
 8006f5a:	e7cd      	b.n	8006ef8 <__lshift+0x30>
 8006f5c:	4651      	mov	r1, sl
 8006f5e:	e7dc      	b.n	8006f1a <__lshift+0x52>
 8006f60:	3904      	subs	r1, #4
 8006f62:	f853 2b04 	ldr.w	r2, [r3], #4
 8006f66:	459c      	cmp	ip, r3
 8006f68:	f841 2f04 	str.w	r2, [r1, #4]!
 8006f6c:	d8f9      	bhi.n	8006f62 <__lshift+0x9a>
 8006f6e:	e7e4      	b.n	8006f3a <__lshift+0x72>

08006f70 <__mcmp>:
 8006f70:	6903      	ldr	r3, [r0, #16]
 8006f72:	690a      	ldr	r2, [r1, #16]
 8006f74:	b530      	push	{r4, r5, lr}
 8006f76:	1a9b      	subs	r3, r3, r2
 8006f78:	d10c      	bne.n	8006f94 <__mcmp+0x24>
 8006f7a:	0092      	lsls	r2, r2, #2
 8006f7c:	3014      	adds	r0, #20
 8006f7e:	3114      	adds	r1, #20
 8006f80:	1884      	adds	r4, r0, r2
 8006f82:	4411      	add	r1, r2
 8006f84:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8006f88:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8006f8c:	4295      	cmp	r5, r2
 8006f8e:	d003      	beq.n	8006f98 <__mcmp+0x28>
 8006f90:	d305      	bcc.n	8006f9e <__mcmp+0x2e>
 8006f92:	2301      	movs	r3, #1
 8006f94:	4618      	mov	r0, r3
 8006f96:	bd30      	pop	{r4, r5, pc}
 8006f98:	42a0      	cmp	r0, r4
 8006f9a:	d3f3      	bcc.n	8006f84 <__mcmp+0x14>
 8006f9c:	e7fa      	b.n	8006f94 <__mcmp+0x24>
 8006f9e:	f04f 33ff 	mov.w	r3, #4294967295
 8006fa2:	e7f7      	b.n	8006f94 <__mcmp+0x24>

08006fa4 <__mdiff>:
 8006fa4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006fa8:	460d      	mov	r5, r1
 8006faa:	4607      	mov	r7, r0
 8006fac:	4611      	mov	r1, r2
 8006fae:	4628      	mov	r0, r5
 8006fb0:	4614      	mov	r4, r2
 8006fb2:	f7ff ffdd 	bl	8006f70 <__mcmp>
 8006fb6:	1e06      	subs	r6, r0, #0
 8006fb8:	d108      	bne.n	8006fcc <__mdiff+0x28>
 8006fba:	4631      	mov	r1, r6
 8006fbc:	4638      	mov	r0, r7
 8006fbe:	f7ff fdc2 	bl	8006b46 <_Balloc>
 8006fc2:	2301      	movs	r3, #1
 8006fc4:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8006fc8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006fcc:	bfa4      	itt	ge
 8006fce:	4623      	movge	r3, r4
 8006fd0:	462c      	movge	r4, r5
 8006fd2:	4638      	mov	r0, r7
 8006fd4:	6861      	ldr	r1, [r4, #4]
 8006fd6:	bfa6      	itte	ge
 8006fd8:	461d      	movge	r5, r3
 8006fda:	2600      	movge	r6, #0
 8006fdc:	2601      	movlt	r6, #1
 8006fde:	f7ff fdb2 	bl	8006b46 <_Balloc>
 8006fe2:	f04f 0e00 	mov.w	lr, #0
 8006fe6:	60c6      	str	r6, [r0, #12]
 8006fe8:	692b      	ldr	r3, [r5, #16]
 8006fea:	6926      	ldr	r6, [r4, #16]
 8006fec:	f104 0214 	add.w	r2, r4, #20
 8006ff0:	f105 0914 	add.w	r9, r5, #20
 8006ff4:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8006ff8:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8006ffc:	f100 0114 	add.w	r1, r0, #20
 8007000:	f852 ab04 	ldr.w	sl, [r2], #4
 8007004:	f859 5b04 	ldr.w	r5, [r9], #4
 8007008:	fa1f f38a 	uxth.w	r3, sl
 800700c:	4473      	add	r3, lr
 800700e:	b2ac      	uxth	r4, r5
 8007010:	1b1b      	subs	r3, r3, r4
 8007012:	0c2c      	lsrs	r4, r5, #16
 8007014:	ebc4 441a 	rsb	r4, r4, sl, lsr #16
 8007018:	eb04 4423 	add.w	r4, r4, r3, asr #16
 800701c:	b29b      	uxth	r3, r3
 800701e:	ea4f 4e24 	mov.w	lr, r4, asr #16
 8007022:	45c8      	cmp	r8, r9
 8007024:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8007028:	4694      	mov	ip, r2
 800702a:	f841 4b04 	str.w	r4, [r1], #4
 800702e:	d8e7      	bhi.n	8007000 <__mdiff+0x5c>
 8007030:	45bc      	cmp	ip, r7
 8007032:	d304      	bcc.n	800703e <__mdiff+0x9a>
 8007034:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 8007038:	b183      	cbz	r3, 800705c <__mdiff+0xb8>
 800703a:	6106      	str	r6, [r0, #16]
 800703c:	e7c4      	b.n	8006fc8 <__mdiff+0x24>
 800703e:	f85c 4b04 	ldr.w	r4, [ip], #4
 8007042:	b2a2      	uxth	r2, r4
 8007044:	4472      	add	r2, lr
 8007046:	1413      	asrs	r3, r2, #16
 8007048:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 800704c:	b292      	uxth	r2, r2
 800704e:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8007052:	ea4f 4e23 	mov.w	lr, r3, asr #16
 8007056:	f841 2b04 	str.w	r2, [r1], #4
 800705a:	e7e9      	b.n	8007030 <__mdiff+0x8c>
 800705c:	3e01      	subs	r6, #1
 800705e:	e7e9      	b.n	8007034 <__mdiff+0x90>

08007060 <__d2b>:
 8007060:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8007064:	461c      	mov	r4, r3
 8007066:	e9dd 6508 	ldrd	r6, r5, [sp, #32]
 800706a:	2101      	movs	r1, #1
 800706c:	4690      	mov	r8, r2
 800706e:	f7ff fd6a 	bl	8006b46 <_Balloc>
 8007072:	f3c4 0213 	ubfx	r2, r4, #0, #20
 8007076:	f3c4 540a 	ubfx	r4, r4, #20, #11
 800707a:	4607      	mov	r7, r0
 800707c:	bb34      	cbnz	r4, 80070cc <__d2b+0x6c>
 800707e:	9201      	str	r2, [sp, #4]
 8007080:	f1b8 0200 	subs.w	r2, r8, #0
 8007084:	d027      	beq.n	80070d6 <__d2b+0x76>
 8007086:	a802      	add	r0, sp, #8
 8007088:	f840 2d08 	str.w	r2, [r0, #-8]!
 800708c:	f7ff fe00 	bl	8006c90 <__lo0bits>
 8007090:	9900      	ldr	r1, [sp, #0]
 8007092:	b1f0      	cbz	r0, 80070d2 <__d2b+0x72>
 8007094:	9a01      	ldr	r2, [sp, #4]
 8007096:	f1c0 0320 	rsb	r3, r0, #32
 800709a:	fa02 f303 	lsl.w	r3, r2, r3
 800709e:	430b      	orrs	r3, r1
 80070a0:	40c2      	lsrs	r2, r0
 80070a2:	617b      	str	r3, [r7, #20]
 80070a4:	9201      	str	r2, [sp, #4]
 80070a6:	9b01      	ldr	r3, [sp, #4]
 80070a8:	2b00      	cmp	r3, #0
 80070aa:	bf14      	ite	ne
 80070ac:	2102      	movne	r1, #2
 80070ae:	2101      	moveq	r1, #1
 80070b0:	61bb      	str	r3, [r7, #24]
 80070b2:	6139      	str	r1, [r7, #16]
 80070b4:	b1c4      	cbz	r4, 80070e8 <__d2b+0x88>
 80070b6:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 80070ba:	4404      	add	r4, r0
 80070bc:	6034      	str	r4, [r6, #0]
 80070be:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80070c2:	6028      	str	r0, [r5, #0]
 80070c4:	4638      	mov	r0, r7
 80070c6:	b002      	add	sp, #8
 80070c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80070cc:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80070d0:	e7d5      	b.n	800707e <__d2b+0x1e>
 80070d2:	6179      	str	r1, [r7, #20]
 80070d4:	e7e7      	b.n	80070a6 <__d2b+0x46>
 80070d6:	a801      	add	r0, sp, #4
 80070d8:	f7ff fdda 	bl	8006c90 <__lo0bits>
 80070dc:	2101      	movs	r1, #1
 80070de:	9b01      	ldr	r3, [sp, #4]
 80070e0:	6139      	str	r1, [r7, #16]
 80070e2:	617b      	str	r3, [r7, #20]
 80070e4:	3020      	adds	r0, #32
 80070e6:	e7e5      	b.n	80070b4 <__d2b+0x54>
 80070e8:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80070ec:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 80070f0:	6030      	str	r0, [r6, #0]
 80070f2:	6918      	ldr	r0, [r3, #16]
 80070f4:	f7ff fdad 	bl	8006c52 <__hi0bits>
 80070f8:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 80070fc:	e7e1      	b.n	80070c2 <__d2b+0x62>

080070fe <_calloc_r>:
 80070fe:	b538      	push	{r3, r4, r5, lr}
 8007100:	fb02 f401 	mul.w	r4, r2, r1
 8007104:	4621      	mov	r1, r4
 8007106:	f000 f855 	bl	80071b4 <_malloc_r>
 800710a:	4605      	mov	r5, r0
 800710c:	b118      	cbz	r0, 8007116 <_calloc_r+0x18>
 800710e:	4622      	mov	r2, r4
 8007110:	2100      	movs	r1, #0
 8007112:	f7fe fa1d 	bl	8005550 <memset>
 8007116:	4628      	mov	r0, r5
 8007118:	bd38      	pop	{r3, r4, r5, pc}
	...

0800711c <_free_r>:
 800711c:	b538      	push	{r3, r4, r5, lr}
 800711e:	4605      	mov	r5, r0
 8007120:	2900      	cmp	r1, #0
 8007122:	d043      	beq.n	80071ac <_free_r+0x90>
 8007124:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007128:	1f0c      	subs	r4, r1, #4
 800712a:	2b00      	cmp	r3, #0
 800712c:	bfb8      	it	lt
 800712e:	18e4      	addlt	r4, r4, r3
 8007130:	f000 fa27 	bl	8007582 <__malloc_lock>
 8007134:	4a1e      	ldr	r2, [pc, #120]	; (80071b0 <_free_r+0x94>)
 8007136:	6813      	ldr	r3, [r2, #0]
 8007138:	4610      	mov	r0, r2
 800713a:	b933      	cbnz	r3, 800714a <_free_r+0x2e>
 800713c:	6063      	str	r3, [r4, #4]
 800713e:	6014      	str	r4, [r2, #0]
 8007140:	4628      	mov	r0, r5
 8007142:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007146:	f000 ba1d 	b.w	8007584 <__malloc_unlock>
 800714a:	42a3      	cmp	r3, r4
 800714c:	d90b      	bls.n	8007166 <_free_r+0x4a>
 800714e:	6821      	ldr	r1, [r4, #0]
 8007150:	1862      	adds	r2, r4, r1
 8007152:	4293      	cmp	r3, r2
 8007154:	bf01      	itttt	eq
 8007156:	681a      	ldreq	r2, [r3, #0]
 8007158:	685b      	ldreq	r3, [r3, #4]
 800715a:	1852      	addeq	r2, r2, r1
 800715c:	6022      	streq	r2, [r4, #0]
 800715e:	6063      	str	r3, [r4, #4]
 8007160:	6004      	str	r4, [r0, #0]
 8007162:	e7ed      	b.n	8007140 <_free_r+0x24>
 8007164:	4613      	mov	r3, r2
 8007166:	685a      	ldr	r2, [r3, #4]
 8007168:	b10a      	cbz	r2, 800716e <_free_r+0x52>
 800716a:	42a2      	cmp	r2, r4
 800716c:	d9fa      	bls.n	8007164 <_free_r+0x48>
 800716e:	6819      	ldr	r1, [r3, #0]
 8007170:	1858      	adds	r0, r3, r1
 8007172:	42a0      	cmp	r0, r4
 8007174:	d10b      	bne.n	800718e <_free_r+0x72>
 8007176:	6820      	ldr	r0, [r4, #0]
 8007178:	4401      	add	r1, r0
 800717a:	1858      	adds	r0, r3, r1
 800717c:	4282      	cmp	r2, r0
 800717e:	6019      	str	r1, [r3, #0]
 8007180:	d1de      	bne.n	8007140 <_free_r+0x24>
 8007182:	6810      	ldr	r0, [r2, #0]
 8007184:	6852      	ldr	r2, [r2, #4]
 8007186:	4401      	add	r1, r0
 8007188:	6019      	str	r1, [r3, #0]
 800718a:	605a      	str	r2, [r3, #4]
 800718c:	e7d8      	b.n	8007140 <_free_r+0x24>
 800718e:	d902      	bls.n	8007196 <_free_r+0x7a>
 8007190:	230c      	movs	r3, #12
 8007192:	602b      	str	r3, [r5, #0]
 8007194:	e7d4      	b.n	8007140 <_free_r+0x24>
 8007196:	6820      	ldr	r0, [r4, #0]
 8007198:	1821      	adds	r1, r4, r0
 800719a:	428a      	cmp	r2, r1
 800719c:	bf01      	itttt	eq
 800719e:	6811      	ldreq	r1, [r2, #0]
 80071a0:	6852      	ldreq	r2, [r2, #4]
 80071a2:	1809      	addeq	r1, r1, r0
 80071a4:	6021      	streq	r1, [r4, #0]
 80071a6:	6062      	str	r2, [r4, #4]
 80071a8:	605c      	str	r4, [r3, #4]
 80071aa:	e7c9      	b.n	8007140 <_free_r+0x24>
 80071ac:	bd38      	pop	{r3, r4, r5, pc}
 80071ae:	bf00      	nop
 80071b0:	2000072c 	.word	0x2000072c

080071b4 <_malloc_r>:
 80071b4:	b570      	push	{r4, r5, r6, lr}
 80071b6:	1ccd      	adds	r5, r1, #3
 80071b8:	f025 0503 	bic.w	r5, r5, #3
 80071bc:	3508      	adds	r5, #8
 80071be:	2d0c      	cmp	r5, #12
 80071c0:	bf38      	it	cc
 80071c2:	250c      	movcc	r5, #12
 80071c4:	2d00      	cmp	r5, #0
 80071c6:	4606      	mov	r6, r0
 80071c8:	db01      	blt.n	80071ce <_malloc_r+0x1a>
 80071ca:	42a9      	cmp	r1, r5
 80071cc:	d903      	bls.n	80071d6 <_malloc_r+0x22>
 80071ce:	230c      	movs	r3, #12
 80071d0:	6033      	str	r3, [r6, #0]
 80071d2:	2000      	movs	r0, #0
 80071d4:	bd70      	pop	{r4, r5, r6, pc}
 80071d6:	f000 f9d4 	bl	8007582 <__malloc_lock>
 80071da:	4a21      	ldr	r2, [pc, #132]	; (8007260 <_malloc_r+0xac>)
 80071dc:	6814      	ldr	r4, [r2, #0]
 80071de:	4621      	mov	r1, r4
 80071e0:	b991      	cbnz	r1, 8007208 <_malloc_r+0x54>
 80071e2:	4c20      	ldr	r4, [pc, #128]	; (8007264 <_malloc_r+0xb0>)
 80071e4:	6823      	ldr	r3, [r4, #0]
 80071e6:	b91b      	cbnz	r3, 80071f0 <_malloc_r+0x3c>
 80071e8:	4630      	mov	r0, r6
 80071ea:	f000 f98f 	bl	800750c <_sbrk_r>
 80071ee:	6020      	str	r0, [r4, #0]
 80071f0:	4629      	mov	r1, r5
 80071f2:	4630      	mov	r0, r6
 80071f4:	f000 f98a 	bl	800750c <_sbrk_r>
 80071f8:	1c43      	adds	r3, r0, #1
 80071fa:	d124      	bne.n	8007246 <_malloc_r+0x92>
 80071fc:	230c      	movs	r3, #12
 80071fe:	4630      	mov	r0, r6
 8007200:	6033      	str	r3, [r6, #0]
 8007202:	f000 f9bf 	bl	8007584 <__malloc_unlock>
 8007206:	e7e4      	b.n	80071d2 <_malloc_r+0x1e>
 8007208:	680b      	ldr	r3, [r1, #0]
 800720a:	1b5b      	subs	r3, r3, r5
 800720c:	d418      	bmi.n	8007240 <_malloc_r+0x8c>
 800720e:	2b0b      	cmp	r3, #11
 8007210:	d90f      	bls.n	8007232 <_malloc_r+0x7e>
 8007212:	600b      	str	r3, [r1, #0]
 8007214:	18cc      	adds	r4, r1, r3
 8007216:	50cd      	str	r5, [r1, r3]
 8007218:	4630      	mov	r0, r6
 800721a:	f000 f9b3 	bl	8007584 <__malloc_unlock>
 800721e:	f104 000b 	add.w	r0, r4, #11
 8007222:	1d23      	adds	r3, r4, #4
 8007224:	f020 0007 	bic.w	r0, r0, #7
 8007228:	1ac3      	subs	r3, r0, r3
 800722a:	d0d3      	beq.n	80071d4 <_malloc_r+0x20>
 800722c:	425a      	negs	r2, r3
 800722e:	50e2      	str	r2, [r4, r3]
 8007230:	e7d0      	b.n	80071d4 <_malloc_r+0x20>
 8007232:	684b      	ldr	r3, [r1, #4]
 8007234:	428c      	cmp	r4, r1
 8007236:	bf16      	itet	ne
 8007238:	6063      	strne	r3, [r4, #4]
 800723a:	6013      	streq	r3, [r2, #0]
 800723c:	460c      	movne	r4, r1
 800723e:	e7eb      	b.n	8007218 <_malloc_r+0x64>
 8007240:	460c      	mov	r4, r1
 8007242:	6849      	ldr	r1, [r1, #4]
 8007244:	e7cc      	b.n	80071e0 <_malloc_r+0x2c>
 8007246:	1cc4      	adds	r4, r0, #3
 8007248:	f024 0403 	bic.w	r4, r4, #3
 800724c:	42a0      	cmp	r0, r4
 800724e:	d005      	beq.n	800725c <_malloc_r+0xa8>
 8007250:	1a21      	subs	r1, r4, r0
 8007252:	4630      	mov	r0, r6
 8007254:	f000 f95a 	bl	800750c <_sbrk_r>
 8007258:	3001      	adds	r0, #1
 800725a:	d0cf      	beq.n	80071fc <_malloc_r+0x48>
 800725c:	6025      	str	r5, [r4, #0]
 800725e:	e7db      	b.n	8007218 <_malloc_r+0x64>
 8007260:	2000072c 	.word	0x2000072c
 8007264:	20000730 	.word	0x20000730

08007268 <__ssputs_r>:
 8007268:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800726c:	688e      	ldr	r6, [r1, #8]
 800726e:	4682      	mov	sl, r0
 8007270:	429e      	cmp	r6, r3
 8007272:	460c      	mov	r4, r1
 8007274:	4690      	mov	r8, r2
 8007276:	4699      	mov	r9, r3
 8007278:	d837      	bhi.n	80072ea <__ssputs_r+0x82>
 800727a:	898a      	ldrh	r2, [r1, #12]
 800727c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007280:	d031      	beq.n	80072e6 <__ssputs_r+0x7e>
 8007282:	2302      	movs	r3, #2
 8007284:	6825      	ldr	r5, [r4, #0]
 8007286:	6909      	ldr	r1, [r1, #16]
 8007288:	1a6f      	subs	r7, r5, r1
 800728a:	6965      	ldr	r5, [r4, #20]
 800728c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007290:	fb95 f5f3 	sdiv	r5, r5, r3
 8007294:	f109 0301 	add.w	r3, r9, #1
 8007298:	443b      	add	r3, r7
 800729a:	429d      	cmp	r5, r3
 800729c:	bf38      	it	cc
 800729e:	461d      	movcc	r5, r3
 80072a0:	0553      	lsls	r3, r2, #21
 80072a2:	d530      	bpl.n	8007306 <__ssputs_r+0x9e>
 80072a4:	4629      	mov	r1, r5
 80072a6:	f7ff ff85 	bl	80071b4 <_malloc_r>
 80072aa:	4606      	mov	r6, r0
 80072ac:	b950      	cbnz	r0, 80072c4 <__ssputs_r+0x5c>
 80072ae:	230c      	movs	r3, #12
 80072b0:	f04f 30ff 	mov.w	r0, #4294967295
 80072b4:	f8ca 3000 	str.w	r3, [sl]
 80072b8:	89a3      	ldrh	r3, [r4, #12]
 80072ba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80072be:	81a3      	strh	r3, [r4, #12]
 80072c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80072c4:	463a      	mov	r2, r7
 80072c6:	6921      	ldr	r1, [r4, #16]
 80072c8:	f7ff fc32 	bl	8006b30 <memcpy>
 80072cc:	89a3      	ldrh	r3, [r4, #12]
 80072ce:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80072d2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80072d6:	81a3      	strh	r3, [r4, #12]
 80072d8:	6126      	str	r6, [r4, #16]
 80072da:	443e      	add	r6, r7
 80072dc:	6026      	str	r6, [r4, #0]
 80072de:	464e      	mov	r6, r9
 80072e0:	6165      	str	r5, [r4, #20]
 80072e2:	1bed      	subs	r5, r5, r7
 80072e4:	60a5      	str	r5, [r4, #8]
 80072e6:	454e      	cmp	r6, r9
 80072e8:	d900      	bls.n	80072ec <__ssputs_r+0x84>
 80072ea:	464e      	mov	r6, r9
 80072ec:	4632      	mov	r2, r6
 80072ee:	4641      	mov	r1, r8
 80072f0:	6820      	ldr	r0, [r4, #0]
 80072f2:	f000 f92d 	bl	8007550 <memmove>
 80072f6:	68a3      	ldr	r3, [r4, #8]
 80072f8:	2000      	movs	r0, #0
 80072fa:	1b9b      	subs	r3, r3, r6
 80072fc:	60a3      	str	r3, [r4, #8]
 80072fe:	6823      	ldr	r3, [r4, #0]
 8007300:	441e      	add	r6, r3
 8007302:	6026      	str	r6, [r4, #0]
 8007304:	e7dc      	b.n	80072c0 <__ssputs_r+0x58>
 8007306:	462a      	mov	r2, r5
 8007308:	f000 f93d 	bl	8007586 <_realloc_r>
 800730c:	4606      	mov	r6, r0
 800730e:	2800      	cmp	r0, #0
 8007310:	d1e2      	bne.n	80072d8 <__ssputs_r+0x70>
 8007312:	6921      	ldr	r1, [r4, #16]
 8007314:	4650      	mov	r0, sl
 8007316:	f7ff ff01 	bl	800711c <_free_r>
 800731a:	e7c8      	b.n	80072ae <__ssputs_r+0x46>

0800731c <_svfiprintf_r>:
 800731c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007320:	461d      	mov	r5, r3
 8007322:	898b      	ldrh	r3, [r1, #12]
 8007324:	b09d      	sub	sp, #116	; 0x74
 8007326:	061f      	lsls	r7, r3, #24
 8007328:	4680      	mov	r8, r0
 800732a:	460c      	mov	r4, r1
 800732c:	4616      	mov	r6, r2
 800732e:	d50f      	bpl.n	8007350 <_svfiprintf_r+0x34>
 8007330:	690b      	ldr	r3, [r1, #16]
 8007332:	b96b      	cbnz	r3, 8007350 <_svfiprintf_r+0x34>
 8007334:	2140      	movs	r1, #64	; 0x40
 8007336:	f7ff ff3d 	bl	80071b4 <_malloc_r>
 800733a:	6020      	str	r0, [r4, #0]
 800733c:	6120      	str	r0, [r4, #16]
 800733e:	b928      	cbnz	r0, 800734c <_svfiprintf_r+0x30>
 8007340:	230c      	movs	r3, #12
 8007342:	f8c8 3000 	str.w	r3, [r8]
 8007346:	f04f 30ff 	mov.w	r0, #4294967295
 800734a:	e0c8      	b.n	80074de <_svfiprintf_r+0x1c2>
 800734c:	2340      	movs	r3, #64	; 0x40
 800734e:	6163      	str	r3, [r4, #20]
 8007350:	2300      	movs	r3, #0
 8007352:	9309      	str	r3, [sp, #36]	; 0x24
 8007354:	2320      	movs	r3, #32
 8007356:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800735a:	2330      	movs	r3, #48	; 0x30
 800735c:	f04f 0b01 	mov.w	fp, #1
 8007360:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007364:	9503      	str	r5, [sp, #12]
 8007366:	4637      	mov	r7, r6
 8007368:	463d      	mov	r5, r7
 800736a:	f815 3b01 	ldrb.w	r3, [r5], #1
 800736e:	b10b      	cbz	r3, 8007374 <_svfiprintf_r+0x58>
 8007370:	2b25      	cmp	r3, #37	; 0x25
 8007372:	d13e      	bne.n	80073f2 <_svfiprintf_r+0xd6>
 8007374:	ebb7 0a06 	subs.w	sl, r7, r6
 8007378:	d00b      	beq.n	8007392 <_svfiprintf_r+0x76>
 800737a:	4653      	mov	r3, sl
 800737c:	4632      	mov	r2, r6
 800737e:	4621      	mov	r1, r4
 8007380:	4640      	mov	r0, r8
 8007382:	f7ff ff71 	bl	8007268 <__ssputs_r>
 8007386:	3001      	adds	r0, #1
 8007388:	f000 80a4 	beq.w	80074d4 <_svfiprintf_r+0x1b8>
 800738c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800738e:	4453      	add	r3, sl
 8007390:	9309      	str	r3, [sp, #36]	; 0x24
 8007392:	783b      	ldrb	r3, [r7, #0]
 8007394:	2b00      	cmp	r3, #0
 8007396:	f000 809d 	beq.w	80074d4 <_svfiprintf_r+0x1b8>
 800739a:	2300      	movs	r3, #0
 800739c:	f04f 32ff 	mov.w	r2, #4294967295
 80073a0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80073a4:	9304      	str	r3, [sp, #16]
 80073a6:	9307      	str	r3, [sp, #28]
 80073a8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80073ac:	931a      	str	r3, [sp, #104]	; 0x68
 80073ae:	462f      	mov	r7, r5
 80073b0:	2205      	movs	r2, #5
 80073b2:	f817 1b01 	ldrb.w	r1, [r7], #1
 80073b6:	4850      	ldr	r0, [pc, #320]	; (80074f8 <_svfiprintf_r+0x1dc>)
 80073b8:	f7ff fbac 	bl	8006b14 <memchr>
 80073bc:	9b04      	ldr	r3, [sp, #16]
 80073be:	b9d0      	cbnz	r0, 80073f6 <_svfiprintf_r+0xda>
 80073c0:	06d9      	lsls	r1, r3, #27
 80073c2:	bf44      	itt	mi
 80073c4:	2220      	movmi	r2, #32
 80073c6:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80073ca:	071a      	lsls	r2, r3, #28
 80073cc:	bf44      	itt	mi
 80073ce:	222b      	movmi	r2, #43	; 0x2b
 80073d0:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80073d4:	782a      	ldrb	r2, [r5, #0]
 80073d6:	2a2a      	cmp	r2, #42	; 0x2a
 80073d8:	d015      	beq.n	8007406 <_svfiprintf_r+0xea>
 80073da:	462f      	mov	r7, r5
 80073dc:	2000      	movs	r0, #0
 80073de:	250a      	movs	r5, #10
 80073e0:	9a07      	ldr	r2, [sp, #28]
 80073e2:	4639      	mov	r1, r7
 80073e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80073e8:	3b30      	subs	r3, #48	; 0x30
 80073ea:	2b09      	cmp	r3, #9
 80073ec:	d94d      	bls.n	800748a <_svfiprintf_r+0x16e>
 80073ee:	b1b8      	cbz	r0, 8007420 <_svfiprintf_r+0x104>
 80073f0:	e00f      	b.n	8007412 <_svfiprintf_r+0xf6>
 80073f2:	462f      	mov	r7, r5
 80073f4:	e7b8      	b.n	8007368 <_svfiprintf_r+0x4c>
 80073f6:	4a40      	ldr	r2, [pc, #256]	; (80074f8 <_svfiprintf_r+0x1dc>)
 80073f8:	463d      	mov	r5, r7
 80073fa:	1a80      	subs	r0, r0, r2
 80073fc:	fa0b f000 	lsl.w	r0, fp, r0
 8007400:	4318      	orrs	r0, r3
 8007402:	9004      	str	r0, [sp, #16]
 8007404:	e7d3      	b.n	80073ae <_svfiprintf_r+0x92>
 8007406:	9a03      	ldr	r2, [sp, #12]
 8007408:	1d11      	adds	r1, r2, #4
 800740a:	6812      	ldr	r2, [r2, #0]
 800740c:	9103      	str	r1, [sp, #12]
 800740e:	2a00      	cmp	r2, #0
 8007410:	db01      	blt.n	8007416 <_svfiprintf_r+0xfa>
 8007412:	9207      	str	r2, [sp, #28]
 8007414:	e004      	b.n	8007420 <_svfiprintf_r+0x104>
 8007416:	4252      	negs	r2, r2
 8007418:	f043 0302 	orr.w	r3, r3, #2
 800741c:	9207      	str	r2, [sp, #28]
 800741e:	9304      	str	r3, [sp, #16]
 8007420:	783b      	ldrb	r3, [r7, #0]
 8007422:	2b2e      	cmp	r3, #46	; 0x2e
 8007424:	d10c      	bne.n	8007440 <_svfiprintf_r+0x124>
 8007426:	787b      	ldrb	r3, [r7, #1]
 8007428:	2b2a      	cmp	r3, #42	; 0x2a
 800742a:	d133      	bne.n	8007494 <_svfiprintf_r+0x178>
 800742c:	9b03      	ldr	r3, [sp, #12]
 800742e:	3702      	adds	r7, #2
 8007430:	1d1a      	adds	r2, r3, #4
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	9203      	str	r2, [sp, #12]
 8007436:	2b00      	cmp	r3, #0
 8007438:	bfb8      	it	lt
 800743a:	f04f 33ff 	movlt.w	r3, #4294967295
 800743e:	9305      	str	r3, [sp, #20]
 8007440:	4d2e      	ldr	r5, [pc, #184]	; (80074fc <_svfiprintf_r+0x1e0>)
 8007442:	2203      	movs	r2, #3
 8007444:	7839      	ldrb	r1, [r7, #0]
 8007446:	4628      	mov	r0, r5
 8007448:	f7ff fb64 	bl	8006b14 <memchr>
 800744c:	b138      	cbz	r0, 800745e <_svfiprintf_r+0x142>
 800744e:	2340      	movs	r3, #64	; 0x40
 8007450:	1b40      	subs	r0, r0, r5
 8007452:	fa03 f000 	lsl.w	r0, r3, r0
 8007456:	9b04      	ldr	r3, [sp, #16]
 8007458:	3701      	adds	r7, #1
 800745a:	4303      	orrs	r3, r0
 800745c:	9304      	str	r3, [sp, #16]
 800745e:	7839      	ldrb	r1, [r7, #0]
 8007460:	2206      	movs	r2, #6
 8007462:	4827      	ldr	r0, [pc, #156]	; (8007500 <_svfiprintf_r+0x1e4>)
 8007464:	1c7e      	adds	r6, r7, #1
 8007466:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800746a:	f7ff fb53 	bl	8006b14 <memchr>
 800746e:	2800      	cmp	r0, #0
 8007470:	d038      	beq.n	80074e4 <_svfiprintf_r+0x1c8>
 8007472:	4b24      	ldr	r3, [pc, #144]	; (8007504 <_svfiprintf_r+0x1e8>)
 8007474:	bb13      	cbnz	r3, 80074bc <_svfiprintf_r+0x1a0>
 8007476:	9b03      	ldr	r3, [sp, #12]
 8007478:	3307      	adds	r3, #7
 800747a:	f023 0307 	bic.w	r3, r3, #7
 800747e:	3308      	adds	r3, #8
 8007480:	9303      	str	r3, [sp, #12]
 8007482:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007484:	444b      	add	r3, r9
 8007486:	9309      	str	r3, [sp, #36]	; 0x24
 8007488:	e76d      	b.n	8007366 <_svfiprintf_r+0x4a>
 800748a:	fb05 3202 	mla	r2, r5, r2, r3
 800748e:	2001      	movs	r0, #1
 8007490:	460f      	mov	r7, r1
 8007492:	e7a6      	b.n	80073e2 <_svfiprintf_r+0xc6>
 8007494:	2300      	movs	r3, #0
 8007496:	250a      	movs	r5, #10
 8007498:	4619      	mov	r1, r3
 800749a:	3701      	adds	r7, #1
 800749c:	9305      	str	r3, [sp, #20]
 800749e:	4638      	mov	r0, r7
 80074a0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80074a4:	3a30      	subs	r2, #48	; 0x30
 80074a6:	2a09      	cmp	r2, #9
 80074a8:	d903      	bls.n	80074b2 <_svfiprintf_r+0x196>
 80074aa:	2b00      	cmp	r3, #0
 80074ac:	d0c8      	beq.n	8007440 <_svfiprintf_r+0x124>
 80074ae:	9105      	str	r1, [sp, #20]
 80074b0:	e7c6      	b.n	8007440 <_svfiprintf_r+0x124>
 80074b2:	fb05 2101 	mla	r1, r5, r1, r2
 80074b6:	2301      	movs	r3, #1
 80074b8:	4607      	mov	r7, r0
 80074ba:	e7f0      	b.n	800749e <_svfiprintf_r+0x182>
 80074bc:	ab03      	add	r3, sp, #12
 80074be:	9300      	str	r3, [sp, #0]
 80074c0:	4622      	mov	r2, r4
 80074c2:	4b11      	ldr	r3, [pc, #68]	; (8007508 <_svfiprintf_r+0x1ec>)
 80074c4:	a904      	add	r1, sp, #16
 80074c6:	4640      	mov	r0, r8
 80074c8:	f7fe f8dc 	bl	8005684 <_printf_float>
 80074cc:	f1b0 3fff 	cmp.w	r0, #4294967295
 80074d0:	4681      	mov	r9, r0
 80074d2:	d1d6      	bne.n	8007482 <_svfiprintf_r+0x166>
 80074d4:	89a3      	ldrh	r3, [r4, #12]
 80074d6:	065b      	lsls	r3, r3, #25
 80074d8:	f53f af35 	bmi.w	8007346 <_svfiprintf_r+0x2a>
 80074dc:	9809      	ldr	r0, [sp, #36]	; 0x24
 80074de:	b01d      	add	sp, #116	; 0x74
 80074e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80074e4:	ab03      	add	r3, sp, #12
 80074e6:	9300      	str	r3, [sp, #0]
 80074e8:	4622      	mov	r2, r4
 80074ea:	4b07      	ldr	r3, [pc, #28]	; (8007508 <_svfiprintf_r+0x1ec>)
 80074ec:	a904      	add	r1, sp, #16
 80074ee:	4640      	mov	r0, r8
 80074f0:	f7fe fb74 	bl	8005bdc <_printf_i>
 80074f4:	e7ea      	b.n	80074cc <_svfiprintf_r+0x1b0>
 80074f6:	bf00      	nop
 80074f8:	0800a6f4 	.word	0x0800a6f4
 80074fc:	0800a6fa 	.word	0x0800a6fa
 8007500:	0800a6fe 	.word	0x0800a6fe
 8007504:	08005685 	.word	0x08005685
 8007508:	08007269 	.word	0x08007269

0800750c <_sbrk_r>:
 800750c:	b538      	push	{r3, r4, r5, lr}
 800750e:	2300      	movs	r3, #0
 8007510:	4c05      	ldr	r4, [pc, #20]	; (8007528 <_sbrk_r+0x1c>)
 8007512:	4605      	mov	r5, r0
 8007514:	4608      	mov	r0, r1
 8007516:	6023      	str	r3, [r4, #0]
 8007518:	f7fb f8f0 	bl	80026fc <_sbrk>
 800751c:	1c43      	adds	r3, r0, #1
 800751e:	d102      	bne.n	8007526 <_sbrk_r+0x1a>
 8007520:	6823      	ldr	r3, [r4, #0]
 8007522:	b103      	cbz	r3, 8007526 <_sbrk_r+0x1a>
 8007524:	602b      	str	r3, [r5, #0]
 8007526:	bd38      	pop	{r3, r4, r5, pc}
 8007528:	200008ec 	.word	0x200008ec

0800752c <__ascii_mbtowc>:
 800752c:	b082      	sub	sp, #8
 800752e:	b901      	cbnz	r1, 8007532 <__ascii_mbtowc+0x6>
 8007530:	a901      	add	r1, sp, #4
 8007532:	b142      	cbz	r2, 8007546 <__ascii_mbtowc+0x1a>
 8007534:	b14b      	cbz	r3, 800754a <__ascii_mbtowc+0x1e>
 8007536:	7813      	ldrb	r3, [r2, #0]
 8007538:	600b      	str	r3, [r1, #0]
 800753a:	7812      	ldrb	r2, [r2, #0]
 800753c:	1c10      	adds	r0, r2, #0
 800753e:	bf18      	it	ne
 8007540:	2001      	movne	r0, #1
 8007542:	b002      	add	sp, #8
 8007544:	4770      	bx	lr
 8007546:	4610      	mov	r0, r2
 8007548:	e7fb      	b.n	8007542 <__ascii_mbtowc+0x16>
 800754a:	f06f 0001 	mvn.w	r0, #1
 800754e:	e7f8      	b.n	8007542 <__ascii_mbtowc+0x16>

08007550 <memmove>:
 8007550:	4288      	cmp	r0, r1
 8007552:	b510      	push	{r4, lr}
 8007554:	eb01 0302 	add.w	r3, r1, r2
 8007558:	d807      	bhi.n	800756a <memmove+0x1a>
 800755a:	1e42      	subs	r2, r0, #1
 800755c:	4299      	cmp	r1, r3
 800755e:	d00a      	beq.n	8007576 <memmove+0x26>
 8007560:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007564:	f802 4f01 	strb.w	r4, [r2, #1]!
 8007568:	e7f8      	b.n	800755c <memmove+0xc>
 800756a:	4283      	cmp	r3, r0
 800756c:	d9f5      	bls.n	800755a <memmove+0xa>
 800756e:	1881      	adds	r1, r0, r2
 8007570:	1ad2      	subs	r2, r2, r3
 8007572:	42d3      	cmn	r3, r2
 8007574:	d100      	bne.n	8007578 <memmove+0x28>
 8007576:	bd10      	pop	{r4, pc}
 8007578:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800757c:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8007580:	e7f7      	b.n	8007572 <memmove+0x22>

08007582 <__malloc_lock>:
 8007582:	4770      	bx	lr

08007584 <__malloc_unlock>:
 8007584:	4770      	bx	lr

08007586 <_realloc_r>:
 8007586:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007588:	4607      	mov	r7, r0
 800758a:	4614      	mov	r4, r2
 800758c:	460e      	mov	r6, r1
 800758e:	b921      	cbnz	r1, 800759a <_realloc_r+0x14>
 8007590:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8007594:	4611      	mov	r1, r2
 8007596:	f7ff be0d 	b.w	80071b4 <_malloc_r>
 800759a:	b922      	cbnz	r2, 80075a6 <_realloc_r+0x20>
 800759c:	f7ff fdbe 	bl	800711c <_free_r>
 80075a0:	4625      	mov	r5, r4
 80075a2:	4628      	mov	r0, r5
 80075a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80075a6:	f000 f821 	bl	80075ec <_malloc_usable_size_r>
 80075aa:	42a0      	cmp	r0, r4
 80075ac:	d20f      	bcs.n	80075ce <_realloc_r+0x48>
 80075ae:	4621      	mov	r1, r4
 80075b0:	4638      	mov	r0, r7
 80075b2:	f7ff fdff 	bl	80071b4 <_malloc_r>
 80075b6:	4605      	mov	r5, r0
 80075b8:	2800      	cmp	r0, #0
 80075ba:	d0f2      	beq.n	80075a2 <_realloc_r+0x1c>
 80075bc:	4631      	mov	r1, r6
 80075be:	4622      	mov	r2, r4
 80075c0:	f7ff fab6 	bl	8006b30 <memcpy>
 80075c4:	4631      	mov	r1, r6
 80075c6:	4638      	mov	r0, r7
 80075c8:	f7ff fda8 	bl	800711c <_free_r>
 80075cc:	e7e9      	b.n	80075a2 <_realloc_r+0x1c>
 80075ce:	4635      	mov	r5, r6
 80075d0:	e7e7      	b.n	80075a2 <_realloc_r+0x1c>

080075d2 <__ascii_wctomb>:
 80075d2:	b149      	cbz	r1, 80075e8 <__ascii_wctomb+0x16>
 80075d4:	2aff      	cmp	r2, #255	; 0xff
 80075d6:	bf8b      	itete	hi
 80075d8:	238a      	movhi	r3, #138	; 0x8a
 80075da:	700a      	strbls	r2, [r1, #0]
 80075dc:	6003      	strhi	r3, [r0, #0]
 80075de:	2001      	movls	r0, #1
 80075e0:	bf88      	it	hi
 80075e2:	f04f 30ff 	movhi.w	r0, #4294967295
 80075e6:	4770      	bx	lr
 80075e8:	4608      	mov	r0, r1
 80075ea:	4770      	bx	lr

080075ec <_malloc_usable_size_r>:
 80075ec:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80075f0:	1f18      	subs	r0, r3, #4
 80075f2:	2b00      	cmp	r3, #0
 80075f4:	bfbc      	itt	lt
 80075f6:	580b      	ldrlt	r3, [r1, r0]
 80075f8:	18c0      	addlt	r0, r0, r3
 80075fa:	4770      	bx	lr
 80075fc:	0000      	movs	r0, r0
	...

08007600 <atan>:
 8007600:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007604:	4bb6      	ldr	r3, [pc, #728]	; (80078e0 <atan+0x2e0>)
 8007606:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800760a:	429e      	cmp	r6, r3
 800760c:	4604      	mov	r4, r0
 800760e:	460d      	mov	r5, r1
 8007610:	468b      	mov	fp, r1
 8007612:	dd17      	ble.n	8007644 <atan+0x44>
 8007614:	4bb3      	ldr	r3, [pc, #716]	; (80078e4 <atan+0x2e4>)
 8007616:	429e      	cmp	r6, r3
 8007618:	dc01      	bgt.n	800761e <atan+0x1e>
 800761a:	d109      	bne.n	8007630 <atan+0x30>
 800761c:	b140      	cbz	r0, 8007630 <atan+0x30>
 800761e:	4622      	mov	r2, r4
 8007620:	462b      	mov	r3, r5
 8007622:	4620      	mov	r0, r4
 8007624:	4629      	mov	r1, r5
 8007626:	f7f8 fda1 	bl	800016c <__adddf3>
 800762a:	4604      	mov	r4, r0
 800762c:	460d      	mov	r5, r1
 800762e:	e005      	b.n	800763c <atan+0x3c>
 8007630:	f1bb 0f00 	cmp.w	fp, #0
 8007634:	4cac      	ldr	r4, [pc, #688]	; (80078e8 <atan+0x2e8>)
 8007636:	f340 8121 	ble.w	800787c <atan+0x27c>
 800763a:	4dac      	ldr	r5, [pc, #688]	; (80078ec <atan+0x2ec>)
 800763c:	4620      	mov	r0, r4
 800763e:	4629      	mov	r1, r5
 8007640:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007644:	4baa      	ldr	r3, [pc, #680]	; (80078f0 <atan+0x2f0>)
 8007646:	429e      	cmp	r6, r3
 8007648:	dc11      	bgt.n	800766e <atan+0x6e>
 800764a:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 800764e:	429e      	cmp	r6, r3
 8007650:	dc0a      	bgt.n	8007668 <atan+0x68>
 8007652:	a38b      	add	r3, pc, #556	; (adr r3, 8007880 <atan+0x280>)
 8007654:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007658:	f7f8 fd88 	bl	800016c <__adddf3>
 800765c:	2200      	movs	r2, #0
 800765e:	4ba5      	ldr	r3, [pc, #660]	; (80078f4 <atan+0x2f4>)
 8007660:	f7f9 f9ca 	bl	80009f8 <__aeabi_dcmpgt>
 8007664:	2800      	cmp	r0, #0
 8007666:	d1e9      	bne.n	800763c <atan+0x3c>
 8007668:	f04f 3aff 	mov.w	sl, #4294967295
 800766c:	e027      	b.n	80076be <atan+0xbe>
 800766e:	f000 f951 	bl	8007914 <fabs>
 8007672:	4ba1      	ldr	r3, [pc, #644]	; (80078f8 <atan+0x2f8>)
 8007674:	4604      	mov	r4, r0
 8007676:	429e      	cmp	r6, r3
 8007678:	460d      	mov	r5, r1
 800767a:	f300 80b8 	bgt.w	80077ee <atan+0x1ee>
 800767e:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 8007682:	429e      	cmp	r6, r3
 8007684:	f300 809c 	bgt.w	80077c0 <atan+0x1c0>
 8007688:	4602      	mov	r2, r0
 800768a:	460b      	mov	r3, r1
 800768c:	f7f8 fd6e 	bl	800016c <__adddf3>
 8007690:	2200      	movs	r2, #0
 8007692:	4b98      	ldr	r3, [pc, #608]	; (80078f4 <atan+0x2f4>)
 8007694:	f7f8 fd68 	bl	8000168 <__aeabi_dsub>
 8007698:	2200      	movs	r2, #0
 800769a:	4606      	mov	r6, r0
 800769c:	460f      	mov	r7, r1
 800769e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80076a2:	4620      	mov	r0, r4
 80076a4:	4629      	mov	r1, r5
 80076a6:	f7f8 fd61 	bl	800016c <__adddf3>
 80076aa:	4602      	mov	r2, r0
 80076ac:	460b      	mov	r3, r1
 80076ae:	4630      	mov	r0, r6
 80076b0:	4639      	mov	r1, r7
 80076b2:	f7f9 f83b 	bl	800072c <__aeabi_ddiv>
 80076b6:	f04f 0a00 	mov.w	sl, #0
 80076ba:	4604      	mov	r4, r0
 80076bc:	460d      	mov	r5, r1
 80076be:	4622      	mov	r2, r4
 80076c0:	462b      	mov	r3, r5
 80076c2:	4620      	mov	r0, r4
 80076c4:	4629      	mov	r1, r5
 80076c6:	f7f8 ff07 	bl	80004d8 <__aeabi_dmul>
 80076ca:	4602      	mov	r2, r0
 80076cc:	460b      	mov	r3, r1
 80076ce:	4680      	mov	r8, r0
 80076d0:	4689      	mov	r9, r1
 80076d2:	f7f8 ff01 	bl	80004d8 <__aeabi_dmul>
 80076d6:	a36c      	add	r3, pc, #432	; (adr r3, 8007888 <atan+0x288>)
 80076d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80076dc:	4606      	mov	r6, r0
 80076de:	460f      	mov	r7, r1
 80076e0:	f7f8 fefa 	bl	80004d8 <__aeabi_dmul>
 80076e4:	a36a      	add	r3, pc, #424	; (adr r3, 8007890 <atan+0x290>)
 80076e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80076ea:	f7f8 fd3f 	bl	800016c <__adddf3>
 80076ee:	4632      	mov	r2, r6
 80076f0:	463b      	mov	r3, r7
 80076f2:	f7f8 fef1 	bl	80004d8 <__aeabi_dmul>
 80076f6:	a368      	add	r3, pc, #416	; (adr r3, 8007898 <atan+0x298>)
 80076f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80076fc:	f7f8 fd36 	bl	800016c <__adddf3>
 8007700:	4632      	mov	r2, r6
 8007702:	463b      	mov	r3, r7
 8007704:	f7f8 fee8 	bl	80004d8 <__aeabi_dmul>
 8007708:	a365      	add	r3, pc, #404	; (adr r3, 80078a0 <atan+0x2a0>)
 800770a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800770e:	f7f8 fd2d 	bl	800016c <__adddf3>
 8007712:	4632      	mov	r2, r6
 8007714:	463b      	mov	r3, r7
 8007716:	f7f8 fedf 	bl	80004d8 <__aeabi_dmul>
 800771a:	a363      	add	r3, pc, #396	; (adr r3, 80078a8 <atan+0x2a8>)
 800771c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007720:	f7f8 fd24 	bl	800016c <__adddf3>
 8007724:	4632      	mov	r2, r6
 8007726:	463b      	mov	r3, r7
 8007728:	f7f8 fed6 	bl	80004d8 <__aeabi_dmul>
 800772c:	a360      	add	r3, pc, #384	; (adr r3, 80078b0 <atan+0x2b0>)
 800772e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007732:	f7f8 fd1b 	bl	800016c <__adddf3>
 8007736:	4642      	mov	r2, r8
 8007738:	464b      	mov	r3, r9
 800773a:	f7f8 fecd 	bl	80004d8 <__aeabi_dmul>
 800773e:	a35e      	add	r3, pc, #376	; (adr r3, 80078b8 <atan+0x2b8>)
 8007740:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007744:	4680      	mov	r8, r0
 8007746:	4689      	mov	r9, r1
 8007748:	4630      	mov	r0, r6
 800774a:	4639      	mov	r1, r7
 800774c:	f7f8 fec4 	bl	80004d8 <__aeabi_dmul>
 8007750:	a35b      	add	r3, pc, #364	; (adr r3, 80078c0 <atan+0x2c0>)
 8007752:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007756:	f7f8 fd07 	bl	8000168 <__aeabi_dsub>
 800775a:	4632      	mov	r2, r6
 800775c:	463b      	mov	r3, r7
 800775e:	f7f8 febb 	bl	80004d8 <__aeabi_dmul>
 8007762:	a359      	add	r3, pc, #356	; (adr r3, 80078c8 <atan+0x2c8>)
 8007764:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007768:	f7f8 fcfe 	bl	8000168 <__aeabi_dsub>
 800776c:	4632      	mov	r2, r6
 800776e:	463b      	mov	r3, r7
 8007770:	f7f8 feb2 	bl	80004d8 <__aeabi_dmul>
 8007774:	a356      	add	r3, pc, #344	; (adr r3, 80078d0 <atan+0x2d0>)
 8007776:	e9d3 2300 	ldrd	r2, r3, [r3]
 800777a:	f7f8 fcf5 	bl	8000168 <__aeabi_dsub>
 800777e:	4632      	mov	r2, r6
 8007780:	463b      	mov	r3, r7
 8007782:	f7f8 fea9 	bl	80004d8 <__aeabi_dmul>
 8007786:	a354      	add	r3, pc, #336	; (adr r3, 80078d8 <atan+0x2d8>)
 8007788:	e9d3 2300 	ldrd	r2, r3, [r3]
 800778c:	f7f8 fcec 	bl	8000168 <__aeabi_dsub>
 8007790:	4632      	mov	r2, r6
 8007792:	463b      	mov	r3, r7
 8007794:	f7f8 fea0 	bl	80004d8 <__aeabi_dmul>
 8007798:	4602      	mov	r2, r0
 800779a:	460b      	mov	r3, r1
 800779c:	4640      	mov	r0, r8
 800779e:	4649      	mov	r1, r9
 80077a0:	f7f8 fce4 	bl	800016c <__adddf3>
 80077a4:	4622      	mov	r2, r4
 80077a6:	462b      	mov	r3, r5
 80077a8:	f7f8 fe96 	bl	80004d8 <__aeabi_dmul>
 80077ac:	f1ba 3fff 	cmp.w	sl, #4294967295
 80077b0:	4602      	mov	r2, r0
 80077b2:	460b      	mov	r3, r1
 80077b4:	d144      	bne.n	8007840 <atan+0x240>
 80077b6:	4620      	mov	r0, r4
 80077b8:	4629      	mov	r1, r5
 80077ba:	f7f8 fcd5 	bl	8000168 <__aeabi_dsub>
 80077be:	e734      	b.n	800762a <atan+0x2a>
 80077c0:	2200      	movs	r2, #0
 80077c2:	4b4c      	ldr	r3, [pc, #304]	; (80078f4 <atan+0x2f4>)
 80077c4:	f7f8 fcd0 	bl	8000168 <__aeabi_dsub>
 80077c8:	2200      	movs	r2, #0
 80077ca:	4606      	mov	r6, r0
 80077cc:	460f      	mov	r7, r1
 80077ce:	4b49      	ldr	r3, [pc, #292]	; (80078f4 <atan+0x2f4>)
 80077d0:	4620      	mov	r0, r4
 80077d2:	4629      	mov	r1, r5
 80077d4:	f7f8 fcca 	bl	800016c <__adddf3>
 80077d8:	4602      	mov	r2, r0
 80077da:	460b      	mov	r3, r1
 80077dc:	4630      	mov	r0, r6
 80077de:	4639      	mov	r1, r7
 80077e0:	f7f8 ffa4 	bl	800072c <__aeabi_ddiv>
 80077e4:	f04f 0a01 	mov.w	sl, #1
 80077e8:	4604      	mov	r4, r0
 80077ea:	460d      	mov	r5, r1
 80077ec:	e767      	b.n	80076be <atan+0xbe>
 80077ee:	4b43      	ldr	r3, [pc, #268]	; (80078fc <atan+0x2fc>)
 80077f0:	429e      	cmp	r6, r3
 80077f2:	dc1a      	bgt.n	800782a <atan+0x22a>
 80077f4:	2200      	movs	r2, #0
 80077f6:	4b42      	ldr	r3, [pc, #264]	; (8007900 <atan+0x300>)
 80077f8:	f7f8 fcb6 	bl	8000168 <__aeabi_dsub>
 80077fc:	2200      	movs	r2, #0
 80077fe:	4606      	mov	r6, r0
 8007800:	460f      	mov	r7, r1
 8007802:	4b3f      	ldr	r3, [pc, #252]	; (8007900 <atan+0x300>)
 8007804:	4620      	mov	r0, r4
 8007806:	4629      	mov	r1, r5
 8007808:	f7f8 fe66 	bl	80004d8 <__aeabi_dmul>
 800780c:	2200      	movs	r2, #0
 800780e:	4b39      	ldr	r3, [pc, #228]	; (80078f4 <atan+0x2f4>)
 8007810:	f7f8 fcac 	bl	800016c <__adddf3>
 8007814:	4602      	mov	r2, r0
 8007816:	460b      	mov	r3, r1
 8007818:	4630      	mov	r0, r6
 800781a:	4639      	mov	r1, r7
 800781c:	f7f8 ff86 	bl	800072c <__aeabi_ddiv>
 8007820:	f04f 0a02 	mov.w	sl, #2
 8007824:	4604      	mov	r4, r0
 8007826:	460d      	mov	r5, r1
 8007828:	e749      	b.n	80076be <atan+0xbe>
 800782a:	4602      	mov	r2, r0
 800782c:	460b      	mov	r3, r1
 800782e:	2000      	movs	r0, #0
 8007830:	4934      	ldr	r1, [pc, #208]	; (8007904 <atan+0x304>)
 8007832:	f7f8 ff7b 	bl	800072c <__aeabi_ddiv>
 8007836:	f04f 0a03 	mov.w	sl, #3
 800783a:	4604      	mov	r4, r0
 800783c:	460d      	mov	r5, r1
 800783e:	e73e      	b.n	80076be <atan+0xbe>
 8007840:	4b31      	ldr	r3, [pc, #196]	; (8007908 <atan+0x308>)
 8007842:	4e32      	ldr	r6, [pc, #200]	; (800790c <atan+0x30c>)
 8007844:	ea4f 0aca 	mov.w	sl, sl, lsl #3
 8007848:	4456      	add	r6, sl
 800784a:	449a      	add	sl, r3
 800784c:	e9da 2300 	ldrd	r2, r3, [sl]
 8007850:	f7f8 fc8a 	bl	8000168 <__aeabi_dsub>
 8007854:	4622      	mov	r2, r4
 8007856:	462b      	mov	r3, r5
 8007858:	f7f8 fc86 	bl	8000168 <__aeabi_dsub>
 800785c:	4602      	mov	r2, r0
 800785e:	460b      	mov	r3, r1
 8007860:	e9d6 0100 	ldrd	r0, r1, [r6]
 8007864:	f7f8 fc80 	bl	8000168 <__aeabi_dsub>
 8007868:	f1bb 0f00 	cmp.w	fp, #0
 800786c:	4604      	mov	r4, r0
 800786e:	460d      	mov	r5, r1
 8007870:	f6bf aee4 	bge.w	800763c <atan+0x3c>
 8007874:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007878:	461d      	mov	r5, r3
 800787a:	e6df      	b.n	800763c <atan+0x3c>
 800787c:	4d24      	ldr	r5, [pc, #144]	; (8007910 <atan+0x310>)
 800787e:	e6dd      	b.n	800763c <atan+0x3c>
 8007880:	8800759c 	.word	0x8800759c
 8007884:	7e37e43c 	.word	0x7e37e43c
 8007888:	e322da11 	.word	0xe322da11
 800788c:	3f90ad3a 	.word	0x3f90ad3a
 8007890:	24760deb 	.word	0x24760deb
 8007894:	3fa97b4b 	.word	0x3fa97b4b
 8007898:	a0d03d51 	.word	0xa0d03d51
 800789c:	3fb10d66 	.word	0x3fb10d66
 80078a0:	c54c206e 	.word	0xc54c206e
 80078a4:	3fb745cd 	.word	0x3fb745cd
 80078a8:	920083ff 	.word	0x920083ff
 80078ac:	3fc24924 	.word	0x3fc24924
 80078b0:	5555550d 	.word	0x5555550d
 80078b4:	3fd55555 	.word	0x3fd55555
 80078b8:	2c6a6c2f 	.word	0x2c6a6c2f
 80078bc:	bfa2b444 	.word	0xbfa2b444
 80078c0:	52defd9a 	.word	0x52defd9a
 80078c4:	3fadde2d 	.word	0x3fadde2d
 80078c8:	af749a6d 	.word	0xaf749a6d
 80078cc:	3fb3b0f2 	.word	0x3fb3b0f2
 80078d0:	fe231671 	.word	0xfe231671
 80078d4:	3fbc71c6 	.word	0x3fbc71c6
 80078d8:	9998ebc4 	.word	0x9998ebc4
 80078dc:	3fc99999 	.word	0x3fc99999
 80078e0:	440fffff 	.word	0x440fffff
 80078e4:	7ff00000 	.word	0x7ff00000
 80078e8:	54442d18 	.word	0x54442d18
 80078ec:	3ff921fb 	.word	0x3ff921fb
 80078f0:	3fdbffff 	.word	0x3fdbffff
 80078f4:	3ff00000 	.word	0x3ff00000
 80078f8:	3ff2ffff 	.word	0x3ff2ffff
 80078fc:	40037fff 	.word	0x40037fff
 8007900:	3ff80000 	.word	0x3ff80000
 8007904:	bff00000 	.word	0xbff00000
 8007908:	0800a830 	.word	0x0800a830
 800790c:	0800a810 	.word	0x0800a810
 8007910:	bff921fb 	.word	0xbff921fb

08007914 <fabs>:
 8007914:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8007918:	4619      	mov	r1, r3
 800791a:	4770      	bx	lr

0800791c <roundf>:
 800791c:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 8007920:	3b7f      	subs	r3, #127	; 0x7f
 8007922:	2b16      	cmp	r3, #22
 8007924:	b510      	push	{r4, lr}
 8007926:	4601      	mov	r1, r0
 8007928:	dc14      	bgt.n	8007954 <roundf+0x38>
 800792a:	2b00      	cmp	r3, #0
 800792c:	da07      	bge.n	800793e <roundf+0x22>
 800792e:	3301      	adds	r3, #1
 8007930:	f000 4100 	and.w	r1, r0, #2147483648	; 0x80000000
 8007934:	d101      	bne.n	800793a <roundf+0x1e>
 8007936:	f041 517e 	orr.w	r1, r1, #1065353216	; 0x3f800000
 800793a:	4608      	mov	r0, r1
 800793c:	bd10      	pop	{r4, pc}
 800793e:	4a08      	ldr	r2, [pc, #32]	; (8007960 <roundf+0x44>)
 8007940:	411a      	asrs	r2, r3
 8007942:	4210      	tst	r0, r2
 8007944:	d0f9      	beq.n	800793a <roundf+0x1e>
 8007946:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800794a:	4119      	asrs	r1, r3
 800794c:	4401      	add	r1, r0
 800794e:	ea21 0102 	bic.w	r1, r1, r2
 8007952:	e7f2      	b.n	800793a <roundf+0x1e>
 8007954:	2b80      	cmp	r3, #128	; 0x80
 8007956:	d1f0      	bne.n	800793a <roundf+0x1e>
 8007958:	f7f9 f8ec 	bl	8000b34 <__addsf3>
 800795c:	4601      	mov	r1, r0
 800795e:	e7ec      	b.n	800793a <roundf+0x1e>
 8007960:	007fffff 	.word	0x007fffff

08007964 <atan2>:
 8007964:	f000 b854 	b.w	8007a10 <__ieee754_atan2>

08007968 <sqrt>:
 8007968:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800796c:	b08b      	sub	sp, #44	; 0x2c
 800796e:	4604      	mov	r4, r0
 8007970:	460d      	mov	r5, r1
 8007972:	f000 f92b 	bl	8007bcc <__ieee754_sqrt>
 8007976:	4b24      	ldr	r3, [pc, #144]	; (8007a08 <sqrt+0xa0>)
 8007978:	4680      	mov	r8, r0
 800797a:	f993 a000 	ldrsb.w	sl, [r3]
 800797e:	4689      	mov	r9, r1
 8007980:	f1ba 3fff 	cmp.w	sl, #4294967295
 8007984:	d02b      	beq.n	80079de <sqrt+0x76>
 8007986:	4622      	mov	r2, r4
 8007988:	462b      	mov	r3, r5
 800798a:	4620      	mov	r0, r4
 800798c:	4629      	mov	r1, r5
 800798e:	f7f9 f83d 	bl	8000a0c <__aeabi_dcmpun>
 8007992:	4683      	mov	fp, r0
 8007994:	bb18      	cbnz	r0, 80079de <sqrt+0x76>
 8007996:	2600      	movs	r6, #0
 8007998:	2700      	movs	r7, #0
 800799a:	4632      	mov	r2, r6
 800799c:	463b      	mov	r3, r7
 800799e:	4620      	mov	r0, r4
 80079a0:	4629      	mov	r1, r5
 80079a2:	f7f9 f80b 	bl	80009bc <__aeabi_dcmplt>
 80079a6:	b1d0      	cbz	r0, 80079de <sqrt+0x76>
 80079a8:	2301      	movs	r3, #1
 80079aa:	9300      	str	r3, [sp, #0]
 80079ac:	4b17      	ldr	r3, [pc, #92]	; (8007a0c <sqrt+0xa4>)
 80079ae:	f8cd b020 	str.w	fp, [sp, #32]
 80079b2:	9301      	str	r3, [sp, #4]
 80079b4:	e9cd 4504 	strd	r4, r5, [sp, #16]
 80079b8:	e9cd 4502 	strd	r4, r5, [sp, #8]
 80079bc:	f1ba 0f00 	cmp.w	sl, #0
 80079c0:	d112      	bne.n	80079e8 <sqrt+0x80>
 80079c2:	e9cd 6706 	strd	r6, r7, [sp, #24]
 80079c6:	4668      	mov	r0, sp
 80079c8:	f000 f9ac 	bl	8007d24 <matherr>
 80079cc:	b1b8      	cbz	r0, 80079fe <sqrt+0x96>
 80079ce:	9b08      	ldr	r3, [sp, #32]
 80079d0:	b11b      	cbz	r3, 80079da <sqrt+0x72>
 80079d2:	f7fd fd93 	bl	80054fc <__errno>
 80079d6:	9b08      	ldr	r3, [sp, #32]
 80079d8:	6003      	str	r3, [r0, #0]
 80079da:	e9dd 8906 	ldrd	r8, r9, [sp, #24]
 80079de:	4640      	mov	r0, r8
 80079e0:	4649      	mov	r1, r9
 80079e2:	b00b      	add	sp, #44	; 0x2c
 80079e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80079e8:	4632      	mov	r2, r6
 80079ea:	463b      	mov	r3, r7
 80079ec:	4630      	mov	r0, r6
 80079ee:	4639      	mov	r1, r7
 80079f0:	f7f8 fe9c 	bl	800072c <__aeabi_ddiv>
 80079f4:	f1ba 0f02 	cmp.w	sl, #2
 80079f8:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80079fc:	d1e3      	bne.n	80079c6 <sqrt+0x5e>
 80079fe:	f7fd fd7d 	bl	80054fc <__errno>
 8007a02:	2321      	movs	r3, #33	; 0x21
 8007a04:	6003      	str	r3, [r0, #0]
 8007a06:	e7e2      	b.n	80079ce <sqrt+0x66>
 8007a08:	200002a0 	.word	0x200002a0
 8007a0c:	0800a850 	.word	0x0800a850

08007a10 <__ieee754_atan2>:
 8007a10:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007a14:	4256      	negs	r6, r2
 8007a16:	f023 4c00 	bic.w	ip, r3, #2147483648	; 0x80000000
 8007a1a:	4316      	orrs	r6, r2
 8007a1c:	f8df 91a8 	ldr.w	r9, [pc, #424]	; 8007bc8 <__ieee754_atan2+0x1b8>
 8007a20:	ea4c 76d6 	orr.w	r6, ip, r6, lsr #31
 8007a24:	454e      	cmp	r6, r9
 8007a26:	4604      	mov	r4, r0
 8007a28:	460d      	mov	r5, r1
 8007a2a:	469e      	mov	lr, r3
 8007a2c:	d808      	bhi.n	8007a40 <__ieee754_atan2+0x30>
 8007a2e:	4246      	negs	r6, r0
 8007a30:	f021 4700 	bic.w	r7, r1, #2147483648	; 0x80000000
 8007a34:	4306      	orrs	r6, r0
 8007a36:	ea47 76d6 	orr.w	r6, r7, r6, lsr #31
 8007a3a:	454e      	cmp	r6, r9
 8007a3c:	4688      	mov	r8, r1
 8007a3e:	d906      	bls.n	8007a4e <__ieee754_atan2+0x3e>
 8007a40:	4620      	mov	r0, r4
 8007a42:	4629      	mov	r1, r5
 8007a44:	f7f8 fb92 	bl	800016c <__adddf3>
 8007a48:	4604      	mov	r4, r0
 8007a4a:	460d      	mov	r5, r1
 8007a4c:	e030      	b.n	8007ab0 <__ieee754_atan2+0xa0>
 8007a4e:	f103 4640 	add.w	r6, r3, #3221225472	; 0xc0000000
 8007a52:	f506 1680 	add.w	r6, r6, #1048576	; 0x100000
 8007a56:	4316      	orrs	r6, r2
 8007a58:	d103      	bne.n	8007a62 <__ieee754_atan2+0x52>
 8007a5a:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007a5e:	f7ff bdcf 	b.w	8007600 <atan>
 8007a62:	179e      	asrs	r6, r3, #30
 8007a64:	f006 0602 	and.w	r6, r6, #2
 8007a68:	ea46 76d1 	orr.w	r6, r6, r1, lsr #31
 8007a6c:	ea57 0100 	orrs.w	r1, r7, r0
 8007a70:	d107      	bne.n	8007a82 <__ieee754_atan2+0x72>
 8007a72:	2e02      	cmp	r6, #2
 8007a74:	d079      	beq.n	8007b6a <__ieee754_atan2+0x15a>
 8007a76:	2e03      	cmp	r6, #3
 8007a78:	d11a      	bne.n	8007ab0 <__ieee754_atan2+0xa0>
 8007a7a:	a541      	add	r5, pc, #260	; (adr r5, 8007b80 <__ieee754_atan2+0x170>)
 8007a7c:	e9d5 4500 	ldrd	r4, r5, [r5]
 8007a80:	e016      	b.n	8007ab0 <__ieee754_atan2+0xa0>
 8007a82:	ea5c 0102 	orrs.w	r1, ip, r2
 8007a86:	d106      	bne.n	8007a96 <__ieee754_atan2+0x86>
 8007a88:	f1b8 0f00 	cmp.w	r8, #0
 8007a8c:	da71      	bge.n	8007b72 <__ieee754_atan2+0x162>
 8007a8e:	a53e      	add	r5, pc, #248	; (adr r5, 8007b88 <__ieee754_atan2+0x178>)
 8007a90:	e9d5 4500 	ldrd	r4, r5, [r5]
 8007a94:	e00c      	b.n	8007ab0 <__ieee754_atan2+0xa0>
 8007a96:	45cc      	cmp	ip, r9
 8007a98:	d123      	bne.n	8007ae2 <__ieee754_atan2+0xd2>
 8007a9a:	4567      	cmp	r7, ip
 8007a9c:	d114      	bne.n	8007ac8 <__ieee754_atan2+0xb8>
 8007a9e:	2e02      	cmp	r6, #2
 8007aa0:	d00a      	beq.n	8007ab8 <__ieee754_atan2+0xa8>
 8007aa2:	2e03      	cmp	r6, #3
 8007aa4:	d00c      	beq.n	8007ac0 <__ieee754_atan2+0xb0>
 8007aa6:	2e01      	cmp	r6, #1
 8007aa8:	d15b      	bne.n	8007b62 <__ieee754_atan2+0x152>
 8007aaa:	a539      	add	r5, pc, #228	; (adr r5, 8007b90 <__ieee754_atan2+0x180>)
 8007aac:	e9d5 4500 	ldrd	r4, r5, [r5]
 8007ab0:	4620      	mov	r0, r4
 8007ab2:	4629      	mov	r1, r5
 8007ab4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007ab8:	a537      	add	r5, pc, #220	; (adr r5, 8007b98 <__ieee754_atan2+0x188>)
 8007aba:	e9d5 4500 	ldrd	r4, r5, [r5]
 8007abe:	e7f7      	b.n	8007ab0 <__ieee754_atan2+0xa0>
 8007ac0:	a537      	add	r5, pc, #220	; (adr r5, 8007ba0 <__ieee754_atan2+0x190>)
 8007ac2:	e9d5 4500 	ldrd	r4, r5, [r5]
 8007ac6:	e7f3      	b.n	8007ab0 <__ieee754_atan2+0xa0>
 8007ac8:	2e02      	cmp	r6, #2
 8007aca:	d04e      	beq.n	8007b6a <__ieee754_atan2+0x15a>
 8007acc:	2e03      	cmp	r6, #3
 8007ace:	d0d4      	beq.n	8007a7a <__ieee754_atan2+0x6a>
 8007ad0:	2e01      	cmp	r6, #1
 8007ad2:	f04f 0400 	mov.w	r4, #0
 8007ad6:	d102      	bne.n	8007ade <__ieee754_atan2+0xce>
 8007ad8:	f04f 4500 	mov.w	r5, #2147483648	; 0x80000000
 8007adc:	e7e8      	b.n	8007ab0 <__ieee754_atan2+0xa0>
 8007ade:	2500      	movs	r5, #0
 8007ae0:	e7e6      	b.n	8007ab0 <__ieee754_atan2+0xa0>
 8007ae2:	454f      	cmp	r7, r9
 8007ae4:	d0d0      	beq.n	8007a88 <__ieee754_atan2+0x78>
 8007ae6:	eba7 070c 	sub.w	r7, r7, ip
 8007aea:	153f      	asrs	r7, r7, #20
 8007aec:	2f3c      	cmp	r7, #60	; 0x3c
 8007aee:	dc1e      	bgt.n	8007b2e <__ieee754_atan2+0x11e>
 8007af0:	2b00      	cmp	r3, #0
 8007af2:	da01      	bge.n	8007af8 <__ieee754_atan2+0xe8>
 8007af4:	373c      	adds	r7, #60	; 0x3c
 8007af6:	db1e      	blt.n	8007b36 <__ieee754_atan2+0x126>
 8007af8:	4620      	mov	r0, r4
 8007afa:	4629      	mov	r1, r5
 8007afc:	f7f8 fe16 	bl	800072c <__aeabi_ddiv>
 8007b00:	f7ff ff08 	bl	8007914 <fabs>
 8007b04:	f7ff fd7c 	bl	8007600 <atan>
 8007b08:	4604      	mov	r4, r0
 8007b0a:	460d      	mov	r5, r1
 8007b0c:	2e01      	cmp	r6, #1
 8007b0e:	d015      	beq.n	8007b3c <__ieee754_atan2+0x12c>
 8007b10:	2e02      	cmp	r6, #2
 8007b12:	d017      	beq.n	8007b44 <__ieee754_atan2+0x134>
 8007b14:	2e00      	cmp	r6, #0
 8007b16:	d0cb      	beq.n	8007ab0 <__ieee754_atan2+0xa0>
 8007b18:	a323      	add	r3, pc, #140	; (adr r3, 8007ba8 <__ieee754_atan2+0x198>)
 8007b1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b1e:	4620      	mov	r0, r4
 8007b20:	4629      	mov	r1, r5
 8007b22:	f7f8 fb21 	bl	8000168 <__aeabi_dsub>
 8007b26:	a322      	add	r3, pc, #136	; (adr r3, 8007bb0 <__ieee754_atan2+0x1a0>)
 8007b28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b2c:	e016      	b.n	8007b5c <__ieee754_atan2+0x14c>
 8007b2e:	a522      	add	r5, pc, #136	; (adr r5, 8007bb8 <__ieee754_atan2+0x1a8>)
 8007b30:	e9d5 4500 	ldrd	r4, r5, [r5]
 8007b34:	e7ea      	b.n	8007b0c <__ieee754_atan2+0xfc>
 8007b36:	2400      	movs	r4, #0
 8007b38:	2500      	movs	r5, #0
 8007b3a:	e7e7      	b.n	8007b0c <__ieee754_atan2+0xfc>
 8007b3c:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 8007b40:	461d      	mov	r5, r3
 8007b42:	e7b5      	b.n	8007ab0 <__ieee754_atan2+0xa0>
 8007b44:	a318      	add	r3, pc, #96	; (adr r3, 8007ba8 <__ieee754_atan2+0x198>)
 8007b46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b4a:	4620      	mov	r0, r4
 8007b4c:	4629      	mov	r1, r5
 8007b4e:	f7f8 fb0b 	bl	8000168 <__aeabi_dsub>
 8007b52:	4602      	mov	r2, r0
 8007b54:	460b      	mov	r3, r1
 8007b56:	a116      	add	r1, pc, #88	; (adr r1, 8007bb0 <__ieee754_atan2+0x1a0>)
 8007b58:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007b5c:	f7f8 fb04 	bl	8000168 <__aeabi_dsub>
 8007b60:	e772      	b.n	8007a48 <__ieee754_atan2+0x38>
 8007b62:	a517      	add	r5, pc, #92	; (adr r5, 8007bc0 <__ieee754_atan2+0x1b0>)
 8007b64:	e9d5 4500 	ldrd	r4, r5, [r5]
 8007b68:	e7a2      	b.n	8007ab0 <__ieee754_atan2+0xa0>
 8007b6a:	a511      	add	r5, pc, #68	; (adr r5, 8007bb0 <__ieee754_atan2+0x1a0>)
 8007b6c:	e9d5 4500 	ldrd	r4, r5, [r5]
 8007b70:	e79e      	b.n	8007ab0 <__ieee754_atan2+0xa0>
 8007b72:	a511      	add	r5, pc, #68	; (adr r5, 8007bb8 <__ieee754_atan2+0x1a8>)
 8007b74:	e9d5 4500 	ldrd	r4, r5, [r5]
 8007b78:	e79a      	b.n	8007ab0 <__ieee754_atan2+0xa0>
 8007b7a:	bf00      	nop
 8007b7c:	f3af 8000 	nop.w
 8007b80:	54442d18 	.word	0x54442d18
 8007b84:	c00921fb 	.word	0xc00921fb
 8007b88:	54442d18 	.word	0x54442d18
 8007b8c:	bff921fb 	.word	0xbff921fb
 8007b90:	54442d18 	.word	0x54442d18
 8007b94:	bfe921fb 	.word	0xbfe921fb
 8007b98:	7f3321d2 	.word	0x7f3321d2
 8007b9c:	4002d97c 	.word	0x4002d97c
 8007ba0:	7f3321d2 	.word	0x7f3321d2
 8007ba4:	c002d97c 	.word	0xc002d97c
 8007ba8:	33145c07 	.word	0x33145c07
 8007bac:	3ca1a626 	.word	0x3ca1a626
 8007bb0:	54442d18 	.word	0x54442d18
 8007bb4:	400921fb 	.word	0x400921fb
 8007bb8:	54442d18 	.word	0x54442d18
 8007bbc:	3ff921fb 	.word	0x3ff921fb
 8007bc0:	54442d18 	.word	0x54442d18
 8007bc4:	3fe921fb 	.word	0x3fe921fb
 8007bc8:	7ff00000 	.word	0x7ff00000

08007bcc <__ieee754_sqrt>:
 8007bcc:	4b54      	ldr	r3, [pc, #336]	; (8007d20 <__ieee754_sqrt+0x154>)
 8007bce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007bd2:	438b      	bics	r3, r1
 8007bd4:	4606      	mov	r6, r0
 8007bd6:	460d      	mov	r5, r1
 8007bd8:	460a      	mov	r2, r1
 8007bda:	460c      	mov	r4, r1
 8007bdc:	d10f      	bne.n	8007bfe <__ieee754_sqrt+0x32>
 8007bde:	4602      	mov	r2, r0
 8007be0:	460b      	mov	r3, r1
 8007be2:	f7f8 fc79 	bl	80004d8 <__aeabi_dmul>
 8007be6:	4602      	mov	r2, r0
 8007be8:	460b      	mov	r3, r1
 8007bea:	4630      	mov	r0, r6
 8007bec:	4629      	mov	r1, r5
 8007bee:	f7f8 fabd 	bl	800016c <__adddf3>
 8007bf2:	4606      	mov	r6, r0
 8007bf4:	460d      	mov	r5, r1
 8007bf6:	4630      	mov	r0, r6
 8007bf8:	4629      	mov	r1, r5
 8007bfa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007bfe:	2900      	cmp	r1, #0
 8007c00:	4607      	mov	r7, r0
 8007c02:	4603      	mov	r3, r0
 8007c04:	dc0e      	bgt.n	8007c24 <__ieee754_sqrt+0x58>
 8007c06:	f021 4c00 	bic.w	ip, r1, #2147483648	; 0x80000000
 8007c0a:	ea5c 0707 	orrs.w	r7, ip, r7
 8007c0e:	d0f2      	beq.n	8007bf6 <__ieee754_sqrt+0x2a>
 8007c10:	b141      	cbz	r1, 8007c24 <__ieee754_sqrt+0x58>
 8007c12:	4602      	mov	r2, r0
 8007c14:	460b      	mov	r3, r1
 8007c16:	f7f8 faa7 	bl	8000168 <__aeabi_dsub>
 8007c1a:	4602      	mov	r2, r0
 8007c1c:	460b      	mov	r3, r1
 8007c1e:	f7f8 fd85 	bl	800072c <__aeabi_ddiv>
 8007c22:	e7e6      	b.n	8007bf2 <__ieee754_sqrt+0x26>
 8007c24:	1512      	asrs	r2, r2, #20
 8007c26:	d074      	beq.n	8007d12 <__ieee754_sqrt+0x146>
 8007c28:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 8007c2c:	07d5      	lsls	r5, r2, #31
 8007c2e:	f04f 0500 	mov.w	r5, #0
 8007c32:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8007c36:	bf48      	it	mi
 8007c38:	0fd9      	lsrmi	r1, r3, #31
 8007c3a:	f444 1480 	orr.w	r4, r4, #1048576	; 0x100000
 8007c3e:	bf44      	itt	mi
 8007c40:	005b      	lslmi	r3, r3, #1
 8007c42:	eb01 0444 	addmi.w	r4, r1, r4, lsl #1
 8007c46:	1051      	asrs	r1, r2, #1
 8007c48:	0fda      	lsrs	r2, r3, #31
 8007c4a:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 8007c4e:	4628      	mov	r0, r5
 8007c50:	2216      	movs	r2, #22
 8007c52:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 8007c56:	005b      	lsls	r3, r3, #1
 8007c58:	1987      	adds	r7, r0, r6
 8007c5a:	42a7      	cmp	r7, r4
 8007c5c:	bfde      	ittt	le
 8007c5e:	19b8      	addle	r0, r7, r6
 8007c60:	1be4      	suble	r4, r4, r7
 8007c62:	19ad      	addle	r5, r5, r6
 8007c64:	0fdf      	lsrs	r7, r3, #31
 8007c66:	3a01      	subs	r2, #1
 8007c68:	eb07 0444 	add.w	r4, r7, r4, lsl #1
 8007c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8007c70:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8007c74:	d1f0      	bne.n	8007c58 <__ieee754_sqrt+0x8c>
 8007c76:	f04f 0c20 	mov.w	ip, #32
 8007c7a:	4696      	mov	lr, r2
 8007c7c:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8007c80:	4284      	cmp	r4, r0
 8007c82:	eb06 070e 	add.w	r7, r6, lr
 8007c86:	dc02      	bgt.n	8007c8e <__ieee754_sqrt+0xc2>
 8007c88:	d112      	bne.n	8007cb0 <__ieee754_sqrt+0xe4>
 8007c8a:	429f      	cmp	r7, r3
 8007c8c:	d810      	bhi.n	8007cb0 <__ieee754_sqrt+0xe4>
 8007c8e:	2f00      	cmp	r7, #0
 8007c90:	eb07 0e06 	add.w	lr, r7, r6
 8007c94:	da42      	bge.n	8007d1c <__ieee754_sqrt+0x150>
 8007c96:	f1be 0f00 	cmp.w	lr, #0
 8007c9a:	db3f      	blt.n	8007d1c <__ieee754_sqrt+0x150>
 8007c9c:	f100 0801 	add.w	r8, r0, #1
 8007ca0:	1a24      	subs	r4, r4, r0
 8007ca2:	4640      	mov	r0, r8
 8007ca4:	429f      	cmp	r7, r3
 8007ca6:	bf88      	it	hi
 8007ca8:	f104 34ff 	addhi.w	r4, r4, #4294967295
 8007cac:	1bdb      	subs	r3, r3, r7
 8007cae:	4432      	add	r2, r6
 8007cb0:	0064      	lsls	r4, r4, #1
 8007cb2:	f1bc 0c01 	subs.w	ip, ip, #1
 8007cb6:	eb04 74d3 	add.w	r4, r4, r3, lsr #31
 8007cba:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8007cbe:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8007cc2:	d1dd      	bne.n	8007c80 <__ieee754_sqrt+0xb4>
 8007cc4:	4323      	orrs	r3, r4
 8007cc6:	d006      	beq.n	8007cd6 <__ieee754_sqrt+0x10a>
 8007cc8:	1c54      	adds	r4, r2, #1
 8007cca:	bf0b      	itete	eq
 8007ccc:	4662      	moveq	r2, ip
 8007cce:	3201      	addne	r2, #1
 8007cd0:	3501      	addeq	r5, #1
 8007cd2:	f022 0201 	bicne.w	r2, r2, #1
 8007cd6:	106b      	asrs	r3, r5, #1
 8007cd8:	0852      	lsrs	r2, r2, #1
 8007cda:	07e8      	lsls	r0, r5, #31
 8007cdc:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8007ce0:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 8007ce4:	bf48      	it	mi
 8007ce6:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 8007cea:	eb03 5501 	add.w	r5, r3, r1, lsl #20
 8007cee:	4616      	mov	r6, r2
 8007cf0:	e781      	b.n	8007bf6 <__ieee754_sqrt+0x2a>
 8007cf2:	0adc      	lsrs	r4, r3, #11
 8007cf4:	3915      	subs	r1, #21
 8007cf6:	055b      	lsls	r3, r3, #21
 8007cf8:	2c00      	cmp	r4, #0
 8007cfa:	d0fa      	beq.n	8007cf2 <__ieee754_sqrt+0x126>
 8007cfc:	02e6      	lsls	r6, r4, #11
 8007cfe:	d50a      	bpl.n	8007d16 <__ieee754_sqrt+0x14a>
 8007d00:	f1c2 0020 	rsb	r0, r2, #32
 8007d04:	fa23 f000 	lsr.w	r0, r3, r0
 8007d08:	1e55      	subs	r5, r2, #1
 8007d0a:	4093      	lsls	r3, r2
 8007d0c:	4304      	orrs	r4, r0
 8007d0e:	1b4a      	subs	r2, r1, r5
 8007d10:	e78a      	b.n	8007c28 <__ieee754_sqrt+0x5c>
 8007d12:	4611      	mov	r1, r2
 8007d14:	e7f0      	b.n	8007cf8 <__ieee754_sqrt+0x12c>
 8007d16:	0064      	lsls	r4, r4, #1
 8007d18:	3201      	adds	r2, #1
 8007d1a:	e7ef      	b.n	8007cfc <__ieee754_sqrt+0x130>
 8007d1c:	4680      	mov	r8, r0
 8007d1e:	e7bf      	b.n	8007ca0 <__ieee754_sqrt+0xd4>
 8007d20:	7ff00000 	.word	0x7ff00000

08007d24 <matherr>:
 8007d24:	2000      	movs	r0, #0
 8007d26:	4770      	bx	lr

08007d28 <_init>:
 8007d28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007d2a:	bf00      	nop
 8007d2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007d2e:	bc08      	pop	{r3}
 8007d30:	469e      	mov	lr, r3
 8007d32:	4770      	bx	lr

08007d34 <_fini>:
 8007d34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007d36:	bf00      	nop
 8007d38:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007d3a:	bc08      	pop	{r3}
 8007d3c:	469e      	mov	lr, r3
 8007d3e:	4770      	bx	lr
