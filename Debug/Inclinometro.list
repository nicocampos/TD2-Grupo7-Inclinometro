
Inclinometro.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000070c8  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001630  080071d8  080071d8  000171d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008808  08008808  00020278  2**0
                  CONTENTS
  4 .ARM          00000000  08008808  08008808  00020278  2**0
                  CONTENTS
  5 .preinit_array 00000000  08008808  08008808  00020278  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008808  08008808  00018808  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800880c  0800880c  0001880c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000278  20000000  08008810  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000063c  20000278  08008a88  00020278  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  200008b4  08008a88  000208b4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020278  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b822  00000000  00000000  000202a1  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001ccd  00000000  00000000  0002bac3  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000870  00000000  00000000  0002d790  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000007a8  00000000  00000000  0002e000  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00015d45  00000000  00000000  0002e7a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00008300  00000000  00000000  000444ed  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00074ae9  00000000  00000000  0004c7ed  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000c12d6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002e4c  00000000  00000000  000c1354  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000278 	.word	0x20000278
 800012c:	00000000 	.word	0x00000000
 8000130:	080071c0 	.word	0x080071c0

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	2000027c 	.word	0x2000027c
 800014c:	080071c0 	.word	0x080071c0

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800029e:	f1a4 0401 	sub.w	r4, r4, #1
 80002a2:	d1e9      	bne.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2f>:
 8000a88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a8c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a90:	bf24      	itt	cs
 8000a92:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a96:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a9a:	d90d      	bls.n	8000ab8 <__aeabi_d2f+0x30>
 8000a9c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000aa0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000aa4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000aa8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000aac:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ab0:	bf08      	it	eq
 8000ab2:	f020 0001 	biceq.w	r0, r0, #1
 8000ab6:	4770      	bx	lr
 8000ab8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000abc:	d121      	bne.n	8000b02 <__aeabi_d2f+0x7a>
 8000abe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000ac2:	bfbc      	itt	lt
 8000ac4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000ac8:	4770      	bxlt	lr
 8000aca:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000ace:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ad2:	f1c2 0218 	rsb	r2, r2, #24
 8000ad6:	f1c2 0c20 	rsb	ip, r2, #32
 8000ada:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ade:	fa20 f002 	lsr.w	r0, r0, r2
 8000ae2:	bf18      	it	ne
 8000ae4:	f040 0001 	orrne.w	r0, r0, #1
 8000ae8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aec:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000af0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000af4:	ea40 000c 	orr.w	r0, r0, ip
 8000af8:	fa23 f302 	lsr.w	r3, r3, r2
 8000afc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b00:	e7cc      	b.n	8000a9c <__aeabi_d2f+0x14>
 8000b02:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b06:	d107      	bne.n	8000b18 <__aeabi_d2f+0x90>
 8000b08:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b0c:	bf1e      	ittt	ne
 8000b0e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b12:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b16:	4770      	bxne	lr
 8000b18:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b1c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b20:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b24:	4770      	bx	lr
 8000b26:	bf00      	nop

08000b28 <__aeabi_frsub>:
 8000b28:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b2c:	e002      	b.n	8000b34 <__addsf3>
 8000b2e:	bf00      	nop

08000b30 <__aeabi_fsub>:
 8000b30:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b34 <__addsf3>:
 8000b34:	0042      	lsls	r2, r0, #1
 8000b36:	bf1f      	itttt	ne
 8000b38:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b3c:	ea92 0f03 	teqne	r2, r3
 8000b40:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b44:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b48:	d06a      	beq.n	8000c20 <__addsf3+0xec>
 8000b4a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b4e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b52:	bfc1      	itttt	gt
 8000b54:	18d2      	addgt	r2, r2, r3
 8000b56:	4041      	eorgt	r1, r0
 8000b58:	4048      	eorgt	r0, r1
 8000b5a:	4041      	eorgt	r1, r0
 8000b5c:	bfb8      	it	lt
 8000b5e:	425b      	neglt	r3, r3
 8000b60:	2b19      	cmp	r3, #25
 8000b62:	bf88      	it	hi
 8000b64:	4770      	bxhi	lr
 8000b66:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000b6a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b6e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000b72:	bf18      	it	ne
 8000b74:	4240      	negne	r0, r0
 8000b76:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7a:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000b7e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000b82:	bf18      	it	ne
 8000b84:	4249      	negne	r1, r1
 8000b86:	ea92 0f03 	teq	r2, r3
 8000b8a:	d03f      	beq.n	8000c0c <__addsf3+0xd8>
 8000b8c:	f1a2 0201 	sub.w	r2, r2, #1
 8000b90:	fa41 fc03 	asr.w	ip, r1, r3
 8000b94:	eb10 000c 	adds.w	r0, r0, ip
 8000b98:	f1c3 0320 	rsb	r3, r3, #32
 8000b9c:	fa01 f103 	lsl.w	r1, r1, r3
 8000ba0:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000ba4:	d502      	bpl.n	8000bac <__addsf3+0x78>
 8000ba6:	4249      	negs	r1, r1
 8000ba8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bac:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000bb0:	d313      	bcc.n	8000bda <__addsf3+0xa6>
 8000bb2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000bb6:	d306      	bcc.n	8000bc6 <__addsf3+0x92>
 8000bb8:	0840      	lsrs	r0, r0, #1
 8000bba:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bbe:	f102 0201 	add.w	r2, r2, #1
 8000bc2:	2afe      	cmp	r2, #254	; 0xfe
 8000bc4:	d251      	bcs.n	8000c6a <__addsf3+0x136>
 8000bc6:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000bca:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000bce:	bf08      	it	eq
 8000bd0:	f020 0001 	biceq.w	r0, r0, #1
 8000bd4:	ea40 0003 	orr.w	r0, r0, r3
 8000bd8:	4770      	bx	lr
 8000bda:	0049      	lsls	r1, r1, #1
 8000bdc:	eb40 0000 	adc.w	r0, r0, r0
 8000be0:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 8000be4:	f1a2 0201 	sub.w	r2, r2, #1
 8000be8:	d1ed      	bne.n	8000bc6 <__addsf3+0x92>
 8000bea:	fab0 fc80 	clz	ip, r0
 8000bee:	f1ac 0c08 	sub.w	ip, ip, #8
 8000bf2:	ebb2 020c 	subs.w	r2, r2, ip
 8000bf6:	fa00 f00c 	lsl.w	r0, r0, ip
 8000bfa:	bfaa      	itet	ge
 8000bfc:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c00:	4252      	neglt	r2, r2
 8000c02:	4318      	orrge	r0, r3
 8000c04:	bfbc      	itt	lt
 8000c06:	40d0      	lsrlt	r0, r2
 8000c08:	4318      	orrlt	r0, r3
 8000c0a:	4770      	bx	lr
 8000c0c:	f092 0f00 	teq	r2, #0
 8000c10:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c14:	bf06      	itte	eq
 8000c16:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c1a:	3201      	addeq	r2, #1
 8000c1c:	3b01      	subne	r3, #1
 8000c1e:	e7b5      	b.n	8000b8c <__addsf3+0x58>
 8000c20:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c24:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c28:	bf18      	it	ne
 8000c2a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c2e:	d021      	beq.n	8000c74 <__addsf3+0x140>
 8000c30:	ea92 0f03 	teq	r2, r3
 8000c34:	d004      	beq.n	8000c40 <__addsf3+0x10c>
 8000c36:	f092 0f00 	teq	r2, #0
 8000c3a:	bf08      	it	eq
 8000c3c:	4608      	moveq	r0, r1
 8000c3e:	4770      	bx	lr
 8000c40:	ea90 0f01 	teq	r0, r1
 8000c44:	bf1c      	itt	ne
 8000c46:	2000      	movne	r0, #0
 8000c48:	4770      	bxne	lr
 8000c4a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c4e:	d104      	bne.n	8000c5a <__addsf3+0x126>
 8000c50:	0040      	lsls	r0, r0, #1
 8000c52:	bf28      	it	cs
 8000c54:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c58:	4770      	bx	lr
 8000c5a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c5e:	bf3c      	itt	cc
 8000c60:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000c64:	4770      	bxcc	lr
 8000c66:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c6a:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000c6e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c72:	4770      	bx	lr
 8000c74:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c78:	bf16      	itet	ne
 8000c7a:	4608      	movne	r0, r1
 8000c7c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c80:	4601      	movne	r1, r0
 8000c82:	0242      	lsls	r2, r0, #9
 8000c84:	bf06      	itte	eq
 8000c86:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c8a:	ea90 0f01 	teqeq	r0, r1
 8000c8e:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000c92:	4770      	bx	lr

08000c94 <__aeabi_ui2f>:
 8000c94:	f04f 0300 	mov.w	r3, #0
 8000c98:	e004      	b.n	8000ca4 <__aeabi_i2f+0x8>
 8000c9a:	bf00      	nop

08000c9c <__aeabi_i2f>:
 8000c9c:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000ca0:	bf48      	it	mi
 8000ca2:	4240      	negmi	r0, r0
 8000ca4:	ea5f 0c00 	movs.w	ip, r0
 8000ca8:	bf08      	it	eq
 8000caa:	4770      	bxeq	lr
 8000cac:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000cb0:	4601      	mov	r1, r0
 8000cb2:	f04f 0000 	mov.w	r0, #0
 8000cb6:	e01c      	b.n	8000cf2 <__aeabi_l2f+0x2a>

08000cb8 <__aeabi_ul2f>:
 8000cb8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cbc:	bf08      	it	eq
 8000cbe:	4770      	bxeq	lr
 8000cc0:	f04f 0300 	mov.w	r3, #0
 8000cc4:	e00a      	b.n	8000cdc <__aeabi_l2f+0x14>
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_l2f>:
 8000cc8:	ea50 0201 	orrs.w	r2, r0, r1
 8000ccc:	bf08      	it	eq
 8000cce:	4770      	bxeq	lr
 8000cd0:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000cd4:	d502      	bpl.n	8000cdc <__aeabi_l2f+0x14>
 8000cd6:	4240      	negs	r0, r0
 8000cd8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cdc:	ea5f 0c01 	movs.w	ip, r1
 8000ce0:	bf02      	ittt	eq
 8000ce2:	4684      	moveq	ip, r0
 8000ce4:	4601      	moveq	r1, r0
 8000ce6:	2000      	moveq	r0, #0
 8000ce8:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000cec:	bf08      	it	eq
 8000cee:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000cf2:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000cf6:	fabc f28c 	clz	r2, ip
 8000cfa:	3a08      	subs	r2, #8
 8000cfc:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d00:	db10      	blt.n	8000d24 <__aeabi_l2f+0x5c>
 8000d02:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d06:	4463      	add	r3, ip
 8000d08:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d0c:	f1c2 0220 	rsb	r2, r2, #32
 8000d10:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d14:	fa20 f202 	lsr.w	r2, r0, r2
 8000d18:	eb43 0002 	adc.w	r0, r3, r2
 8000d1c:	bf08      	it	eq
 8000d1e:	f020 0001 	biceq.w	r0, r0, #1
 8000d22:	4770      	bx	lr
 8000d24:	f102 0220 	add.w	r2, r2, #32
 8000d28:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d2c:	f1c2 0220 	rsb	r2, r2, #32
 8000d30:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d34:	fa21 f202 	lsr.w	r2, r1, r2
 8000d38:	eb43 0002 	adc.w	r0, r3, r2
 8000d3c:	bf08      	it	eq
 8000d3e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d42:	4770      	bx	lr

08000d44 <__aeabi_fmul>:
 8000d44:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d48:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d4c:	bf1e      	ittt	ne
 8000d4e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d52:	ea92 0f0c 	teqne	r2, ip
 8000d56:	ea93 0f0c 	teqne	r3, ip
 8000d5a:	d06f      	beq.n	8000e3c <__aeabi_fmul+0xf8>
 8000d5c:	441a      	add	r2, r3
 8000d5e:	ea80 0c01 	eor.w	ip, r0, r1
 8000d62:	0240      	lsls	r0, r0, #9
 8000d64:	bf18      	it	ne
 8000d66:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000d6a:	d01e      	beq.n	8000daa <__aeabi_fmul+0x66>
 8000d6c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000d70:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000d74:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000d78:	fba0 3101 	umull	r3, r1, r0, r1
 8000d7c:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000d80:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000d84:	bf3e      	ittt	cc
 8000d86:	0049      	lslcc	r1, r1, #1
 8000d88:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000d8c:	005b      	lslcc	r3, r3, #1
 8000d8e:	ea40 0001 	orr.w	r0, r0, r1
 8000d92:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000d96:	2afd      	cmp	r2, #253	; 0xfd
 8000d98:	d81d      	bhi.n	8000dd6 <__aeabi_fmul+0x92>
 8000d9a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000d9e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000da2:	bf08      	it	eq
 8000da4:	f020 0001 	biceq.w	r0, r0, #1
 8000da8:	4770      	bx	lr
 8000daa:	f090 0f00 	teq	r0, #0
 8000dae:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000db2:	bf08      	it	eq
 8000db4:	0249      	lsleq	r1, r1, #9
 8000db6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dba:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000dbe:	3a7f      	subs	r2, #127	; 0x7f
 8000dc0:	bfc2      	ittt	gt
 8000dc2:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000dc6:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000dca:	4770      	bxgt	lr
 8000dcc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000dd0:	f04f 0300 	mov.w	r3, #0
 8000dd4:	3a01      	subs	r2, #1
 8000dd6:	dc5d      	bgt.n	8000e94 <__aeabi_fmul+0x150>
 8000dd8:	f112 0f19 	cmn.w	r2, #25
 8000ddc:	bfdc      	itt	le
 8000dde:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000de2:	4770      	bxle	lr
 8000de4:	f1c2 0200 	rsb	r2, r2, #0
 8000de8:	0041      	lsls	r1, r0, #1
 8000dea:	fa21 f102 	lsr.w	r1, r1, r2
 8000dee:	f1c2 0220 	rsb	r2, r2, #32
 8000df2:	fa00 fc02 	lsl.w	ip, r0, r2
 8000df6:	ea5f 0031 	movs.w	r0, r1, rrx
 8000dfa:	f140 0000 	adc.w	r0, r0, #0
 8000dfe:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e02:	bf08      	it	eq
 8000e04:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e08:	4770      	bx	lr
 8000e0a:	f092 0f00 	teq	r2, #0
 8000e0e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e12:	bf02      	ittt	eq
 8000e14:	0040      	lsleq	r0, r0, #1
 8000e16:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e1a:	3a01      	subeq	r2, #1
 8000e1c:	d0f9      	beq.n	8000e12 <__aeabi_fmul+0xce>
 8000e1e:	ea40 000c 	orr.w	r0, r0, ip
 8000e22:	f093 0f00 	teq	r3, #0
 8000e26:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e2a:	bf02      	ittt	eq
 8000e2c:	0049      	lsleq	r1, r1, #1
 8000e2e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e32:	3b01      	subeq	r3, #1
 8000e34:	d0f9      	beq.n	8000e2a <__aeabi_fmul+0xe6>
 8000e36:	ea41 010c 	orr.w	r1, r1, ip
 8000e3a:	e78f      	b.n	8000d5c <__aeabi_fmul+0x18>
 8000e3c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e40:	ea92 0f0c 	teq	r2, ip
 8000e44:	bf18      	it	ne
 8000e46:	ea93 0f0c 	teqne	r3, ip
 8000e4a:	d00a      	beq.n	8000e62 <__aeabi_fmul+0x11e>
 8000e4c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e50:	bf18      	it	ne
 8000e52:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e56:	d1d8      	bne.n	8000e0a <__aeabi_fmul+0xc6>
 8000e58:	ea80 0001 	eor.w	r0, r0, r1
 8000e5c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e60:	4770      	bx	lr
 8000e62:	f090 0f00 	teq	r0, #0
 8000e66:	bf17      	itett	ne
 8000e68:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000e6c:	4608      	moveq	r0, r1
 8000e6e:	f091 0f00 	teqne	r1, #0
 8000e72:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000e76:	d014      	beq.n	8000ea2 <__aeabi_fmul+0x15e>
 8000e78:	ea92 0f0c 	teq	r2, ip
 8000e7c:	d101      	bne.n	8000e82 <__aeabi_fmul+0x13e>
 8000e7e:	0242      	lsls	r2, r0, #9
 8000e80:	d10f      	bne.n	8000ea2 <__aeabi_fmul+0x15e>
 8000e82:	ea93 0f0c 	teq	r3, ip
 8000e86:	d103      	bne.n	8000e90 <__aeabi_fmul+0x14c>
 8000e88:	024b      	lsls	r3, r1, #9
 8000e8a:	bf18      	it	ne
 8000e8c:	4608      	movne	r0, r1
 8000e8e:	d108      	bne.n	8000ea2 <__aeabi_fmul+0x15e>
 8000e90:	ea80 0001 	eor.w	r0, r0, r1
 8000e94:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e98:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e9c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ea0:	4770      	bx	lr
 8000ea2:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ea6:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000eaa:	4770      	bx	lr

08000eac <__aeabi_fdiv>:
 8000eac:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000eb0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000eb4:	bf1e      	ittt	ne
 8000eb6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000eba:	ea92 0f0c 	teqne	r2, ip
 8000ebe:	ea93 0f0c 	teqne	r3, ip
 8000ec2:	d069      	beq.n	8000f98 <__aeabi_fdiv+0xec>
 8000ec4:	eba2 0203 	sub.w	r2, r2, r3
 8000ec8:	ea80 0c01 	eor.w	ip, r0, r1
 8000ecc:	0249      	lsls	r1, r1, #9
 8000ece:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000ed2:	d037      	beq.n	8000f44 <__aeabi_fdiv+0x98>
 8000ed4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000ed8:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000edc:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000ee0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000ee4:	428b      	cmp	r3, r1
 8000ee6:	bf38      	it	cc
 8000ee8:	005b      	lslcc	r3, r3, #1
 8000eea:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000eee:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000ef2:	428b      	cmp	r3, r1
 8000ef4:	bf24      	itt	cs
 8000ef6:	1a5b      	subcs	r3, r3, r1
 8000ef8:	ea40 000c 	orrcs.w	r0, r0, ip
 8000efc:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f00:	bf24      	itt	cs
 8000f02:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f06:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f0a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f0e:	bf24      	itt	cs
 8000f10:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f14:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f18:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f1c:	bf24      	itt	cs
 8000f1e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f22:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f26:	011b      	lsls	r3, r3, #4
 8000f28:	bf18      	it	ne
 8000f2a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f2e:	d1e0      	bne.n	8000ef2 <__aeabi_fdiv+0x46>
 8000f30:	2afd      	cmp	r2, #253	; 0xfd
 8000f32:	f63f af50 	bhi.w	8000dd6 <__aeabi_fmul+0x92>
 8000f36:	428b      	cmp	r3, r1
 8000f38:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f3c:	bf08      	it	eq
 8000f3e:	f020 0001 	biceq.w	r0, r0, #1
 8000f42:	4770      	bx	lr
 8000f44:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000f48:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f4c:	327f      	adds	r2, #127	; 0x7f
 8000f4e:	bfc2      	ittt	gt
 8000f50:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000f54:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f58:	4770      	bxgt	lr
 8000f5a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f5e:	f04f 0300 	mov.w	r3, #0
 8000f62:	3a01      	subs	r2, #1
 8000f64:	e737      	b.n	8000dd6 <__aeabi_fmul+0x92>
 8000f66:	f092 0f00 	teq	r2, #0
 8000f6a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000f6e:	bf02      	ittt	eq
 8000f70:	0040      	lsleq	r0, r0, #1
 8000f72:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000f76:	3a01      	subeq	r2, #1
 8000f78:	d0f9      	beq.n	8000f6e <__aeabi_fdiv+0xc2>
 8000f7a:	ea40 000c 	orr.w	r0, r0, ip
 8000f7e:	f093 0f00 	teq	r3, #0
 8000f82:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000f86:	bf02      	ittt	eq
 8000f88:	0049      	lsleq	r1, r1, #1
 8000f8a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000f8e:	3b01      	subeq	r3, #1
 8000f90:	d0f9      	beq.n	8000f86 <__aeabi_fdiv+0xda>
 8000f92:	ea41 010c 	orr.w	r1, r1, ip
 8000f96:	e795      	b.n	8000ec4 <__aeabi_fdiv+0x18>
 8000f98:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f9c:	ea92 0f0c 	teq	r2, ip
 8000fa0:	d108      	bne.n	8000fb4 <__aeabi_fdiv+0x108>
 8000fa2:	0242      	lsls	r2, r0, #9
 8000fa4:	f47f af7d 	bne.w	8000ea2 <__aeabi_fmul+0x15e>
 8000fa8:	ea93 0f0c 	teq	r3, ip
 8000fac:	f47f af70 	bne.w	8000e90 <__aeabi_fmul+0x14c>
 8000fb0:	4608      	mov	r0, r1
 8000fb2:	e776      	b.n	8000ea2 <__aeabi_fmul+0x15e>
 8000fb4:	ea93 0f0c 	teq	r3, ip
 8000fb8:	d104      	bne.n	8000fc4 <__aeabi_fdiv+0x118>
 8000fba:	024b      	lsls	r3, r1, #9
 8000fbc:	f43f af4c 	beq.w	8000e58 <__aeabi_fmul+0x114>
 8000fc0:	4608      	mov	r0, r1
 8000fc2:	e76e      	b.n	8000ea2 <__aeabi_fmul+0x15e>
 8000fc4:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000fc8:	bf18      	it	ne
 8000fca:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000fce:	d1ca      	bne.n	8000f66 <__aeabi_fdiv+0xba>
 8000fd0:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000fd4:	f47f af5c 	bne.w	8000e90 <__aeabi_fmul+0x14c>
 8000fd8:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000fdc:	f47f af3c 	bne.w	8000e58 <__aeabi_fmul+0x114>
 8000fe0:	e75f      	b.n	8000ea2 <__aeabi_fmul+0x15e>
 8000fe2:	bf00      	nop

08000fe4 <__gesf2>:
 8000fe4:	f04f 3cff 	mov.w	ip, #4294967295
 8000fe8:	e006      	b.n	8000ff8 <__cmpsf2+0x4>
 8000fea:	bf00      	nop

08000fec <__lesf2>:
 8000fec:	f04f 0c01 	mov.w	ip, #1
 8000ff0:	e002      	b.n	8000ff8 <__cmpsf2+0x4>
 8000ff2:	bf00      	nop

08000ff4 <__cmpsf2>:
 8000ff4:	f04f 0c01 	mov.w	ip, #1
 8000ff8:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000ffc:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001000:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8001004:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001008:	bf18      	it	ne
 800100a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800100e:	d011      	beq.n	8001034 <__cmpsf2+0x40>
 8001010:	b001      	add	sp, #4
 8001012:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8001016:	bf18      	it	ne
 8001018:	ea90 0f01 	teqne	r0, r1
 800101c:	bf58      	it	pl
 800101e:	ebb2 0003 	subspl.w	r0, r2, r3
 8001022:	bf88      	it	hi
 8001024:	17c8      	asrhi	r0, r1, #31
 8001026:	bf38      	it	cc
 8001028:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 800102c:	bf18      	it	ne
 800102e:	f040 0001 	orrne.w	r0, r0, #1
 8001032:	4770      	bx	lr
 8001034:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001038:	d102      	bne.n	8001040 <__cmpsf2+0x4c>
 800103a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 800103e:	d105      	bne.n	800104c <__cmpsf2+0x58>
 8001040:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001044:	d1e4      	bne.n	8001010 <__cmpsf2+0x1c>
 8001046:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800104a:	d0e1      	beq.n	8001010 <__cmpsf2+0x1c>
 800104c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8001050:	4770      	bx	lr
 8001052:	bf00      	nop

08001054 <__aeabi_cfrcmple>:
 8001054:	4684      	mov	ip, r0
 8001056:	4608      	mov	r0, r1
 8001058:	4661      	mov	r1, ip
 800105a:	e7ff      	b.n	800105c <__aeabi_cfcmpeq>

0800105c <__aeabi_cfcmpeq>:
 800105c:	b50f      	push	{r0, r1, r2, r3, lr}
 800105e:	f7ff ffc9 	bl	8000ff4 <__cmpsf2>
 8001062:	2800      	cmp	r0, #0
 8001064:	bf48      	it	mi
 8001066:	f110 0f00 	cmnmi.w	r0, #0
 800106a:	bd0f      	pop	{r0, r1, r2, r3, pc}

0800106c <__aeabi_fcmpeq>:
 800106c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001070:	f7ff fff4 	bl	800105c <__aeabi_cfcmpeq>
 8001074:	bf0c      	ite	eq
 8001076:	2001      	moveq	r0, #1
 8001078:	2000      	movne	r0, #0
 800107a:	f85d fb08 	ldr.w	pc, [sp], #8
 800107e:	bf00      	nop

08001080 <__aeabi_fcmplt>:
 8001080:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001084:	f7ff ffea 	bl	800105c <__aeabi_cfcmpeq>
 8001088:	bf34      	ite	cc
 800108a:	2001      	movcc	r0, #1
 800108c:	2000      	movcs	r0, #0
 800108e:	f85d fb08 	ldr.w	pc, [sp], #8
 8001092:	bf00      	nop

08001094 <__aeabi_fcmple>:
 8001094:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001098:	f7ff ffe0 	bl	800105c <__aeabi_cfcmpeq>
 800109c:	bf94      	ite	ls
 800109e:	2001      	movls	r0, #1
 80010a0:	2000      	movhi	r0, #0
 80010a2:	f85d fb08 	ldr.w	pc, [sp], #8
 80010a6:	bf00      	nop

080010a8 <__aeabi_fcmpge>:
 80010a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010ac:	f7ff ffd2 	bl	8001054 <__aeabi_cfrcmple>
 80010b0:	bf94      	ite	ls
 80010b2:	2001      	movls	r0, #1
 80010b4:	2000      	movhi	r0, #0
 80010b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80010ba:	bf00      	nop

080010bc <__aeabi_fcmpgt>:
 80010bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010c0:	f7ff ffc8 	bl	8001054 <__aeabi_cfrcmple>
 80010c4:	bf34      	ite	cc
 80010c6:	2001      	movcc	r0, #1
 80010c8:	2000      	movcs	r0, #0
 80010ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80010ce:	bf00      	nop

080010d0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80010d0:	b580      	push	{r7, lr}
 80010d2:	b086      	sub	sp, #24
 80010d4:	af04      	add	r7, sp, #16
  /* USER CODE BEGIN 1 */
	uint32_t tics_despachador;
	uint32_t wcet_todo = 0;
 80010d6:	2300      	movs	r3, #0
 80010d8:	607b      	str	r3, [r7, #4]

	/*
	 * Pongo en diez la variable que cuenta la cantidad de ticks que tienen
	 * que pasar entre llamadas del despachador.
	 */
	ticks = TICK_SISTEMA;
 80010da:	4b4b      	ldr	r3, [pc, #300]	; (8001208 <main+0x138>)
 80010dc:	220a      	movs	r2, #10
 80010de:	601a      	str	r2, [r3, #0]
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80010e0:	f001 fb5c 	bl	800279c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80010e4:	f000 fa3a 	bl	800155c <SystemClock_Config>

  /* Initialize all configured peripherals */
  /*
   * Inicializo todo el hardware.
   */
  dwt_init();
 80010e8:	4b48      	ldr	r3, [pc, #288]	; (800120c <main+0x13c>)
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	4a47      	ldr	r2, [pc, #284]	; (800120c <main+0x13c>)
 80010ee:	f043 0301 	orr.w	r3, r3, #1
 80010f2:	6013      	str	r3, [r2, #0]
 80010f4:	4b45      	ldr	r3, [pc, #276]	; (800120c <main+0x13c>)
 80010f6:	2200      	movs	r2, #0
 80010f8:	605a      	str	r2, [r3, #4]
  MX_GPIO_Init();
 80010fa:	f000 faa5 	bl	8001648 <MX_GPIO_Init>
  MX_I2C1_Init();
 80010fe:	f000 fa75 	bl	80015ec <MX_I2C1_Init>
  MPU6050_Init();
 8001102:	f000 f9db 	bl	80014bc <MPU6050_Init>
  SSD1306_Init();
 8001106:	f000 fe63 	bl	8001dd0 <SSD1306_Init>
  /* USER CODE BEGIN 2 */
	#ifdef __SET_IWDG
		MX_IWDG_Init();
	#endif
  /* USER CODE END 2 */
	HAL_GPIO_WritePin(GPIOC, Led_Blink_Pin, GPIO_PIN_RESET);
 800110a:	2200      	movs	r2, #0
 800110c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001110:	483f      	ldr	r0, [pc, #252]	; (8001210 <main+0x140>)
 8001112:	f001 fde3 	bl	8002cdc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, outputLed_Pin, GPIO_PIN_RESET);
 8001116:	2200      	movs	r2, #0
 8001118:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800111c:	483d      	ldr	r0, [pc, #244]	; (8001214 <main+0x144>)
 800111e:	f001 fddd 	bl	8002cdc <HAL_GPIO_WritePin>


	/*
	 * Uso el timer 2 para el monitor del sistema.
	 */
	RCC->APB1ENR |= RCC_APB1ENR_TIM2EN;
 8001122:	4b3d      	ldr	r3, [pc, #244]	; (8001218 <main+0x148>)
 8001124:	69db      	ldr	r3, [r3, #28]
 8001126:	4a3c      	ldr	r2, [pc, #240]	; (8001218 <main+0x148>)
 8001128:	f043 0301 	orr.w	r3, r3, #1
 800112c:	61d3      	str	r3, [r2, #28]
	/*
	 * Esta línea configura el prescaler del timer
	 * que cuenta tiempo del procesador. Prestar atención.
	 */
	TIM2->PSC = (SystemCoreClock / 1000000) - 1;
 800112e:	4b3b      	ldr	r3, [pc, #236]	; (800121c <main+0x14c>)
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	4a3b      	ldr	r2, [pc, #236]	; (8001220 <main+0x150>)
 8001134:	fba2 2303 	umull	r2, r3, r2, r3
 8001138:	0c9b      	lsrs	r3, r3, #18
 800113a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800113e:	3b01      	subs	r3, #1
 8001140:	6293      	str	r3, [r2, #40]	; 0x28
	TIM2->CNT = -1;
 8001142:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001146:	f04f 32ff 	mov.w	r2, #4294967295
 800114a:	625a      	str	r2, [r3, #36]	; 0x24
	TIM2->CR1 |= TIM_CR1_CEN;
 800114c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001156:	f043 0301 	orr.w	r3, r3, #1
 800115a:	6013      	str	r3, [r2, #0]
	TIM2->CR1 &= ~TIM_CR1_CEN;
 800115c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001166:	f023 0301 	bic.w	r3, r3, #1
 800116a:	6013      	str	r3, [r2, #0]
	 * un timer y otro para que me devuelva la cuenta y lo frene. El
	 * puntero restante es un puntero a función que se llama cuando
	 * hay falla en la medición de tiempos de las funciones.
	 *
	 */
	inicializar_despachador(lista_tareas,
 800116c:	4b2d      	ldr	r3, [pc, #180]	; (8001224 <main+0x154>)
 800116e:	9300      	str	r3, [sp, #0]
 8001170:	4b2d      	ldr	r3, [pc, #180]	; (8001228 <main+0x158>)
 8001172:	4a2e      	ldr	r2, [pc, #184]	; (800122c <main+0x15c>)
 8001174:	2108      	movs	r1, #8
 8001176:	482e      	ldr	r0, [pc, #184]	; (8001230 <main+0x160>)
 8001178:	f001 fa0a 	bl	8002590 <inicializar_despachador>
	MAX_LEN_TASK_LIST, start_timer, stop_timer, falla_sistema);

	//agregar_tarea(lista_tareas, tarea_iwdg, NULL, 0, 1, 0, 100000);
	agregar_tarea(lista_tareas, tarea_led_blinking, NULL, 0, 10, 0, 4); // et_wcet = 2
 800117c:	2304      	movs	r3, #4
 800117e:	9302      	str	r3, [sp, #8]
 8001180:	2300      	movs	r3, #0
 8001182:	9301      	str	r3, [sp, #4]
 8001184:	230a      	movs	r3, #10
 8001186:	9300      	str	r3, [sp, #0]
 8001188:	2300      	movs	r3, #0
 800118a:	2200      	movs	r2, #0
 800118c:	4929      	ldr	r1, [pc, #164]	; (8001234 <main+0x164>)
 800118e:	4828      	ldr	r0, [pc, #160]	; (8001230 <main+0x160>)
 8001190:	f001 fa3a 	bl	8002608 <agregar_tarea>
	agregar_tarea(lista_tareas, tarea_orienta, NULL, 0, 1, 0, 100000);   	// et_wcet = 464
 8001194:	4b28      	ldr	r3, [pc, #160]	; (8001238 <main+0x168>)
 8001196:	9302      	str	r3, [sp, #8]
 8001198:	2300      	movs	r3, #0
 800119a:	9301      	str	r3, [sp, #4]
 800119c:	2301      	movs	r3, #1
 800119e:	9300      	str	r3, [sp, #0]
 80011a0:	2300      	movs	r3, #0
 80011a2:	2200      	movs	r2, #0
 80011a4:	4925      	ldr	r1, [pc, #148]	; (800123c <main+0x16c>)
 80011a6:	4822      	ldr	r0, [pc, #136]	; (8001230 <main+0x160>)
 80011a8:	f001 fa2e 	bl	8002608 <agregar_tarea>
	agregar_tarea(lista_tareas, tarea_display, NULL, 0, 1, 0, 100000); 	// et_wcet = 7876
 80011ac:	4b22      	ldr	r3, [pc, #136]	; (8001238 <main+0x168>)
 80011ae:	9302      	str	r3, [sp, #8]
 80011b0:	2300      	movs	r3, #0
 80011b2:	9301      	str	r3, [sp, #4]
 80011b4:	2301      	movs	r3, #1
 80011b6:	9300      	str	r3, [sp, #0]
 80011b8:	2300      	movs	r3, #0
 80011ba:	2200      	movs	r2, #0
 80011bc:	4920      	ldr	r1, [pc, #128]	; (8001240 <main+0x170>)
 80011be:	481c      	ldr	r0, [pc, #112]	; (8001230 <main+0x160>)
 80011c0:	f001 fa22 	bl	8002608 <agregar_tarea>
    agregar_tarea(lista_tareas, tarea_refresh, NULL, 0, 1, 0, 100000);  	// et_wcet = 29771
 80011c4:	4b1c      	ldr	r3, [pc, #112]	; (8001238 <main+0x168>)
 80011c6:	9302      	str	r3, [sp, #8]
 80011c8:	2300      	movs	r3, #0
 80011ca:	9301      	str	r3, [sp, #4]
 80011cc:	2301      	movs	r3, #1
 80011ce:	9300      	str	r3, [sp, #0]
 80011d0:	2300      	movs	r3, #0
 80011d2:	2200      	movs	r2, #0
 80011d4:	491b      	ldr	r1, [pc, #108]	; (8001244 <main+0x174>)
 80011d6:	4816      	ldr	r0, [pc, #88]	; (8001230 <main+0x160>)
 80011d8:	f001 fa16 	bl	8002608 <agregar_tarea>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1)
	{
		dwt_reset();
 80011dc:	4b0b      	ldr	r3, [pc, #44]	; (800120c <main+0x13c>)
 80011de:	2200      	movs	r2, #0
 80011e0:	605a      	str	r2, [r3, #4]
		if (!ticks)
 80011e2:	4b09      	ldr	r3, [pc, #36]	; (8001208 <main+0x138>)
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d104      	bne.n	80011f4 <main+0x124>
		{
			ticks = TICK_SISTEMA;
 80011ea:	4b07      	ldr	r3, [pc, #28]	; (8001208 <main+0x138>)
 80011ec:	220a      	movs	r2, #10
 80011ee:	601a      	str	r2, [r3, #0]
			despachar_tareas();
 80011f0:	f001 faa6 	bl	8002740 <despachar_tareas>
		}
		tics_despachador = dwt_read();
 80011f4:	4b05      	ldr	r3, [pc, #20]	; (800120c <main+0x13c>)
 80011f6:	685b      	ldr	r3, [r3, #4]
 80011f8:	603b      	str	r3, [r7, #0]
		if (tics_despachador > wcet_todo)
 80011fa:	683a      	ldr	r2, [r7, #0]
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	429a      	cmp	r2, r3
 8001200:	d9ec      	bls.n	80011dc <main+0x10c>
			wcet_todo = tics_despachador;
 8001202:	683b      	ldr	r3, [r7, #0]
 8001204:	607b      	str	r3, [r7, #4]
		dwt_reset();
 8001206:	e7e9      	b.n	80011dc <main+0x10c>
 8001208:	20000798 	.word	0x20000798
 800120c:	e0001000 	.word	0xe0001000
 8001210:	40011000 	.word	0x40011000
 8001214:	40010c00 	.word	0x40010c00
 8001218:	40021000 	.word	0x40021000
 800121c:	20000098 	.word	0x20000098
 8001220:	431bde83 	.word	0x431bde83
 8001224:	0800143d 	.word	0x0800143d
 8001228:	08001491 	.word	0x08001491
 800122c:	0800146d 	.word	0x0800146d
 8001230:	200007a8 	.word	0x200007a8
 8001234:	08001409 	.word	0x08001409
 8001238:	000186a0 	.word	0x000186a0
 800123c:	080013e9 	.word	0x080013e9
 8001240:	08001249 	.word	0x08001249
 8001244:	08001429 	.word	0x08001429

08001248 <tarea_display>:
	}
  /* USER CODE END 3 */
}

void tarea_display(void *p)
{
 8001248:	b590      	push	{r4, r7, lr}
 800124a:	b08d      	sub	sp, #52	; 0x34
 800124c:	af00      	add	r7, sp, #0
 800124e:	6078      	str	r0, [r7, #4]
	char str_x[20];
	char str[20] = {0};
 8001250:	f107 0308 	add.w	r3, r7, #8
 8001254:	2200      	movs	r2, #0
 8001256:	601a      	str	r2, [r3, #0]
 8001258:	605a      	str	r2, [r3, #4]
 800125a:	609a      	str	r2, [r3, #8]
 800125c:	60da      	str	r2, [r3, #12]
 800125e:	611a      	str	r2, [r3, #16]

	if(cont >= PROMEDIO){
 8001260:	4b59      	ldr	r3, [pc, #356]	; (80013c8 <tarea_display+0x180>)
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	2b04      	cmp	r3, #4
 8001266:	f340 808f 	ble.w	8001388 <tarea_display+0x140>
		cont = 0;
 800126a:	4b57      	ldr	r3, [pc, #348]	; (80013c8 <tarea_display+0x180>)
 800126c:	2200      	movs	r2, #0
 800126e:	601a      	str	r2, [r3, #0]
		prom_x /= 10;
 8001270:	4b56      	ldr	r3, [pc, #344]	; (80013cc <tarea_display+0x184>)
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	4956      	ldr	r1, [pc, #344]	; (80013d0 <tarea_display+0x188>)
 8001276:	4618      	mov	r0, r3
 8001278:	f7ff fe18 	bl	8000eac <__aeabi_fdiv>
 800127c:	4603      	mov	r3, r0
 800127e:	461a      	mov	r2, r3
 8001280:	4b52      	ldr	r3, [pc, #328]	; (80013cc <tarea_display+0x184>)
 8001282:	601a      	str	r2, [r3, #0]
		// Chequeo signo
		if(prom_x < 0){
 8001284:	4b51      	ldr	r3, [pc, #324]	; (80013cc <tarea_display+0x184>)
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	f04f 0100 	mov.w	r1, #0
 800128c:	4618      	mov	r0, r3
 800128e:	f7ff fef7 	bl	8001080 <__aeabi_fcmplt>
 8001292:	4603      	mov	r3, r0
 8001294:	2b00      	cmp	r3, #0
 8001296:	d008      	beq.n	80012aa <tarea_display+0x62>
			prom_x = -prom_x;
 8001298:	4b4c      	ldr	r3, [pc, #304]	; (80013cc <tarea_display+0x184>)
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 80012a0:	4a4a      	ldr	r2, [pc, #296]	; (80013cc <tarea_display+0x184>)
 80012a2:	6013      	str	r3, [r2, #0]
			str[0] = 118; // v
 80012a4:	2376      	movs	r3, #118	; 0x76
 80012a6:	723b      	strb	r3, [r7, #8]
 80012a8:	e001      	b.n	80012ae <tarea_display+0x66>
		}
		else{
			str[0] = 94; // ^
 80012aa:	235e      	movs	r3, #94	; 0x5e
 80012ac:	723b      	strb	r3, [r7, #8]
		}
		// Redondeo
		if(prom_x >= 10 ){
 80012ae:	4b47      	ldr	r3, [pc, #284]	; (80013cc <tarea_display+0x184>)
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	4947      	ldr	r1, [pc, #284]	; (80013d0 <tarea_display+0x188>)
 80012b4:	4618      	mov	r0, r3
 80012b6:	f7ff fef7 	bl	80010a8 <__aeabi_fcmpge>
 80012ba:	4603      	mov	r3, r0
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d02f      	beq.n	8001320 <tarea_display+0xd8>
			SSD1306_GotoXY (POS_GRADOS);
 80012c0:	211e      	movs	r1, #30
 80012c2:	200a      	movs	r0, #10
 80012c4:	f000 ff02 	bl	80020cc <SSD1306_GotoXY>
			sprintf(str_x,"%.2f", roundf(prom_x * 100)/100);
 80012c8:	4b40      	ldr	r3, [pc, #256]	; (80013cc <tarea_display+0x184>)
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	4941      	ldr	r1, [pc, #260]	; (80013d4 <tarea_display+0x18c>)
 80012ce:	4618      	mov	r0, r3
 80012d0:	f7ff fd38 	bl	8000d44 <__aeabi_fmul>
 80012d4:	4603      	mov	r3, r0
 80012d6:	4618      	mov	r0, r3
 80012d8:	f005 fd6c 	bl	8006db4 <roundf>
 80012dc:	4603      	mov	r3, r0
 80012de:	493d      	ldr	r1, [pc, #244]	; (80013d4 <tarea_display+0x18c>)
 80012e0:	4618      	mov	r0, r3
 80012e2:	f7ff fde3 	bl	8000eac <__aeabi_fdiv>
 80012e6:	4603      	mov	r3, r0
 80012e8:	4618      	mov	r0, r3
 80012ea:	f7ff f89d 	bl	8000428 <__aeabi_f2d>
 80012ee:	4603      	mov	r3, r0
 80012f0:	460c      	mov	r4, r1
 80012f2:	f107 001c 	add.w	r0, r7, #28
 80012f6:	461a      	mov	r2, r3
 80012f8:	4623      	mov	r3, r4
 80012fa:	4937      	ldr	r1, [pc, #220]	; (80013d8 <tarea_display+0x190>)
 80012fc:	f003 ffcc 	bl	8005298 <siprintf>
			strcat(str, str_x);
 8001300:	f107 021c 	add.w	r2, r7, #28
 8001304:	f107 0308 	add.w	r3, r7, #8
 8001308:	4611      	mov	r1, r2
 800130a:	4618      	mov	r0, r3
 800130c:	f003 ffe4 	bl	80052d8 <strcat>
			SSD1306_Puts(str, &Font_16x26, 1);
 8001310:	f107 0308 	add.w	r3, r7, #8
 8001314:	2201      	movs	r2, #1
 8001316:	4931      	ldr	r1, [pc, #196]	; (80013dc <tarea_display+0x194>)
 8001318:	4618      	mov	r0, r3
 800131a:	f000 ff6d 	bl	80021f8 <SSD1306_Puts>
 800131e:	e02e      	b.n	800137e <tarea_display+0x136>
		}
		else{
			SSD1306_GotoXY (POS_GRADOS);
 8001320:	211e      	movs	r1, #30
 8001322:	200a      	movs	r0, #10
 8001324:	f000 fed2 	bl	80020cc <SSD1306_GotoXY>
			sprintf(str_x,"0%.2f", roundf(prom_x * 100)/100);
 8001328:	4b28      	ldr	r3, [pc, #160]	; (80013cc <tarea_display+0x184>)
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	4929      	ldr	r1, [pc, #164]	; (80013d4 <tarea_display+0x18c>)
 800132e:	4618      	mov	r0, r3
 8001330:	f7ff fd08 	bl	8000d44 <__aeabi_fmul>
 8001334:	4603      	mov	r3, r0
 8001336:	4618      	mov	r0, r3
 8001338:	f005 fd3c 	bl	8006db4 <roundf>
 800133c:	4603      	mov	r3, r0
 800133e:	4925      	ldr	r1, [pc, #148]	; (80013d4 <tarea_display+0x18c>)
 8001340:	4618      	mov	r0, r3
 8001342:	f7ff fdb3 	bl	8000eac <__aeabi_fdiv>
 8001346:	4603      	mov	r3, r0
 8001348:	4618      	mov	r0, r3
 800134a:	f7ff f86d 	bl	8000428 <__aeabi_f2d>
 800134e:	4603      	mov	r3, r0
 8001350:	460c      	mov	r4, r1
 8001352:	f107 001c 	add.w	r0, r7, #28
 8001356:	461a      	mov	r2, r3
 8001358:	4623      	mov	r3, r4
 800135a:	4921      	ldr	r1, [pc, #132]	; (80013e0 <tarea_display+0x198>)
 800135c:	f003 ff9c 	bl	8005298 <siprintf>
			strcat(str, str_x);
 8001360:	f107 021c 	add.w	r2, r7, #28
 8001364:	f107 0308 	add.w	r3, r7, #8
 8001368:	4611      	mov	r1, r2
 800136a:	4618      	mov	r0, r3
 800136c:	f003 ffb4 	bl	80052d8 <strcat>
			SSD1306_Puts(str, &Font_16x26, 1);
 8001370:	f107 0308 	add.w	r3, r7, #8
 8001374:	2201      	movs	r2, #1
 8001376:	4919      	ldr	r1, [pc, #100]	; (80013dc <tarea_display+0x194>)
 8001378:	4618      	mov	r0, r3
 800137a:	f000 ff3d 	bl	80021f8 <SSD1306_Puts>
		}
		prom_x = 0;
 800137e:	4b13      	ldr	r3, [pc, #76]	; (80013cc <tarea_display+0x184>)
 8001380:	f04f 0200 	mov.w	r2, #0
 8001384:	601a      	str	r2, [r3, #0]
		prom_x += MPU6050.KalmanAngleX;
		cont++;
	}


}
 8001386:	e01b      	b.n	80013c0 <tarea_display+0x178>
		prom_x += MPU6050.KalmanAngleX;
 8001388:	4b10      	ldr	r3, [pc, #64]	; (80013cc <tarea_display+0x184>)
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	4618      	mov	r0, r3
 800138e:	f7ff f84b 	bl	8000428 <__aeabi_f2d>
 8001392:	4b14      	ldr	r3, [pc, #80]	; (80013e4 <tarea_display+0x19c>)
 8001394:	f103 0448 	add.w	r4, r3, #72	; 0x48
 8001398:	e9d4 3400 	ldrd	r3, r4, [r4]
 800139c:	461a      	mov	r2, r3
 800139e:	4623      	mov	r3, r4
 80013a0:	f7fe fee4 	bl	800016c <__adddf3>
 80013a4:	4603      	mov	r3, r0
 80013a6:	460c      	mov	r4, r1
 80013a8:	4618      	mov	r0, r3
 80013aa:	4621      	mov	r1, r4
 80013ac:	f7ff fb6c 	bl	8000a88 <__aeabi_d2f>
 80013b0:	4602      	mov	r2, r0
 80013b2:	4b06      	ldr	r3, [pc, #24]	; (80013cc <tarea_display+0x184>)
 80013b4:	601a      	str	r2, [r3, #0]
		cont++;
 80013b6:	4b04      	ldr	r3, [pc, #16]	; (80013c8 <tarea_display+0x180>)
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	3301      	adds	r3, #1
 80013bc:	4a02      	ldr	r2, [pc, #8]	; (80013c8 <tarea_display+0x180>)
 80013be:	6013      	str	r3, [r2, #0]
}
 80013c0:	bf00      	nop
 80013c2:	3734      	adds	r7, #52	; 0x34
 80013c4:	46bd      	mov	sp, r7
 80013c6:	bd90      	pop	{r4, r7, pc}
 80013c8:	20000294 	.word	0x20000294
 80013cc:	20000298 	.word	0x20000298
 80013d0:	41200000 	.word	0x41200000
 80013d4:	42c80000 	.word	0x42c80000
 80013d8:	080071d8 	.word	0x080071d8
 80013dc:	20000000 	.word	0x20000000
 80013e0:	080071e0 	.word	0x080071e0
 80013e4:	20000730 	.word	0x20000730

080013e8 <tarea_orienta>:

void tarea_orienta(void *p)
{
 80013e8:	b580      	push	{r7, lr}
 80013ea:	b082      	sub	sp, #8
 80013ec:	af00      	add	r7, sp, #0
 80013ee:	6078      	str	r0, [r7, #4]
	MPU6050_Read_All(&hi2c1, &MPU6050);
 80013f0:	4903      	ldr	r1, [pc, #12]	; (8001400 <tarea_orienta+0x18>)
 80013f2:	4804      	ldr	r0, [pc, #16]	; (8001404 <tarea_orienta+0x1c>)
 80013f4:	f000 f9ac 	bl	8001750 <MPU6050_Read_All>
}
 80013f8:	bf00      	nop
 80013fa:	3708      	adds	r7, #8
 80013fc:	46bd      	mov	sp, r7
 80013fe:	bd80      	pop	{r7, pc}
 8001400:	20000730 	.word	0x20000730
 8001404:	200006dc 	.word	0x200006dc

08001408 <tarea_led_blinking>:
	HAL_IWDG_Refresh(&hiwdg);
#endif
}

void tarea_led_blinking(void *p)
{
 8001408:	b580      	push	{r7, lr}
 800140a:	b082      	sub	sp, #8
 800140c:	af00      	add	r7, sp, #0
 800140e:	6078      	str	r0, [r7, #4]
	HAL_GPIO_TogglePin(GPIOC, Led_Blink_Pin);
 8001410:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001414:	4803      	ldr	r0, [pc, #12]	; (8001424 <tarea_led_blinking+0x1c>)
 8001416:	f001 fc79 	bl	8002d0c <HAL_GPIO_TogglePin>
}
 800141a:	bf00      	nop
 800141c:	3708      	adds	r7, #8
 800141e:	46bd      	mov	sp, r7
 8001420:	bd80      	pop	{r7, pc}
 8001422:	bf00      	nop
 8001424:	40011000 	.word	0x40011000

08001428 <tarea_refresh>:


void tarea_refresh(void *p)
{
 8001428:	b580      	push	{r7, lr}
 800142a:	b082      	sub	sp, #8
 800142c:	af00      	add	r7, sp, #0
 800142e:	6078      	str	r0, [r7, #4]
	SSD1306_UpdateScreen();
 8001430:	f000 fd92 	bl	8001f58 <SSD1306_UpdateScreen>
}
 8001434:	bf00      	nop
 8001436:	3708      	adds	r7, #8
 8001438:	46bd      	mov	sp, r7
 800143a:	bd80      	pop	{r7, pc}

0800143c <falla_sistema>:

void falla_sistema(void)
{
 800143c:	b580      	push	{r7, lr}
 800143e:	b082      	sub	sp, #8
 8001440:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001442:	b672      	cpsid	i
	__disable_irq();
	while (1)
	{
		for (uint32_t i = 0; i < 100000; i++)
 8001444:	2300      	movs	r3, #0
 8001446:	607b      	str	r3, [r7, #4]
 8001448:	e002      	b.n	8001450 <falla_sistema+0x14>
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	3301      	adds	r3, #1
 800144e:	607b      	str	r3, [r7, #4]
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	4a04      	ldr	r2, [pc, #16]	; (8001464 <falla_sistema+0x28>)
 8001454:	4293      	cmp	r3, r2
 8001456:	d9f8      	bls.n	800144a <falla_sistema+0xe>
			;
		HAL_GPIO_TogglePin(GPIOC, Led_Blink_Pin);
 8001458:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800145c:	4802      	ldr	r0, [pc, #8]	; (8001468 <falla_sistema+0x2c>)
 800145e:	f001 fc55 	bl	8002d0c <HAL_GPIO_TogglePin>
		for (uint32_t i = 0; i < 100000; i++)
 8001462:	e7ef      	b.n	8001444 <falla_sistema+0x8>
 8001464:	0001869f 	.word	0x0001869f
 8001468:	40011000 	.word	0x40011000

0800146c <start_timer>:
	}
}

void start_timer(void)
{
 800146c:	b480      	push	{r7}
 800146e:	af00      	add	r7, sp, #0
	TIM2->CNT = 0;
 8001470:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001474:	2200      	movs	r2, #0
 8001476:	625a      	str	r2, [r3, #36]	; 0x24
	TIM2->CR1 |= TIM_CR1_CEN;
 8001478:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001482:	f043 0301 	orr.w	r3, r3, #1
 8001486:	6013      	str	r3, [r2, #0]
}
 8001488:	bf00      	nop
 800148a:	46bd      	mov	sp, r7
 800148c:	bc80      	pop	{r7}
 800148e:	4770      	bx	lr

08001490 <stop_timer>:

uint32_t stop_timer(void)
{
 8001490:	b480      	push	{r7}
 8001492:	b083      	sub	sp, #12
 8001494:	af00      	add	r7, sp, #0
	uint32_t ret = TIM2->CNT;
 8001496:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800149a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800149c:	607b      	str	r3, [r7, #4]
	TIM2->CR1 &= ~TIM_CR1_CEN;
 800149e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80014a8:	f023 0301 	bic.w	r3, r3, #1
 80014ac:	6013      	str	r3, [r2, #0]
	return ret;
 80014ae:	687b      	ldr	r3, [r7, #4]
}
 80014b0:	4618      	mov	r0, r3
 80014b2:	370c      	adds	r7, #12
 80014b4:	46bd      	mov	sp, r7
 80014b6:	bc80      	pop	{r7}
 80014b8:	4770      	bx	lr
	...

080014bc <MPU6050_Init>:
  * @brief MPU6050 Initialization Function
  * @param None
  * @retval None
  */
void MPU6050_Init(void)
{
 80014bc:	b580      	push	{r7, lr}
 80014be:	b086      	sub	sp, #24
 80014c0:	af04      	add	r7, sp, #16
	uint8_t check, Data;

	// Check device WHO I AM
	HAL_I2C_Mem_Read(&hi2c1, MPU6050_ADDR, MPU6050_RA_WHO_AM_I, 1, &check, 1, TIMEOUT_I2C);
 80014c2:	230a      	movs	r3, #10
 80014c4:	9302      	str	r3, [sp, #8]
 80014c6:	2301      	movs	r3, #1
 80014c8:	9301      	str	r3, [sp, #4]
 80014ca:	1dfb      	adds	r3, r7, #7
 80014cc:	9300      	str	r3, [sp, #0]
 80014ce:	2301      	movs	r3, #1
 80014d0:	2275      	movs	r2, #117	; 0x75
 80014d2:	21d0      	movs	r1, #208	; 0xd0
 80014d4:	4820      	ldr	r0, [pc, #128]	; (8001558 <MPU6050_Init+0x9c>)
 80014d6:	f001 ff51 	bl	800337c <HAL_I2C_Mem_Read>

	if(check == MPU6050_ADDRESS_AD0_LOW){	// if the device is present
 80014da:	79fb      	ldrb	r3, [r7, #7]
 80014dc:	2b68      	cmp	r3, #104	; 0x68
 80014de:	d137      	bne.n	8001550 <MPU6050_Init+0x94>
		// power management register 0X6B we should write all 0's to wake the sensor up
		Data = 0;
 80014e0:	2300      	movs	r3, #0
 80014e2:	71bb      	strb	r3, [r7, #6]
		HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, MPU6050_RA_PWR_MGMT_1, 1,&Data, 1, TIMEOUT_I2C);
 80014e4:	230a      	movs	r3, #10
 80014e6:	9302      	str	r3, [sp, #8]
 80014e8:	2301      	movs	r3, #1
 80014ea:	9301      	str	r3, [sp, #4]
 80014ec:	1dbb      	adds	r3, r7, #6
 80014ee:	9300      	str	r3, [sp, #0]
 80014f0:	2301      	movs	r3, #1
 80014f2:	226b      	movs	r2, #107	; 0x6b
 80014f4:	21d0      	movs	r1, #208	; 0xd0
 80014f6:	4818      	ldr	r0, [pc, #96]	; (8001558 <MPU6050_Init+0x9c>)
 80014f8:	f001 fe46 	bl	8003188 <HAL_I2C_Mem_Write>
		// Set DATA RATE of 1KHz by writing SMPLRT_DIV register
		Data = 0x07;
 80014fc:	2307      	movs	r3, #7
 80014fe:	71bb      	strb	r3, [r7, #6]
		HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, MPU6050_RA_SMPLRT_DIV, 1, &Data, 1, TIMEOUT_I2C);
 8001500:	230a      	movs	r3, #10
 8001502:	9302      	str	r3, [sp, #8]
 8001504:	2301      	movs	r3, #1
 8001506:	9301      	str	r3, [sp, #4]
 8001508:	1dbb      	adds	r3, r7, #6
 800150a:	9300      	str	r3, [sp, #0]
 800150c:	2301      	movs	r3, #1
 800150e:	2219      	movs	r2, #25
 8001510:	21d0      	movs	r1, #208	; 0xd0
 8001512:	4811      	ldr	r0, [pc, #68]	; (8001558 <MPU6050_Init+0x9c>)
 8001514:	f001 fe38 	bl	8003188 <HAL_I2C_Mem_Write>
		// Set accelerometer configuration in MPU6050_RA_ACCEL_CONFIG
		// XA_ST=0, YA_ST=0, ZA_ST=0, FS_SEL=0 -> +/- 2g
		Data = 0x00;
 8001518:	2300      	movs	r3, #0
 800151a:	71bb      	strb	r3, [r7, #6]
		HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, MPU6050_RA_ACCEL_CONFIG, 1,&Data, 1, TIMEOUT_I2C);
 800151c:	230a      	movs	r3, #10
 800151e:	9302      	str	r3, [sp, #8]
 8001520:	2301      	movs	r3, #1
 8001522:	9301      	str	r3, [sp, #4]
 8001524:	1dbb      	adds	r3, r7, #6
 8001526:	9300      	str	r3, [sp, #0]
 8001528:	2301      	movs	r3, #1
 800152a:	221c      	movs	r2, #28
 800152c:	21d0      	movs	r1, #208	; 0xd0
 800152e:	480a      	ldr	r0, [pc, #40]	; (8001558 <MPU6050_Init+0x9c>)
 8001530:	f001 fe2a 	bl	8003188 <HAL_I2C_Mem_Write>
		// Set Gyroscope configuration in MPU6050_RA_GYRO_CONFIG
		// XG_ST=0, YG_ST=0, ZG_ST=0, FS_SEL=0 -> +/- 250°/s
		Data = 0x00;
 8001534:	2300      	movs	r3, #0
 8001536:	71bb      	strb	r3, [r7, #6]
		HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, MPU6050_RA_GYRO_CONFIG, 1,&Data, 1, TIMEOUT_I2C);
 8001538:	230a      	movs	r3, #10
 800153a:	9302      	str	r3, [sp, #8]
 800153c:	2301      	movs	r3, #1
 800153e:	9301      	str	r3, [sp, #4]
 8001540:	1dbb      	adds	r3, r7, #6
 8001542:	9300      	str	r3, [sp, #0]
 8001544:	2301      	movs	r3, #1
 8001546:	221b      	movs	r2, #27
 8001548:	21d0      	movs	r1, #208	; 0xd0
 800154a:	4803      	ldr	r0, [pc, #12]	; (8001558 <MPU6050_Init+0x9c>)
 800154c:	f001 fe1c 	bl	8003188 <HAL_I2C_Mem_Write>
	}
}
 8001550:	bf00      	nop
 8001552:	3708      	adds	r7, #8
 8001554:	46bd      	mov	sp, r7
 8001556:	bd80      	pop	{r7, pc}
 8001558:	200006dc 	.word	0x200006dc

0800155c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800155c:	b580      	push	{r7, lr}
 800155e:	b090      	sub	sp, #64	; 0x40
 8001560:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001562:	f107 0318 	add.w	r3, r7, #24
 8001566:	2228      	movs	r2, #40	; 0x28
 8001568:	2100      	movs	r1, #0
 800156a:	4618      	mov	r0, r3
 800156c:	f003 fa3c 	bl	80049e8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001570:	1d3b      	adds	r3, r7, #4
 8001572:	2200      	movs	r2, #0
 8001574:	601a      	str	r2, [r3, #0]
 8001576:	605a      	str	r2, [r3, #4]
 8001578:	609a      	str	r2, [r3, #8]
 800157a:	60da      	str	r2, [r3, #12]
 800157c:	611a      	str	r2, [r3, #16]

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 800157e:	2309      	movs	r3, #9
 8001580:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001582:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001586:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001588:	2300      	movs	r3, #0
 800158a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800158c:	2301      	movs	r3, #1
 800158e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8001590:	2301      	movs	r3, #1
 8001592:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001594:	2302      	movs	r3, #2
 8001596:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001598:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800159c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL7;
 800159e:	f44f 13a0 	mov.w	r3, #1310720	; 0x140000
 80015a2:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80015a4:	f107 0318 	add.w	r3, r7, #24
 80015a8:	4618      	mov	r0, r3
 80015aa:	f002 fdeb 	bl	8004184 <HAL_RCC_OscConfig>
 80015ae:	4603      	mov	r3, r0
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d001      	beq.n	80015b8 <SystemClock_Config+0x5c>
  {
    Error_Handler();
 80015b4:	f000 f8c4 	bl	8001740 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80015b8:	230f      	movs	r3, #15
 80015ba:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80015bc:	2302      	movs	r3, #2
 80015be:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80015c0:	2300      	movs	r3, #0
 80015c2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80015c4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80015c8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80015ca:	2300      	movs	r3, #0
 80015cc:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80015ce:	1d3b      	adds	r3, r7, #4
 80015d0:	2102      	movs	r1, #2
 80015d2:	4618      	mov	r0, r3
 80015d4:	f003 f856 	bl	8004684 <HAL_RCC_ClockConfig>
 80015d8:	4603      	mov	r3, r0
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d001      	beq.n	80015e2 <SystemClock_Config+0x86>
  {
    Error_Handler();
 80015de:	f000 f8af 	bl	8001740 <Error_Handler>
  }
}
 80015e2:	bf00      	nop
 80015e4:	3740      	adds	r7, #64	; 0x40
 80015e6:	46bd      	mov	sp, r7
 80015e8:	bd80      	pop	{r7, pc}
	...

080015ec <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80015ec:	b580      	push	{r7, lr}
 80015ee:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80015f0:	4b12      	ldr	r3, [pc, #72]	; (800163c <MX_I2C1_Init+0x50>)
 80015f2:	4a13      	ldr	r2, [pc, #76]	; (8001640 <MX_I2C1_Init+0x54>)
 80015f4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 80015f6:	4b11      	ldr	r3, [pc, #68]	; (800163c <MX_I2C1_Init+0x50>)
 80015f8:	4a12      	ldr	r2, [pc, #72]	; (8001644 <MX_I2C1_Init+0x58>)
 80015fa:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80015fc:	4b0f      	ldr	r3, [pc, #60]	; (800163c <MX_I2C1_Init+0x50>)
 80015fe:	2200      	movs	r2, #0
 8001600:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001602:	4b0e      	ldr	r3, [pc, #56]	; (800163c <MX_I2C1_Init+0x50>)
 8001604:	2200      	movs	r2, #0
 8001606:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001608:	4b0c      	ldr	r3, [pc, #48]	; (800163c <MX_I2C1_Init+0x50>)
 800160a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800160e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001610:	4b0a      	ldr	r3, [pc, #40]	; (800163c <MX_I2C1_Init+0x50>)
 8001612:	2200      	movs	r2, #0
 8001614:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001616:	4b09      	ldr	r3, [pc, #36]	; (800163c <MX_I2C1_Init+0x50>)
 8001618:	2200      	movs	r2, #0
 800161a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800161c:	4b07      	ldr	r3, [pc, #28]	; (800163c <MX_I2C1_Init+0x50>)
 800161e:	2200      	movs	r2, #0
 8001620:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001622:	4b06      	ldr	r3, [pc, #24]	; (800163c <MX_I2C1_Init+0x50>)
 8001624:	2200      	movs	r2, #0
 8001626:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001628:	4804      	ldr	r0, [pc, #16]	; (800163c <MX_I2C1_Init+0x50>)
 800162a:	f001 fb87 	bl	8002d3c <HAL_I2C_Init>
 800162e:	4603      	mov	r3, r0
 8001630:	2b00      	cmp	r3, #0
 8001632:	d001      	beq.n	8001638 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001634:	f000 f884 	bl	8001740 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001638:	bf00      	nop
 800163a:	bd80      	pop	{r7, pc}
 800163c:	200006dc 	.word	0x200006dc
 8001640:	40005400 	.word	0x40005400
 8001644:	00061a80 	.word	0x00061a80

08001648 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001648:	b580      	push	{r7, lr}
 800164a:	b088      	sub	sp, #32
 800164c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800164e:	f107 0310 	add.w	r3, r7, #16
 8001652:	2200      	movs	r2, #0
 8001654:	601a      	str	r2, [r3, #0]
 8001656:	605a      	str	r2, [r3, #4]
 8001658:	609a      	str	r2, [r3, #8]
 800165a:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800165c:	4b35      	ldr	r3, [pc, #212]	; (8001734 <MX_GPIO_Init+0xec>)
 800165e:	699b      	ldr	r3, [r3, #24]
 8001660:	4a34      	ldr	r2, [pc, #208]	; (8001734 <MX_GPIO_Init+0xec>)
 8001662:	f043 0310 	orr.w	r3, r3, #16
 8001666:	6193      	str	r3, [r2, #24]
 8001668:	4b32      	ldr	r3, [pc, #200]	; (8001734 <MX_GPIO_Init+0xec>)
 800166a:	699b      	ldr	r3, [r3, #24]
 800166c:	f003 0310 	and.w	r3, r3, #16
 8001670:	60fb      	str	r3, [r7, #12]
 8001672:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001674:	4b2f      	ldr	r3, [pc, #188]	; (8001734 <MX_GPIO_Init+0xec>)
 8001676:	699b      	ldr	r3, [r3, #24]
 8001678:	4a2e      	ldr	r2, [pc, #184]	; (8001734 <MX_GPIO_Init+0xec>)
 800167a:	f043 0320 	orr.w	r3, r3, #32
 800167e:	6193      	str	r3, [r2, #24]
 8001680:	4b2c      	ldr	r3, [pc, #176]	; (8001734 <MX_GPIO_Init+0xec>)
 8001682:	699b      	ldr	r3, [r3, #24]
 8001684:	f003 0320 	and.w	r3, r3, #32
 8001688:	60bb      	str	r3, [r7, #8]
 800168a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800168c:	4b29      	ldr	r3, [pc, #164]	; (8001734 <MX_GPIO_Init+0xec>)
 800168e:	699b      	ldr	r3, [r3, #24]
 8001690:	4a28      	ldr	r2, [pc, #160]	; (8001734 <MX_GPIO_Init+0xec>)
 8001692:	f043 0308 	orr.w	r3, r3, #8
 8001696:	6193      	str	r3, [r2, #24]
 8001698:	4b26      	ldr	r3, [pc, #152]	; (8001734 <MX_GPIO_Init+0xec>)
 800169a:	699b      	ldr	r3, [r3, #24]
 800169c:	f003 0308 	and.w	r3, r3, #8
 80016a0:	607b      	str	r3, [r7, #4]
 80016a2:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80016a4:	4b23      	ldr	r3, [pc, #140]	; (8001734 <MX_GPIO_Init+0xec>)
 80016a6:	699b      	ldr	r3, [r3, #24]
 80016a8:	4a22      	ldr	r2, [pc, #136]	; (8001734 <MX_GPIO_Init+0xec>)
 80016aa:	f043 0304 	orr.w	r3, r3, #4
 80016ae:	6193      	str	r3, [r2, #24]
 80016b0:	4b20      	ldr	r3, [pc, #128]	; (8001734 <MX_GPIO_Init+0xec>)
 80016b2:	699b      	ldr	r3, [r3, #24]
 80016b4:	f003 0304 	and.w	r3, r3, #4
 80016b8:	603b      	str	r3, [r7, #0]
 80016ba:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Led_Blink_GPIO_Port, Led_Blink_Pin, GPIO_PIN_RESET);
 80016bc:	2200      	movs	r2, #0
 80016be:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80016c2:	481d      	ldr	r0, [pc, #116]	; (8001738 <MX_GPIO_Init+0xf0>)
 80016c4:	f001 fb0a 	bl	8002cdc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(outputLed_GPIO_Port, outputLed_Pin, GPIO_PIN_RESET);
 80016c8:	2200      	movs	r2, #0
 80016ca:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80016ce:	481b      	ldr	r0, [pc, #108]	; (800173c <MX_GPIO_Init+0xf4>)
 80016d0:	f001 fb04 	bl	8002cdc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : Led_Blink_Pin */
  GPIO_InitStruct.Pin = Led_Blink_Pin;
 80016d4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80016d8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016da:	2301      	movs	r3, #1
 80016dc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016de:	2300      	movs	r3, #0
 80016e0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016e2:	2302      	movs	r3, #2
 80016e4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Led_Blink_GPIO_Port, &GPIO_InitStruct);
 80016e6:	f107 0310 	add.w	r3, r7, #16
 80016ea:	4619      	mov	r1, r3
 80016ec:	4812      	ldr	r0, [pc, #72]	; (8001738 <MX_GPIO_Init+0xf0>)
 80016ee:	f001 f99b 	bl	8002a28 <HAL_GPIO_Init>

  /*Configure GPIO pins : inputHold_Pin inputZero_Pin inputAlarm_Pin */
  GPIO_InitStruct.Pin = inputHold_Pin|inputZero_Pin|inputAlarm_Pin;
 80016f2:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 80016f6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80016f8:	2300      	movs	r3, #0
 80016fa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016fc:	2300      	movs	r3, #0
 80016fe:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001700:	f107 0310 	add.w	r3, r7, #16
 8001704:	4619      	mov	r1, r3
 8001706:	480d      	ldr	r0, [pc, #52]	; (800173c <MX_GPIO_Init+0xf4>)
 8001708:	f001 f98e 	bl	8002a28 <HAL_GPIO_Init>

  /*Configure GPIO pin : ouputLed_Pin */
  GPIO_InitStruct.Pin = outputLed_Pin;
 800170c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001710:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001712:	2301      	movs	r3, #1
 8001714:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001716:	2300      	movs	r3, #0
 8001718:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800171a:	2302      	movs	r3, #2
 800171c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(outputLed_GPIO_Port, &GPIO_InitStruct);
 800171e:	f107 0310 	add.w	r3, r7, #16
 8001722:	4619      	mov	r1, r3
 8001724:	4805      	ldr	r0, [pc, #20]	; (800173c <MX_GPIO_Init+0xf4>)
 8001726:	f001 f97f 	bl	8002a28 <HAL_GPIO_Init>

}
 800172a:	bf00      	nop
 800172c:	3720      	adds	r7, #32
 800172e:	46bd      	mov	sp, r7
 8001730:	bd80      	pop	{r7, pc}
 8001732:	bf00      	nop
 8001734:	40021000 	.word	0x40021000
 8001738:	40011000 	.word	0x40011000
 800173c:	40010c00 	.word	0x40010c00

08001740 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001740:	b480      	push	{r7}
 8001742:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001744:	bf00      	nop
 8001746:	46bd      	mov	sp, r7
 8001748:	bc80      	pop	{r7}
 800174a:	4770      	bx	lr
 800174c:	0000      	movs	r0, r0
	...

08001750 <MPU6050_Read_All>:

    temp = (int16_t) (Rec_Data[0] << 8 | Rec_Data[1]);
    DataStruct->Temperature = (float) ((int16_t) temp / (float) 340.0 + (float) 36.53);
}

void MPU6050_Read_All(I2C_HandleTypeDef *I2Cx, MPU6050_t *DataStruct) {
 8001750:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001754:	b094      	sub	sp, #80	; 0x50
 8001756:	af04      	add	r7, sp, #16
 8001758:	6078      	str	r0, [r7, #4]
 800175a:	6039      	str	r1, [r7, #0]
    uint8_t Rec_Data[14];
    int16_t temp;

    // Read 14 BYTES of data starting from ACCEL_XOUT_H register

    HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDR, ACCEL_XOUT_H_REG, 1, Rec_Data, 14, i2c_timeout);
 800175c:	2364      	movs	r3, #100	; 0x64
 800175e:	9302      	str	r3, [sp, #8]
 8001760:	230e      	movs	r3, #14
 8001762:	9301      	str	r3, [sp, #4]
 8001764:	f107 0308 	add.w	r3, r7, #8
 8001768:	9300      	str	r3, [sp, #0]
 800176a:	2301      	movs	r3, #1
 800176c:	223b      	movs	r2, #59	; 0x3b
 800176e:	21d0      	movs	r1, #208	; 0xd0
 8001770:	6878      	ldr	r0, [r7, #4]
 8001772:	f001 fe03 	bl	800337c <HAL_I2C_Mem_Read>

    DataStruct->Accel_X_RAW = (int16_t) (Rec_Data[0] << 8 | Rec_Data[1]);
 8001776:	7a3b      	ldrb	r3, [r7, #8]
 8001778:	021b      	lsls	r3, r3, #8
 800177a:	b21a      	sxth	r2, r3
 800177c:	7a7b      	ldrb	r3, [r7, #9]
 800177e:	b21b      	sxth	r3, r3
 8001780:	4313      	orrs	r3, r2
 8001782:	b21a      	sxth	r2, r3
 8001784:	683b      	ldr	r3, [r7, #0]
 8001786:	801a      	strh	r2, [r3, #0]
    DataStruct->Accel_Y_RAW = (int16_t) (Rec_Data[2] << 8 | Rec_Data[3]);
 8001788:	7abb      	ldrb	r3, [r7, #10]
 800178a:	021b      	lsls	r3, r3, #8
 800178c:	b21a      	sxth	r2, r3
 800178e:	7afb      	ldrb	r3, [r7, #11]
 8001790:	b21b      	sxth	r3, r3
 8001792:	4313      	orrs	r3, r2
 8001794:	b21a      	sxth	r2, r3
 8001796:	683b      	ldr	r3, [r7, #0]
 8001798:	805a      	strh	r2, [r3, #2]
    DataStruct->Accel_Z_RAW = (int16_t) (Rec_Data[4] << 8 | Rec_Data[5]);
 800179a:	7b3b      	ldrb	r3, [r7, #12]
 800179c:	021b      	lsls	r3, r3, #8
 800179e:	b21a      	sxth	r2, r3
 80017a0:	7b7b      	ldrb	r3, [r7, #13]
 80017a2:	b21b      	sxth	r3, r3
 80017a4:	4313      	orrs	r3, r2
 80017a6:	b21a      	sxth	r2, r3
 80017a8:	683b      	ldr	r3, [r7, #0]
 80017aa:	809a      	strh	r2, [r3, #4]
    temp = (int16_t) (Rec_Data[6] << 8 | Rec_Data[7]);
 80017ac:	7bbb      	ldrb	r3, [r7, #14]
 80017ae:	021b      	lsls	r3, r3, #8
 80017b0:	b21a      	sxth	r2, r3
 80017b2:	7bfb      	ldrb	r3, [r7, #15]
 80017b4:	b21b      	sxth	r3, r3
 80017b6:	4313      	orrs	r3, r2
 80017b8:	86fb      	strh	r3, [r7, #54]	; 0x36
    DataStruct->Gyro_X_RAW = (int16_t) (Rec_Data[8] << 8 | Rec_Data[9]);
 80017ba:	7c3b      	ldrb	r3, [r7, #16]
 80017bc:	021b      	lsls	r3, r3, #8
 80017be:	b21a      	sxth	r2, r3
 80017c0:	7c7b      	ldrb	r3, [r7, #17]
 80017c2:	b21b      	sxth	r3, r3
 80017c4:	4313      	orrs	r3, r2
 80017c6:	b21a      	sxth	r2, r3
 80017c8:	683b      	ldr	r3, [r7, #0]
 80017ca:	841a      	strh	r2, [r3, #32]
    DataStruct->Gyro_Y_RAW = (int16_t) (Rec_Data[10] << 8 | Rec_Data[11]);
 80017cc:	7cbb      	ldrb	r3, [r7, #18]
 80017ce:	021b      	lsls	r3, r3, #8
 80017d0:	b21a      	sxth	r2, r3
 80017d2:	7cfb      	ldrb	r3, [r7, #19]
 80017d4:	b21b      	sxth	r3, r3
 80017d6:	4313      	orrs	r3, r2
 80017d8:	b21a      	sxth	r2, r3
 80017da:	683b      	ldr	r3, [r7, #0]
 80017dc:	845a      	strh	r2, [r3, #34]	; 0x22
    DataStruct->Gyro_Z_RAW = (int16_t) (Rec_Data[12] << 8 | Rec_Data[13]);
 80017de:	7d3b      	ldrb	r3, [r7, #20]
 80017e0:	021b      	lsls	r3, r3, #8
 80017e2:	b21a      	sxth	r2, r3
 80017e4:	7d7b      	ldrb	r3, [r7, #21]
 80017e6:	b21b      	sxth	r3, r3
 80017e8:	4313      	orrs	r3, r2
 80017ea:	b21a      	sxth	r2, r3
 80017ec:	683b      	ldr	r3, [r7, #0]
 80017ee:	849a      	strh	r2, [r3, #36]	; 0x24

    DataStruct->Ax = DataStruct->Accel_X_RAW / 16384.0;
 80017f0:	683b      	ldr	r3, [r7, #0]
 80017f2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80017f6:	4618      	mov	r0, r3
 80017f8:	f7fe fe04 	bl	8000404 <__aeabi_i2d>
 80017fc:	f04f 0200 	mov.w	r2, #0
 8001800:	4bb7      	ldr	r3, [pc, #732]	; (8001ae0 <MPU6050_Read_All+0x390>)
 8001802:	f7fe ff93 	bl	800072c <__aeabi_ddiv>
 8001806:	4602      	mov	r2, r0
 8001808:	460b      	mov	r3, r1
 800180a:	6839      	ldr	r1, [r7, #0]
 800180c:	e9c1 2302 	strd	r2, r3, [r1, #8]
    DataStruct->Ay = DataStruct->Accel_Y_RAW / 16384.0;
 8001810:	683b      	ldr	r3, [r7, #0]
 8001812:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001816:	4618      	mov	r0, r3
 8001818:	f7fe fdf4 	bl	8000404 <__aeabi_i2d>
 800181c:	f04f 0200 	mov.w	r2, #0
 8001820:	4baf      	ldr	r3, [pc, #700]	; (8001ae0 <MPU6050_Read_All+0x390>)
 8001822:	f7fe ff83 	bl	800072c <__aeabi_ddiv>
 8001826:	4602      	mov	r2, r0
 8001828:	460b      	mov	r3, r1
 800182a:	6839      	ldr	r1, [r7, #0]
 800182c:	e9c1 2304 	strd	r2, r3, [r1, #16]
    DataStruct->Az = DataStruct->Accel_Z_RAW / Accel_Z_corrector;
 8001830:	683b      	ldr	r3, [r7, #0]
 8001832:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001836:	4618      	mov	r0, r3
 8001838:	f7fe fde4 	bl	8000404 <__aeabi_i2d>
 800183c:	a3a2      	add	r3, pc, #648	; (adr r3, 8001ac8 <MPU6050_Read_All+0x378>)
 800183e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001842:	f7fe ff73 	bl	800072c <__aeabi_ddiv>
 8001846:	4602      	mov	r2, r0
 8001848:	460b      	mov	r3, r1
 800184a:	6839      	ldr	r1, [r7, #0]
 800184c:	e9c1 2306 	strd	r2, r3, [r1, #24]
    DataStruct->Temperature = (float) ((int16_t) temp / (float) 340.0 + (float) 36.53);
 8001850:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 8001854:	4618      	mov	r0, r3
 8001856:	f7ff fa21 	bl	8000c9c <__aeabi_i2f>
 800185a:	4603      	mov	r3, r0
 800185c:	49a1      	ldr	r1, [pc, #644]	; (8001ae4 <MPU6050_Read_All+0x394>)
 800185e:	4618      	mov	r0, r3
 8001860:	f7ff fb24 	bl	8000eac <__aeabi_fdiv>
 8001864:	4603      	mov	r3, r0
 8001866:	49a0      	ldr	r1, [pc, #640]	; (8001ae8 <MPU6050_Read_All+0x398>)
 8001868:	4618      	mov	r0, r3
 800186a:	f7ff f963 	bl	8000b34 <__addsf3>
 800186e:	4603      	mov	r3, r0
 8001870:	461a      	mov	r2, r3
 8001872:	683b      	ldr	r3, [r7, #0]
 8001874:	641a      	str	r2, [r3, #64]	; 0x40
    DataStruct->Gx = DataStruct->Gyro_X_RAW / 131.0;
 8001876:	683b      	ldr	r3, [r7, #0]
 8001878:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 800187c:	4618      	mov	r0, r3
 800187e:	f7fe fdc1 	bl	8000404 <__aeabi_i2d>
 8001882:	a393      	add	r3, pc, #588	; (adr r3, 8001ad0 <MPU6050_Read_All+0x380>)
 8001884:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001888:	f7fe ff50 	bl	800072c <__aeabi_ddiv>
 800188c:	4602      	mov	r2, r0
 800188e:	460b      	mov	r3, r1
 8001890:	6839      	ldr	r1, [r7, #0]
 8001892:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
    DataStruct->Gy = DataStruct->Gyro_Y_RAW / 131.0;
 8001896:	683b      	ldr	r3, [r7, #0]
 8001898:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	; 0x22
 800189c:	4618      	mov	r0, r3
 800189e:	f7fe fdb1 	bl	8000404 <__aeabi_i2d>
 80018a2:	a38b      	add	r3, pc, #556	; (adr r3, 8001ad0 <MPU6050_Read_All+0x380>)
 80018a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018a8:	f7fe ff40 	bl	800072c <__aeabi_ddiv>
 80018ac:	4602      	mov	r2, r0
 80018ae:	460b      	mov	r3, r1
 80018b0:	6839      	ldr	r1, [r7, #0]
 80018b2:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
    DataStruct->Gz = DataStruct->Gyro_Z_RAW / 131.0;
 80018b6:	683b      	ldr	r3, [r7, #0]
 80018b8:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	; 0x24
 80018bc:	4618      	mov	r0, r3
 80018be:	f7fe fda1 	bl	8000404 <__aeabi_i2d>
 80018c2:	a383      	add	r3, pc, #524	; (adr r3, 8001ad0 <MPU6050_Read_All+0x380>)
 80018c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018c8:	f7fe ff30 	bl	800072c <__aeabi_ddiv>
 80018cc:	4602      	mov	r2, r0
 80018ce:	460b      	mov	r3, r1
 80018d0:	6839      	ldr	r1, [r7, #0]
 80018d2:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38

    // Kalman angle solve
    double dt = (double) (HAL_GetTick() - timer) / 1000;
 80018d6:	f000 ffb9 	bl	800284c <HAL_GetTick>
 80018da:	4602      	mov	r2, r0
 80018dc:	4b83      	ldr	r3, [pc, #524]	; (8001aec <MPU6050_Read_All+0x39c>)
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	1ad3      	subs	r3, r2, r3
 80018e2:	4618      	mov	r0, r3
 80018e4:	f7fe fd7e 	bl	80003e4 <__aeabi_ui2d>
 80018e8:	f04f 0200 	mov.w	r2, #0
 80018ec:	4b80      	ldr	r3, [pc, #512]	; (8001af0 <MPU6050_Read_All+0x3a0>)
 80018ee:	f7fe ff1d 	bl	800072c <__aeabi_ddiv>
 80018f2:	4602      	mov	r2, r0
 80018f4:	460b      	mov	r3, r1
 80018f6:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
    timer = HAL_GetTick();
 80018fa:	f000 ffa7 	bl	800284c <HAL_GetTick>
 80018fe:	4602      	mov	r2, r0
 8001900:	4b7a      	ldr	r3, [pc, #488]	; (8001aec <MPU6050_Read_All+0x39c>)
 8001902:	601a      	str	r2, [r3, #0]
    double roll;
    double roll_sqrt = sqrt(
            DataStruct->Accel_X_RAW * DataStruct->Accel_X_RAW + DataStruct->Accel_Z_RAW * DataStruct->Accel_Z_RAW);
 8001904:	683b      	ldr	r3, [r7, #0]
 8001906:	f9b3 3000 	ldrsh.w	r3, [r3]
 800190a:	461a      	mov	r2, r3
 800190c:	683b      	ldr	r3, [r7, #0]
 800190e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001912:	fb03 f202 	mul.w	r2, r3, r2
 8001916:	683b      	ldr	r3, [r7, #0]
 8001918:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800191c:	4619      	mov	r1, r3
 800191e:	683b      	ldr	r3, [r7, #0]
 8001920:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001924:	fb03 f301 	mul.w	r3, r3, r1
 8001928:	4413      	add	r3, r2
    double roll_sqrt = sqrt(
 800192a:	4618      	mov	r0, r3
 800192c:	f7fe fd6a 	bl	8000404 <__aeabi_i2d>
 8001930:	4602      	mov	r2, r0
 8001932:	460b      	mov	r3, r1
 8001934:	4610      	mov	r0, r2
 8001936:	4619      	mov	r1, r3
 8001938:	f005 fa62 	bl	8006e00 <sqrt>
 800193c:	e9c7 0108 	strd	r0, r1, [r7, #32]
    if (roll_sqrt != 0.0) {
 8001940:	f04f 0200 	mov.w	r2, #0
 8001944:	f04f 0300 	mov.w	r3, #0
 8001948:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800194c:	f7ff f82c 	bl	80009a8 <__aeabi_dcmpeq>
 8001950:	4603      	mov	r3, r0
 8001952:	2b00      	cmp	r3, #0
 8001954:	d119      	bne.n	800198a <MPU6050_Read_All+0x23a>
        roll = atan(DataStruct->Accel_Y_RAW / roll_sqrt) * RAD_TO_DEG;
 8001956:	683b      	ldr	r3, [r7, #0]
 8001958:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800195c:	4618      	mov	r0, r3
 800195e:	f7fe fd51 	bl	8000404 <__aeabi_i2d>
 8001962:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001966:	f7fe fee1 	bl	800072c <__aeabi_ddiv>
 800196a:	4602      	mov	r2, r0
 800196c:	460b      	mov	r3, r1
 800196e:	4610      	mov	r0, r2
 8001970:	4619      	mov	r1, r3
 8001972:	f005 f891 	bl	8006a98 <atan>
 8001976:	a358      	add	r3, pc, #352	; (adr r3, 8001ad8 <MPU6050_Read_All+0x388>)
 8001978:	e9d3 2300 	ldrd	r2, r3, [r3]
 800197c:	f7fe fdac 	bl	80004d8 <__aeabi_dmul>
 8001980:	4602      	mov	r2, r0
 8001982:	460b      	mov	r3, r1
 8001984:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
 8001988:	e005      	b.n	8001996 <MPU6050_Read_All+0x246>
    } else {
        roll = 0.0;
 800198a:	f04f 0200 	mov.w	r2, #0
 800198e:	f04f 0300 	mov.w	r3, #0
 8001992:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
    }
    double pitch = atan2(-DataStruct->Accel_X_RAW, DataStruct->Accel_Z_RAW) * RAD_TO_DEG;
 8001996:	683b      	ldr	r3, [r7, #0]
 8001998:	f9b3 3000 	ldrsh.w	r3, [r3]
 800199c:	425b      	negs	r3, r3
 800199e:	4618      	mov	r0, r3
 80019a0:	f7fe fd30 	bl	8000404 <__aeabi_i2d>
 80019a4:	4682      	mov	sl, r0
 80019a6:	468b      	mov	fp, r1
 80019a8:	683b      	ldr	r3, [r7, #0]
 80019aa:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80019ae:	4618      	mov	r0, r3
 80019b0:	f7fe fd28 	bl	8000404 <__aeabi_i2d>
 80019b4:	4602      	mov	r2, r0
 80019b6:	460b      	mov	r3, r1
 80019b8:	4650      	mov	r0, sl
 80019ba:	4659      	mov	r1, fp
 80019bc:	f005 fa1e 	bl	8006dfc <atan2>
 80019c0:	a345      	add	r3, pc, #276	; (adr r3, 8001ad8 <MPU6050_Read_All+0x388>)
 80019c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019c6:	f7fe fd87 	bl	80004d8 <__aeabi_dmul>
 80019ca:	4602      	mov	r2, r0
 80019cc:	460b      	mov	r3, r1
 80019ce:	e9c7 2306 	strd	r2, r3, [r7, #24]
    if ((pitch < -90 && DataStruct->KalmanAngleY > 90) || (pitch > 90 && DataStruct->KalmanAngleY < -90)) {
 80019d2:	f04f 0200 	mov.w	r2, #0
 80019d6:	4b47      	ldr	r3, [pc, #284]	; (8001af4 <MPU6050_Read_All+0x3a4>)
 80019d8:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80019dc:	f7fe ffee 	bl	80009bc <__aeabi_dcmplt>
 80019e0:	4603      	mov	r3, r0
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d00a      	beq.n	80019fc <MPU6050_Read_All+0x2ac>
 80019e6:	683b      	ldr	r3, [r7, #0]
 80019e8:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 80019ec:	f04f 0200 	mov.w	r2, #0
 80019f0:	4b41      	ldr	r3, [pc, #260]	; (8001af8 <MPU6050_Read_All+0x3a8>)
 80019f2:	f7ff f801 	bl	80009f8 <__aeabi_dcmpgt>
 80019f6:	4603      	mov	r3, r0
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d114      	bne.n	8001a26 <MPU6050_Read_All+0x2d6>
 80019fc:	f04f 0200 	mov.w	r2, #0
 8001a00:	4b3d      	ldr	r3, [pc, #244]	; (8001af8 <MPU6050_Read_All+0x3a8>)
 8001a02:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001a06:	f7fe fff7 	bl	80009f8 <__aeabi_dcmpgt>
 8001a0a:	4603      	mov	r3, r0
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d015      	beq.n	8001a3c <MPU6050_Read_All+0x2ec>
 8001a10:	683b      	ldr	r3, [r7, #0]
 8001a12:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 8001a16:	f04f 0200 	mov.w	r2, #0
 8001a1a:	4b36      	ldr	r3, [pc, #216]	; (8001af4 <MPU6050_Read_All+0x3a4>)
 8001a1c:	f7fe ffce 	bl	80009bc <__aeabi_dcmplt>
 8001a20:	4603      	mov	r3, r0
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d00a      	beq.n	8001a3c <MPU6050_Read_All+0x2ec>
        KalmanY.angle = pitch;
 8001a26:	4935      	ldr	r1, [pc, #212]	; (8001afc <MPU6050_Read_All+0x3ac>)
 8001a28:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001a2c:	e9c1 2306 	strd	r2, r3, [r1, #24]
        DataStruct->KalmanAngleY = pitch;
 8001a30:	6839      	ldr	r1, [r7, #0]
 8001a32:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001a36:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
 8001a3a:	e012      	b.n	8001a62 <MPU6050_Read_All+0x312>
    } else {
        DataStruct->KalmanAngleY = Kalman_getAngle(&KalmanY, pitch, DataStruct->Gy, dt);
 8001a3c:	683b      	ldr	r3, [r7, #0]
 8001a3e:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 8001a42:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8001a46:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8001a4a:	e9cd 2300 	strd	r2, r3, [sp]
 8001a4e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001a52:	482a      	ldr	r0, [pc, #168]	; (8001afc <MPU6050_Read_All+0x3ac>)
 8001a54:	f000 f856 	bl	8001b04 <Kalman_getAngle>
 8001a58:	4602      	mov	r2, r0
 8001a5a:	460b      	mov	r3, r1
 8001a5c:	6839      	ldr	r1, [r7, #0]
 8001a5e:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
    }
    if (fabs(DataStruct->KalmanAngleY) > 90)
 8001a62:	683b      	ldr	r3, [r7, #0]
 8001a64:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	; 0x50
 8001a68:	4690      	mov	r8, r2
 8001a6a:	f023 4900 	bic.w	r9, r3, #2147483648	; 0x80000000
 8001a6e:	f04f 0200 	mov.w	r2, #0
 8001a72:	4b21      	ldr	r3, [pc, #132]	; (8001af8 <MPU6050_Read_All+0x3a8>)
 8001a74:	4640      	mov	r0, r8
 8001a76:	4649      	mov	r1, r9
 8001a78:	f7fe ffbe 	bl	80009f8 <__aeabi_dcmpgt>
 8001a7c:	4603      	mov	r3, r0
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d008      	beq.n	8001a94 <MPU6050_Read_All+0x344>
        DataStruct->Gx = -DataStruct->Gx;
 8001a82:	683b      	ldr	r3, [r7, #0]
 8001a84:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 8001a88:	4614      	mov	r4, r2
 8001a8a:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 8001a8e:	683b      	ldr	r3, [r7, #0]
 8001a90:	e9c3 450a 	strd	r4, r5, [r3, #40]	; 0x28
    DataStruct->KalmanAngleX = Kalman_getAngle(&KalmanX, roll, DataStruct->Gy, dt);
 8001a94:	683b      	ldr	r3, [r7, #0]
 8001a96:	f103 0430 	add.w	r4, r3, #48	; 0x30
 8001a9a:	e9d4 3400 	ldrd	r3, r4, [r4]
 8001a9e:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 8001aa2:	e9cd 1202 	strd	r1, r2, [sp, #8]
 8001aa6:	e9cd 3400 	strd	r3, r4, [sp]
 8001aaa:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8001aae:	4814      	ldr	r0, [pc, #80]	; (8001b00 <MPU6050_Read_All+0x3b0>)
 8001ab0:	f000 f828 	bl	8001b04 <Kalman_getAngle>
 8001ab4:	4603      	mov	r3, r0
 8001ab6:	460c      	mov	r4, r1
 8001ab8:	683a      	ldr	r2, [r7, #0]
 8001aba:	e9c2 3412 	strd	r3, r4, [r2, #72]	; 0x48

}
 8001abe:	bf00      	nop
 8001ac0:	3740      	adds	r7, #64	; 0x40
 8001ac2:	46bd      	mov	sp, r7
 8001ac4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001ac8:	00000000 	.word	0x00000000
 8001acc:	40cc2900 	.word	0x40cc2900
 8001ad0:	00000000 	.word	0x00000000
 8001ad4:	40606000 	.word	0x40606000
 8001ad8:	1a63c1f8 	.word	0x1a63c1f8
 8001adc:	404ca5dc 	.word	0x404ca5dc
 8001ae0:	40d00000 	.word	0x40d00000
 8001ae4:	43aa0000 	.word	0x43aa0000
 8001ae8:	42121eb8 	.word	0x42121eb8
 8001aec:	200008a8 	.word	0x200008a8
 8001af0:	408f4000 	.word	0x408f4000
 8001af4:	c0568000 	.word	0xc0568000
 8001af8:	40568000 	.word	0x40568000
 8001afc:	20000050 	.word	0x20000050
 8001b00:	20000008 	.word	0x20000008

08001b04 <Kalman_getAngle>:

double Kalman_getAngle(Kalman_t *Kalman, double newAngle, double newRate, double dt) {
 8001b04:	b5b0      	push	{r4, r5, r7, lr}
 8001b06:	b092      	sub	sp, #72	; 0x48
 8001b08:	af00      	add	r7, sp, #0
 8001b0a:	60f8      	str	r0, [r7, #12]
 8001b0c:	e9c7 2300 	strd	r2, r3, [r7]
    double rate = newRate - Kalman->bias;
 8001b10:	68fb      	ldr	r3, [r7, #12]
 8001b12:	f103 0420 	add.w	r4, r3, #32
 8001b16:	e9d4 3400 	ldrd	r3, r4, [r4]
 8001b1a:	461a      	mov	r2, r3
 8001b1c:	4623      	mov	r3, r4
 8001b1e:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8001b22:	f7fe fb21 	bl	8000168 <__aeabi_dsub>
 8001b26:	4603      	mov	r3, r0
 8001b28:	460c      	mov	r4, r1
 8001b2a:	e9c7 3410 	strd	r3, r4, [r7, #64]	; 0x40
    Kalman->angle += dt * rate;
 8001b2e:	68fb      	ldr	r3, [r7, #12]
 8001b30:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 8001b34:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8001b38:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8001b3c:	f7fe fccc 	bl	80004d8 <__aeabi_dmul>
 8001b40:	4602      	mov	r2, r0
 8001b42:	460b      	mov	r3, r1
 8001b44:	4620      	mov	r0, r4
 8001b46:	4629      	mov	r1, r5
 8001b48:	f7fe fb10 	bl	800016c <__adddf3>
 8001b4c:	4603      	mov	r3, r0
 8001b4e:	460c      	mov	r4, r1
 8001b50:	68fa      	ldr	r2, [r7, #12]
 8001b52:	e9c2 3406 	strd	r3, r4, [r2, #24]

    Kalman->P[0][0] += dt * (dt * Kalman->P[1][1] - Kalman->P[0][1] - Kalman->P[1][0] + Kalman->Q_angle);
 8001b56:	68fb      	ldr	r3, [r7, #12]
 8001b58:	e9d3 450a 	ldrd	r4, r5, [r3, #40]	; 0x28
 8001b5c:	68fb      	ldr	r3, [r7, #12]
 8001b5e:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 8001b62:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8001b66:	f7fe fcb7 	bl	80004d8 <__aeabi_dmul>
 8001b6a:	4602      	mov	r2, r0
 8001b6c:	460b      	mov	r3, r1
 8001b6e:	4610      	mov	r0, r2
 8001b70:	4619      	mov	r1, r3
 8001b72:	68fb      	ldr	r3, [r7, #12]
 8001b74:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 8001b78:	f7fe faf6 	bl	8000168 <__aeabi_dsub>
 8001b7c:	4602      	mov	r2, r0
 8001b7e:	460b      	mov	r3, r1
 8001b80:	4610      	mov	r0, r2
 8001b82:	4619      	mov	r1, r3
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8001b8a:	f7fe faed 	bl	8000168 <__aeabi_dsub>
 8001b8e:	4602      	mov	r2, r0
 8001b90:	460b      	mov	r3, r1
 8001b92:	4610      	mov	r0, r2
 8001b94:	4619      	mov	r1, r3
 8001b96:	68fb      	ldr	r3, [r7, #12]
 8001b98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b9c:	f7fe fae6 	bl	800016c <__adddf3>
 8001ba0:	4602      	mov	r2, r0
 8001ba2:	460b      	mov	r3, r1
 8001ba4:	4610      	mov	r0, r2
 8001ba6:	4619      	mov	r1, r3
 8001ba8:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8001bac:	f7fe fc94 	bl	80004d8 <__aeabi_dmul>
 8001bb0:	4602      	mov	r2, r0
 8001bb2:	460b      	mov	r3, r1
 8001bb4:	4620      	mov	r0, r4
 8001bb6:	4629      	mov	r1, r5
 8001bb8:	f7fe fad8 	bl	800016c <__adddf3>
 8001bbc:	4603      	mov	r3, r0
 8001bbe:	460c      	mov	r4, r1
 8001bc0:	68fa      	ldr	r2, [r7, #12]
 8001bc2:	e9c2 340a 	strd	r3, r4, [r2, #40]	; 0x28
    Kalman->P[0][1] -= dt * Kalman->P[1][1];
 8001bc6:	68fb      	ldr	r3, [r7, #12]
 8001bc8:	e9d3 450c 	ldrd	r4, r5, [r3, #48]	; 0x30
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 8001bd2:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8001bd6:	f7fe fc7f 	bl	80004d8 <__aeabi_dmul>
 8001bda:	4602      	mov	r2, r0
 8001bdc:	460b      	mov	r3, r1
 8001bde:	4620      	mov	r0, r4
 8001be0:	4629      	mov	r1, r5
 8001be2:	f7fe fac1 	bl	8000168 <__aeabi_dsub>
 8001be6:	4603      	mov	r3, r0
 8001be8:	460c      	mov	r4, r1
 8001bea:	68fa      	ldr	r2, [r7, #12]
 8001bec:	e9c2 340c 	strd	r3, r4, [r2, #48]	; 0x30
    Kalman->P[1][0] -= dt * Kalman->P[1][1];
 8001bf0:	68fb      	ldr	r3, [r7, #12]
 8001bf2:	e9d3 450e 	ldrd	r4, r5, [r3, #56]	; 0x38
 8001bf6:	68fb      	ldr	r3, [r7, #12]
 8001bf8:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 8001bfc:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8001c00:	f7fe fc6a 	bl	80004d8 <__aeabi_dmul>
 8001c04:	4602      	mov	r2, r0
 8001c06:	460b      	mov	r3, r1
 8001c08:	4620      	mov	r0, r4
 8001c0a:	4629      	mov	r1, r5
 8001c0c:	f7fe faac 	bl	8000168 <__aeabi_dsub>
 8001c10:	4603      	mov	r3, r0
 8001c12:	460c      	mov	r4, r1
 8001c14:	68fa      	ldr	r2, [r7, #12]
 8001c16:	e9c2 340e 	strd	r3, r4, [r2, #56]	; 0x38
    Kalman->P[1][1] += Kalman->Q_bias * dt;
 8001c1a:	68fb      	ldr	r3, [r7, #12]
 8001c1c:	e9d3 4510 	ldrd	r4, r5, [r3, #64]	; 0x40
 8001c20:	68fb      	ldr	r3, [r7, #12]
 8001c22:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8001c26:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8001c2a:	f7fe fc55 	bl	80004d8 <__aeabi_dmul>
 8001c2e:	4602      	mov	r2, r0
 8001c30:	460b      	mov	r3, r1
 8001c32:	4620      	mov	r0, r4
 8001c34:	4629      	mov	r1, r5
 8001c36:	f7fe fa99 	bl	800016c <__adddf3>
 8001c3a:	4603      	mov	r3, r0
 8001c3c:	460c      	mov	r4, r1
 8001c3e:	68fa      	ldr	r2, [r7, #12]
 8001c40:	e9c2 3410 	strd	r3, r4, [r2, #64]	; 0x40

    double S = Kalman->P[0][0] + Kalman->R_measure;
 8001c44:	68fb      	ldr	r3, [r7, #12]
 8001c46:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 8001c4a:	68fb      	ldr	r3, [r7, #12]
 8001c4c:	f103 0410 	add.w	r4, r3, #16
 8001c50:	e9d4 3400 	ldrd	r3, r4, [r4]
 8001c54:	461a      	mov	r2, r3
 8001c56:	4623      	mov	r3, r4
 8001c58:	f7fe fa88 	bl	800016c <__adddf3>
 8001c5c:	4603      	mov	r3, r0
 8001c5e:	460c      	mov	r4, r1
 8001c60:	e9c7 340e 	strd	r3, r4, [r7, #56]	; 0x38
    double K[2];
    K[0] = Kalman->P[0][0] / S;
 8001c64:	68fb      	ldr	r3, [r7, #12]
 8001c66:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 8001c6a:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8001c6e:	f7fe fd5d 	bl	800072c <__aeabi_ddiv>
 8001c72:	4603      	mov	r3, r0
 8001c74:	460c      	mov	r4, r1
 8001c76:	e9c7 3404 	strd	r3, r4, [r7, #16]
    K[1] = Kalman->P[1][0] / S;
 8001c7a:	68fb      	ldr	r3, [r7, #12]
 8001c7c:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 8001c80:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8001c84:	f7fe fd52 	bl	800072c <__aeabi_ddiv>
 8001c88:	4603      	mov	r3, r0
 8001c8a:	460c      	mov	r4, r1
 8001c8c:	e9c7 3406 	strd	r3, r4, [r7, #24]

    double y = newAngle - Kalman->angle;
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	f103 0418 	add.w	r4, r3, #24
 8001c96:	e9d4 3400 	ldrd	r3, r4, [r4]
 8001c9a:	461a      	mov	r2, r3
 8001c9c:	4623      	mov	r3, r4
 8001c9e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001ca2:	f7fe fa61 	bl	8000168 <__aeabi_dsub>
 8001ca6:	4603      	mov	r3, r0
 8001ca8:	460c      	mov	r4, r1
 8001caa:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30
    Kalman->angle += K[0] * y;
 8001cae:	68fb      	ldr	r3, [r7, #12]
 8001cb0:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 8001cb4:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001cb8:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8001cbc:	f7fe fc0c 	bl	80004d8 <__aeabi_dmul>
 8001cc0:	4602      	mov	r2, r0
 8001cc2:	460b      	mov	r3, r1
 8001cc4:	4620      	mov	r0, r4
 8001cc6:	4629      	mov	r1, r5
 8001cc8:	f7fe fa50 	bl	800016c <__adddf3>
 8001ccc:	4603      	mov	r3, r0
 8001cce:	460c      	mov	r4, r1
 8001cd0:	68fa      	ldr	r2, [r7, #12]
 8001cd2:	e9c2 3406 	strd	r3, r4, [r2, #24]
    Kalman->bias += K[1] * y;
 8001cd6:	68fb      	ldr	r3, [r7, #12]
 8001cd8:	e9d3 4508 	ldrd	r4, r5, [r3, #32]
 8001cdc:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001ce0:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8001ce4:	f7fe fbf8 	bl	80004d8 <__aeabi_dmul>
 8001ce8:	4602      	mov	r2, r0
 8001cea:	460b      	mov	r3, r1
 8001cec:	4620      	mov	r0, r4
 8001cee:	4629      	mov	r1, r5
 8001cf0:	f7fe fa3c 	bl	800016c <__adddf3>
 8001cf4:	4603      	mov	r3, r0
 8001cf6:	460c      	mov	r4, r1
 8001cf8:	68fa      	ldr	r2, [r7, #12]
 8001cfa:	e9c2 3408 	strd	r3, r4, [r2, #32]

    double P00_temp = Kalman->P[0][0];
 8001cfe:	68fb      	ldr	r3, [r7, #12]
 8001d00:	f103 0428 	add.w	r4, r3, #40	; 0x28
 8001d04:	e9d4 3400 	ldrd	r3, r4, [r4]
 8001d08:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
    double P01_temp = Kalman->P[0][1];
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	f103 0430 	add.w	r4, r3, #48	; 0x30
 8001d12:	e9d4 3400 	ldrd	r3, r4, [r4]
 8001d16:	e9c7 3408 	strd	r3, r4, [r7, #32]

    Kalman->P[0][0] -= K[0] * P00_temp;
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	e9d3 450a 	ldrd	r4, r5, [r3, #40]	; 0x28
 8001d20:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001d24:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001d28:	f7fe fbd6 	bl	80004d8 <__aeabi_dmul>
 8001d2c:	4602      	mov	r2, r0
 8001d2e:	460b      	mov	r3, r1
 8001d30:	4620      	mov	r0, r4
 8001d32:	4629      	mov	r1, r5
 8001d34:	f7fe fa18 	bl	8000168 <__aeabi_dsub>
 8001d38:	4603      	mov	r3, r0
 8001d3a:	460c      	mov	r4, r1
 8001d3c:	68fa      	ldr	r2, [r7, #12]
 8001d3e:	e9c2 340a 	strd	r3, r4, [r2, #40]	; 0x28
    Kalman->P[0][1] -= K[0] * P01_temp;
 8001d42:	68fb      	ldr	r3, [r7, #12]
 8001d44:	e9d3 450c 	ldrd	r4, r5, [r3, #48]	; 0x30
 8001d48:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001d4c:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001d50:	f7fe fbc2 	bl	80004d8 <__aeabi_dmul>
 8001d54:	4602      	mov	r2, r0
 8001d56:	460b      	mov	r3, r1
 8001d58:	4620      	mov	r0, r4
 8001d5a:	4629      	mov	r1, r5
 8001d5c:	f7fe fa04 	bl	8000168 <__aeabi_dsub>
 8001d60:	4603      	mov	r3, r0
 8001d62:	460c      	mov	r4, r1
 8001d64:	68fa      	ldr	r2, [r7, #12]
 8001d66:	e9c2 340c 	strd	r3, r4, [r2, #48]	; 0x30
    Kalman->P[1][0] -= K[1] * P00_temp;
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	e9d3 450e 	ldrd	r4, r5, [r3, #56]	; 0x38
 8001d70:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001d74:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001d78:	f7fe fbae 	bl	80004d8 <__aeabi_dmul>
 8001d7c:	4602      	mov	r2, r0
 8001d7e:	460b      	mov	r3, r1
 8001d80:	4620      	mov	r0, r4
 8001d82:	4629      	mov	r1, r5
 8001d84:	f7fe f9f0 	bl	8000168 <__aeabi_dsub>
 8001d88:	4603      	mov	r3, r0
 8001d8a:	460c      	mov	r4, r1
 8001d8c:	68fa      	ldr	r2, [r7, #12]
 8001d8e:	e9c2 340e 	strd	r3, r4, [r2, #56]	; 0x38
    Kalman->P[1][1] -= K[1] * P01_temp;
 8001d92:	68fb      	ldr	r3, [r7, #12]
 8001d94:	e9d3 4510 	ldrd	r4, r5, [r3, #64]	; 0x40
 8001d98:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001d9c:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001da0:	f7fe fb9a 	bl	80004d8 <__aeabi_dmul>
 8001da4:	4602      	mov	r2, r0
 8001da6:	460b      	mov	r3, r1
 8001da8:	4620      	mov	r0, r4
 8001daa:	4629      	mov	r1, r5
 8001dac:	f7fe f9dc 	bl	8000168 <__aeabi_dsub>
 8001db0:	4603      	mov	r3, r0
 8001db2:	460c      	mov	r4, r1
 8001db4:	68fa      	ldr	r2, [r7, #12]
 8001db6:	e9c2 3410 	strd	r3, r4, [r2, #64]	; 0x40

    return Kalman->angle;
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	f103 0418 	add.w	r4, r3, #24
 8001dc0:	e9d4 3400 	ldrd	r3, r4, [r4]
};
 8001dc4:	4618      	mov	r0, r3
 8001dc6:	4621      	mov	r1, r4
 8001dc8:	3748      	adds	r7, #72	; 0x48
 8001dca:	46bd      	mov	sp, r7
 8001dcc:	bdb0      	pop	{r4, r5, r7, pc}
	...

08001dd0 <SSD1306_Init>:





uint8_t SSD1306_Init(void) {
 8001dd0:	b580      	push	{r7, lr}
 8001dd2:	b082      	sub	sp, #8
 8001dd4:	af00      	add	r7, sp, #0

	/* Init I2C */
	ssd1306_I2C_Init();
 8001dd6:	f000 fa35 	bl	8002244 <ssd1306_I2C_Init>
	
	/* Check if LCD connected to I2C */
	if (HAL_I2C_IsDeviceReady(&hi2c1, SSD1306_I2C_ADDR, 1, 20000) != HAL_OK) {
 8001dda:	f644 6320 	movw	r3, #20000	; 0x4e20
 8001dde:	2201      	movs	r2, #1
 8001de0:	2178      	movs	r1, #120	; 0x78
 8001de2:	485b      	ldr	r0, [pc, #364]	; (8001f50 <SSD1306_Init+0x180>)
 8001de4:	f001 fd00 	bl	80037e8 <HAL_I2C_IsDeviceReady>
 8001de8:	4603      	mov	r3, r0
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d001      	beq.n	8001df2 <SSD1306_Init+0x22>
		/* Return false */
		return 0;
 8001dee:	2300      	movs	r3, #0
 8001df0:	e0a9      	b.n	8001f46 <SSD1306_Init+0x176>
	}
	
	/* A little delay */
	uint32_t p = 2500;
 8001df2:	f640 13c4 	movw	r3, #2500	; 0x9c4
 8001df6:	607b      	str	r3, [r7, #4]
	while(p>0)
 8001df8:	e002      	b.n	8001e00 <SSD1306_Init+0x30>
		p--;
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	3b01      	subs	r3, #1
 8001dfe:	607b      	str	r3, [r7, #4]
	while(p>0)
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d1f9      	bne.n	8001dfa <SSD1306_Init+0x2a>
	
	/* Init LCD */
	SSD1306_WRITECOMMAND(0xAE); //display off
 8001e06:	22ae      	movs	r2, #174	; 0xae
 8001e08:	2100      	movs	r1, #0
 8001e0a:	2078      	movs	r0, #120	; 0x78
 8001e0c:	f000 fa76 	bl	80022fc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //Set Memory Addressing Mode   
 8001e10:	2220      	movs	r2, #32
 8001e12:	2100      	movs	r1, #0
 8001e14:	2078      	movs	r0, #120	; 0x78
 8001e16:	f000 fa71 	bl	80022fc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 8001e1a:	2210      	movs	r2, #16
 8001e1c:	2100      	movs	r1, #0
 8001e1e:	2078      	movs	r0, #120	; 0x78
 8001e20:	f000 fa6c 	bl	80022fc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8001e24:	22b0      	movs	r2, #176	; 0xb0
 8001e26:	2100      	movs	r1, #0
 8001e28:	2078      	movs	r0, #120	; 0x78
 8001e2a:	f000 fa67 	bl	80022fc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xC8); //Set COM Output Scan Direction
 8001e2e:	22c8      	movs	r2, #200	; 0xc8
 8001e30:	2100      	movs	r1, #0
 8001e32:	2078      	movs	r0, #120	; 0x78
 8001e34:	f000 fa62 	bl	80022fc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //---set low column address
 8001e38:	2200      	movs	r2, #0
 8001e3a:	2100      	movs	r1, #0
 8001e3c:	2078      	movs	r0, #120	; 0x78
 8001e3e:	f000 fa5d 	bl	80022fc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //---set high column address
 8001e42:	2210      	movs	r2, #16
 8001e44:	2100      	movs	r1, #0
 8001e46:	2078      	movs	r0, #120	; 0x78
 8001e48:	f000 fa58 	bl	80022fc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x40); //--set start line address
 8001e4c:	2240      	movs	r2, #64	; 0x40
 8001e4e:	2100      	movs	r1, #0
 8001e50:	2078      	movs	r0, #120	; 0x78
 8001e52:	f000 fa53 	bl	80022fc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x81); //--set contrast control register
 8001e56:	2281      	movs	r2, #129	; 0x81
 8001e58:	2100      	movs	r1, #0
 8001e5a:	2078      	movs	r0, #120	; 0x78
 8001e5c:	f000 fa4e 	bl	80022fc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xFF);
 8001e60:	22ff      	movs	r2, #255	; 0xff
 8001e62:	2100      	movs	r1, #0
 8001e64:	2078      	movs	r0, #120	; 0x78
 8001e66:	f000 fa49 	bl	80022fc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA1); //--set segment re-map 0 to 127
 8001e6a:	22a1      	movs	r2, #161	; 0xa1
 8001e6c:	2100      	movs	r1, #0
 8001e6e:	2078      	movs	r0, #120	; 0x78
 8001e70:	f000 fa44 	bl	80022fc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA6); //--set normal display
 8001e74:	22a6      	movs	r2, #166	; 0xa6
 8001e76:	2100      	movs	r1, #0
 8001e78:	2078      	movs	r0, #120	; 0x78
 8001e7a:	f000 fa3f 	bl	80022fc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA8); //--set multiplex ratio(1 to 64)
 8001e7e:	22a8      	movs	r2, #168	; 0xa8
 8001e80:	2100      	movs	r1, #0
 8001e82:	2078      	movs	r0, #120	; 0x78
 8001e84:	f000 fa3a 	bl	80022fc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x3F); //
 8001e88:	223f      	movs	r2, #63	; 0x3f
 8001e8a:	2100      	movs	r1, #0
 8001e8c:	2078      	movs	r0, #120	; 0x78
 8001e8e:	f000 fa35 	bl	80022fc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8001e92:	22a4      	movs	r2, #164	; 0xa4
 8001e94:	2100      	movs	r1, #0
 8001e96:	2078      	movs	r0, #120	; 0x78
 8001e98:	f000 fa30 	bl	80022fc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD3); //-set display offset
 8001e9c:	22d3      	movs	r2, #211	; 0xd3
 8001e9e:	2100      	movs	r1, #0
 8001ea0:	2078      	movs	r0, #120	; 0x78
 8001ea2:	f000 fa2b 	bl	80022fc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //-not offset
 8001ea6:	2200      	movs	r2, #0
 8001ea8:	2100      	movs	r1, #0
 8001eaa:	2078      	movs	r0, #120	; 0x78
 8001eac:	f000 fa26 	bl	80022fc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
 8001eb0:	22d5      	movs	r2, #213	; 0xd5
 8001eb2:	2100      	movs	r1, #0
 8001eb4:	2078      	movs	r0, #120	; 0x78
 8001eb6:	f000 fa21 	bl	80022fc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xF0); //--set divide ratio
 8001eba:	22f0      	movs	r2, #240	; 0xf0
 8001ebc:	2100      	movs	r1, #0
 8001ebe:	2078      	movs	r0, #120	; 0x78
 8001ec0:	f000 fa1c 	bl	80022fc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD9); //--set pre-charge period
 8001ec4:	22d9      	movs	r2, #217	; 0xd9
 8001ec6:	2100      	movs	r1, #0
 8001ec8:	2078      	movs	r0, #120	; 0x78
 8001eca:	f000 fa17 	bl	80022fc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x22); //
 8001ece:	2222      	movs	r2, #34	; 0x22
 8001ed0:	2100      	movs	r1, #0
 8001ed2:	2078      	movs	r0, #120	; 0x78
 8001ed4:	f000 fa12 	bl	80022fc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDA); //--set com pins hardware configuration
 8001ed8:	22da      	movs	r2, #218	; 0xda
 8001eda:	2100      	movs	r1, #0
 8001edc:	2078      	movs	r0, #120	; 0x78
 8001ede:	f000 fa0d 	bl	80022fc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x12);
 8001ee2:	2212      	movs	r2, #18
 8001ee4:	2100      	movs	r1, #0
 8001ee6:	2078      	movs	r0, #120	; 0x78
 8001ee8:	f000 fa08 	bl	80022fc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDB); //--set vcomh
 8001eec:	22db      	movs	r2, #219	; 0xdb
 8001eee:	2100      	movs	r1, #0
 8001ef0:	2078      	movs	r0, #120	; 0x78
 8001ef2:	f000 fa03 	bl	80022fc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //0x20,0.77xVcc
 8001ef6:	2220      	movs	r2, #32
 8001ef8:	2100      	movs	r1, #0
 8001efa:	2078      	movs	r0, #120	; 0x78
 8001efc:	f000 f9fe 	bl	80022fc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x8D); //--set DC-DC enable
 8001f00:	228d      	movs	r2, #141	; 0x8d
 8001f02:	2100      	movs	r1, #0
 8001f04:	2078      	movs	r0, #120	; 0x78
 8001f06:	f000 f9f9 	bl	80022fc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x14); //
 8001f0a:	2214      	movs	r2, #20
 8001f0c:	2100      	movs	r1, #0
 8001f0e:	2078      	movs	r0, #120	; 0x78
 8001f10:	f000 f9f4 	bl	80022fc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xAF); //--turn on SSD1306 panel
 8001f14:	22af      	movs	r2, #175	; 0xaf
 8001f16:	2100      	movs	r1, #0
 8001f18:	2078      	movs	r0, #120	; 0x78
 8001f1a:	f000 f9ef 	bl	80022fc <ssd1306_I2C_Write>
	

	SSD1306_WRITECOMMAND(SSD1306_DEACTIVATE_SCROLL);
 8001f1e:	222e      	movs	r2, #46	; 0x2e
 8001f20:	2100      	movs	r1, #0
 8001f22:	2078      	movs	r0, #120	; 0x78
 8001f24:	f000 f9ea 	bl	80022fc <ssd1306_I2C_Write>

	/* Clear screen */
	SSD1306_Fill(SSD1306_COLOR_BLACK);
 8001f28:	2000      	movs	r0, #0
 8001f2a:	f000 f84d 	bl	8001fc8 <SSD1306_Fill>
	
	/* Update screen */
	SSD1306_UpdateScreen();
 8001f2e:	f000 f813 	bl	8001f58 <SSD1306_UpdateScreen>
	
	/* Set default values */
	SSD1306.CurrentX = 0;
 8001f32:	4b08      	ldr	r3, [pc, #32]	; (8001f54 <SSD1306_Init+0x184>)
 8001f34:	2200      	movs	r2, #0
 8001f36:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 8001f38:	4b06      	ldr	r3, [pc, #24]	; (8001f54 <SSD1306_Init+0x184>)
 8001f3a:	2200      	movs	r2, #0
 8001f3c:	805a      	strh	r2, [r3, #2]
	
	/* Initialized OK */
	SSD1306.Initialized = 1;
 8001f3e:	4b05      	ldr	r3, [pc, #20]	; (8001f54 <SSD1306_Init+0x184>)
 8001f40:	2201      	movs	r2, #1
 8001f42:	715a      	strb	r2, [r3, #5]
	
	/* Return OK */
	return 1;
 8001f44:	2301      	movs	r3, #1
}
 8001f46:	4618      	mov	r0, r3
 8001f48:	3708      	adds	r7, #8
 8001f4a:	46bd      	mov	sp, r7
 8001f4c:	bd80      	pop	{r7, pc}
 8001f4e:	bf00      	nop
 8001f50:	200006dc 	.word	0x200006dc
 8001f54:	200006ac 	.word	0x200006ac

08001f58 <SSD1306_UpdateScreen>:

void SSD1306_UpdateScreen(void) {
 8001f58:	b580      	push	{r7, lr}
 8001f5a:	af00      	add	r7, sp, #0
//		/* Write multi data */
//		ssd1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40, &SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
//	}
	static uint8_t m = 0;
	
	SSD1306_WRITECOMMAND(0xB0 + m);
 8001f5c:	4b18      	ldr	r3, [pc, #96]	; (8001fc0 <SSD1306_UpdateScreen+0x68>)
 8001f5e:	781b      	ldrb	r3, [r3, #0]
 8001f60:	3b50      	subs	r3, #80	; 0x50
 8001f62:	b2db      	uxtb	r3, r3
 8001f64:	461a      	mov	r2, r3
 8001f66:	2100      	movs	r1, #0
 8001f68:	2078      	movs	r0, #120	; 0x78
 8001f6a:	f000 f9c7 	bl	80022fc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00);
 8001f6e:	2200      	movs	r2, #0
 8001f70:	2100      	movs	r1, #0
 8001f72:	2078      	movs	r0, #120	; 0x78
 8001f74:	f000 f9c2 	bl	80022fc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10);
 8001f78:	2210      	movs	r2, #16
 8001f7a:	2100      	movs	r1, #0
 8001f7c:	2078      	movs	r0, #120	; 0x78
 8001f7e:	f000 f9bd 	bl	80022fc <ssd1306_I2C_Write>

	/* Write multi data */
	ssd1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40, &SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 8001f82:	4b0f      	ldr	r3, [pc, #60]	; (8001fc0 <SSD1306_UpdateScreen+0x68>)
 8001f84:	781b      	ldrb	r3, [r3, #0]
 8001f86:	461a      	mov	r2, r3
 8001f88:	4613      	mov	r3, r2
 8001f8a:	019b      	lsls	r3, r3, #6
 8001f8c:	4413      	add	r3, r2
 8001f8e:	005b      	lsls	r3, r3, #1
 8001f90:	461a      	mov	r2, r3
 8001f92:	4b0c      	ldr	r3, [pc, #48]	; (8001fc4 <SSD1306_UpdateScreen+0x6c>)
 8001f94:	441a      	add	r2, r3
 8001f96:	2382      	movs	r3, #130	; 0x82
 8001f98:	2140      	movs	r1, #64	; 0x40
 8001f9a:	2078      	movs	r0, #120	; 0x78
 8001f9c:	f000 f966 	bl	800226c <ssd1306_I2C_WriteMulti>

	//m=(m < 8) ? m+1 : 0;
	m++;
 8001fa0:	4b07      	ldr	r3, [pc, #28]	; (8001fc0 <SSD1306_UpdateScreen+0x68>)
 8001fa2:	781b      	ldrb	r3, [r3, #0]
 8001fa4:	3301      	adds	r3, #1
 8001fa6:	b2da      	uxtb	r2, r3
 8001fa8:	4b05      	ldr	r3, [pc, #20]	; (8001fc0 <SSD1306_UpdateScreen+0x68>)
 8001faa:	701a      	strb	r2, [r3, #0]
	m %= 8;
 8001fac:	4b04      	ldr	r3, [pc, #16]	; (8001fc0 <SSD1306_UpdateScreen+0x68>)
 8001fae:	781b      	ldrb	r3, [r3, #0]
 8001fb0:	f003 0307 	and.w	r3, r3, #7
 8001fb4:	b2da      	uxtb	r2, r3
 8001fb6:	4b02      	ldr	r3, [pc, #8]	; (8001fc0 <SSD1306_UpdateScreen+0x68>)
 8001fb8:	701a      	strb	r2, [r3, #0]
}
 8001fba:	bf00      	nop
 8001fbc:	bd80      	pop	{r7, pc}
 8001fbe:	bf00      	nop
 8001fc0:	200006b2 	.word	0x200006b2
 8001fc4:	2000029c 	.word	0x2000029c

08001fc8 <SSD1306_Fill>:
	for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
		SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
	}
}

void SSD1306_Fill(SSD1306_COLOR_t color) {
 8001fc8:	b580      	push	{r7, lr}
 8001fca:	b082      	sub	sp, #8
 8001fcc:	af00      	add	r7, sp, #0
 8001fce:	4603      	mov	r3, r0
 8001fd0:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 8001fd2:	79fb      	ldrb	r3, [r7, #7]
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d101      	bne.n	8001fdc <SSD1306_Fill+0x14>
 8001fd8:	2300      	movs	r3, #0
 8001fda:	e000      	b.n	8001fde <SSD1306_Fill+0x16>
 8001fdc:	23ff      	movs	r3, #255	; 0xff
 8001fde:	f44f 6282 	mov.w	r2, #1040	; 0x410
 8001fe2:	4619      	mov	r1, r3
 8001fe4:	4803      	ldr	r0, [pc, #12]	; (8001ff4 <SSD1306_Fill+0x2c>)
 8001fe6:	f002 fcff 	bl	80049e8 <memset>
}
 8001fea:	bf00      	nop
 8001fec:	3708      	adds	r7, #8
 8001fee:	46bd      	mov	sp, r7
 8001ff0:	bd80      	pop	{r7, pc}
 8001ff2:	bf00      	nop
 8001ff4:	2000029c 	.word	0x2000029c

08001ff8 <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
 8001ff8:	b490      	push	{r4, r7}
 8001ffa:	b082      	sub	sp, #8
 8001ffc:	af00      	add	r7, sp, #0
 8001ffe:	4603      	mov	r3, r0
 8002000:	80fb      	strh	r3, [r7, #6]
 8002002:	460b      	mov	r3, r1
 8002004:	80bb      	strh	r3, [r7, #4]
 8002006:	4613      	mov	r3, r2
 8002008:	70fb      	strb	r3, [r7, #3]
	if (
 800200a:	88fb      	ldrh	r3, [r7, #6]
 800200c:	2b81      	cmp	r3, #129	; 0x81
 800200e:	d854      	bhi.n	80020ba <SSD1306_DrawPixel+0xc2>
		x >= SSD1306_WIDTH ||
 8002010:	88bb      	ldrh	r3, [r7, #4]
 8002012:	2b3f      	cmp	r3, #63	; 0x3f
 8002014:	d851      	bhi.n	80020ba <SSD1306_DrawPixel+0xc2>
		/* Error */
		return;
	}
	
	/* Check if pixels are inverted */
	if (SSD1306.Inverted) {
 8002016:	4b2b      	ldr	r3, [pc, #172]	; (80020c4 <SSD1306_DrawPixel+0xcc>)
 8002018:	791b      	ldrb	r3, [r3, #4]
 800201a:	2b00      	cmp	r3, #0
 800201c:	d006      	beq.n	800202c <SSD1306_DrawPixel+0x34>
		color = (SSD1306_COLOR_t)!color;
 800201e:	78fb      	ldrb	r3, [r7, #3]
 8002020:	2b00      	cmp	r3, #0
 8002022:	bf0c      	ite	eq
 8002024:	2301      	moveq	r3, #1
 8002026:	2300      	movne	r3, #0
 8002028:	b2db      	uxtb	r3, r3
 800202a:	70fb      	strb	r3, [r7, #3]
	}
	
	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
 800202c:	78fb      	ldrb	r3, [r7, #3]
 800202e:	2b01      	cmp	r3, #1
 8002030:	d120      	bne.n	8002074 <SSD1306_DrawPixel+0x7c>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8002032:	88fa      	ldrh	r2, [r7, #6]
 8002034:	88bb      	ldrh	r3, [r7, #4]
 8002036:	08db      	lsrs	r3, r3, #3
 8002038:	b298      	uxth	r0, r3
 800203a:	4601      	mov	r1, r0
 800203c:	460b      	mov	r3, r1
 800203e:	019b      	lsls	r3, r3, #6
 8002040:	440b      	add	r3, r1
 8002042:	005b      	lsls	r3, r3, #1
 8002044:	4413      	add	r3, r2
 8002046:	4a20      	ldr	r2, [pc, #128]	; (80020c8 <SSD1306_DrawPixel+0xd0>)
 8002048:	5cd3      	ldrb	r3, [r2, r3]
 800204a:	b25a      	sxtb	r2, r3
 800204c:	88bb      	ldrh	r3, [r7, #4]
 800204e:	f003 0307 	and.w	r3, r3, #7
 8002052:	2101      	movs	r1, #1
 8002054:	fa01 f303 	lsl.w	r3, r1, r3
 8002058:	b25b      	sxtb	r3, r3
 800205a:	4313      	orrs	r3, r2
 800205c:	b25c      	sxtb	r4, r3
 800205e:	88fa      	ldrh	r2, [r7, #6]
 8002060:	4601      	mov	r1, r0
 8002062:	460b      	mov	r3, r1
 8002064:	019b      	lsls	r3, r3, #6
 8002066:	440b      	add	r3, r1
 8002068:	005b      	lsls	r3, r3, #1
 800206a:	4413      	add	r3, r2
 800206c:	b2e1      	uxtb	r1, r4
 800206e:	4a16      	ldr	r2, [pc, #88]	; (80020c8 <SSD1306_DrawPixel+0xd0>)
 8002070:	54d1      	strb	r1, [r2, r3]
 8002072:	e023      	b.n	80020bc <SSD1306_DrawPixel+0xc4>
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8002074:	88fa      	ldrh	r2, [r7, #6]
 8002076:	88bb      	ldrh	r3, [r7, #4]
 8002078:	08db      	lsrs	r3, r3, #3
 800207a:	b298      	uxth	r0, r3
 800207c:	4601      	mov	r1, r0
 800207e:	460b      	mov	r3, r1
 8002080:	019b      	lsls	r3, r3, #6
 8002082:	440b      	add	r3, r1
 8002084:	005b      	lsls	r3, r3, #1
 8002086:	4413      	add	r3, r2
 8002088:	4a0f      	ldr	r2, [pc, #60]	; (80020c8 <SSD1306_DrawPixel+0xd0>)
 800208a:	5cd3      	ldrb	r3, [r2, r3]
 800208c:	b25a      	sxtb	r2, r3
 800208e:	88bb      	ldrh	r3, [r7, #4]
 8002090:	f003 0307 	and.w	r3, r3, #7
 8002094:	2101      	movs	r1, #1
 8002096:	fa01 f303 	lsl.w	r3, r1, r3
 800209a:	b25b      	sxtb	r3, r3
 800209c:	43db      	mvns	r3, r3
 800209e:	b25b      	sxtb	r3, r3
 80020a0:	4013      	ands	r3, r2
 80020a2:	b25c      	sxtb	r4, r3
 80020a4:	88fa      	ldrh	r2, [r7, #6]
 80020a6:	4601      	mov	r1, r0
 80020a8:	460b      	mov	r3, r1
 80020aa:	019b      	lsls	r3, r3, #6
 80020ac:	440b      	add	r3, r1
 80020ae:	005b      	lsls	r3, r3, #1
 80020b0:	4413      	add	r3, r2
 80020b2:	b2e1      	uxtb	r1, r4
 80020b4:	4a04      	ldr	r2, [pc, #16]	; (80020c8 <SSD1306_DrawPixel+0xd0>)
 80020b6:	54d1      	strb	r1, [r2, r3]
 80020b8:	e000      	b.n	80020bc <SSD1306_DrawPixel+0xc4>
		return;
 80020ba:	bf00      	nop
	}
}
 80020bc:	3708      	adds	r7, #8
 80020be:	46bd      	mov	sp, r7
 80020c0:	bc90      	pop	{r4, r7}
 80020c2:	4770      	bx	lr
 80020c4:	200006ac 	.word	0x200006ac
 80020c8:	2000029c 	.word	0x2000029c

080020cc <SSD1306_GotoXY>:

void SSD1306_GotoXY(uint16_t x, uint16_t y) {
 80020cc:	b480      	push	{r7}
 80020ce:	b083      	sub	sp, #12
 80020d0:	af00      	add	r7, sp, #0
 80020d2:	4603      	mov	r3, r0
 80020d4:	460a      	mov	r2, r1
 80020d6:	80fb      	strh	r3, [r7, #6]
 80020d8:	4613      	mov	r3, r2
 80020da:	80bb      	strh	r3, [r7, #4]
	/* Set write pointers */
	SSD1306.CurrentX = x;
 80020dc:	4a05      	ldr	r2, [pc, #20]	; (80020f4 <SSD1306_GotoXY+0x28>)
 80020de:	88fb      	ldrh	r3, [r7, #6]
 80020e0:	8013      	strh	r3, [r2, #0]
	SSD1306.CurrentY = y;
 80020e2:	4a04      	ldr	r2, [pc, #16]	; (80020f4 <SSD1306_GotoXY+0x28>)
 80020e4:	88bb      	ldrh	r3, [r7, #4]
 80020e6:	8053      	strh	r3, [r2, #2]
}
 80020e8:	bf00      	nop
 80020ea:	370c      	adds	r7, #12
 80020ec:	46bd      	mov	sp, r7
 80020ee:	bc80      	pop	{r7}
 80020f0:	4770      	bx	lr
 80020f2:	bf00      	nop
 80020f4:	200006ac 	.word	0x200006ac

080020f8 <SSD1306_Putc>:

char SSD1306_Putc(char ch, FontDef_t* Font, SSD1306_COLOR_t color) {
 80020f8:	b580      	push	{r7, lr}
 80020fa:	b086      	sub	sp, #24
 80020fc:	af00      	add	r7, sp, #0
 80020fe:	4603      	mov	r3, r0
 8002100:	6039      	str	r1, [r7, #0]
 8002102:	71fb      	strb	r3, [r7, #7]
 8002104:	4613      	mov	r3, r2
 8002106:	71bb      	strb	r3, [r7, #6]
	uint32_t i, b, j;
	
	/* Check available space in LCD */
	if (
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8002108:	4b3a      	ldr	r3, [pc, #232]	; (80021f4 <SSD1306_Putc+0xfc>)
 800210a:	881b      	ldrh	r3, [r3, #0]
 800210c:	461a      	mov	r2, r3
 800210e:	683b      	ldr	r3, [r7, #0]
 8002110:	781b      	ldrb	r3, [r3, #0]
 8002112:	4413      	add	r3, r2
	if (
 8002114:	2b81      	cmp	r3, #129	; 0x81
 8002116:	dc07      	bgt.n	8002128 <SSD1306_Putc+0x30>
		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font->FontHeight)
 8002118:	4b36      	ldr	r3, [pc, #216]	; (80021f4 <SSD1306_Putc+0xfc>)
 800211a:	885b      	ldrh	r3, [r3, #2]
 800211c:	461a      	mov	r2, r3
 800211e:	683b      	ldr	r3, [r7, #0]
 8002120:	785b      	ldrb	r3, [r3, #1]
 8002122:	4413      	add	r3, r2
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8002124:	2b3f      	cmp	r3, #63	; 0x3f
 8002126:	dd01      	ble.n	800212c <SSD1306_Putc+0x34>
	) {
		/* Error */
		return 0;
 8002128:	2300      	movs	r3, #0
 800212a:	e05e      	b.n	80021ea <SSD1306_Putc+0xf2>
	}
	
	/* Go through font */
	for (i = 0; i < Font->FontHeight; i++) {
 800212c:	2300      	movs	r3, #0
 800212e:	617b      	str	r3, [r7, #20]
 8002130:	e04b      	b.n	80021ca <SSD1306_Putc+0xd2>
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 8002132:	683b      	ldr	r3, [r7, #0]
 8002134:	685a      	ldr	r2, [r3, #4]
 8002136:	79fb      	ldrb	r3, [r7, #7]
 8002138:	3b20      	subs	r3, #32
 800213a:	6839      	ldr	r1, [r7, #0]
 800213c:	7849      	ldrb	r1, [r1, #1]
 800213e:	fb01 f303 	mul.w	r3, r1, r3
 8002142:	4619      	mov	r1, r3
 8002144:	697b      	ldr	r3, [r7, #20]
 8002146:	440b      	add	r3, r1
 8002148:	005b      	lsls	r3, r3, #1
 800214a:	4413      	add	r3, r2
 800214c:	881b      	ldrh	r3, [r3, #0]
 800214e:	60fb      	str	r3, [r7, #12]
		for (j = 0; j < Font->FontWidth; j++) {
 8002150:	2300      	movs	r3, #0
 8002152:	613b      	str	r3, [r7, #16]
 8002154:	e030      	b.n	80021b8 <SSD1306_Putc+0xc0>
			if ((b << j) & 0x8000) {
 8002156:	68fa      	ldr	r2, [r7, #12]
 8002158:	693b      	ldr	r3, [r7, #16]
 800215a:	fa02 f303 	lsl.w	r3, r2, r3
 800215e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002162:	2b00      	cmp	r3, #0
 8002164:	d010      	beq.n	8002188 <SSD1306_Putc+0x90>
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
 8002166:	4b23      	ldr	r3, [pc, #140]	; (80021f4 <SSD1306_Putc+0xfc>)
 8002168:	881a      	ldrh	r2, [r3, #0]
 800216a:	693b      	ldr	r3, [r7, #16]
 800216c:	b29b      	uxth	r3, r3
 800216e:	4413      	add	r3, r2
 8002170:	b298      	uxth	r0, r3
 8002172:	4b20      	ldr	r3, [pc, #128]	; (80021f4 <SSD1306_Putc+0xfc>)
 8002174:	885a      	ldrh	r2, [r3, #2]
 8002176:	697b      	ldr	r3, [r7, #20]
 8002178:	b29b      	uxth	r3, r3
 800217a:	4413      	add	r3, r2
 800217c:	b29b      	uxth	r3, r3
 800217e:	79ba      	ldrb	r2, [r7, #6]
 8002180:	4619      	mov	r1, r3
 8002182:	f7ff ff39 	bl	8001ff8 <SSD1306_DrawPixel>
 8002186:	e014      	b.n	80021b2 <SSD1306_Putc+0xba>
			} else {
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 8002188:	4b1a      	ldr	r3, [pc, #104]	; (80021f4 <SSD1306_Putc+0xfc>)
 800218a:	881a      	ldrh	r2, [r3, #0]
 800218c:	693b      	ldr	r3, [r7, #16]
 800218e:	b29b      	uxth	r3, r3
 8002190:	4413      	add	r3, r2
 8002192:	b298      	uxth	r0, r3
 8002194:	4b17      	ldr	r3, [pc, #92]	; (80021f4 <SSD1306_Putc+0xfc>)
 8002196:	885a      	ldrh	r2, [r3, #2]
 8002198:	697b      	ldr	r3, [r7, #20]
 800219a:	b29b      	uxth	r3, r3
 800219c:	4413      	add	r3, r2
 800219e:	b299      	uxth	r1, r3
 80021a0:	79bb      	ldrb	r3, [r7, #6]
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	bf0c      	ite	eq
 80021a6:	2301      	moveq	r3, #1
 80021a8:	2300      	movne	r3, #0
 80021aa:	b2db      	uxtb	r3, r3
 80021ac:	461a      	mov	r2, r3
 80021ae:	f7ff ff23 	bl	8001ff8 <SSD1306_DrawPixel>
		for (j = 0; j < Font->FontWidth; j++) {
 80021b2:	693b      	ldr	r3, [r7, #16]
 80021b4:	3301      	adds	r3, #1
 80021b6:	613b      	str	r3, [r7, #16]
 80021b8:	683b      	ldr	r3, [r7, #0]
 80021ba:	781b      	ldrb	r3, [r3, #0]
 80021bc:	461a      	mov	r2, r3
 80021be:	693b      	ldr	r3, [r7, #16]
 80021c0:	4293      	cmp	r3, r2
 80021c2:	d3c8      	bcc.n	8002156 <SSD1306_Putc+0x5e>
	for (i = 0; i < Font->FontHeight; i++) {
 80021c4:	697b      	ldr	r3, [r7, #20]
 80021c6:	3301      	adds	r3, #1
 80021c8:	617b      	str	r3, [r7, #20]
 80021ca:	683b      	ldr	r3, [r7, #0]
 80021cc:	785b      	ldrb	r3, [r3, #1]
 80021ce:	461a      	mov	r2, r3
 80021d0:	697b      	ldr	r3, [r7, #20]
 80021d2:	4293      	cmp	r3, r2
 80021d4:	d3ad      	bcc.n	8002132 <SSD1306_Putc+0x3a>
			}
		}
	}
	
	/* Increase pointer */
	SSD1306.CurrentX += Font->FontWidth;
 80021d6:	4b07      	ldr	r3, [pc, #28]	; (80021f4 <SSD1306_Putc+0xfc>)
 80021d8:	881a      	ldrh	r2, [r3, #0]
 80021da:	683b      	ldr	r3, [r7, #0]
 80021dc:	781b      	ldrb	r3, [r3, #0]
 80021de:	b29b      	uxth	r3, r3
 80021e0:	4413      	add	r3, r2
 80021e2:	b29a      	uxth	r2, r3
 80021e4:	4b03      	ldr	r3, [pc, #12]	; (80021f4 <SSD1306_Putc+0xfc>)
 80021e6:	801a      	strh	r2, [r3, #0]
	
	/* Return character written */
	return ch;
 80021e8:	79fb      	ldrb	r3, [r7, #7]
}
 80021ea:	4618      	mov	r0, r3
 80021ec:	3718      	adds	r7, #24
 80021ee:	46bd      	mov	sp, r7
 80021f0:	bd80      	pop	{r7, pc}
 80021f2:	bf00      	nop
 80021f4:	200006ac 	.word	0x200006ac

080021f8 <SSD1306_Puts>:

char SSD1306_Puts(char* str, FontDef_t* Font, SSD1306_COLOR_t color) {
 80021f8:	b580      	push	{r7, lr}
 80021fa:	b084      	sub	sp, #16
 80021fc:	af00      	add	r7, sp, #0
 80021fe:	60f8      	str	r0, [r7, #12]
 8002200:	60b9      	str	r1, [r7, #8]
 8002202:	4613      	mov	r3, r2
 8002204:	71fb      	strb	r3, [r7, #7]
	/* Write characters */
	while (*str) {
 8002206:	e012      	b.n	800222e <SSD1306_Puts+0x36>
		/* Write character by character */
		if (SSD1306_Putc(*str, Font, color) != *str) {
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	781b      	ldrb	r3, [r3, #0]
 800220c:	79fa      	ldrb	r2, [r7, #7]
 800220e:	68b9      	ldr	r1, [r7, #8]
 8002210:	4618      	mov	r0, r3
 8002212:	f7ff ff71 	bl	80020f8 <SSD1306_Putc>
 8002216:	4603      	mov	r3, r0
 8002218:	461a      	mov	r2, r3
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	781b      	ldrb	r3, [r3, #0]
 800221e:	429a      	cmp	r2, r3
 8002220:	d002      	beq.n	8002228 <SSD1306_Puts+0x30>
			/* Return error */
			return *str;
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	781b      	ldrb	r3, [r3, #0]
 8002226:	e008      	b.n	800223a <SSD1306_Puts+0x42>
		}
		
		/* Increase string pointer */
		str++;
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	3301      	adds	r3, #1
 800222c:	60fb      	str	r3, [r7, #12]
	while (*str) {
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	781b      	ldrb	r3, [r3, #0]
 8002232:	2b00      	cmp	r3, #0
 8002234:	d1e8      	bne.n	8002208 <SSD1306_Puts+0x10>
	}
	
	/* Everything OK, zero should be returned */
	return *str;
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	781b      	ldrb	r3, [r3, #0]
}
 800223a:	4618      	mov	r0, r3
 800223c:	3710      	adds	r7, #16
 800223e:	46bd      	mov	sp, r7
 8002240:	bd80      	pop	{r7, pc}
	...

08002244 <ssd1306_I2C_Init>:
//  _| |_ / /_| |____ 
// |_____|____|\_____|
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////

void ssd1306_I2C_Init() {
 8002244:	b480      	push	{r7}
 8002246:	b083      	sub	sp, #12
 8002248:	af00      	add	r7, sp, #0
	//MX_I2C1_Init();
	uint32_t p = 250000;
 800224a:	4b07      	ldr	r3, [pc, #28]	; (8002268 <ssd1306_I2C_Init+0x24>)
 800224c:	607b      	str	r3, [r7, #4]
	while(p>0)
 800224e:	e002      	b.n	8002256 <ssd1306_I2C_Init+0x12>
		p--;
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	3b01      	subs	r3, #1
 8002254:	607b      	str	r3, [r7, #4]
	while(p>0)
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	2b00      	cmp	r3, #0
 800225a:	d1f9      	bne.n	8002250 <ssd1306_I2C_Init+0xc>
	//HAL_I2C_DeInit(&hi2c1);
	//p = 250000;
	//while(p>0)
	//	p--;
	//MX_I2C1_Init();
}
 800225c:	bf00      	nop
 800225e:	370c      	adds	r7, #12
 8002260:	46bd      	mov	sp, r7
 8002262:	bc80      	pop	{r7}
 8002264:	4770      	bx	lr
 8002266:	bf00      	nop
 8002268:	0003d090 	.word	0x0003d090

0800226c <ssd1306_I2C_WriteMulti>:

void ssd1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 800226c:	b590      	push	{r4, r7, lr}
 800226e:	b0c7      	sub	sp, #284	; 0x11c
 8002270:	af02      	add	r7, sp, #8
 8002272:	4604      	mov	r4, r0
 8002274:	4608      	mov	r0, r1
 8002276:	4639      	mov	r1, r7
 8002278:	600a      	str	r2, [r1, #0]
 800227a:	4619      	mov	r1, r3
 800227c:	1dfb      	adds	r3, r7, #7
 800227e:	4622      	mov	r2, r4
 8002280:	701a      	strb	r2, [r3, #0]
 8002282:	1dbb      	adds	r3, r7, #6
 8002284:	4602      	mov	r2, r0
 8002286:	701a      	strb	r2, [r3, #0]
 8002288:	1d3b      	adds	r3, r7, #4
 800228a:	460a      	mov	r2, r1
 800228c:	801a      	strh	r2, [r3, #0]
uint8_t dt[256];
dt[0] = reg;
 800228e:	f107 030c 	add.w	r3, r7, #12
 8002292:	1dba      	adds	r2, r7, #6
 8002294:	7812      	ldrb	r2, [r2, #0]
 8002296:	701a      	strb	r2, [r3, #0]
uint8_t i;
for(i = 0; i < count; i++)
 8002298:	2300      	movs	r3, #0
 800229a:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 800229e:	e010      	b.n	80022c2 <ssd1306_I2C_WriteMulti+0x56>
dt[i+1] = data[i];
 80022a0:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 80022a4:	463a      	mov	r2, r7
 80022a6:	6812      	ldr	r2, [r2, #0]
 80022a8:	441a      	add	r2, r3
 80022aa:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 80022ae:	3301      	adds	r3, #1
 80022b0:	7811      	ldrb	r1, [r2, #0]
 80022b2:	f107 020c 	add.w	r2, r7, #12
 80022b6:	54d1      	strb	r1, [r2, r3]
for(i = 0; i < count; i++)
 80022b8:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 80022bc:	3301      	adds	r3, #1
 80022be:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 80022c2:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 80022c6:	b29b      	uxth	r3, r3
 80022c8:	1d3a      	adds	r2, r7, #4
 80022ca:	8812      	ldrh	r2, [r2, #0]
 80022cc:	429a      	cmp	r2, r3
 80022ce:	d8e7      	bhi.n	80022a0 <ssd1306_I2C_WriteMulti+0x34>
HAL_I2C_Master_Transmit(&hi2c1, address, dt, count+1, 10);
 80022d0:	1dfb      	adds	r3, r7, #7
 80022d2:	781b      	ldrb	r3, [r3, #0]
 80022d4:	b299      	uxth	r1, r3
 80022d6:	1d3b      	adds	r3, r7, #4
 80022d8:	881b      	ldrh	r3, [r3, #0]
 80022da:	3301      	adds	r3, #1
 80022dc:	b298      	uxth	r0, r3
 80022de:	f107 020c 	add.w	r2, r7, #12
 80022e2:	230a      	movs	r3, #10
 80022e4:	9300      	str	r3, [sp, #0]
 80022e6:	4603      	mov	r3, r0
 80022e8:	4803      	ldr	r0, [pc, #12]	; (80022f8 <ssd1306_I2C_WriteMulti+0x8c>)
 80022ea:	f000 fe4f 	bl	8002f8c <HAL_I2C_Master_Transmit>
}
 80022ee:	bf00      	nop
 80022f0:	f507 778a 	add.w	r7, r7, #276	; 0x114
 80022f4:	46bd      	mov	sp, r7
 80022f6:	bd90      	pop	{r4, r7, pc}
 80022f8:	200006dc 	.word	0x200006dc

080022fc <ssd1306_I2C_Write>:


void ssd1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data) {
 80022fc:	b580      	push	{r7, lr}
 80022fe:	b086      	sub	sp, #24
 8002300:	af02      	add	r7, sp, #8
 8002302:	4603      	mov	r3, r0
 8002304:	71fb      	strb	r3, [r7, #7]
 8002306:	460b      	mov	r3, r1
 8002308:	71bb      	strb	r3, [r7, #6]
 800230a:	4613      	mov	r3, r2
 800230c:	717b      	strb	r3, [r7, #5]
	uint8_t dt[2];
	dt[0] = reg;
 800230e:	79bb      	ldrb	r3, [r7, #6]
 8002310:	733b      	strb	r3, [r7, #12]
	dt[1] = data;
 8002312:	797b      	ldrb	r3, [r7, #5]
 8002314:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1, address, dt, 2, 10);
 8002316:	79fb      	ldrb	r3, [r7, #7]
 8002318:	b299      	uxth	r1, r3
 800231a:	f107 020c 	add.w	r2, r7, #12
 800231e:	230a      	movs	r3, #10
 8002320:	9300      	str	r3, [sp, #0]
 8002322:	2302      	movs	r3, #2
 8002324:	4803      	ldr	r0, [pc, #12]	; (8002334 <ssd1306_I2C_Write+0x38>)
 8002326:	f000 fe31 	bl	8002f8c <HAL_I2C_Master_Transmit>
}
 800232a:	bf00      	nop
 800232c:	3710      	adds	r7, #16
 800232e:	46bd      	mov	sp, r7
 8002330:	bd80      	pop	{r7, pc}
 8002332:	bf00      	nop
 8002334:	200006dc 	.word	0x200006dc

08002338 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002338:	b480      	push	{r7}
 800233a:	b085      	sub	sp, #20
 800233c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800233e:	4b15      	ldr	r3, [pc, #84]	; (8002394 <HAL_MspInit+0x5c>)
 8002340:	699b      	ldr	r3, [r3, #24]
 8002342:	4a14      	ldr	r2, [pc, #80]	; (8002394 <HAL_MspInit+0x5c>)
 8002344:	f043 0301 	orr.w	r3, r3, #1
 8002348:	6193      	str	r3, [r2, #24]
 800234a:	4b12      	ldr	r3, [pc, #72]	; (8002394 <HAL_MspInit+0x5c>)
 800234c:	699b      	ldr	r3, [r3, #24]
 800234e:	f003 0301 	and.w	r3, r3, #1
 8002352:	60bb      	str	r3, [r7, #8]
 8002354:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002356:	4b0f      	ldr	r3, [pc, #60]	; (8002394 <HAL_MspInit+0x5c>)
 8002358:	69db      	ldr	r3, [r3, #28]
 800235a:	4a0e      	ldr	r2, [pc, #56]	; (8002394 <HAL_MspInit+0x5c>)
 800235c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002360:	61d3      	str	r3, [r2, #28]
 8002362:	4b0c      	ldr	r3, [pc, #48]	; (8002394 <HAL_MspInit+0x5c>)
 8002364:	69db      	ldr	r3, [r3, #28]
 8002366:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800236a:	607b      	str	r3, [r7, #4]
 800236c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800236e:	4b0a      	ldr	r3, [pc, #40]	; (8002398 <HAL_MspInit+0x60>)
 8002370:	685b      	ldr	r3, [r3, #4]
 8002372:	60fb      	str	r3, [r7, #12]
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800237a:	60fb      	str	r3, [r7, #12]
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002382:	60fb      	str	r3, [r7, #12]
 8002384:	4a04      	ldr	r2, [pc, #16]	; (8002398 <HAL_MspInit+0x60>)
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800238a:	bf00      	nop
 800238c:	3714      	adds	r7, #20
 800238e:	46bd      	mov	sp, r7
 8002390:	bc80      	pop	{r7}
 8002392:	4770      	bx	lr
 8002394:	40021000 	.word	0x40021000
 8002398:	40010000 	.word	0x40010000

0800239c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800239c:	b580      	push	{r7, lr}
 800239e:	b088      	sub	sp, #32
 80023a0:	af00      	add	r7, sp, #0
 80023a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023a4:	f107 0310 	add.w	r3, r7, #16
 80023a8:	2200      	movs	r2, #0
 80023aa:	601a      	str	r2, [r3, #0]
 80023ac:	605a      	str	r2, [r3, #4]
 80023ae:	609a      	str	r2, [r3, #8]
 80023b0:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	4a15      	ldr	r2, [pc, #84]	; (800240c <HAL_I2C_MspInit+0x70>)
 80023b8:	4293      	cmp	r3, r2
 80023ba:	d123      	bne.n	8002404 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80023bc:	4b14      	ldr	r3, [pc, #80]	; (8002410 <HAL_I2C_MspInit+0x74>)
 80023be:	699b      	ldr	r3, [r3, #24]
 80023c0:	4a13      	ldr	r2, [pc, #76]	; (8002410 <HAL_I2C_MspInit+0x74>)
 80023c2:	f043 0308 	orr.w	r3, r3, #8
 80023c6:	6193      	str	r3, [r2, #24]
 80023c8:	4b11      	ldr	r3, [pc, #68]	; (8002410 <HAL_I2C_MspInit+0x74>)
 80023ca:	699b      	ldr	r3, [r3, #24]
 80023cc:	f003 0308 	and.w	r3, r3, #8
 80023d0:	60fb      	str	r3, [r7, #12]
 80023d2:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80023d4:	23c0      	movs	r3, #192	; 0xc0
 80023d6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80023d8:	2312      	movs	r3, #18
 80023da:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80023dc:	2303      	movs	r3, #3
 80023de:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80023e0:	f107 0310 	add.w	r3, r7, #16
 80023e4:	4619      	mov	r1, r3
 80023e6:	480b      	ldr	r0, [pc, #44]	; (8002414 <HAL_I2C_MspInit+0x78>)
 80023e8:	f000 fb1e 	bl	8002a28 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80023ec:	4b08      	ldr	r3, [pc, #32]	; (8002410 <HAL_I2C_MspInit+0x74>)
 80023ee:	69db      	ldr	r3, [r3, #28]
 80023f0:	4a07      	ldr	r2, [pc, #28]	; (8002410 <HAL_I2C_MspInit+0x74>)
 80023f2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80023f6:	61d3      	str	r3, [r2, #28]
 80023f8:	4b05      	ldr	r3, [pc, #20]	; (8002410 <HAL_I2C_MspInit+0x74>)
 80023fa:	69db      	ldr	r3, [r3, #28]
 80023fc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002400:	60bb      	str	r3, [r7, #8]
 8002402:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002404:	bf00      	nop
 8002406:	3720      	adds	r7, #32
 8002408:	46bd      	mov	sp, r7
 800240a:	bd80      	pop	{r7, pc}
 800240c:	40005400 	.word	0x40005400
 8002410:	40021000 	.word	0x40021000
 8002414:	40010c00 	.word	0x40010c00

08002418 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002418:	b480      	push	{r7}
 800241a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800241c:	bf00      	nop
 800241e:	46bd      	mov	sp, r7
 8002420:	bc80      	pop	{r7}
 8002422:	4770      	bx	lr

08002424 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002424:	b480      	push	{r7}
 8002426:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002428:	e7fe      	b.n	8002428 <HardFault_Handler+0x4>

0800242a <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800242a:	b480      	push	{r7}
 800242c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800242e:	e7fe      	b.n	800242e <MemManage_Handler+0x4>

08002430 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002430:	b480      	push	{r7}
 8002432:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002434:	e7fe      	b.n	8002434 <BusFault_Handler+0x4>

08002436 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002436:	b480      	push	{r7}
 8002438:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800243a:	e7fe      	b.n	800243a <UsageFault_Handler+0x4>

0800243c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800243c:	b480      	push	{r7}
 800243e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002440:	bf00      	nop
 8002442:	46bd      	mov	sp, r7
 8002444:	bc80      	pop	{r7}
 8002446:	4770      	bx	lr

08002448 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002448:	b480      	push	{r7}
 800244a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800244c:	bf00      	nop
 800244e:	46bd      	mov	sp, r7
 8002450:	bc80      	pop	{r7}
 8002452:	4770      	bx	lr

08002454 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002454:	b480      	push	{r7}
 8002456:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002458:	bf00      	nop
 800245a:	46bd      	mov	sp, r7
 800245c:	bc80      	pop	{r7}
 800245e:	4770      	bx	lr

08002460 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002460:	b580      	push	{r7, lr}
 8002462:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002464:	f000 f9e0 	bl	8002828 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  	  if(ticks) ticks--;
 8002468:	4b05      	ldr	r3, [pc, #20]	; (8002480 <SysTick_Handler+0x20>)
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	2b00      	cmp	r3, #0
 800246e:	d004      	beq.n	800247a <SysTick_Handler+0x1a>
 8002470:	4b03      	ldr	r3, [pc, #12]	; (8002480 <SysTick_Handler+0x20>)
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	3b01      	subs	r3, #1
 8002476:	4a02      	ldr	r2, [pc, #8]	; (8002480 <SysTick_Handler+0x20>)
 8002478:	6013      	str	r3, [r2, #0]
  /* USER CODE END SysTick_IRQn 1 */
}
 800247a:	bf00      	nop
 800247c:	bd80      	pop	{r7, pc}
 800247e:	bf00      	nop
 8002480:	20000798 	.word	0x20000798

08002484 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8002484:	b580      	push	{r7, lr}
 8002486:	b084      	sub	sp, #16
 8002488:	af00      	add	r7, sp, #0
 800248a:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 800248c:	4b11      	ldr	r3, [pc, #68]	; (80024d4 <_sbrk+0x50>)
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	2b00      	cmp	r3, #0
 8002492:	d102      	bne.n	800249a <_sbrk+0x16>
		heap_end = &end;
 8002494:	4b0f      	ldr	r3, [pc, #60]	; (80024d4 <_sbrk+0x50>)
 8002496:	4a10      	ldr	r2, [pc, #64]	; (80024d8 <_sbrk+0x54>)
 8002498:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 800249a:	4b0e      	ldr	r3, [pc, #56]	; (80024d4 <_sbrk+0x50>)
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 80024a0:	4b0c      	ldr	r3, [pc, #48]	; (80024d4 <_sbrk+0x50>)
 80024a2:	681a      	ldr	r2, [r3, #0]
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	4413      	add	r3, r2
 80024a8:	466a      	mov	r2, sp
 80024aa:	4293      	cmp	r3, r2
 80024ac:	d907      	bls.n	80024be <_sbrk+0x3a>
	{
		errno = ENOMEM;
 80024ae:	f002 fa71 	bl	8004994 <__errno>
 80024b2:	4602      	mov	r2, r0
 80024b4:	230c      	movs	r3, #12
 80024b6:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 80024b8:	f04f 33ff 	mov.w	r3, #4294967295
 80024bc:	e006      	b.n	80024cc <_sbrk+0x48>
	}

	heap_end += incr;
 80024be:	4b05      	ldr	r3, [pc, #20]	; (80024d4 <_sbrk+0x50>)
 80024c0:	681a      	ldr	r2, [r3, #0]
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	4413      	add	r3, r2
 80024c6:	4a03      	ldr	r2, [pc, #12]	; (80024d4 <_sbrk+0x50>)
 80024c8:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 80024ca:	68fb      	ldr	r3, [r7, #12]
}
 80024cc:	4618      	mov	r0, r3
 80024ce:	3710      	adds	r7, #16
 80024d0:	46bd      	mov	sp, r7
 80024d2:	bd80      	pop	{r7, pc}
 80024d4:	200006b4 	.word	0x200006b4
 80024d8:	200008b8 	.word	0x200008b8

080024dc <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80024dc:	b480      	push	{r7}
 80024de:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 80024e0:	4b15      	ldr	r3, [pc, #84]	; (8002538 <SystemInit+0x5c>)
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	4a14      	ldr	r2, [pc, #80]	; (8002538 <SystemInit+0x5c>)
 80024e6:	f043 0301 	orr.w	r3, r3, #1
 80024ea:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 80024ec:	4b12      	ldr	r3, [pc, #72]	; (8002538 <SystemInit+0x5c>)
 80024ee:	685a      	ldr	r2, [r3, #4]
 80024f0:	4911      	ldr	r1, [pc, #68]	; (8002538 <SystemInit+0x5c>)
 80024f2:	4b12      	ldr	r3, [pc, #72]	; (800253c <SystemInit+0x60>)
 80024f4:	4013      	ands	r3, r2
 80024f6:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 80024f8:	4b0f      	ldr	r3, [pc, #60]	; (8002538 <SystemInit+0x5c>)
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	4a0e      	ldr	r2, [pc, #56]	; (8002538 <SystemInit+0x5c>)
 80024fe:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8002502:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002506:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8002508:	4b0b      	ldr	r3, [pc, #44]	; (8002538 <SystemInit+0x5c>)
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	4a0a      	ldr	r2, [pc, #40]	; (8002538 <SystemInit+0x5c>)
 800250e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002512:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8002514:	4b08      	ldr	r3, [pc, #32]	; (8002538 <SystemInit+0x5c>)
 8002516:	685b      	ldr	r3, [r3, #4]
 8002518:	4a07      	ldr	r2, [pc, #28]	; (8002538 <SystemInit+0x5c>)
 800251a:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 800251e:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8002520:	4b05      	ldr	r3, [pc, #20]	; (8002538 <SystemInit+0x5c>)
 8002522:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8002526:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8002528:	4b05      	ldr	r3, [pc, #20]	; (8002540 <SystemInit+0x64>)
 800252a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800252e:	609a      	str	r2, [r3, #8]
#endif 
}
 8002530:	bf00      	nop
 8002532:	46bd      	mov	sp, r7
 8002534:	bc80      	pop	{r7}
 8002536:	4770      	bx	lr
 8002538:	40021000 	.word	0x40021000
 800253c:	f8ff0000 	.word	0xf8ff0000
 8002540:	e000ed00 	.word	0xe000ed00

08002544 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8002544:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8002546:	e003      	b.n	8002550 <LoopCopyDataInit>

08002548 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8002548:	4b0b      	ldr	r3, [pc, #44]	; (8002578 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 800254a:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 800254c:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 800254e:	3104      	adds	r1, #4

08002550 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8002550:	480a      	ldr	r0, [pc, #40]	; (800257c <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8002552:	4b0b      	ldr	r3, [pc, #44]	; (8002580 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8002554:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8002556:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8002558:	d3f6      	bcc.n	8002548 <CopyDataInit>
  ldr r2, =_sbss
 800255a:	4a0a      	ldr	r2, [pc, #40]	; (8002584 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 800255c:	e002      	b.n	8002564 <LoopFillZerobss>

0800255e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 800255e:	2300      	movs	r3, #0
  str r3, [r2], #4
 8002560:	f842 3b04 	str.w	r3, [r2], #4

08002564 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8002564:	4b08      	ldr	r3, [pc, #32]	; (8002588 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8002566:	429a      	cmp	r2, r3
  bcc FillZerobss
 8002568:	d3f9      	bcc.n	800255e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800256a:	f7ff ffb7 	bl	80024dc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800256e:	f002 fa17 	bl	80049a0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002572:	f7fe fdad 	bl	80010d0 <main>
  bx lr
 8002576:	4770      	bx	lr
  ldr r3, =_sidata
 8002578:	08008810 	.word	0x08008810
  ldr r0, =_sdata
 800257c:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8002580:	20000278 	.word	0x20000278
  ldr r2, =_sbss
 8002584:	20000278 	.word	0x20000278
  ldr r3, = _ebss
 8002588:	200008b4 	.word	0x200008b4

0800258c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800258c:	e7fe      	b.n	800258c <ADC1_2_IRQHandler>
	...

08002590 <inicializar_despachador>:
static TaskStat *lista_tareas;

void inicializar_despachador(TaskStat *lista, uint32_t len,
		void (*start_timer)(void), uint32_t (*stop_timer)(void),
		void (*falla_sistema)(void))
{
 8002590:	b580      	push	{r7, lr}
 8002592:	b086      	sub	sp, #24
 8002594:	af00      	add	r7, sp, #0
 8002596:	60f8      	str	r0, [r7, #12]
 8002598:	60b9      	str	r1, [r7, #8]
 800259a:	607a      	str	r2, [r7, #4]
 800259c:	603b      	str	r3, [r7, #0]
	uint32_t i;
	monitor_start = start_timer;
 800259e:	4a14      	ldr	r2, [pc, #80]	; (80025f0 <inicializar_despachador+0x60>)
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	6013      	str	r3, [r2, #0]
	monitor_stop = stop_timer;
 80025a4:	4a13      	ldr	r2, [pc, #76]	; (80025f4 <inicializar_despachador+0x64>)
 80025a6:	683b      	ldr	r3, [r7, #0]
 80025a8:	6013      	str	r3, [r2, #0]
	fallar_sistema = falla_sistema;
 80025aa:	4a13      	ldr	r2, [pc, #76]	; (80025f8 <inicializar_despachador+0x68>)
 80025ac:	6a3b      	ldr	r3, [r7, #32]
 80025ae:	6013      	str	r3, [r2, #0]
	tareas_a_despachar = 0;
 80025b0:	4b12      	ldr	r3, [pc, #72]	; (80025fc <inicializar_despachador+0x6c>)
 80025b2:	2200      	movs	r2, #0
 80025b4:	601a      	str	r2, [r3, #0]
	max_len_lista_tareas = len;
 80025b6:	4a12      	ldr	r2, [pc, #72]	; (8002600 <inicializar_despachador+0x70>)
 80025b8:	68bb      	ldr	r3, [r7, #8]
 80025ba:	6013      	str	r3, [r2, #0]
	lista_tareas = lista;
 80025bc:	4a11      	ldr	r2, [pc, #68]	; (8002604 <inicializar_despachador+0x74>)
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	6013      	str	r3, [r2, #0]
	for (i = 0; i < len; i++)
 80025c2:	2300      	movs	r3, #0
 80025c4:	617b      	str	r3, [r7, #20]
 80025c6:	e00b      	b.n	80025e0 <inicializar_despachador+0x50>
		memset(&lista[i], 0, sizeof(TaskStat));
 80025c8:	697b      	ldr	r3, [r7, #20]
 80025ca:	015b      	lsls	r3, r3, #5
 80025cc:	68fa      	ldr	r2, [r7, #12]
 80025ce:	4413      	add	r3, r2
 80025d0:	2220      	movs	r2, #32
 80025d2:	2100      	movs	r1, #0
 80025d4:	4618      	mov	r0, r3
 80025d6:	f002 fa07 	bl	80049e8 <memset>
	for (i = 0; i < len; i++)
 80025da:	697b      	ldr	r3, [r7, #20]
 80025dc:	3301      	adds	r3, #1
 80025de:	617b      	str	r3, [r7, #20]
 80025e0:	697a      	ldr	r2, [r7, #20]
 80025e2:	68bb      	ldr	r3, [r7, #8]
 80025e4:	429a      	cmp	r2, r3
 80025e6:	d3ef      	bcc.n	80025c8 <inicializar_despachador+0x38>
}
 80025e8:	bf00      	nop
 80025ea:	3718      	adds	r7, #24
 80025ec:	46bd      	mov	sp, r7
 80025ee:	bd80      	pop	{r7, pc}
 80025f0:	200006bc 	.word	0x200006bc
 80025f4:	200006c0 	.word	0x200006c0
 80025f8:	200006b8 	.word	0x200006b8
 80025fc:	200006c8 	.word	0x200006c8
 8002600:	200006c4 	.word	0x200006c4
 8002604:	200006cc 	.word	0x200006cc

08002608 <agregar_tarea>:

int agregar_tarea(TaskStat *lista, void (*tarea)(void *p), void *param,
		int offset, int periodo, int bcet, int wcet)
{
 8002608:	b480      	push	{r7}
 800260a:	b085      	sub	sp, #20
 800260c:	af00      	add	r7, sp, #0
 800260e:	60f8      	str	r0, [r7, #12]
 8002610:	60b9      	str	r1, [r7, #8]
 8002612:	607a      	str	r2, [r7, #4]
 8002614:	603b      	str	r3, [r7, #0]
	// Chequeos
	if ((periodo == 0) || (tarea == NULL)
 8002616:	69bb      	ldr	r3, [r7, #24]
 8002618:	2b00      	cmp	r3, #0
 800261a:	d008      	beq.n	800262e <agregar_tarea+0x26>
 800261c:	68bb      	ldr	r3, [r7, #8]
 800261e:	2b00      	cmp	r3, #0
 8002620:	d005      	beq.n	800262e <agregar_tarea+0x26>
			|| tareas_a_despachar == max_len_lista_tareas)
 8002622:	4b22      	ldr	r3, [pc, #136]	; (80026ac <agregar_tarea+0xa4>)
 8002624:	681a      	ldr	r2, [r3, #0]
 8002626:	4b22      	ldr	r3, [pc, #136]	; (80026b0 <agregar_tarea+0xa8>)
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	429a      	cmp	r2, r3
 800262c:	d102      	bne.n	8002634 <agregar_tarea+0x2c>
		return -1;
 800262e:	f04f 33ff 	mov.w	r3, #4294967295
 8002632:	e036      	b.n	80026a2 <agregar_tarea+0x9a>

	//Punteros de la tarea.
	lista[tareas_a_despachar].task = tarea;
 8002634:	4b1d      	ldr	r3, [pc, #116]	; (80026ac <agregar_tarea+0xa4>)
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	015b      	lsls	r3, r3, #5
 800263a:	68fa      	ldr	r2, [r7, #12]
 800263c:	4413      	add	r3, r2
 800263e:	68ba      	ldr	r2, [r7, #8]
 8002640:	619a      	str	r2, [r3, #24]
	lista[tareas_a_despachar].param = param;
 8002642:	4b1a      	ldr	r3, [pc, #104]	; (80026ac <agregar_tarea+0xa4>)
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	015b      	lsls	r3, r3, #5
 8002648:	68fa      	ldr	r2, [r7, #12]
 800264a:	4413      	add	r3, r2
 800264c:	687a      	ldr	r2, [r7, #4]
 800264e:	61da      	str	r2, [r3, #28]

	//Periodo y offset
	lista[tareas_a_despachar].period = periodo;
 8002650:	4b16      	ldr	r3, [pc, #88]	; (80026ac <agregar_tarea+0xa4>)
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	015b      	lsls	r3, r3, #5
 8002656:	68fa      	ldr	r2, [r7, #12]
 8002658:	4413      	add	r3, r2
 800265a:	69ba      	ldr	r2, [r7, #24]
 800265c:	615a      	str	r2, [r3, #20]
	lista[tareas_a_despachar].offset = offset;
 800265e:	4b13      	ldr	r3, [pc, #76]	; (80026ac <agregar_tarea+0xa4>)
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	015b      	lsls	r3, r3, #5
 8002664:	68fa      	ldr	r2, [r7, #12]
 8002666:	4413      	add	r3, r2
 8002668:	683a      	ldr	r2, [r7, #0]
 800266a:	611a      	str	r2, [r3, #16]

	//Cargo los tiempos.
	lista[tareas_a_despachar].et = 0;
 800266c:	4b0f      	ldr	r3, [pc, #60]	; (80026ac <agregar_tarea+0xa4>)
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	015b      	lsls	r3, r3, #5
 8002672:	68fa      	ldr	r2, [r7, #12]
 8002674:	4413      	add	r3, r2
 8002676:	2200      	movs	r2, #0
 8002678:	609a      	str	r2, [r3, #8]
	lista[tareas_a_despachar].bcet = bcet;
 800267a:	4b0c      	ldr	r3, [pc, #48]	; (80026ac <agregar_tarea+0xa4>)
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	015b      	lsls	r3, r3, #5
 8002680:	68fa      	ldr	r2, [r7, #12]
 8002682:	4413      	add	r3, r2
 8002684:	69fa      	ldr	r2, [r7, #28]
 8002686:	601a      	str	r2, [r3, #0]
	lista[tareas_a_despachar].wcet = wcet;
 8002688:	4b08      	ldr	r3, [pc, #32]	; (80026ac <agregar_tarea+0xa4>)
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	015b      	lsls	r3, r3, #5
 800268e:	68fa      	ldr	r2, [r7, #12]
 8002690:	4413      	add	r3, r2
 8002692:	6a3a      	ldr	r2, [r7, #32]
 8002694:	605a      	str	r2, [r3, #4]
	tareas_a_despachar++;
 8002696:	4b05      	ldr	r3, [pc, #20]	; (80026ac <agregar_tarea+0xa4>)
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	3301      	adds	r3, #1
 800269c:	4a03      	ldr	r2, [pc, #12]	; (80026ac <agregar_tarea+0xa4>)
 800269e:	6013      	str	r3, [r2, #0]
	return 0;
 80026a0:	2300      	movs	r3, #0
}
 80026a2:	4618      	mov	r0, r3
 80026a4:	3714      	adds	r7, #20
 80026a6:	46bd      	mov	sp, r7
 80026a8:	bc80      	pop	{r7}
 80026aa:	4770      	bx	lr
 80026ac:	200006c8 	.word	0x200006c8
 80026b0:	200006c4 	.word	0x200006c4

080026b4 <despachar_tarea>:

int despachar_tarea(TaskStat *estado)
{
 80026b4:	b580      	push	{r7, lr}
 80026b6:	b084      	sub	sp, #16
 80026b8:	af00      	add	r7, sp, #0
 80026ba:	6078      	str	r0, [r7, #4]
	int ret = 0;
 80026bc:	2300      	movs	r3, #0
 80026be:	60fb      	str	r3, [r7, #12]
	int valor_us;
	if (!estado->offset)
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	691b      	ldr	r3, [r3, #16]
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d12d      	bne.n	8002724 <despachar_tarea+0x70>
	{
		estado->offset = estado->period - 1;
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	695b      	ldr	r3, [r3, #20]
 80026cc:	1e5a      	subs	r2, r3, #1
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	611a      	str	r2, [r3, #16]
		monitor_start();
 80026d2:	4b19      	ldr	r3, [pc, #100]	; (8002738 <despachar_tarea+0x84>)
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	4798      	blx	r3
		estado->task(estado->param);
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	699b      	ldr	r3, [r3, #24]
 80026dc:	687a      	ldr	r2, [r7, #4]
 80026de:	69d2      	ldr	r2, [r2, #28]
 80026e0:	4610      	mov	r0, r2
 80026e2:	4798      	blx	r3
		valor_us = monitor_stop();
 80026e4:	4b15      	ldr	r3, [pc, #84]	; (800273c <despachar_tarea+0x88>)
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	4798      	blx	r3
 80026ea:	4603      	mov	r3, r0
 80026ec:	60bb      	str	r3, [r7, #8]
		estado->et = valor_us;
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	68ba      	ldr	r2, [r7, #8]
 80026f2:	609a      	str	r2, [r3, #8]
		if (valor_us < estado->bcet || valor_us > estado->wcet)
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	68ba      	ldr	r2, [r7, #8]
 80026fa:	429a      	cmp	r2, r3
 80026fc:	db04      	blt.n	8002708 <despachar_tarea+0x54>
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	685b      	ldr	r3, [r3, #4]
 8002702:	68ba      	ldr	r2, [r7, #8]
 8002704:	429a      	cmp	r2, r3
 8002706:	dd02      	ble.n	800270e <despachar_tarea+0x5a>
			ret--;
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	3b01      	subs	r3, #1
 800270c:	60fb      	str	r3, [r7, #12]
		if (estado->et_wcet < estado->et)
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	68da      	ldr	r2, [r3, #12]
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	689b      	ldr	r3, [r3, #8]
 8002716:	429a      	cmp	r2, r3
 8002718:	da09      	bge.n	800272e <despachar_tarea+0x7a>
			estado->et_wcet = estado->et;
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	689a      	ldr	r2, [r3, #8]
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	60da      	str	r2, [r3, #12]
 8002722:	e004      	b.n	800272e <despachar_tarea+0x7a>
	}
	else
	{
		estado->offset--;
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	691b      	ldr	r3, [r3, #16]
 8002728:	1e5a      	subs	r2, r3, #1
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	611a      	str	r2, [r3, #16]
	}
	return ret;
 800272e:	68fb      	ldr	r3, [r7, #12]
}
 8002730:	4618      	mov	r0, r3
 8002732:	3710      	adds	r7, #16
 8002734:	46bd      	mov	sp, r7
 8002736:	bd80      	pop	{r7, pc}
 8002738:	200006bc 	.word	0x200006bc
 800273c:	200006c0 	.word	0x200006c0

08002740 <despachar_tareas>:

void despachar_tareas(void)
{
 8002740:	b580      	push	{r7, lr}
 8002742:	b082      	sub	sp, #8
 8002744:	af00      	add	r7, sp, #0
	uint32_t i;
	int fallar = 0;
 8002746:	2300      	movs	r3, #0
 8002748:	603b      	str	r3, [r7, #0]
	for (i = 0; i < tareas_a_despachar; i++)
 800274a:	2300      	movs	r3, #0
 800274c:	607b      	str	r3, [r7, #4]
 800274e:	e00e      	b.n	800276e <despachar_tareas+0x2e>
	{
		fallar = despachar_tarea(&lista_tareas[i]);
 8002750:	4b0f      	ldr	r3, [pc, #60]	; (8002790 <despachar_tareas+0x50>)
 8002752:	681a      	ldr	r2, [r3, #0]
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	015b      	lsls	r3, r3, #5
 8002758:	4413      	add	r3, r2
 800275a:	4618      	mov	r0, r3
 800275c:	f7ff ffaa 	bl	80026b4 <despachar_tarea>
 8002760:	6038      	str	r0, [r7, #0]
		if (fallar)
 8002762:	683b      	ldr	r3, [r7, #0]
 8002764:	2b00      	cmp	r3, #0
 8002766:	d108      	bne.n	800277a <despachar_tareas+0x3a>
	for (i = 0; i < tareas_a_despachar; i++)
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	3301      	adds	r3, #1
 800276c:	607b      	str	r3, [r7, #4]
 800276e:	4b09      	ldr	r3, [pc, #36]	; (8002794 <despachar_tareas+0x54>)
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	687a      	ldr	r2, [r7, #4]
 8002774:	429a      	cmp	r2, r3
 8002776:	d3eb      	bcc.n	8002750 <despachar_tareas+0x10>
 8002778:	e000      	b.n	800277c <despachar_tareas+0x3c>
		{
			break;
 800277a:	bf00      	nop
		}
	}
	if (fallar)
 800277c:	683b      	ldr	r3, [r7, #0]
 800277e:	2b00      	cmp	r3, #0
 8002780:	d002      	beq.n	8002788 <despachar_tareas+0x48>
	{
		fallar_sistema();
 8002782:	4b05      	ldr	r3, [pc, #20]	; (8002798 <despachar_tareas+0x58>)
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	4798      	blx	r3
	}
}
 8002788:	bf00      	nop
 800278a:	3708      	adds	r7, #8
 800278c:	46bd      	mov	sp, r7
 800278e:	bd80      	pop	{r7, pc}
 8002790:	200006cc 	.word	0x200006cc
 8002794:	200006c8 	.word	0x200006c8
 8002798:	200006b8 	.word	0x200006b8

0800279c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800279c:	b580      	push	{r7, lr}
 800279e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80027a0:	4b08      	ldr	r3, [pc, #32]	; (80027c4 <HAL_Init+0x28>)
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	4a07      	ldr	r2, [pc, #28]	; (80027c4 <HAL_Init+0x28>)
 80027a6:	f043 0310 	orr.w	r3, r3, #16
 80027aa:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80027ac:	2003      	movs	r0, #3
 80027ae:	f000 f907 	bl	80029c0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80027b2:	2000      	movs	r0, #0
 80027b4:	f000 f808 	bl	80027c8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80027b8:	f7ff fdbe 	bl	8002338 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80027bc:	2300      	movs	r3, #0
}
 80027be:	4618      	mov	r0, r3
 80027c0:	bd80      	pop	{r7, pc}
 80027c2:	bf00      	nop
 80027c4:	40022000 	.word	0x40022000

080027c8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80027c8:	b580      	push	{r7, lr}
 80027ca:	b082      	sub	sp, #8
 80027cc:	af00      	add	r7, sp, #0
 80027ce:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80027d0:	4b12      	ldr	r3, [pc, #72]	; (800281c <HAL_InitTick+0x54>)
 80027d2:	681a      	ldr	r2, [r3, #0]
 80027d4:	4b12      	ldr	r3, [pc, #72]	; (8002820 <HAL_InitTick+0x58>)
 80027d6:	781b      	ldrb	r3, [r3, #0]
 80027d8:	4619      	mov	r1, r3
 80027da:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80027de:	fbb3 f3f1 	udiv	r3, r3, r1
 80027e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80027e6:	4618      	mov	r0, r3
 80027e8:	f000 f911 	bl	8002a0e <HAL_SYSTICK_Config>
 80027ec:	4603      	mov	r3, r0
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d001      	beq.n	80027f6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80027f2:	2301      	movs	r3, #1
 80027f4:	e00e      	b.n	8002814 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	2b0f      	cmp	r3, #15
 80027fa:	d80a      	bhi.n	8002812 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80027fc:	2200      	movs	r2, #0
 80027fe:	6879      	ldr	r1, [r7, #4]
 8002800:	f04f 30ff 	mov.w	r0, #4294967295
 8002804:	f000 f8e7 	bl	80029d6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002808:	4a06      	ldr	r2, [pc, #24]	; (8002824 <HAL_InitTick+0x5c>)
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800280e:	2300      	movs	r3, #0
 8002810:	e000      	b.n	8002814 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002812:	2301      	movs	r3, #1
}
 8002814:	4618      	mov	r0, r3
 8002816:	3708      	adds	r7, #8
 8002818:	46bd      	mov	sp, r7
 800281a:	bd80      	pop	{r7, pc}
 800281c:	20000098 	.word	0x20000098
 8002820:	200000a0 	.word	0x200000a0
 8002824:	2000009c 	.word	0x2000009c

08002828 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002828:	b480      	push	{r7}
 800282a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800282c:	4b05      	ldr	r3, [pc, #20]	; (8002844 <HAL_IncTick+0x1c>)
 800282e:	781b      	ldrb	r3, [r3, #0]
 8002830:	461a      	mov	r2, r3
 8002832:	4b05      	ldr	r3, [pc, #20]	; (8002848 <HAL_IncTick+0x20>)
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	4413      	add	r3, r2
 8002838:	4a03      	ldr	r2, [pc, #12]	; (8002848 <HAL_IncTick+0x20>)
 800283a:	6013      	str	r3, [r2, #0]
}
 800283c:	bf00      	nop
 800283e:	46bd      	mov	sp, r7
 8002840:	bc80      	pop	{r7}
 8002842:	4770      	bx	lr
 8002844:	200000a0 	.word	0x200000a0
 8002848:	200008ac 	.word	0x200008ac

0800284c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800284c:	b480      	push	{r7}
 800284e:	af00      	add	r7, sp, #0
  return uwTick;
 8002850:	4b02      	ldr	r3, [pc, #8]	; (800285c <HAL_GetTick+0x10>)
 8002852:	681b      	ldr	r3, [r3, #0]
}
 8002854:	4618      	mov	r0, r3
 8002856:	46bd      	mov	sp, r7
 8002858:	bc80      	pop	{r7}
 800285a:	4770      	bx	lr
 800285c:	200008ac 	.word	0x200008ac

08002860 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002860:	b480      	push	{r7}
 8002862:	b085      	sub	sp, #20
 8002864:	af00      	add	r7, sp, #0
 8002866:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	f003 0307 	and.w	r3, r3, #7
 800286e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002870:	4b0c      	ldr	r3, [pc, #48]	; (80028a4 <__NVIC_SetPriorityGrouping+0x44>)
 8002872:	68db      	ldr	r3, [r3, #12]
 8002874:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002876:	68ba      	ldr	r2, [r7, #8]
 8002878:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800287c:	4013      	ands	r3, r2
 800287e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002884:	68bb      	ldr	r3, [r7, #8]
 8002886:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002888:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800288c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002890:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002892:	4a04      	ldr	r2, [pc, #16]	; (80028a4 <__NVIC_SetPriorityGrouping+0x44>)
 8002894:	68bb      	ldr	r3, [r7, #8]
 8002896:	60d3      	str	r3, [r2, #12]
}
 8002898:	bf00      	nop
 800289a:	3714      	adds	r7, #20
 800289c:	46bd      	mov	sp, r7
 800289e:	bc80      	pop	{r7}
 80028a0:	4770      	bx	lr
 80028a2:	bf00      	nop
 80028a4:	e000ed00 	.word	0xe000ed00

080028a8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80028a8:	b480      	push	{r7}
 80028aa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80028ac:	4b04      	ldr	r3, [pc, #16]	; (80028c0 <__NVIC_GetPriorityGrouping+0x18>)
 80028ae:	68db      	ldr	r3, [r3, #12]
 80028b0:	0a1b      	lsrs	r3, r3, #8
 80028b2:	f003 0307 	and.w	r3, r3, #7
}
 80028b6:	4618      	mov	r0, r3
 80028b8:	46bd      	mov	sp, r7
 80028ba:	bc80      	pop	{r7}
 80028bc:	4770      	bx	lr
 80028be:	bf00      	nop
 80028c0:	e000ed00 	.word	0xe000ed00

080028c4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80028c4:	b480      	push	{r7}
 80028c6:	b083      	sub	sp, #12
 80028c8:	af00      	add	r7, sp, #0
 80028ca:	4603      	mov	r3, r0
 80028cc:	6039      	str	r1, [r7, #0]
 80028ce:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80028d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	db0a      	blt.n	80028ee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80028d8:	683b      	ldr	r3, [r7, #0]
 80028da:	b2da      	uxtb	r2, r3
 80028dc:	490c      	ldr	r1, [pc, #48]	; (8002910 <__NVIC_SetPriority+0x4c>)
 80028de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028e2:	0112      	lsls	r2, r2, #4
 80028e4:	b2d2      	uxtb	r2, r2
 80028e6:	440b      	add	r3, r1
 80028e8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80028ec:	e00a      	b.n	8002904 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80028ee:	683b      	ldr	r3, [r7, #0]
 80028f0:	b2da      	uxtb	r2, r3
 80028f2:	4908      	ldr	r1, [pc, #32]	; (8002914 <__NVIC_SetPriority+0x50>)
 80028f4:	79fb      	ldrb	r3, [r7, #7]
 80028f6:	f003 030f 	and.w	r3, r3, #15
 80028fa:	3b04      	subs	r3, #4
 80028fc:	0112      	lsls	r2, r2, #4
 80028fe:	b2d2      	uxtb	r2, r2
 8002900:	440b      	add	r3, r1
 8002902:	761a      	strb	r2, [r3, #24]
}
 8002904:	bf00      	nop
 8002906:	370c      	adds	r7, #12
 8002908:	46bd      	mov	sp, r7
 800290a:	bc80      	pop	{r7}
 800290c:	4770      	bx	lr
 800290e:	bf00      	nop
 8002910:	e000e100 	.word	0xe000e100
 8002914:	e000ed00 	.word	0xe000ed00

08002918 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002918:	b480      	push	{r7}
 800291a:	b089      	sub	sp, #36	; 0x24
 800291c:	af00      	add	r7, sp, #0
 800291e:	60f8      	str	r0, [r7, #12]
 8002920:	60b9      	str	r1, [r7, #8]
 8002922:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	f003 0307 	and.w	r3, r3, #7
 800292a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800292c:	69fb      	ldr	r3, [r7, #28]
 800292e:	f1c3 0307 	rsb	r3, r3, #7
 8002932:	2b04      	cmp	r3, #4
 8002934:	bf28      	it	cs
 8002936:	2304      	movcs	r3, #4
 8002938:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800293a:	69fb      	ldr	r3, [r7, #28]
 800293c:	3304      	adds	r3, #4
 800293e:	2b06      	cmp	r3, #6
 8002940:	d902      	bls.n	8002948 <NVIC_EncodePriority+0x30>
 8002942:	69fb      	ldr	r3, [r7, #28]
 8002944:	3b03      	subs	r3, #3
 8002946:	e000      	b.n	800294a <NVIC_EncodePriority+0x32>
 8002948:	2300      	movs	r3, #0
 800294a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800294c:	f04f 32ff 	mov.w	r2, #4294967295
 8002950:	69bb      	ldr	r3, [r7, #24]
 8002952:	fa02 f303 	lsl.w	r3, r2, r3
 8002956:	43da      	mvns	r2, r3
 8002958:	68bb      	ldr	r3, [r7, #8]
 800295a:	401a      	ands	r2, r3
 800295c:	697b      	ldr	r3, [r7, #20]
 800295e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002960:	f04f 31ff 	mov.w	r1, #4294967295
 8002964:	697b      	ldr	r3, [r7, #20]
 8002966:	fa01 f303 	lsl.w	r3, r1, r3
 800296a:	43d9      	mvns	r1, r3
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002970:	4313      	orrs	r3, r2
         );
}
 8002972:	4618      	mov	r0, r3
 8002974:	3724      	adds	r7, #36	; 0x24
 8002976:	46bd      	mov	sp, r7
 8002978:	bc80      	pop	{r7}
 800297a:	4770      	bx	lr

0800297c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800297c:	b580      	push	{r7, lr}
 800297e:	b082      	sub	sp, #8
 8002980:	af00      	add	r7, sp, #0
 8002982:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	3b01      	subs	r3, #1
 8002988:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800298c:	d301      	bcc.n	8002992 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800298e:	2301      	movs	r3, #1
 8002990:	e00f      	b.n	80029b2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002992:	4a0a      	ldr	r2, [pc, #40]	; (80029bc <SysTick_Config+0x40>)
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	3b01      	subs	r3, #1
 8002998:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800299a:	210f      	movs	r1, #15
 800299c:	f04f 30ff 	mov.w	r0, #4294967295
 80029a0:	f7ff ff90 	bl	80028c4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80029a4:	4b05      	ldr	r3, [pc, #20]	; (80029bc <SysTick_Config+0x40>)
 80029a6:	2200      	movs	r2, #0
 80029a8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80029aa:	4b04      	ldr	r3, [pc, #16]	; (80029bc <SysTick_Config+0x40>)
 80029ac:	2207      	movs	r2, #7
 80029ae:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80029b0:	2300      	movs	r3, #0
}
 80029b2:	4618      	mov	r0, r3
 80029b4:	3708      	adds	r7, #8
 80029b6:	46bd      	mov	sp, r7
 80029b8:	bd80      	pop	{r7, pc}
 80029ba:	bf00      	nop
 80029bc:	e000e010 	.word	0xe000e010

080029c0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80029c0:	b580      	push	{r7, lr}
 80029c2:	b082      	sub	sp, #8
 80029c4:	af00      	add	r7, sp, #0
 80029c6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80029c8:	6878      	ldr	r0, [r7, #4]
 80029ca:	f7ff ff49 	bl	8002860 <__NVIC_SetPriorityGrouping>
}
 80029ce:	bf00      	nop
 80029d0:	3708      	adds	r7, #8
 80029d2:	46bd      	mov	sp, r7
 80029d4:	bd80      	pop	{r7, pc}

080029d6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80029d6:	b580      	push	{r7, lr}
 80029d8:	b086      	sub	sp, #24
 80029da:	af00      	add	r7, sp, #0
 80029dc:	4603      	mov	r3, r0
 80029de:	60b9      	str	r1, [r7, #8]
 80029e0:	607a      	str	r2, [r7, #4]
 80029e2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80029e4:	2300      	movs	r3, #0
 80029e6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80029e8:	f7ff ff5e 	bl	80028a8 <__NVIC_GetPriorityGrouping>
 80029ec:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80029ee:	687a      	ldr	r2, [r7, #4]
 80029f0:	68b9      	ldr	r1, [r7, #8]
 80029f2:	6978      	ldr	r0, [r7, #20]
 80029f4:	f7ff ff90 	bl	8002918 <NVIC_EncodePriority>
 80029f8:	4602      	mov	r2, r0
 80029fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80029fe:	4611      	mov	r1, r2
 8002a00:	4618      	mov	r0, r3
 8002a02:	f7ff ff5f 	bl	80028c4 <__NVIC_SetPriority>
}
 8002a06:	bf00      	nop
 8002a08:	3718      	adds	r7, #24
 8002a0a:	46bd      	mov	sp, r7
 8002a0c:	bd80      	pop	{r7, pc}

08002a0e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002a0e:	b580      	push	{r7, lr}
 8002a10:	b082      	sub	sp, #8
 8002a12:	af00      	add	r7, sp, #0
 8002a14:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002a16:	6878      	ldr	r0, [r7, #4]
 8002a18:	f7ff ffb0 	bl	800297c <SysTick_Config>
 8002a1c:	4603      	mov	r3, r0
}
 8002a1e:	4618      	mov	r0, r3
 8002a20:	3708      	adds	r7, #8
 8002a22:	46bd      	mov	sp, r7
 8002a24:	bd80      	pop	{r7, pc}
	...

08002a28 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002a28:	b480      	push	{r7}
 8002a2a:	b08b      	sub	sp, #44	; 0x2c
 8002a2c:	af00      	add	r7, sp, #0
 8002a2e:	6078      	str	r0, [r7, #4]
 8002a30:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002a32:	2300      	movs	r3, #0
 8002a34:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002a36:	2300      	movs	r3, #0
 8002a38:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002a3a:	e127      	b.n	8002c8c <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002a3c:	2201      	movs	r2, #1
 8002a3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a40:	fa02 f303 	lsl.w	r3, r2, r3
 8002a44:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002a46:	683b      	ldr	r3, [r7, #0]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	69fa      	ldr	r2, [r7, #28]
 8002a4c:	4013      	ands	r3, r2
 8002a4e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002a50:	69ba      	ldr	r2, [r7, #24]
 8002a52:	69fb      	ldr	r3, [r7, #28]
 8002a54:	429a      	cmp	r2, r3
 8002a56:	f040 8116 	bne.w	8002c86 <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002a5a:	683b      	ldr	r3, [r7, #0]
 8002a5c:	685b      	ldr	r3, [r3, #4]
 8002a5e:	2b12      	cmp	r3, #18
 8002a60:	d034      	beq.n	8002acc <HAL_GPIO_Init+0xa4>
 8002a62:	2b12      	cmp	r3, #18
 8002a64:	d80d      	bhi.n	8002a82 <HAL_GPIO_Init+0x5a>
 8002a66:	2b02      	cmp	r3, #2
 8002a68:	d02b      	beq.n	8002ac2 <HAL_GPIO_Init+0x9a>
 8002a6a:	2b02      	cmp	r3, #2
 8002a6c:	d804      	bhi.n	8002a78 <HAL_GPIO_Init+0x50>
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d031      	beq.n	8002ad6 <HAL_GPIO_Init+0xae>
 8002a72:	2b01      	cmp	r3, #1
 8002a74:	d01c      	beq.n	8002ab0 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002a76:	e048      	b.n	8002b0a <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8002a78:	2b03      	cmp	r3, #3
 8002a7a:	d043      	beq.n	8002b04 <HAL_GPIO_Init+0xdc>
 8002a7c:	2b11      	cmp	r3, #17
 8002a7e:	d01b      	beq.n	8002ab8 <HAL_GPIO_Init+0x90>
          break;
 8002a80:	e043      	b.n	8002b0a <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8002a82:	4a89      	ldr	r2, [pc, #548]	; (8002ca8 <HAL_GPIO_Init+0x280>)
 8002a84:	4293      	cmp	r3, r2
 8002a86:	d026      	beq.n	8002ad6 <HAL_GPIO_Init+0xae>
 8002a88:	4a87      	ldr	r2, [pc, #540]	; (8002ca8 <HAL_GPIO_Init+0x280>)
 8002a8a:	4293      	cmp	r3, r2
 8002a8c:	d806      	bhi.n	8002a9c <HAL_GPIO_Init+0x74>
 8002a8e:	4a87      	ldr	r2, [pc, #540]	; (8002cac <HAL_GPIO_Init+0x284>)
 8002a90:	4293      	cmp	r3, r2
 8002a92:	d020      	beq.n	8002ad6 <HAL_GPIO_Init+0xae>
 8002a94:	4a86      	ldr	r2, [pc, #536]	; (8002cb0 <HAL_GPIO_Init+0x288>)
 8002a96:	4293      	cmp	r3, r2
 8002a98:	d01d      	beq.n	8002ad6 <HAL_GPIO_Init+0xae>
          break;
 8002a9a:	e036      	b.n	8002b0a <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8002a9c:	4a85      	ldr	r2, [pc, #532]	; (8002cb4 <HAL_GPIO_Init+0x28c>)
 8002a9e:	4293      	cmp	r3, r2
 8002aa0:	d019      	beq.n	8002ad6 <HAL_GPIO_Init+0xae>
 8002aa2:	4a85      	ldr	r2, [pc, #532]	; (8002cb8 <HAL_GPIO_Init+0x290>)
 8002aa4:	4293      	cmp	r3, r2
 8002aa6:	d016      	beq.n	8002ad6 <HAL_GPIO_Init+0xae>
 8002aa8:	4a84      	ldr	r2, [pc, #528]	; (8002cbc <HAL_GPIO_Init+0x294>)
 8002aaa:	4293      	cmp	r3, r2
 8002aac:	d013      	beq.n	8002ad6 <HAL_GPIO_Init+0xae>
          break;
 8002aae:	e02c      	b.n	8002b0a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002ab0:	683b      	ldr	r3, [r7, #0]
 8002ab2:	68db      	ldr	r3, [r3, #12]
 8002ab4:	623b      	str	r3, [r7, #32]
          break;
 8002ab6:	e028      	b.n	8002b0a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002ab8:	683b      	ldr	r3, [r7, #0]
 8002aba:	68db      	ldr	r3, [r3, #12]
 8002abc:	3304      	adds	r3, #4
 8002abe:	623b      	str	r3, [r7, #32]
          break;
 8002ac0:	e023      	b.n	8002b0a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002ac2:	683b      	ldr	r3, [r7, #0]
 8002ac4:	68db      	ldr	r3, [r3, #12]
 8002ac6:	3308      	adds	r3, #8
 8002ac8:	623b      	str	r3, [r7, #32]
          break;
 8002aca:	e01e      	b.n	8002b0a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002acc:	683b      	ldr	r3, [r7, #0]
 8002ace:	68db      	ldr	r3, [r3, #12]
 8002ad0:	330c      	adds	r3, #12
 8002ad2:	623b      	str	r3, [r7, #32]
          break;
 8002ad4:	e019      	b.n	8002b0a <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002ad6:	683b      	ldr	r3, [r7, #0]
 8002ad8:	689b      	ldr	r3, [r3, #8]
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d102      	bne.n	8002ae4 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002ade:	2304      	movs	r3, #4
 8002ae0:	623b      	str	r3, [r7, #32]
          break;
 8002ae2:	e012      	b.n	8002b0a <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002ae4:	683b      	ldr	r3, [r7, #0]
 8002ae6:	689b      	ldr	r3, [r3, #8]
 8002ae8:	2b01      	cmp	r3, #1
 8002aea:	d105      	bne.n	8002af8 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002aec:	2308      	movs	r3, #8
 8002aee:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	69fa      	ldr	r2, [r7, #28]
 8002af4:	611a      	str	r2, [r3, #16]
          break;
 8002af6:	e008      	b.n	8002b0a <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002af8:	2308      	movs	r3, #8
 8002afa:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	69fa      	ldr	r2, [r7, #28]
 8002b00:	615a      	str	r2, [r3, #20]
          break;
 8002b02:	e002      	b.n	8002b0a <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002b04:	2300      	movs	r3, #0
 8002b06:	623b      	str	r3, [r7, #32]
          break;
 8002b08:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002b0a:	69bb      	ldr	r3, [r7, #24]
 8002b0c:	2bff      	cmp	r3, #255	; 0xff
 8002b0e:	d801      	bhi.n	8002b14 <HAL_GPIO_Init+0xec>
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	e001      	b.n	8002b18 <HAL_GPIO_Init+0xf0>
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	3304      	adds	r3, #4
 8002b18:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002b1a:	69bb      	ldr	r3, [r7, #24]
 8002b1c:	2bff      	cmp	r3, #255	; 0xff
 8002b1e:	d802      	bhi.n	8002b26 <HAL_GPIO_Init+0xfe>
 8002b20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b22:	009b      	lsls	r3, r3, #2
 8002b24:	e002      	b.n	8002b2c <HAL_GPIO_Init+0x104>
 8002b26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b28:	3b08      	subs	r3, #8
 8002b2a:	009b      	lsls	r3, r3, #2
 8002b2c:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002b2e:	697b      	ldr	r3, [r7, #20]
 8002b30:	681a      	ldr	r2, [r3, #0]
 8002b32:	210f      	movs	r1, #15
 8002b34:	693b      	ldr	r3, [r7, #16]
 8002b36:	fa01 f303 	lsl.w	r3, r1, r3
 8002b3a:	43db      	mvns	r3, r3
 8002b3c:	401a      	ands	r2, r3
 8002b3e:	6a39      	ldr	r1, [r7, #32]
 8002b40:	693b      	ldr	r3, [r7, #16]
 8002b42:	fa01 f303 	lsl.w	r3, r1, r3
 8002b46:	431a      	orrs	r2, r3
 8002b48:	697b      	ldr	r3, [r7, #20]
 8002b4a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002b4c:	683b      	ldr	r3, [r7, #0]
 8002b4e:	685b      	ldr	r3, [r3, #4]
 8002b50:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	f000 8096 	beq.w	8002c86 <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002b5a:	4b59      	ldr	r3, [pc, #356]	; (8002cc0 <HAL_GPIO_Init+0x298>)
 8002b5c:	699b      	ldr	r3, [r3, #24]
 8002b5e:	4a58      	ldr	r2, [pc, #352]	; (8002cc0 <HAL_GPIO_Init+0x298>)
 8002b60:	f043 0301 	orr.w	r3, r3, #1
 8002b64:	6193      	str	r3, [r2, #24]
 8002b66:	4b56      	ldr	r3, [pc, #344]	; (8002cc0 <HAL_GPIO_Init+0x298>)
 8002b68:	699b      	ldr	r3, [r3, #24]
 8002b6a:	f003 0301 	and.w	r3, r3, #1
 8002b6e:	60bb      	str	r3, [r7, #8]
 8002b70:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002b72:	4a54      	ldr	r2, [pc, #336]	; (8002cc4 <HAL_GPIO_Init+0x29c>)
 8002b74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b76:	089b      	lsrs	r3, r3, #2
 8002b78:	3302      	adds	r3, #2
 8002b7a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002b7e:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002b80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b82:	f003 0303 	and.w	r3, r3, #3
 8002b86:	009b      	lsls	r3, r3, #2
 8002b88:	220f      	movs	r2, #15
 8002b8a:	fa02 f303 	lsl.w	r3, r2, r3
 8002b8e:	43db      	mvns	r3, r3
 8002b90:	68fa      	ldr	r2, [r7, #12]
 8002b92:	4013      	ands	r3, r2
 8002b94:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	4a4b      	ldr	r2, [pc, #300]	; (8002cc8 <HAL_GPIO_Init+0x2a0>)
 8002b9a:	4293      	cmp	r3, r2
 8002b9c:	d013      	beq.n	8002bc6 <HAL_GPIO_Init+0x19e>
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	4a4a      	ldr	r2, [pc, #296]	; (8002ccc <HAL_GPIO_Init+0x2a4>)
 8002ba2:	4293      	cmp	r3, r2
 8002ba4:	d00d      	beq.n	8002bc2 <HAL_GPIO_Init+0x19a>
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	4a49      	ldr	r2, [pc, #292]	; (8002cd0 <HAL_GPIO_Init+0x2a8>)
 8002baa:	4293      	cmp	r3, r2
 8002bac:	d007      	beq.n	8002bbe <HAL_GPIO_Init+0x196>
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	4a48      	ldr	r2, [pc, #288]	; (8002cd4 <HAL_GPIO_Init+0x2ac>)
 8002bb2:	4293      	cmp	r3, r2
 8002bb4:	d101      	bne.n	8002bba <HAL_GPIO_Init+0x192>
 8002bb6:	2303      	movs	r3, #3
 8002bb8:	e006      	b.n	8002bc8 <HAL_GPIO_Init+0x1a0>
 8002bba:	2304      	movs	r3, #4
 8002bbc:	e004      	b.n	8002bc8 <HAL_GPIO_Init+0x1a0>
 8002bbe:	2302      	movs	r3, #2
 8002bc0:	e002      	b.n	8002bc8 <HAL_GPIO_Init+0x1a0>
 8002bc2:	2301      	movs	r3, #1
 8002bc4:	e000      	b.n	8002bc8 <HAL_GPIO_Init+0x1a0>
 8002bc6:	2300      	movs	r3, #0
 8002bc8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002bca:	f002 0203 	and.w	r2, r2, #3
 8002bce:	0092      	lsls	r2, r2, #2
 8002bd0:	4093      	lsls	r3, r2
 8002bd2:	68fa      	ldr	r2, [r7, #12]
 8002bd4:	4313      	orrs	r3, r2
 8002bd6:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002bd8:	493a      	ldr	r1, [pc, #232]	; (8002cc4 <HAL_GPIO_Init+0x29c>)
 8002bda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bdc:	089b      	lsrs	r3, r3, #2
 8002bde:	3302      	adds	r3, #2
 8002be0:	68fa      	ldr	r2, [r7, #12]
 8002be2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002be6:	683b      	ldr	r3, [r7, #0]
 8002be8:	685b      	ldr	r3, [r3, #4]
 8002bea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d006      	beq.n	8002c00 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002bf2:	4b39      	ldr	r3, [pc, #228]	; (8002cd8 <HAL_GPIO_Init+0x2b0>)
 8002bf4:	681a      	ldr	r2, [r3, #0]
 8002bf6:	4938      	ldr	r1, [pc, #224]	; (8002cd8 <HAL_GPIO_Init+0x2b0>)
 8002bf8:	69bb      	ldr	r3, [r7, #24]
 8002bfa:	4313      	orrs	r3, r2
 8002bfc:	600b      	str	r3, [r1, #0]
 8002bfe:	e006      	b.n	8002c0e <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002c00:	4b35      	ldr	r3, [pc, #212]	; (8002cd8 <HAL_GPIO_Init+0x2b0>)
 8002c02:	681a      	ldr	r2, [r3, #0]
 8002c04:	69bb      	ldr	r3, [r7, #24]
 8002c06:	43db      	mvns	r3, r3
 8002c08:	4933      	ldr	r1, [pc, #204]	; (8002cd8 <HAL_GPIO_Init+0x2b0>)
 8002c0a:	4013      	ands	r3, r2
 8002c0c:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002c0e:	683b      	ldr	r3, [r7, #0]
 8002c10:	685b      	ldr	r3, [r3, #4]
 8002c12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d006      	beq.n	8002c28 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002c1a:	4b2f      	ldr	r3, [pc, #188]	; (8002cd8 <HAL_GPIO_Init+0x2b0>)
 8002c1c:	685a      	ldr	r2, [r3, #4]
 8002c1e:	492e      	ldr	r1, [pc, #184]	; (8002cd8 <HAL_GPIO_Init+0x2b0>)
 8002c20:	69bb      	ldr	r3, [r7, #24]
 8002c22:	4313      	orrs	r3, r2
 8002c24:	604b      	str	r3, [r1, #4]
 8002c26:	e006      	b.n	8002c36 <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002c28:	4b2b      	ldr	r3, [pc, #172]	; (8002cd8 <HAL_GPIO_Init+0x2b0>)
 8002c2a:	685a      	ldr	r2, [r3, #4]
 8002c2c:	69bb      	ldr	r3, [r7, #24]
 8002c2e:	43db      	mvns	r3, r3
 8002c30:	4929      	ldr	r1, [pc, #164]	; (8002cd8 <HAL_GPIO_Init+0x2b0>)
 8002c32:	4013      	ands	r3, r2
 8002c34:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002c36:	683b      	ldr	r3, [r7, #0]
 8002c38:	685b      	ldr	r3, [r3, #4]
 8002c3a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d006      	beq.n	8002c50 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002c42:	4b25      	ldr	r3, [pc, #148]	; (8002cd8 <HAL_GPIO_Init+0x2b0>)
 8002c44:	689a      	ldr	r2, [r3, #8]
 8002c46:	4924      	ldr	r1, [pc, #144]	; (8002cd8 <HAL_GPIO_Init+0x2b0>)
 8002c48:	69bb      	ldr	r3, [r7, #24]
 8002c4a:	4313      	orrs	r3, r2
 8002c4c:	608b      	str	r3, [r1, #8]
 8002c4e:	e006      	b.n	8002c5e <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002c50:	4b21      	ldr	r3, [pc, #132]	; (8002cd8 <HAL_GPIO_Init+0x2b0>)
 8002c52:	689a      	ldr	r2, [r3, #8]
 8002c54:	69bb      	ldr	r3, [r7, #24]
 8002c56:	43db      	mvns	r3, r3
 8002c58:	491f      	ldr	r1, [pc, #124]	; (8002cd8 <HAL_GPIO_Init+0x2b0>)
 8002c5a:	4013      	ands	r3, r2
 8002c5c:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002c5e:	683b      	ldr	r3, [r7, #0]
 8002c60:	685b      	ldr	r3, [r3, #4]
 8002c62:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d006      	beq.n	8002c78 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002c6a:	4b1b      	ldr	r3, [pc, #108]	; (8002cd8 <HAL_GPIO_Init+0x2b0>)
 8002c6c:	68da      	ldr	r2, [r3, #12]
 8002c6e:	491a      	ldr	r1, [pc, #104]	; (8002cd8 <HAL_GPIO_Init+0x2b0>)
 8002c70:	69bb      	ldr	r3, [r7, #24]
 8002c72:	4313      	orrs	r3, r2
 8002c74:	60cb      	str	r3, [r1, #12]
 8002c76:	e006      	b.n	8002c86 <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002c78:	4b17      	ldr	r3, [pc, #92]	; (8002cd8 <HAL_GPIO_Init+0x2b0>)
 8002c7a:	68da      	ldr	r2, [r3, #12]
 8002c7c:	69bb      	ldr	r3, [r7, #24]
 8002c7e:	43db      	mvns	r3, r3
 8002c80:	4915      	ldr	r1, [pc, #84]	; (8002cd8 <HAL_GPIO_Init+0x2b0>)
 8002c82:	4013      	ands	r3, r2
 8002c84:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8002c86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c88:	3301      	adds	r3, #1
 8002c8a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002c8c:	683b      	ldr	r3, [r7, #0]
 8002c8e:	681a      	ldr	r2, [r3, #0]
 8002c90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c92:	fa22 f303 	lsr.w	r3, r2, r3
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	f47f aed0 	bne.w	8002a3c <HAL_GPIO_Init+0x14>
  }
}
 8002c9c:	bf00      	nop
 8002c9e:	372c      	adds	r7, #44	; 0x2c
 8002ca0:	46bd      	mov	sp, r7
 8002ca2:	bc80      	pop	{r7}
 8002ca4:	4770      	bx	lr
 8002ca6:	bf00      	nop
 8002ca8:	10210000 	.word	0x10210000
 8002cac:	10110000 	.word	0x10110000
 8002cb0:	10120000 	.word	0x10120000
 8002cb4:	10310000 	.word	0x10310000
 8002cb8:	10320000 	.word	0x10320000
 8002cbc:	10220000 	.word	0x10220000
 8002cc0:	40021000 	.word	0x40021000
 8002cc4:	40010000 	.word	0x40010000
 8002cc8:	40010800 	.word	0x40010800
 8002ccc:	40010c00 	.word	0x40010c00
 8002cd0:	40011000 	.word	0x40011000
 8002cd4:	40011400 	.word	0x40011400
 8002cd8:	40010400 	.word	0x40010400

08002cdc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002cdc:	b480      	push	{r7}
 8002cde:	b083      	sub	sp, #12
 8002ce0:	af00      	add	r7, sp, #0
 8002ce2:	6078      	str	r0, [r7, #4]
 8002ce4:	460b      	mov	r3, r1
 8002ce6:	807b      	strh	r3, [r7, #2]
 8002ce8:	4613      	mov	r3, r2
 8002cea:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002cec:	787b      	ldrb	r3, [r7, #1]
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d003      	beq.n	8002cfa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002cf2:	887a      	ldrh	r2, [r7, #2]
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002cf8:	e003      	b.n	8002d02 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002cfa:	887b      	ldrh	r3, [r7, #2]
 8002cfc:	041a      	lsls	r2, r3, #16
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	611a      	str	r2, [r3, #16]
}
 8002d02:	bf00      	nop
 8002d04:	370c      	adds	r7, #12
 8002d06:	46bd      	mov	sp, r7
 8002d08:	bc80      	pop	{r7}
 8002d0a:	4770      	bx	lr

08002d0c <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002d0c:	b480      	push	{r7}
 8002d0e:	b083      	sub	sp, #12
 8002d10:	af00      	add	r7, sp, #0
 8002d12:	6078      	str	r0, [r7, #4]
 8002d14:	460b      	mov	r3, r1
 8002d16:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != 0x00u)
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	68da      	ldr	r2, [r3, #12]
 8002d1c:	887b      	ldrh	r3, [r7, #2]
 8002d1e:	4013      	ands	r3, r2
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d003      	beq.n	8002d2c <HAL_GPIO_TogglePin+0x20>
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002d24:	887a      	ldrh	r2, [r7, #2]
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	615a      	str	r2, [r3, #20]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
}
 8002d2a:	e002      	b.n	8002d32 <HAL_GPIO_TogglePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002d2c:	887a      	ldrh	r2, [r7, #2]
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	611a      	str	r2, [r3, #16]
}
 8002d32:	bf00      	nop
 8002d34:	370c      	adds	r7, #12
 8002d36:	46bd      	mov	sp, r7
 8002d38:	bc80      	pop	{r7}
 8002d3a:	4770      	bx	lr

08002d3c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002d3c:	b580      	push	{r7, lr}
 8002d3e:	b084      	sub	sp, #16
 8002d40:	af00      	add	r7, sp, #0
 8002d42:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d101      	bne.n	8002d4e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002d4a:	2301      	movs	r3, #1
 8002d4c:	e10f      	b.n	8002f6e <HAL_I2C_Init+0x232>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d54:	b2db      	uxtb	r3, r3
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d106      	bne.n	8002d68 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	2200      	movs	r2, #0
 8002d5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002d62:	6878      	ldr	r0, [r7, #4]
 8002d64:	f7ff fb1a 	bl	800239c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	2224      	movs	r2, #36	; 0x24
 8002d6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	681a      	ldr	r2, [r3, #0]
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	f022 0201 	bic.w	r2, r2, #1
 8002d7e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002d80:	f001 fdd6 	bl	8004930 <HAL_RCC_GetPCLK1Freq>
 8002d84:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	685b      	ldr	r3, [r3, #4]
 8002d8a:	4a7b      	ldr	r2, [pc, #492]	; (8002f78 <HAL_I2C_Init+0x23c>)
 8002d8c:	4293      	cmp	r3, r2
 8002d8e:	d807      	bhi.n	8002da0 <HAL_I2C_Init+0x64>
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	4a7a      	ldr	r2, [pc, #488]	; (8002f7c <HAL_I2C_Init+0x240>)
 8002d94:	4293      	cmp	r3, r2
 8002d96:	bf94      	ite	ls
 8002d98:	2301      	movls	r3, #1
 8002d9a:	2300      	movhi	r3, #0
 8002d9c:	b2db      	uxtb	r3, r3
 8002d9e:	e006      	b.n	8002dae <HAL_I2C_Init+0x72>
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	4a77      	ldr	r2, [pc, #476]	; (8002f80 <HAL_I2C_Init+0x244>)
 8002da4:	4293      	cmp	r3, r2
 8002da6:	bf94      	ite	ls
 8002da8:	2301      	movls	r3, #1
 8002daa:	2300      	movhi	r3, #0
 8002dac:	b2db      	uxtb	r3, r3
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d001      	beq.n	8002db6 <HAL_I2C_Init+0x7a>
  {
    return HAL_ERROR;
 8002db2:	2301      	movs	r3, #1
 8002db4:	e0db      	b.n	8002f6e <HAL_I2C_Init+0x232>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	4a72      	ldr	r2, [pc, #456]	; (8002f84 <HAL_I2C_Init+0x248>)
 8002dba:	fba2 2303 	umull	r2, r3, r2, r3
 8002dbe:	0c9b      	lsrs	r3, r3, #18
 8002dc0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	685b      	ldr	r3, [r3, #4]
 8002dc8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	68ba      	ldr	r2, [r7, #8]
 8002dd2:	430a      	orrs	r2, r1
 8002dd4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	6a1b      	ldr	r3, [r3, #32]
 8002ddc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	685b      	ldr	r3, [r3, #4]
 8002de4:	4a64      	ldr	r2, [pc, #400]	; (8002f78 <HAL_I2C_Init+0x23c>)
 8002de6:	4293      	cmp	r3, r2
 8002de8:	d802      	bhi.n	8002df0 <HAL_I2C_Init+0xb4>
 8002dea:	68bb      	ldr	r3, [r7, #8]
 8002dec:	3301      	adds	r3, #1
 8002dee:	e009      	b.n	8002e04 <HAL_I2C_Init+0xc8>
 8002df0:	68bb      	ldr	r3, [r7, #8]
 8002df2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002df6:	fb02 f303 	mul.w	r3, r2, r3
 8002dfa:	4a63      	ldr	r2, [pc, #396]	; (8002f88 <HAL_I2C_Init+0x24c>)
 8002dfc:	fba2 2303 	umull	r2, r3, r2, r3
 8002e00:	099b      	lsrs	r3, r3, #6
 8002e02:	3301      	adds	r3, #1
 8002e04:	687a      	ldr	r2, [r7, #4]
 8002e06:	6812      	ldr	r2, [r2, #0]
 8002e08:	430b      	orrs	r3, r1
 8002e0a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	69db      	ldr	r3, [r3, #28]
 8002e12:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002e16:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	685b      	ldr	r3, [r3, #4]
 8002e1e:	4956      	ldr	r1, [pc, #344]	; (8002f78 <HAL_I2C_Init+0x23c>)
 8002e20:	428b      	cmp	r3, r1
 8002e22:	d80d      	bhi.n	8002e40 <HAL_I2C_Init+0x104>
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	1e59      	subs	r1, r3, #1
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	685b      	ldr	r3, [r3, #4]
 8002e2c:	005b      	lsls	r3, r3, #1
 8002e2e:	fbb1 f3f3 	udiv	r3, r1, r3
 8002e32:	3301      	adds	r3, #1
 8002e34:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002e38:	2b04      	cmp	r3, #4
 8002e3a:	bf38      	it	cc
 8002e3c:	2304      	movcc	r3, #4
 8002e3e:	e04f      	b.n	8002ee0 <HAL_I2C_Init+0x1a4>
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	689b      	ldr	r3, [r3, #8]
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d111      	bne.n	8002e6c <HAL_I2C_Init+0x130>
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	1e58      	subs	r0, r3, #1
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	6859      	ldr	r1, [r3, #4]
 8002e50:	460b      	mov	r3, r1
 8002e52:	005b      	lsls	r3, r3, #1
 8002e54:	440b      	add	r3, r1
 8002e56:	fbb0 f3f3 	udiv	r3, r0, r3
 8002e5a:	3301      	adds	r3, #1
 8002e5c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	bf0c      	ite	eq
 8002e64:	2301      	moveq	r3, #1
 8002e66:	2300      	movne	r3, #0
 8002e68:	b2db      	uxtb	r3, r3
 8002e6a:	e012      	b.n	8002e92 <HAL_I2C_Init+0x156>
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	1e58      	subs	r0, r3, #1
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	6859      	ldr	r1, [r3, #4]
 8002e74:	460b      	mov	r3, r1
 8002e76:	009b      	lsls	r3, r3, #2
 8002e78:	440b      	add	r3, r1
 8002e7a:	0099      	lsls	r1, r3, #2
 8002e7c:	440b      	add	r3, r1
 8002e7e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002e82:	3301      	adds	r3, #1
 8002e84:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	bf0c      	ite	eq
 8002e8c:	2301      	moveq	r3, #1
 8002e8e:	2300      	movne	r3, #0
 8002e90:	b2db      	uxtb	r3, r3
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d001      	beq.n	8002e9a <HAL_I2C_Init+0x15e>
 8002e96:	2301      	movs	r3, #1
 8002e98:	e022      	b.n	8002ee0 <HAL_I2C_Init+0x1a4>
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	689b      	ldr	r3, [r3, #8]
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d10e      	bne.n	8002ec0 <HAL_I2C_Init+0x184>
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	1e58      	subs	r0, r3, #1
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	6859      	ldr	r1, [r3, #4]
 8002eaa:	460b      	mov	r3, r1
 8002eac:	005b      	lsls	r3, r3, #1
 8002eae:	440b      	add	r3, r1
 8002eb0:	fbb0 f3f3 	udiv	r3, r0, r3
 8002eb4:	3301      	adds	r3, #1
 8002eb6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002eba:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002ebe:	e00f      	b.n	8002ee0 <HAL_I2C_Init+0x1a4>
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	1e58      	subs	r0, r3, #1
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	6859      	ldr	r1, [r3, #4]
 8002ec8:	460b      	mov	r3, r1
 8002eca:	009b      	lsls	r3, r3, #2
 8002ecc:	440b      	add	r3, r1
 8002ece:	0099      	lsls	r1, r3, #2
 8002ed0:	440b      	add	r3, r1
 8002ed2:	fbb0 f3f3 	udiv	r3, r0, r3
 8002ed6:	3301      	adds	r3, #1
 8002ed8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002edc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002ee0:	6879      	ldr	r1, [r7, #4]
 8002ee2:	6809      	ldr	r1, [r1, #0]
 8002ee4:	4313      	orrs	r3, r2
 8002ee6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	69da      	ldr	r2, [r3, #28]
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	6a1b      	ldr	r3, [r3, #32]
 8002efa:	431a      	orrs	r2, r3
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	430a      	orrs	r2, r1
 8002f02:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	689b      	ldr	r3, [r3, #8]
 8002f0a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002f0e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002f12:	687a      	ldr	r2, [r7, #4]
 8002f14:	6911      	ldr	r1, [r2, #16]
 8002f16:	687a      	ldr	r2, [r7, #4]
 8002f18:	68d2      	ldr	r2, [r2, #12]
 8002f1a:	4311      	orrs	r1, r2
 8002f1c:	687a      	ldr	r2, [r7, #4]
 8002f1e:	6812      	ldr	r2, [r2, #0]
 8002f20:	430b      	orrs	r3, r1
 8002f22:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	68db      	ldr	r3, [r3, #12]
 8002f2a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	695a      	ldr	r2, [r3, #20]
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	699b      	ldr	r3, [r3, #24]
 8002f36:	431a      	orrs	r2, r3
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	430a      	orrs	r2, r1
 8002f3e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	681a      	ldr	r2, [r3, #0]
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	f042 0201 	orr.w	r2, r2, #1
 8002f4e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	2200      	movs	r2, #0
 8002f54:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	2220      	movs	r2, #32
 8002f5a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	2200      	movs	r2, #0
 8002f62:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	2200      	movs	r2, #0
 8002f68:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002f6c:	2300      	movs	r3, #0
}
 8002f6e:	4618      	mov	r0, r3
 8002f70:	3710      	adds	r7, #16
 8002f72:	46bd      	mov	sp, r7
 8002f74:	bd80      	pop	{r7, pc}
 8002f76:	bf00      	nop
 8002f78:	000186a0 	.word	0x000186a0
 8002f7c:	001e847f 	.word	0x001e847f
 8002f80:	003d08ff 	.word	0x003d08ff
 8002f84:	431bde83 	.word	0x431bde83
 8002f88:	10624dd3 	.word	0x10624dd3

08002f8c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002f8c:	b580      	push	{r7, lr}
 8002f8e:	b088      	sub	sp, #32
 8002f90:	af02      	add	r7, sp, #8
 8002f92:	60f8      	str	r0, [r7, #12]
 8002f94:	607a      	str	r2, [r7, #4]
 8002f96:	461a      	mov	r2, r3
 8002f98:	460b      	mov	r3, r1
 8002f9a:	817b      	strh	r3, [r7, #10]
 8002f9c:	4613      	mov	r3, r2
 8002f9e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002fa0:	f7ff fc54 	bl	800284c <HAL_GetTick>
 8002fa4:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002fac:	b2db      	uxtb	r3, r3
 8002fae:	2b20      	cmp	r3, #32
 8002fb0:	f040 80e0 	bne.w	8003174 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002fb4:	697b      	ldr	r3, [r7, #20]
 8002fb6:	9300      	str	r3, [sp, #0]
 8002fb8:	2319      	movs	r3, #25
 8002fba:	2201      	movs	r2, #1
 8002fbc:	4970      	ldr	r1, [pc, #448]	; (8003180 <HAL_I2C_Master_Transmit+0x1f4>)
 8002fbe:	68f8      	ldr	r0, [r7, #12]
 8002fc0:	f000 ff04 	bl	8003dcc <I2C_WaitOnFlagUntilTimeout>
 8002fc4:	4603      	mov	r3, r0
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d001      	beq.n	8002fce <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8002fca:	2302      	movs	r3, #2
 8002fcc:	e0d3      	b.n	8003176 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002fd4:	2b01      	cmp	r3, #1
 8002fd6:	d101      	bne.n	8002fdc <HAL_I2C_Master_Transmit+0x50>
 8002fd8:	2302      	movs	r3, #2
 8002fda:	e0cc      	b.n	8003176 <HAL_I2C_Master_Transmit+0x1ea>
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	2201      	movs	r2, #1
 8002fe0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	f003 0301 	and.w	r3, r3, #1
 8002fee:	2b01      	cmp	r3, #1
 8002ff0:	d007      	beq.n	8003002 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	681a      	ldr	r2, [r3, #0]
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	f042 0201 	orr.w	r2, r2, #1
 8003000:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	681a      	ldr	r2, [r3, #0]
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003010:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	2221      	movs	r2, #33	; 0x21
 8003016:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	2210      	movs	r2, #16
 800301e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	2200      	movs	r2, #0
 8003026:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	687a      	ldr	r2, [r7, #4]
 800302c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	893a      	ldrh	r2, [r7, #8]
 8003032:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003038:	b29a      	uxth	r2, r3
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	4a50      	ldr	r2, [pc, #320]	; (8003184 <HAL_I2C_Master_Transmit+0x1f8>)
 8003042:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003044:	8979      	ldrh	r1, [r7, #10]
 8003046:	697b      	ldr	r3, [r7, #20]
 8003048:	6a3a      	ldr	r2, [r7, #32]
 800304a:	68f8      	ldr	r0, [r7, #12]
 800304c:	f000 fcee 	bl	8003a2c <I2C_MasterRequestWrite>
 8003050:	4603      	mov	r3, r0
 8003052:	2b00      	cmp	r3, #0
 8003054:	d001      	beq.n	800305a <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8003056:	2301      	movs	r3, #1
 8003058:	e08d      	b.n	8003176 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800305a:	2300      	movs	r3, #0
 800305c:	613b      	str	r3, [r7, #16]
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	695b      	ldr	r3, [r3, #20]
 8003064:	613b      	str	r3, [r7, #16]
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	699b      	ldr	r3, [r3, #24]
 800306c:	613b      	str	r3, [r7, #16]
 800306e:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8003070:	e066      	b.n	8003140 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003072:	697a      	ldr	r2, [r7, #20]
 8003074:	6a39      	ldr	r1, [r7, #32]
 8003076:	68f8      	ldr	r0, [r7, #12]
 8003078:	f000 ff7e 	bl	8003f78 <I2C_WaitOnTXEFlagUntilTimeout>
 800307c:	4603      	mov	r3, r0
 800307e:	2b00      	cmp	r3, #0
 8003080:	d00d      	beq.n	800309e <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003086:	2b04      	cmp	r3, #4
 8003088:	d107      	bne.n	800309a <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	681a      	ldr	r2, [r3, #0]
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003098:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800309a:	2301      	movs	r3, #1
 800309c:	e06b      	b.n	8003176 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030a2:	781a      	ldrb	r2, [r3, #0]
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030ae:	1c5a      	adds	r2, r3, #1
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030b8:	b29b      	uxth	r3, r3
 80030ba:	3b01      	subs	r3, #1
 80030bc:	b29a      	uxth	r2, r3
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80030c6:	3b01      	subs	r3, #1
 80030c8:	b29a      	uxth	r2, r3
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	695b      	ldr	r3, [r3, #20]
 80030d4:	f003 0304 	and.w	r3, r3, #4
 80030d8:	2b04      	cmp	r3, #4
 80030da:	d11b      	bne.n	8003114 <HAL_I2C_Master_Transmit+0x188>
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d017      	beq.n	8003114 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030e8:	781a      	ldrb	r2, [r3, #0]
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030f4:	1c5a      	adds	r2, r3, #1
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030fe:	b29b      	uxth	r3, r3
 8003100:	3b01      	subs	r3, #1
 8003102:	b29a      	uxth	r2, r3
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800310c:	3b01      	subs	r3, #1
 800310e:	b29a      	uxth	r2, r3
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003114:	697a      	ldr	r2, [r7, #20]
 8003116:	6a39      	ldr	r1, [r7, #32]
 8003118:	68f8      	ldr	r0, [r7, #12]
 800311a:	f000 ff6e 	bl	8003ffa <I2C_WaitOnBTFFlagUntilTimeout>
 800311e:	4603      	mov	r3, r0
 8003120:	2b00      	cmp	r3, #0
 8003122:	d00d      	beq.n	8003140 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003128:	2b04      	cmp	r3, #4
 800312a:	d107      	bne.n	800313c <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	681a      	ldr	r2, [r3, #0]
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800313a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800313c:	2301      	movs	r3, #1
 800313e:	e01a      	b.n	8003176 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003144:	2b00      	cmp	r3, #0
 8003146:	d194      	bne.n	8003072 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	681a      	ldr	r2, [r3, #0]
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003156:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	2220      	movs	r2, #32
 800315c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	2200      	movs	r2, #0
 8003164:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	2200      	movs	r2, #0
 800316c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003170:	2300      	movs	r3, #0
 8003172:	e000      	b.n	8003176 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8003174:	2302      	movs	r3, #2
  }
}
 8003176:	4618      	mov	r0, r3
 8003178:	3718      	adds	r7, #24
 800317a:	46bd      	mov	sp, r7
 800317c:	bd80      	pop	{r7, pc}
 800317e:	bf00      	nop
 8003180:	00100002 	.word	0x00100002
 8003184:	ffff0000 	.word	0xffff0000

08003188 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003188:	b580      	push	{r7, lr}
 800318a:	b088      	sub	sp, #32
 800318c:	af02      	add	r7, sp, #8
 800318e:	60f8      	str	r0, [r7, #12]
 8003190:	4608      	mov	r0, r1
 8003192:	4611      	mov	r1, r2
 8003194:	461a      	mov	r2, r3
 8003196:	4603      	mov	r3, r0
 8003198:	817b      	strh	r3, [r7, #10]
 800319a:	460b      	mov	r3, r1
 800319c:	813b      	strh	r3, [r7, #8]
 800319e:	4613      	mov	r3, r2
 80031a0:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80031a2:	f7ff fb53 	bl	800284c <HAL_GetTick>
 80031a6:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80031ae:	b2db      	uxtb	r3, r3
 80031b0:	2b20      	cmp	r3, #32
 80031b2:	f040 80d9 	bne.w	8003368 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80031b6:	697b      	ldr	r3, [r7, #20]
 80031b8:	9300      	str	r3, [sp, #0]
 80031ba:	2319      	movs	r3, #25
 80031bc:	2201      	movs	r2, #1
 80031be:	496d      	ldr	r1, [pc, #436]	; (8003374 <HAL_I2C_Mem_Write+0x1ec>)
 80031c0:	68f8      	ldr	r0, [r7, #12]
 80031c2:	f000 fe03 	bl	8003dcc <I2C_WaitOnFlagUntilTimeout>
 80031c6:	4603      	mov	r3, r0
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d001      	beq.n	80031d0 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80031cc:	2302      	movs	r3, #2
 80031ce:	e0cc      	b.n	800336a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80031d6:	2b01      	cmp	r3, #1
 80031d8:	d101      	bne.n	80031de <HAL_I2C_Mem_Write+0x56>
 80031da:	2302      	movs	r3, #2
 80031dc:	e0c5      	b.n	800336a <HAL_I2C_Mem_Write+0x1e2>
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	2201      	movs	r2, #1
 80031e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	f003 0301 	and.w	r3, r3, #1
 80031f0:	2b01      	cmp	r3, #1
 80031f2:	d007      	beq.n	8003204 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	681a      	ldr	r2, [r3, #0]
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	f042 0201 	orr.w	r2, r2, #1
 8003202:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	681a      	ldr	r2, [r3, #0]
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003212:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	2221      	movs	r2, #33	; 0x21
 8003218:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	2240      	movs	r2, #64	; 0x40
 8003220:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	2200      	movs	r2, #0
 8003228:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	6a3a      	ldr	r2, [r7, #32]
 800322e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003234:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800323a:	b29a      	uxth	r2, r3
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	4a4d      	ldr	r2, [pc, #308]	; (8003378 <HAL_I2C_Mem_Write+0x1f0>)
 8003244:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003246:	88f8      	ldrh	r0, [r7, #6]
 8003248:	893a      	ldrh	r2, [r7, #8]
 800324a:	8979      	ldrh	r1, [r7, #10]
 800324c:	697b      	ldr	r3, [r7, #20]
 800324e:	9301      	str	r3, [sp, #4]
 8003250:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003252:	9300      	str	r3, [sp, #0]
 8003254:	4603      	mov	r3, r0
 8003256:	68f8      	ldr	r0, [r7, #12]
 8003258:	f000 fc5e 	bl	8003b18 <I2C_RequestMemoryWrite>
 800325c:	4603      	mov	r3, r0
 800325e:	2b00      	cmp	r3, #0
 8003260:	d052      	beq.n	8003308 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8003262:	2301      	movs	r3, #1
 8003264:	e081      	b.n	800336a <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003266:	697a      	ldr	r2, [r7, #20]
 8003268:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800326a:	68f8      	ldr	r0, [r7, #12]
 800326c:	f000 fe84 	bl	8003f78 <I2C_WaitOnTXEFlagUntilTimeout>
 8003270:	4603      	mov	r3, r0
 8003272:	2b00      	cmp	r3, #0
 8003274:	d00d      	beq.n	8003292 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800327a:	2b04      	cmp	r3, #4
 800327c:	d107      	bne.n	800328e <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	681a      	ldr	r2, [r3, #0]
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800328c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800328e:	2301      	movs	r3, #1
 8003290:	e06b      	b.n	800336a <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003296:	781a      	ldrb	r2, [r3, #0]
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032a2:	1c5a      	adds	r2, r3, #1
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80032ac:	3b01      	subs	r3, #1
 80032ae:	b29a      	uxth	r2, r3
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032b8:	b29b      	uxth	r3, r3
 80032ba:	3b01      	subs	r3, #1
 80032bc:	b29a      	uxth	r2, r3
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	695b      	ldr	r3, [r3, #20]
 80032c8:	f003 0304 	and.w	r3, r3, #4
 80032cc:	2b04      	cmp	r3, #4
 80032ce:	d11b      	bne.n	8003308 <HAL_I2C_Mem_Write+0x180>
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d017      	beq.n	8003308 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032dc:	781a      	ldrb	r2, [r3, #0]
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032e8:	1c5a      	adds	r2, r3, #1
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80032f2:	3b01      	subs	r3, #1
 80032f4:	b29a      	uxth	r2, r3
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032fe:	b29b      	uxth	r3, r3
 8003300:	3b01      	subs	r3, #1
 8003302:	b29a      	uxth	r2, r3
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800330c:	2b00      	cmp	r3, #0
 800330e:	d1aa      	bne.n	8003266 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003310:	697a      	ldr	r2, [r7, #20]
 8003312:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003314:	68f8      	ldr	r0, [r7, #12]
 8003316:	f000 fe70 	bl	8003ffa <I2C_WaitOnBTFFlagUntilTimeout>
 800331a:	4603      	mov	r3, r0
 800331c:	2b00      	cmp	r3, #0
 800331e:	d00d      	beq.n	800333c <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003324:	2b04      	cmp	r3, #4
 8003326:	d107      	bne.n	8003338 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	681a      	ldr	r2, [r3, #0]
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003336:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003338:	2301      	movs	r3, #1
 800333a:	e016      	b.n	800336a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	681a      	ldr	r2, [r3, #0]
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800334a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	2220      	movs	r2, #32
 8003350:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	2200      	movs	r2, #0
 8003358:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	2200      	movs	r2, #0
 8003360:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003364:	2300      	movs	r3, #0
 8003366:	e000      	b.n	800336a <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8003368:	2302      	movs	r3, #2
  }
}
 800336a:	4618      	mov	r0, r3
 800336c:	3718      	adds	r7, #24
 800336e:	46bd      	mov	sp, r7
 8003370:	bd80      	pop	{r7, pc}
 8003372:	bf00      	nop
 8003374:	00100002 	.word	0x00100002
 8003378:	ffff0000 	.word	0xffff0000

0800337c <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800337c:	b580      	push	{r7, lr}
 800337e:	b08c      	sub	sp, #48	; 0x30
 8003380:	af02      	add	r7, sp, #8
 8003382:	60f8      	str	r0, [r7, #12]
 8003384:	4608      	mov	r0, r1
 8003386:	4611      	mov	r1, r2
 8003388:	461a      	mov	r2, r3
 800338a:	4603      	mov	r3, r0
 800338c:	817b      	strh	r3, [r7, #10]
 800338e:	460b      	mov	r3, r1
 8003390:	813b      	strh	r3, [r7, #8]
 8003392:	4613      	mov	r3, r2
 8003394:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003396:	f7ff fa59 	bl	800284c <HAL_GetTick>
 800339a:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80033a2:	b2db      	uxtb	r3, r3
 80033a4:	2b20      	cmp	r3, #32
 80033a6:	f040 8218 	bne.w	80037da <HAL_I2C_Mem_Read+0x45e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80033aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033ac:	9300      	str	r3, [sp, #0]
 80033ae:	2319      	movs	r3, #25
 80033b0:	2201      	movs	r2, #1
 80033b2:	4981      	ldr	r1, [pc, #516]	; (80035b8 <HAL_I2C_Mem_Read+0x23c>)
 80033b4:	68f8      	ldr	r0, [r7, #12]
 80033b6:	f000 fd09 	bl	8003dcc <I2C_WaitOnFlagUntilTimeout>
 80033ba:	4603      	mov	r3, r0
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d001      	beq.n	80033c4 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 80033c0:	2302      	movs	r3, #2
 80033c2:	e20b      	b.n	80037dc <HAL_I2C_Mem_Read+0x460>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80033ca:	2b01      	cmp	r3, #1
 80033cc:	d101      	bne.n	80033d2 <HAL_I2C_Mem_Read+0x56>
 80033ce:	2302      	movs	r3, #2
 80033d0:	e204      	b.n	80037dc <HAL_I2C_Mem_Read+0x460>
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	2201      	movs	r2, #1
 80033d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	f003 0301 	and.w	r3, r3, #1
 80033e4:	2b01      	cmp	r3, #1
 80033e6:	d007      	beq.n	80033f8 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	681a      	ldr	r2, [r3, #0]
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	f042 0201 	orr.w	r2, r2, #1
 80033f6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	681a      	ldr	r2, [r3, #0]
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003406:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	2222      	movs	r2, #34	; 0x22
 800340c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	2240      	movs	r2, #64	; 0x40
 8003414:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	2200      	movs	r2, #0
 800341c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003422:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8003428:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800342e:	b29a      	uxth	r2, r3
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	4a61      	ldr	r2, [pc, #388]	; (80035bc <HAL_I2C_Mem_Read+0x240>)
 8003438:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800343a:	88f8      	ldrh	r0, [r7, #6]
 800343c:	893a      	ldrh	r2, [r7, #8]
 800343e:	8979      	ldrh	r1, [r7, #10]
 8003440:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003442:	9301      	str	r3, [sp, #4]
 8003444:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003446:	9300      	str	r3, [sp, #0]
 8003448:	4603      	mov	r3, r0
 800344a:	68f8      	ldr	r0, [r7, #12]
 800344c:	f000 fbee 	bl	8003c2c <I2C_RequestMemoryRead>
 8003450:	4603      	mov	r3, r0
 8003452:	2b00      	cmp	r3, #0
 8003454:	d001      	beq.n	800345a <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8003456:	2301      	movs	r3, #1
 8003458:	e1c0      	b.n	80037dc <HAL_I2C_Mem_Read+0x460>
    }

    if (hi2c->XferSize == 0U)
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800345e:	2b00      	cmp	r3, #0
 8003460:	d113      	bne.n	800348a <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003462:	2300      	movs	r3, #0
 8003464:	623b      	str	r3, [r7, #32]
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	695b      	ldr	r3, [r3, #20]
 800346c:	623b      	str	r3, [r7, #32]
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	699b      	ldr	r3, [r3, #24]
 8003474:	623b      	str	r3, [r7, #32]
 8003476:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	681a      	ldr	r2, [r3, #0]
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003486:	601a      	str	r2, [r3, #0]
 8003488:	e194      	b.n	80037b4 <HAL_I2C_Mem_Read+0x438>
    }
    else if (hi2c->XferSize == 1U)
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800348e:	2b01      	cmp	r3, #1
 8003490:	d11d      	bne.n	80034ce <HAL_I2C_Mem_Read+0x152>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	681a      	ldr	r2, [r3, #0]
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80034a0:	601a      	str	r2, [r3, #0]
 80034a2:	b672      	cpsid	i
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80034a4:	2300      	movs	r3, #0
 80034a6:	61fb      	str	r3, [r7, #28]
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	695b      	ldr	r3, [r3, #20]
 80034ae:	61fb      	str	r3, [r7, #28]
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	699b      	ldr	r3, [r3, #24]
 80034b6:	61fb      	str	r3, [r7, #28]
 80034b8:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	681a      	ldr	r2, [r3, #0]
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80034c8:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80034ca:	b662      	cpsie	i
 80034cc:	e172      	b.n	80037b4 <HAL_I2C_Mem_Read+0x438>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80034d2:	2b02      	cmp	r3, #2
 80034d4:	d11d      	bne.n	8003512 <HAL_I2C_Mem_Read+0x196>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	681a      	ldr	r2, [r3, #0]
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80034e4:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80034e6:	b672      	cpsid	i
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80034e8:	2300      	movs	r3, #0
 80034ea:	61bb      	str	r3, [r7, #24]
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	695b      	ldr	r3, [r3, #20]
 80034f2:	61bb      	str	r3, [r7, #24]
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	699b      	ldr	r3, [r3, #24]
 80034fa:	61bb      	str	r3, [r7, #24]
 80034fc:	69bb      	ldr	r3, [r7, #24]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	681a      	ldr	r2, [r3, #0]
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800350c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800350e:	b662      	cpsie	i
 8003510:	e150      	b.n	80037b4 <HAL_I2C_Mem_Read+0x438>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	681a      	ldr	r2, [r3, #0]
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003520:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003522:	2300      	movs	r3, #0
 8003524:	617b      	str	r3, [r7, #20]
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	695b      	ldr	r3, [r3, #20]
 800352c:	617b      	str	r3, [r7, #20]
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	699b      	ldr	r3, [r3, #24]
 8003534:	617b      	str	r3, [r7, #20]
 8003536:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8003538:	e13c      	b.n	80037b4 <HAL_I2C_Mem_Read+0x438>
    {
      if (hi2c->XferSize <= 3U)
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800353e:	2b03      	cmp	r3, #3
 8003540:	f200 80f5 	bhi.w	800372e <HAL_I2C_Mem_Read+0x3b2>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003548:	2b01      	cmp	r3, #1
 800354a:	d123      	bne.n	8003594 <HAL_I2C_Mem_Read+0x218>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800354c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800354e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003550:	68f8      	ldr	r0, [r7, #12]
 8003552:	f000 fd93 	bl	800407c <I2C_WaitOnRXNEFlagUntilTimeout>
 8003556:	4603      	mov	r3, r0
 8003558:	2b00      	cmp	r3, #0
 800355a:	d001      	beq.n	8003560 <HAL_I2C_Mem_Read+0x1e4>
          {
            return HAL_ERROR;
 800355c:	2301      	movs	r3, #1
 800355e:	e13d      	b.n	80037dc <HAL_I2C_Mem_Read+0x460>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	691a      	ldr	r2, [r3, #16]
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800356a:	b2d2      	uxtb	r2, r2
 800356c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003572:	1c5a      	adds	r2, r3, #1
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800357c:	3b01      	subs	r3, #1
 800357e:	b29a      	uxth	r2, r3
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003588:	b29b      	uxth	r3, r3
 800358a:	3b01      	subs	r3, #1
 800358c:	b29a      	uxth	r2, r3
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003592:	e10f      	b.n	80037b4 <HAL_I2C_Mem_Read+0x438>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003598:	2b02      	cmp	r3, #2
 800359a:	d150      	bne.n	800363e <HAL_I2C_Mem_Read+0x2c2>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800359c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800359e:	9300      	str	r3, [sp, #0]
 80035a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80035a2:	2200      	movs	r2, #0
 80035a4:	4906      	ldr	r1, [pc, #24]	; (80035c0 <HAL_I2C_Mem_Read+0x244>)
 80035a6:	68f8      	ldr	r0, [r7, #12]
 80035a8:	f000 fc10 	bl	8003dcc <I2C_WaitOnFlagUntilTimeout>
 80035ac:	4603      	mov	r3, r0
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d008      	beq.n	80035c4 <HAL_I2C_Mem_Read+0x248>
          {
            return HAL_ERROR;
 80035b2:	2301      	movs	r3, #1
 80035b4:	e112      	b.n	80037dc <HAL_I2C_Mem_Read+0x460>
 80035b6:	bf00      	nop
 80035b8:	00100002 	.word	0x00100002
 80035bc:	ffff0000 	.word	0xffff0000
 80035c0:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 80035c4:	b672      	cpsid	i
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	681a      	ldr	r2, [r3, #0]
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80035d4:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	691a      	ldr	r2, [r3, #16]
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035e0:	b2d2      	uxtb	r2, r2
 80035e2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035e8:	1c5a      	adds	r2, r3, #1
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80035f2:	3b01      	subs	r3, #1
 80035f4:	b29a      	uxth	r2, r3
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80035fe:	b29b      	uxth	r3, r3
 8003600:	3b01      	subs	r3, #1
 8003602:	b29a      	uxth	r2, r3
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8003608:	b662      	cpsie	i

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	691a      	ldr	r2, [r3, #16]
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003614:	b2d2      	uxtb	r2, r2
 8003616:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800361c:	1c5a      	adds	r2, r3, #1
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003626:	3b01      	subs	r3, #1
 8003628:	b29a      	uxth	r2, r3
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003632:	b29b      	uxth	r3, r3
 8003634:	3b01      	subs	r3, #1
 8003636:	b29a      	uxth	r2, r3
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800363c:	e0ba      	b.n	80037b4 <HAL_I2C_Mem_Read+0x438>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800363e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003640:	9300      	str	r3, [sp, #0]
 8003642:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003644:	2200      	movs	r2, #0
 8003646:	4967      	ldr	r1, [pc, #412]	; (80037e4 <HAL_I2C_Mem_Read+0x468>)
 8003648:	68f8      	ldr	r0, [r7, #12]
 800364a:	f000 fbbf 	bl	8003dcc <I2C_WaitOnFlagUntilTimeout>
 800364e:	4603      	mov	r3, r0
 8003650:	2b00      	cmp	r3, #0
 8003652:	d001      	beq.n	8003658 <HAL_I2C_Mem_Read+0x2dc>
          {
            return HAL_ERROR;
 8003654:	2301      	movs	r3, #1
 8003656:	e0c1      	b.n	80037dc <HAL_I2C_Mem_Read+0x460>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	681a      	ldr	r2, [r3, #0]
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003666:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003668:	b672      	cpsid	i
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	691a      	ldr	r2, [r3, #16]
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003674:	b2d2      	uxtb	r2, r2
 8003676:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800367c:	1c5a      	adds	r2, r3, #1
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003686:	3b01      	subs	r3, #1
 8003688:	b29a      	uxth	r2, r3
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003692:	b29b      	uxth	r3, r3
 8003694:	3b01      	subs	r3, #1
 8003696:	b29a      	uxth	r2, r3
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800369c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800369e:	9300      	str	r3, [sp, #0]
 80036a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80036a2:	2200      	movs	r2, #0
 80036a4:	494f      	ldr	r1, [pc, #316]	; (80037e4 <HAL_I2C_Mem_Read+0x468>)
 80036a6:	68f8      	ldr	r0, [r7, #12]
 80036a8:	f000 fb90 	bl	8003dcc <I2C_WaitOnFlagUntilTimeout>
 80036ac:	4603      	mov	r3, r0
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d001      	beq.n	80036b6 <HAL_I2C_Mem_Read+0x33a>
          {
            return HAL_ERROR;
 80036b2:	2301      	movs	r3, #1
 80036b4:	e092      	b.n	80037dc <HAL_I2C_Mem_Read+0x460>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	681a      	ldr	r2, [r3, #0]
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80036c4:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	691a      	ldr	r2, [r3, #16]
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036d0:	b2d2      	uxtb	r2, r2
 80036d2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036d8:	1c5a      	adds	r2, r3, #1
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80036e2:	3b01      	subs	r3, #1
 80036e4:	b29a      	uxth	r2, r3
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036ee:	b29b      	uxth	r3, r3
 80036f0:	3b01      	subs	r3, #1
 80036f2:	b29a      	uxth	r2, r3
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 80036f8:	b662      	cpsie	i

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	691a      	ldr	r2, [r3, #16]
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003704:	b2d2      	uxtb	r2, r2
 8003706:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800370c:	1c5a      	adds	r2, r3, #1
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003716:	3b01      	subs	r3, #1
 8003718:	b29a      	uxth	r2, r3
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003722:	b29b      	uxth	r3, r3
 8003724:	3b01      	subs	r3, #1
 8003726:	b29a      	uxth	r2, r3
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800372c:	e042      	b.n	80037b4 <HAL_I2C_Mem_Read+0x438>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800372e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003730:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003732:	68f8      	ldr	r0, [r7, #12]
 8003734:	f000 fca2 	bl	800407c <I2C_WaitOnRXNEFlagUntilTimeout>
 8003738:	4603      	mov	r3, r0
 800373a:	2b00      	cmp	r3, #0
 800373c:	d001      	beq.n	8003742 <HAL_I2C_Mem_Read+0x3c6>
        {
          return HAL_ERROR;
 800373e:	2301      	movs	r3, #1
 8003740:	e04c      	b.n	80037dc <HAL_I2C_Mem_Read+0x460>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	691a      	ldr	r2, [r3, #16]
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800374c:	b2d2      	uxtb	r2, r2
 800374e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003754:	1c5a      	adds	r2, r3, #1
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800375e:	3b01      	subs	r3, #1
 8003760:	b29a      	uxth	r2, r3
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800376a:	b29b      	uxth	r3, r3
 800376c:	3b01      	subs	r3, #1
 800376e:	b29a      	uxth	r2, r3
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	695b      	ldr	r3, [r3, #20]
 800377a:	f003 0304 	and.w	r3, r3, #4
 800377e:	2b04      	cmp	r3, #4
 8003780:	d118      	bne.n	80037b4 <HAL_I2C_Mem_Read+0x438>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	691a      	ldr	r2, [r3, #16]
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800378c:	b2d2      	uxtb	r2, r2
 800378e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003794:	1c5a      	adds	r2, r3, #1
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800379e:	3b01      	subs	r3, #1
 80037a0:	b29a      	uxth	r2, r3
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037aa:	b29b      	uxth	r3, r3
 80037ac:	3b01      	subs	r3, #1
 80037ae:	b29a      	uxth	r2, r3
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	f47f aebe 	bne.w	800353a <HAL_I2C_Mem_Read+0x1be>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	2220      	movs	r2, #32
 80037c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	2200      	movs	r2, #0
 80037ca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	2200      	movs	r2, #0
 80037d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80037d6:	2300      	movs	r3, #0
 80037d8:	e000      	b.n	80037dc <HAL_I2C_Mem_Read+0x460>
  }
  else
  {
    return HAL_BUSY;
 80037da:	2302      	movs	r3, #2
  }
}
 80037dc:	4618      	mov	r0, r3
 80037de:	3728      	adds	r7, #40	; 0x28
 80037e0:	46bd      	mov	sp, r7
 80037e2:	bd80      	pop	{r7, pc}
 80037e4:	00010004 	.word	0x00010004

080037e8 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 80037e8:	b580      	push	{r7, lr}
 80037ea:	b08a      	sub	sp, #40	; 0x28
 80037ec:	af02      	add	r7, sp, #8
 80037ee:	60f8      	str	r0, [r7, #12]
 80037f0:	607a      	str	r2, [r7, #4]
 80037f2:	603b      	str	r3, [r7, #0]
 80037f4:	460b      	mov	r3, r1
 80037f6:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 80037f8:	f7ff f828 	bl	800284c <HAL_GetTick>
 80037fc:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 1U;
 80037fe:	2301      	movs	r3, #1
 8003800:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003808:	b2db      	uxtb	r3, r3
 800380a:	2b20      	cmp	r3, #32
 800380c:	f040 8105 	bne.w	8003a1a <HAL_I2C_IsDeviceReady+0x232>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003810:	69fb      	ldr	r3, [r7, #28]
 8003812:	9300      	str	r3, [sp, #0]
 8003814:	2319      	movs	r3, #25
 8003816:	2201      	movs	r2, #1
 8003818:	4982      	ldr	r1, [pc, #520]	; (8003a24 <HAL_I2C_IsDeviceReady+0x23c>)
 800381a:	68f8      	ldr	r0, [r7, #12]
 800381c:	f000 fad6 	bl	8003dcc <I2C_WaitOnFlagUntilTimeout>
 8003820:	4603      	mov	r3, r0
 8003822:	2b00      	cmp	r3, #0
 8003824:	d001      	beq.n	800382a <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8003826:	2302      	movs	r3, #2
 8003828:	e0f8      	b.n	8003a1c <HAL_I2C_IsDeviceReady+0x234>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003830:	2b01      	cmp	r3, #1
 8003832:	d101      	bne.n	8003838 <HAL_I2C_IsDeviceReady+0x50>
 8003834:	2302      	movs	r3, #2
 8003836:	e0f1      	b.n	8003a1c <HAL_I2C_IsDeviceReady+0x234>
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	2201      	movs	r2, #1
 800383c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	f003 0301 	and.w	r3, r3, #1
 800384a:	2b01      	cmp	r3, #1
 800384c:	d007      	beq.n	800385e <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	681a      	ldr	r2, [r3, #0]
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	f042 0201 	orr.w	r2, r2, #1
 800385c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	681a      	ldr	r2, [r3, #0]
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800386c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	2224      	movs	r2, #36	; 0x24
 8003872:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	2200      	movs	r2, #0
 800387a:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	4a6a      	ldr	r2, [pc, #424]	; (8003a28 <HAL_I2C_IsDeviceReady+0x240>)
 8003880:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	681a      	ldr	r2, [r3, #0]
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003890:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8003892:	69fb      	ldr	r3, [r7, #28]
 8003894:	9300      	str	r3, [sp, #0]
 8003896:	683b      	ldr	r3, [r7, #0]
 8003898:	2200      	movs	r2, #0
 800389a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800389e:	68f8      	ldr	r0, [r7, #12]
 80038a0:	f000 fa94 	bl	8003dcc <I2C_WaitOnFlagUntilTimeout>
 80038a4:	4603      	mov	r3, r0
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d001      	beq.n	80038ae <HAL_I2C_IsDeviceReady+0xc6>
      {
        return HAL_ERROR;
 80038aa:	2301      	movs	r3, #1
 80038ac:	e0b6      	b.n	8003a1c <HAL_I2C_IsDeviceReady+0x234>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80038ae:	897b      	ldrh	r3, [r7, #10]
 80038b0:	b2db      	uxtb	r3, r3
 80038b2:	461a      	mov	r2, r3
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80038bc:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 80038be:	f7fe ffc5 	bl	800284c <HAL_GetTick>
 80038c2:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	695b      	ldr	r3, [r3, #20]
 80038ca:	f003 0302 	and.w	r3, r3, #2
 80038ce:	2b02      	cmp	r3, #2
 80038d0:	bf0c      	ite	eq
 80038d2:	2301      	moveq	r3, #1
 80038d4:	2300      	movne	r3, #0
 80038d6:	b2db      	uxtb	r3, r3
 80038d8:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	695b      	ldr	r3, [r3, #20]
 80038e0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80038e4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80038e8:	bf0c      	ite	eq
 80038ea:	2301      	moveq	r3, #1
 80038ec:	2300      	movne	r3, #0
 80038ee:	b2db      	uxtb	r3, r3
 80038f0:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80038f2:	e025      	b.n	8003940 <HAL_I2C_IsDeviceReady+0x158>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80038f4:	f7fe ffaa 	bl	800284c <HAL_GetTick>
 80038f8:	4602      	mov	r2, r0
 80038fa:	69fb      	ldr	r3, [r7, #28]
 80038fc:	1ad3      	subs	r3, r2, r3
 80038fe:	683a      	ldr	r2, [r7, #0]
 8003900:	429a      	cmp	r2, r3
 8003902:	d302      	bcc.n	800390a <HAL_I2C_IsDeviceReady+0x122>
 8003904:	683b      	ldr	r3, [r7, #0]
 8003906:	2b00      	cmp	r3, #0
 8003908:	d103      	bne.n	8003912 <HAL_I2C_IsDeviceReady+0x12a>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	22a0      	movs	r2, #160	; 0xa0
 800390e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	695b      	ldr	r3, [r3, #20]
 8003918:	f003 0302 	and.w	r3, r3, #2
 800391c:	2b02      	cmp	r3, #2
 800391e:	bf0c      	ite	eq
 8003920:	2301      	moveq	r3, #1
 8003922:	2300      	movne	r3, #0
 8003924:	b2db      	uxtb	r3, r3
 8003926:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	695b      	ldr	r3, [r3, #20]
 800392e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003932:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003936:	bf0c      	ite	eq
 8003938:	2301      	moveq	r3, #1
 800393a:	2300      	movne	r3, #0
 800393c:	b2db      	uxtb	r3, r3
 800393e:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003946:	b2db      	uxtb	r3, r3
 8003948:	2ba0      	cmp	r3, #160	; 0xa0
 800394a:	d005      	beq.n	8003958 <HAL_I2C_IsDeviceReady+0x170>
 800394c:	7dfb      	ldrb	r3, [r7, #23]
 800394e:	2b00      	cmp	r3, #0
 8003950:	d102      	bne.n	8003958 <HAL_I2C_IsDeviceReady+0x170>
 8003952:	7dbb      	ldrb	r3, [r7, #22]
 8003954:	2b00      	cmp	r3, #0
 8003956:	d0cd      	beq.n	80038f4 <HAL_I2C_IsDeviceReady+0x10c>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	2220      	movs	r2, #32
 800395c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	695b      	ldr	r3, [r3, #20]
 8003966:	f003 0302 	and.w	r3, r3, #2
 800396a:	2b02      	cmp	r3, #2
 800396c:	d129      	bne.n	80039c2 <HAL_I2C_IsDeviceReady+0x1da>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	681a      	ldr	r2, [r3, #0]
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800397c:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800397e:	2300      	movs	r3, #0
 8003980:	613b      	str	r3, [r7, #16]
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	695b      	ldr	r3, [r3, #20]
 8003988:	613b      	str	r3, [r7, #16]
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	699b      	ldr	r3, [r3, #24]
 8003990:	613b      	str	r3, [r7, #16]
 8003992:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003994:	69fb      	ldr	r3, [r7, #28]
 8003996:	9300      	str	r3, [sp, #0]
 8003998:	2319      	movs	r3, #25
 800399a:	2201      	movs	r2, #1
 800399c:	4921      	ldr	r1, [pc, #132]	; (8003a24 <HAL_I2C_IsDeviceReady+0x23c>)
 800399e:	68f8      	ldr	r0, [r7, #12]
 80039a0:	f000 fa14 	bl	8003dcc <I2C_WaitOnFlagUntilTimeout>
 80039a4:	4603      	mov	r3, r0
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d001      	beq.n	80039ae <HAL_I2C_IsDeviceReady+0x1c6>
        {
          return HAL_ERROR;
 80039aa:	2301      	movs	r3, #1
 80039ac:	e036      	b.n	8003a1c <HAL_I2C_IsDeviceReady+0x234>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	2220      	movs	r2, #32
 80039b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	2200      	movs	r2, #0
 80039ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 80039be:	2300      	movs	r3, #0
 80039c0:	e02c      	b.n	8003a1c <HAL_I2C_IsDeviceReady+0x234>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	681a      	ldr	r2, [r3, #0]
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80039d0:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80039da:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80039dc:	69fb      	ldr	r3, [r7, #28]
 80039de:	9300      	str	r3, [sp, #0]
 80039e0:	2319      	movs	r3, #25
 80039e2:	2201      	movs	r2, #1
 80039e4:	490f      	ldr	r1, [pc, #60]	; (8003a24 <HAL_I2C_IsDeviceReady+0x23c>)
 80039e6:	68f8      	ldr	r0, [r7, #12]
 80039e8:	f000 f9f0 	bl	8003dcc <I2C_WaitOnFlagUntilTimeout>
 80039ec:	4603      	mov	r3, r0
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d001      	beq.n	80039f6 <HAL_I2C_IsDeviceReady+0x20e>
        {
          return HAL_ERROR;
 80039f2:	2301      	movs	r3, #1
 80039f4:	e012      	b.n	8003a1c <HAL_I2C_IsDeviceReady+0x234>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 80039f6:	69bb      	ldr	r3, [r7, #24]
 80039f8:	3301      	adds	r3, #1
 80039fa:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 80039fc:	69ba      	ldr	r2, [r7, #24]
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	429a      	cmp	r2, r3
 8003a02:	f4ff af3e 	bcc.w	8003882 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	2220      	movs	r2, #32
 8003a0a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	2200      	movs	r2, #0
 8003a12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003a16:	2301      	movs	r3, #1
 8003a18:	e000      	b.n	8003a1c <HAL_I2C_IsDeviceReady+0x234>
  }
  else
  {
    return HAL_BUSY;
 8003a1a:	2302      	movs	r3, #2
  }
}
 8003a1c:	4618      	mov	r0, r3
 8003a1e:	3720      	adds	r7, #32
 8003a20:	46bd      	mov	sp, r7
 8003a22:	bd80      	pop	{r7, pc}
 8003a24:	00100002 	.word	0x00100002
 8003a28:	ffff0000 	.word	0xffff0000

08003a2c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003a2c:	b580      	push	{r7, lr}
 8003a2e:	b088      	sub	sp, #32
 8003a30:	af02      	add	r7, sp, #8
 8003a32:	60f8      	str	r0, [r7, #12]
 8003a34:	607a      	str	r2, [r7, #4]
 8003a36:	603b      	str	r3, [r7, #0]
 8003a38:	460b      	mov	r3, r1
 8003a3a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a40:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003a42:	697b      	ldr	r3, [r7, #20]
 8003a44:	2b08      	cmp	r3, #8
 8003a46:	d006      	beq.n	8003a56 <I2C_MasterRequestWrite+0x2a>
 8003a48:	697b      	ldr	r3, [r7, #20]
 8003a4a:	2b01      	cmp	r3, #1
 8003a4c:	d003      	beq.n	8003a56 <I2C_MasterRequestWrite+0x2a>
 8003a4e:	697b      	ldr	r3, [r7, #20]
 8003a50:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003a54:	d108      	bne.n	8003a68 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	681a      	ldr	r2, [r3, #0]
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003a64:	601a      	str	r2, [r3, #0]
 8003a66:	e00b      	b.n	8003a80 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a6c:	2b12      	cmp	r3, #18
 8003a6e:	d107      	bne.n	8003a80 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	681a      	ldr	r2, [r3, #0]
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003a7e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003a80:	683b      	ldr	r3, [r7, #0]
 8003a82:	9300      	str	r3, [sp, #0]
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	2200      	movs	r2, #0
 8003a88:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003a8c:	68f8      	ldr	r0, [r7, #12]
 8003a8e:	f000 f99d 	bl	8003dcc <I2C_WaitOnFlagUntilTimeout>
 8003a92:	4603      	mov	r3, r0
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d001      	beq.n	8003a9c <I2C_MasterRequestWrite+0x70>
  {
    return HAL_ERROR;
 8003a98:	2301      	movs	r3, #1
 8003a9a:	e035      	b.n	8003b08 <I2C_MasterRequestWrite+0xdc>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	691b      	ldr	r3, [r3, #16]
 8003aa0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003aa4:	d108      	bne.n	8003ab8 <I2C_MasterRequestWrite+0x8c>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003aa6:	897b      	ldrh	r3, [r7, #10]
 8003aa8:	b2db      	uxtb	r3, r3
 8003aaa:	461a      	mov	r2, r3
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003ab4:	611a      	str	r2, [r3, #16]
 8003ab6:	e01b      	b.n	8003af0 <I2C_MasterRequestWrite+0xc4>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003ab8:	897b      	ldrh	r3, [r7, #10]
 8003aba:	11db      	asrs	r3, r3, #7
 8003abc:	b2db      	uxtb	r3, r3
 8003abe:	f003 0306 	and.w	r3, r3, #6
 8003ac2:	b2db      	uxtb	r3, r3
 8003ac4:	f063 030f 	orn	r3, r3, #15
 8003ac8:	b2da      	uxtb	r2, r3
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003ad0:	683b      	ldr	r3, [r7, #0]
 8003ad2:	687a      	ldr	r2, [r7, #4]
 8003ad4:	490e      	ldr	r1, [pc, #56]	; (8003b10 <I2C_MasterRequestWrite+0xe4>)
 8003ad6:	68f8      	ldr	r0, [r7, #12]
 8003ad8:	f000 f9cf 	bl	8003e7a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003adc:	4603      	mov	r3, r0
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d001      	beq.n	8003ae6 <I2C_MasterRequestWrite+0xba>
    {
      return HAL_ERROR;
 8003ae2:	2301      	movs	r3, #1
 8003ae4:	e010      	b.n	8003b08 <I2C_MasterRequestWrite+0xdc>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003ae6:	897b      	ldrh	r3, [r7, #10]
 8003ae8:	b2da      	uxtb	r2, r3
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003af0:	683b      	ldr	r3, [r7, #0]
 8003af2:	687a      	ldr	r2, [r7, #4]
 8003af4:	4907      	ldr	r1, [pc, #28]	; (8003b14 <I2C_MasterRequestWrite+0xe8>)
 8003af6:	68f8      	ldr	r0, [r7, #12]
 8003af8:	f000 f9bf 	bl	8003e7a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003afc:	4603      	mov	r3, r0
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d001      	beq.n	8003b06 <I2C_MasterRequestWrite+0xda>
  {
    return HAL_ERROR;
 8003b02:	2301      	movs	r3, #1
 8003b04:	e000      	b.n	8003b08 <I2C_MasterRequestWrite+0xdc>
  }

  return HAL_OK;
 8003b06:	2300      	movs	r3, #0
}
 8003b08:	4618      	mov	r0, r3
 8003b0a:	3718      	adds	r7, #24
 8003b0c:	46bd      	mov	sp, r7
 8003b0e:	bd80      	pop	{r7, pc}
 8003b10:	00010008 	.word	0x00010008
 8003b14:	00010002 	.word	0x00010002

08003b18 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003b18:	b580      	push	{r7, lr}
 8003b1a:	b088      	sub	sp, #32
 8003b1c:	af02      	add	r7, sp, #8
 8003b1e:	60f8      	str	r0, [r7, #12]
 8003b20:	4608      	mov	r0, r1
 8003b22:	4611      	mov	r1, r2
 8003b24:	461a      	mov	r2, r3
 8003b26:	4603      	mov	r3, r0
 8003b28:	817b      	strh	r3, [r7, #10]
 8003b2a:	460b      	mov	r3, r1
 8003b2c:	813b      	strh	r3, [r7, #8]
 8003b2e:	4613      	mov	r3, r2
 8003b30:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	681a      	ldr	r2, [r3, #0]
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003b40:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003b42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b44:	9300      	str	r3, [sp, #0]
 8003b46:	6a3b      	ldr	r3, [r7, #32]
 8003b48:	2200      	movs	r2, #0
 8003b4a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003b4e:	68f8      	ldr	r0, [r7, #12]
 8003b50:	f000 f93c 	bl	8003dcc <I2C_WaitOnFlagUntilTimeout>
 8003b54:	4603      	mov	r3, r0
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d001      	beq.n	8003b5e <I2C_RequestMemoryWrite+0x46>
  {
    return HAL_ERROR;
 8003b5a:	2301      	movs	r3, #1
 8003b5c:	e05f      	b.n	8003c1e <I2C_RequestMemoryWrite+0x106>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003b5e:	897b      	ldrh	r3, [r7, #10]
 8003b60:	b2db      	uxtb	r3, r3
 8003b62:	461a      	mov	r2, r3
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003b6c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003b6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b70:	6a3a      	ldr	r2, [r7, #32]
 8003b72:	492d      	ldr	r1, [pc, #180]	; (8003c28 <I2C_RequestMemoryWrite+0x110>)
 8003b74:	68f8      	ldr	r0, [r7, #12]
 8003b76:	f000 f980 	bl	8003e7a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003b7a:	4603      	mov	r3, r0
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d001      	beq.n	8003b84 <I2C_RequestMemoryWrite+0x6c>
  {
    return HAL_ERROR;
 8003b80:	2301      	movs	r3, #1
 8003b82:	e04c      	b.n	8003c1e <I2C_RequestMemoryWrite+0x106>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003b84:	2300      	movs	r3, #0
 8003b86:	617b      	str	r3, [r7, #20]
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	695b      	ldr	r3, [r3, #20]
 8003b8e:	617b      	str	r3, [r7, #20]
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	699b      	ldr	r3, [r3, #24]
 8003b96:	617b      	str	r3, [r7, #20]
 8003b98:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003b9a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b9c:	6a39      	ldr	r1, [r7, #32]
 8003b9e:	68f8      	ldr	r0, [r7, #12]
 8003ba0:	f000 f9ea 	bl	8003f78 <I2C_WaitOnTXEFlagUntilTimeout>
 8003ba4:	4603      	mov	r3, r0
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d00d      	beq.n	8003bc6 <I2C_RequestMemoryWrite+0xae>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bae:	2b04      	cmp	r3, #4
 8003bb0:	d107      	bne.n	8003bc2 <I2C_RequestMemoryWrite+0xaa>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	681a      	ldr	r2, [r3, #0]
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003bc0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003bc2:	2301      	movs	r3, #1
 8003bc4:	e02b      	b.n	8003c1e <I2C_RequestMemoryWrite+0x106>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003bc6:	88fb      	ldrh	r3, [r7, #6]
 8003bc8:	2b01      	cmp	r3, #1
 8003bca:	d105      	bne.n	8003bd8 <I2C_RequestMemoryWrite+0xc0>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003bcc:	893b      	ldrh	r3, [r7, #8]
 8003bce:	b2da      	uxtb	r2, r3
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	611a      	str	r2, [r3, #16]
 8003bd6:	e021      	b.n	8003c1c <I2C_RequestMemoryWrite+0x104>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003bd8:	893b      	ldrh	r3, [r7, #8]
 8003bda:	0a1b      	lsrs	r3, r3, #8
 8003bdc:	b29b      	uxth	r3, r3
 8003bde:	b2da      	uxtb	r2, r3
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003be6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003be8:	6a39      	ldr	r1, [r7, #32]
 8003bea:	68f8      	ldr	r0, [r7, #12]
 8003bec:	f000 f9c4 	bl	8003f78 <I2C_WaitOnTXEFlagUntilTimeout>
 8003bf0:	4603      	mov	r3, r0
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d00d      	beq.n	8003c12 <I2C_RequestMemoryWrite+0xfa>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bfa:	2b04      	cmp	r3, #4
 8003bfc:	d107      	bne.n	8003c0e <I2C_RequestMemoryWrite+0xf6>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	681a      	ldr	r2, [r3, #0]
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003c0c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003c0e:	2301      	movs	r3, #1
 8003c10:	e005      	b.n	8003c1e <I2C_RequestMemoryWrite+0x106>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003c12:	893b      	ldrh	r3, [r7, #8]
 8003c14:	b2da      	uxtb	r2, r3
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8003c1c:	2300      	movs	r3, #0
}
 8003c1e:	4618      	mov	r0, r3
 8003c20:	3718      	adds	r7, #24
 8003c22:	46bd      	mov	sp, r7
 8003c24:	bd80      	pop	{r7, pc}
 8003c26:	bf00      	nop
 8003c28:	00010002 	.word	0x00010002

08003c2c <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003c2c:	b580      	push	{r7, lr}
 8003c2e:	b088      	sub	sp, #32
 8003c30:	af02      	add	r7, sp, #8
 8003c32:	60f8      	str	r0, [r7, #12]
 8003c34:	4608      	mov	r0, r1
 8003c36:	4611      	mov	r1, r2
 8003c38:	461a      	mov	r2, r3
 8003c3a:	4603      	mov	r3, r0
 8003c3c:	817b      	strh	r3, [r7, #10]
 8003c3e:	460b      	mov	r3, r1
 8003c40:	813b      	strh	r3, [r7, #8]
 8003c42:	4613      	mov	r3, r2
 8003c44:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	681a      	ldr	r2, [r3, #0]
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003c54:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	681a      	ldr	r2, [r3, #0]
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003c64:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003c66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c68:	9300      	str	r3, [sp, #0]
 8003c6a:	6a3b      	ldr	r3, [r7, #32]
 8003c6c:	2200      	movs	r2, #0
 8003c6e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003c72:	68f8      	ldr	r0, [r7, #12]
 8003c74:	f000 f8aa 	bl	8003dcc <I2C_WaitOnFlagUntilTimeout>
 8003c78:	4603      	mov	r3, r0
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d001      	beq.n	8003c82 <I2C_RequestMemoryRead+0x56>
  {
    return HAL_ERROR;
 8003c7e:	2301      	movs	r3, #1
 8003c80:	e09e      	b.n	8003dc0 <I2C_RequestMemoryRead+0x194>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003c82:	897b      	ldrh	r3, [r7, #10]
 8003c84:	b2db      	uxtb	r3, r3
 8003c86:	461a      	mov	r2, r3
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003c90:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003c92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c94:	6a3a      	ldr	r2, [r7, #32]
 8003c96:	494c      	ldr	r1, [pc, #304]	; (8003dc8 <I2C_RequestMemoryRead+0x19c>)
 8003c98:	68f8      	ldr	r0, [r7, #12]
 8003c9a:	f000 f8ee 	bl	8003e7a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003c9e:	4603      	mov	r3, r0
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d001      	beq.n	8003ca8 <I2C_RequestMemoryRead+0x7c>
  {
    return HAL_ERROR;
 8003ca4:	2301      	movs	r3, #1
 8003ca6:	e08b      	b.n	8003dc0 <I2C_RequestMemoryRead+0x194>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003ca8:	2300      	movs	r3, #0
 8003caa:	617b      	str	r3, [r7, #20]
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	695b      	ldr	r3, [r3, #20]
 8003cb2:	617b      	str	r3, [r7, #20]
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	699b      	ldr	r3, [r3, #24]
 8003cba:	617b      	str	r3, [r7, #20]
 8003cbc:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003cbe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003cc0:	6a39      	ldr	r1, [r7, #32]
 8003cc2:	68f8      	ldr	r0, [r7, #12]
 8003cc4:	f000 f958 	bl	8003f78 <I2C_WaitOnTXEFlagUntilTimeout>
 8003cc8:	4603      	mov	r3, r0
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d00d      	beq.n	8003cea <I2C_RequestMemoryRead+0xbe>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cd2:	2b04      	cmp	r3, #4
 8003cd4:	d107      	bne.n	8003ce6 <I2C_RequestMemoryRead+0xba>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	681a      	ldr	r2, [r3, #0]
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003ce4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003ce6:	2301      	movs	r3, #1
 8003ce8:	e06a      	b.n	8003dc0 <I2C_RequestMemoryRead+0x194>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003cea:	88fb      	ldrh	r3, [r7, #6]
 8003cec:	2b01      	cmp	r3, #1
 8003cee:	d105      	bne.n	8003cfc <I2C_RequestMemoryRead+0xd0>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003cf0:	893b      	ldrh	r3, [r7, #8]
 8003cf2:	b2da      	uxtb	r2, r3
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	611a      	str	r2, [r3, #16]
 8003cfa:	e021      	b.n	8003d40 <I2C_RequestMemoryRead+0x114>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003cfc:	893b      	ldrh	r3, [r7, #8]
 8003cfe:	0a1b      	lsrs	r3, r3, #8
 8003d00:	b29b      	uxth	r3, r3
 8003d02:	b2da      	uxtb	r2, r3
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003d0a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d0c:	6a39      	ldr	r1, [r7, #32]
 8003d0e:	68f8      	ldr	r0, [r7, #12]
 8003d10:	f000 f932 	bl	8003f78 <I2C_WaitOnTXEFlagUntilTimeout>
 8003d14:	4603      	mov	r3, r0
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d00d      	beq.n	8003d36 <I2C_RequestMemoryRead+0x10a>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d1e:	2b04      	cmp	r3, #4
 8003d20:	d107      	bne.n	8003d32 <I2C_RequestMemoryRead+0x106>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	681a      	ldr	r2, [r3, #0]
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003d30:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003d32:	2301      	movs	r3, #1
 8003d34:	e044      	b.n	8003dc0 <I2C_RequestMemoryRead+0x194>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003d36:	893b      	ldrh	r3, [r7, #8]
 8003d38:	b2da      	uxtb	r2, r3
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003d40:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d42:	6a39      	ldr	r1, [r7, #32]
 8003d44:	68f8      	ldr	r0, [r7, #12]
 8003d46:	f000 f917 	bl	8003f78 <I2C_WaitOnTXEFlagUntilTimeout>
 8003d4a:	4603      	mov	r3, r0
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d00d      	beq.n	8003d6c <I2C_RequestMemoryRead+0x140>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d54:	2b04      	cmp	r3, #4
 8003d56:	d107      	bne.n	8003d68 <I2C_RequestMemoryRead+0x13c>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	681a      	ldr	r2, [r3, #0]
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003d66:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003d68:	2301      	movs	r3, #1
 8003d6a:	e029      	b.n	8003dc0 <I2C_RequestMemoryRead+0x194>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	681a      	ldr	r2, [r3, #0]
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003d7a:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003d7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d7e:	9300      	str	r3, [sp, #0]
 8003d80:	6a3b      	ldr	r3, [r7, #32]
 8003d82:	2200      	movs	r2, #0
 8003d84:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003d88:	68f8      	ldr	r0, [r7, #12]
 8003d8a:	f000 f81f 	bl	8003dcc <I2C_WaitOnFlagUntilTimeout>
 8003d8e:	4603      	mov	r3, r0
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d001      	beq.n	8003d98 <I2C_RequestMemoryRead+0x16c>
  {
    return HAL_ERROR;
 8003d94:	2301      	movs	r3, #1
 8003d96:	e013      	b.n	8003dc0 <I2C_RequestMemoryRead+0x194>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003d98:	897b      	ldrh	r3, [r7, #10]
 8003d9a:	b2db      	uxtb	r3, r3
 8003d9c:	f043 0301 	orr.w	r3, r3, #1
 8003da0:	b2da      	uxtb	r2, r3
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003da8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003daa:	6a3a      	ldr	r2, [r7, #32]
 8003dac:	4906      	ldr	r1, [pc, #24]	; (8003dc8 <I2C_RequestMemoryRead+0x19c>)
 8003dae:	68f8      	ldr	r0, [r7, #12]
 8003db0:	f000 f863 	bl	8003e7a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003db4:	4603      	mov	r3, r0
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d001      	beq.n	8003dbe <I2C_RequestMemoryRead+0x192>
  {
    return HAL_ERROR;
 8003dba:	2301      	movs	r3, #1
 8003dbc:	e000      	b.n	8003dc0 <I2C_RequestMemoryRead+0x194>
  }

  return HAL_OK;
 8003dbe:	2300      	movs	r3, #0
}
 8003dc0:	4618      	mov	r0, r3
 8003dc2:	3718      	adds	r7, #24
 8003dc4:	46bd      	mov	sp, r7
 8003dc6:	bd80      	pop	{r7, pc}
 8003dc8:	00010002 	.word	0x00010002

08003dcc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003dcc:	b580      	push	{r7, lr}
 8003dce:	b084      	sub	sp, #16
 8003dd0:	af00      	add	r7, sp, #0
 8003dd2:	60f8      	str	r0, [r7, #12]
 8003dd4:	60b9      	str	r1, [r7, #8]
 8003dd6:	603b      	str	r3, [r7, #0]
 8003dd8:	4613      	mov	r3, r2
 8003dda:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003ddc:	e025      	b.n	8003e2a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003dde:	683b      	ldr	r3, [r7, #0]
 8003de0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003de4:	d021      	beq.n	8003e2a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003de6:	f7fe fd31 	bl	800284c <HAL_GetTick>
 8003dea:	4602      	mov	r2, r0
 8003dec:	69bb      	ldr	r3, [r7, #24]
 8003dee:	1ad3      	subs	r3, r2, r3
 8003df0:	683a      	ldr	r2, [r7, #0]
 8003df2:	429a      	cmp	r2, r3
 8003df4:	d302      	bcc.n	8003dfc <I2C_WaitOnFlagUntilTimeout+0x30>
 8003df6:	683b      	ldr	r3, [r7, #0]
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d116      	bne.n	8003e2a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	2200      	movs	r2, #0
 8003e00:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	2220      	movs	r2, #32
 8003e06:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	2200      	movs	r2, #0
 8003e0e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e16:	f043 0220 	orr.w	r2, r3, #32
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	2200      	movs	r2, #0
 8003e22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003e26:	2301      	movs	r3, #1
 8003e28:	e023      	b.n	8003e72 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003e2a:	68bb      	ldr	r3, [r7, #8]
 8003e2c:	0c1b      	lsrs	r3, r3, #16
 8003e2e:	b2db      	uxtb	r3, r3
 8003e30:	2b01      	cmp	r3, #1
 8003e32:	d10d      	bne.n	8003e50 <I2C_WaitOnFlagUntilTimeout+0x84>
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	695b      	ldr	r3, [r3, #20]
 8003e3a:	43da      	mvns	r2, r3
 8003e3c:	68bb      	ldr	r3, [r7, #8]
 8003e3e:	4013      	ands	r3, r2
 8003e40:	b29b      	uxth	r3, r3
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	bf0c      	ite	eq
 8003e46:	2301      	moveq	r3, #1
 8003e48:	2300      	movne	r3, #0
 8003e4a:	b2db      	uxtb	r3, r3
 8003e4c:	461a      	mov	r2, r3
 8003e4e:	e00c      	b.n	8003e6a <I2C_WaitOnFlagUntilTimeout+0x9e>
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	699b      	ldr	r3, [r3, #24]
 8003e56:	43da      	mvns	r2, r3
 8003e58:	68bb      	ldr	r3, [r7, #8]
 8003e5a:	4013      	ands	r3, r2
 8003e5c:	b29b      	uxth	r3, r3
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	bf0c      	ite	eq
 8003e62:	2301      	moveq	r3, #1
 8003e64:	2300      	movne	r3, #0
 8003e66:	b2db      	uxtb	r3, r3
 8003e68:	461a      	mov	r2, r3
 8003e6a:	79fb      	ldrb	r3, [r7, #7]
 8003e6c:	429a      	cmp	r2, r3
 8003e6e:	d0b6      	beq.n	8003dde <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003e70:	2300      	movs	r3, #0
}
 8003e72:	4618      	mov	r0, r3
 8003e74:	3710      	adds	r7, #16
 8003e76:	46bd      	mov	sp, r7
 8003e78:	bd80      	pop	{r7, pc}

08003e7a <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003e7a:	b580      	push	{r7, lr}
 8003e7c:	b084      	sub	sp, #16
 8003e7e:	af00      	add	r7, sp, #0
 8003e80:	60f8      	str	r0, [r7, #12]
 8003e82:	60b9      	str	r1, [r7, #8]
 8003e84:	607a      	str	r2, [r7, #4]
 8003e86:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003e88:	e051      	b.n	8003f2e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	695b      	ldr	r3, [r3, #20]
 8003e90:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003e94:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003e98:	d123      	bne.n	8003ee2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	681a      	ldr	r2, [r3, #0]
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003ea8:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003eb2:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	2200      	movs	r2, #0
 8003eb8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	2220      	movs	r2, #32
 8003ebe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	2200      	movs	r2, #0
 8003ec6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ece:	f043 0204 	orr.w	r2, r3, #4
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	2200      	movs	r2, #0
 8003eda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003ede:	2301      	movs	r3, #1
 8003ee0:	e046      	b.n	8003f70 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ee8:	d021      	beq.n	8003f2e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003eea:	f7fe fcaf 	bl	800284c <HAL_GetTick>
 8003eee:	4602      	mov	r2, r0
 8003ef0:	683b      	ldr	r3, [r7, #0]
 8003ef2:	1ad3      	subs	r3, r2, r3
 8003ef4:	687a      	ldr	r2, [r7, #4]
 8003ef6:	429a      	cmp	r2, r3
 8003ef8:	d302      	bcc.n	8003f00 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d116      	bne.n	8003f2e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	2200      	movs	r2, #0
 8003f04:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	2220      	movs	r2, #32
 8003f0a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	2200      	movs	r2, #0
 8003f12:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f1a:	f043 0220 	orr.w	r2, r3, #32
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	2200      	movs	r2, #0
 8003f26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003f2a:	2301      	movs	r3, #1
 8003f2c:	e020      	b.n	8003f70 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003f2e:	68bb      	ldr	r3, [r7, #8]
 8003f30:	0c1b      	lsrs	r3, r3, #16
 8003f32:	b2db      	uxtb	r3, r3
 8003f34:	2b01      	cmp	r3, #1
 8003f36:	d10c      	bne.n	8003f52 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	695b      	ldr	r3, [r3, #20]
 8003f3e:	43da      	mvns	r2, r3
 8003f40:	68bb      	ldr	r3, [r7, #8]
 8003f42:	4013      	ands	r3, r2
 8003f44:	b29b      	uxth	r3, r3
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	bf14      	ite	ne
 8003f4a:	2301      	movne	r3, #1
 8003f4c:	2300      	moveq	r3, #0
 8003f4e:	b2db      	uxtb	r3, r3
 8003f50:	e00b      	b.n	8003f6a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	699b      	ldr	r3, [r3, #24]
 8003f58:	43da      	mvns	r2, r3
 8003f5a:	68bb      	ldr	r3, [r7, #8]
 8003f5c:	4013      	ands	r3, r2
 8003f5e:	b29b      	uxth	r3, r3
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	bf14      	ite	ne
 8003f64:	2301      	movne	r3, #1
 8003f66:	2300      	moveq	r3, #0
 8003f68:	b2db      	uxtb	r3, r3
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d18d      	bne.n	8003e8a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8003f6e:	2300      	movs	r3, #0
}
 8003f70:	4618      	mov	r0, r3
 8003f72:	3710      	adds	r7, #16
 8003f74:	46bd      	mov	sp, r7
 8003f76:	bd80      	pop	{r7, pc}

08003f78 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003f78:	b580      	push	{r7, lr}
 8003f7a:	b084      	sub	sp, #16
 8003f7c:	af00      	add	r7, sp, #0
 8003f7e:	60f8      	str	r0, [r7, #12]
 8003f80:	60b9      	str	r1, [r7, #8]
 8003f82:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003f84:	e02d      	b.n	8003fe2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003f86:	68f8      	ldr	r0, [r7, #12]
 8003f88:	f000 f8ce 	bl	8004128 <I2C_IsAcknowledgeFailed>
 8003f8c:	4603      	mov	r3, r0
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d001      	beq.n	8003f96 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003f92:	2301      	movs	r3, #1
 8003f94:	e02d      	b.n	8003ff2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003f96:	68bb      	ldr	r3, [r7, #8]
 8003f98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f9c:	d021      	beq.n	8003fe2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003f9e:	f7fe fc55 	bl	800284c <HAL_GetTick>
 8003fa2:	4602      	mov	r2, r0
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	1ad3      	subs	r3, r2, r3
 8003fa8:	68ba      	ldr	r2, [r7, #8]
 8003faa:	429a      	cmp	r2, r3
 8003fac:	d302      	bcc.n	8003fb4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003fae:	68bb      	ldr	r3, [r7, #8]
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d116      	bne.n	8003fe2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	2200      	movs	r2, #0
 8003fb8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	2220      	movs	r2, #32
 8003fbe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	2200      	movs	r2, #0
 8003fc6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fce:	f043 0220 	orr.w	r2, r3, #32
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	2200      	movs	r2, #0
 8003fda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003fde:	2301      	movs	r3, #1
 8003fe0:	e007      	b.n	8003ff2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	695b      	ldr	r3, [r3, #20]
 8003fe8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003fec:	2b80      	cmp	r3, #128	; 0x80
 8003fee:	d1ca      	bne.n	8003f86 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003ff0:	2300      	movs	r3, #0
}
 8003ff2:	4618      	mov	r0, r3
 8003ff4:	3710      	adds	r7, #16
 8003ff6:	46bd      	mov	sp, r7
 8003ff8:	bd80      	pop	{r7, pc}

08003ffa <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003ffa:	b580      	push	{r7, lr}
 8003ffc:	b084      	sub	sp, #16
 8003ffe:	af00      	add	r7, sp, #0
 8004000:	60f8      	str	r0, [r7, #12]
 8004002:	60b9      	str	r1, [r7, #8]
 8004004:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004006:	e02d      	b.n	8004064 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004008:	68f8      	ldr	r0, [r7, #12]
 800400a:	f000 f88d 	bl	8004128 <I2C_IsAcknowledgeFailed>
 800400e:	4603      	mov	r3, r0
 8004010:	2b00      	cmp	r3, #0
 8004012:	d001      	beq.n	8004018 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004014:	2301      	movs	r3, #1
 8004016:	e02d      	b.n	8004074 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004018:	68bb      	ldr	r3, [r7, #8]
 800401a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800401e:	d021      	beq.n	8004064 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004020:	f7fe fc14 	bl	800284c <HAL_GetTick>
 8004024:	4602      	mov	r2, r0
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	1ad3      	subs	r3, r2, r3
 800402a:	68ba      	ldr	r2, [r7, #8]
 800402c:	429a      	cmp	r2, r3
 800402e:	d302      	bcc.n	8004036 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004030:	68bb      	ldr	r3, [r7, #8]
 8004032:	2b00      	cmp	r3, #0
 8004034:	d116      	bne.n	8004064 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	2200      	movs	r2, #0
 800403a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	2220      	movs	r2, #32
 8004040:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	2200      	movs	r2, #0
 8004048:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004050:	f043 0220 	orr.w	r2, r3, #32
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	2200      	movs	r2, #0
 800405c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004060:	2301      	movs	r3, #1
 8004062:	e007      	b.n	8004074 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	695b      	ldr	r3, [r3, #20]
 800406a:	f003 0304 	and.w	r3, r3, #4
 800406e:	2b04      	cmp	r3, #4
 8004070:	d1ca      	bne.n	8004008 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004072:	2300      	movs	r3, #0
}
 8004074:	4618      	mov	r0, r3
 8004076:	3710      	adds	r7, #16
 8004078:	46bd      	mov	sp, r7
 800407a:	bd80      	pop	{r7, pc}

0800407c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800407c:	b580      	push	{r7, lr}
 800407e:	b084      	sub	sp, #16
 8004080:	af00      	add	r7, sp, #0
 8004082:	60f8      	str	r0, [r7, #12]
 8004084:	60b9      	str	r1, [r7, #8]
 8004086:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004088:	e042      	b.n	8004110 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	695b      	ldr	r3, [r3, #20]
 8004090:	f003 0310 	and.w	r3, r3, #16
 8004094:	2b10      	cmp	r3, #16
 8004096:	d119      	bne.n	80040cc <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	f06f 0210 	mvn.w	r2, #16
 80040a0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	2200      	movs	r2, #0
 80040a6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	2220      	movs	r2, #32
 80040ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	2200      	movs	r2, #0
 80040b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	2200      	movs	r2, #0
 80040c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80040c8:	2301      	movs	r3, #1
 80040ca:	e029      	b.n	8004120 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80040cc:	f7fe fbbe 	bl	800284c <HAL_GetTick>
 80040d0:	4602      	mov	r2, r0
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	1ad3      	subs	r3, r2, r3
 80040d6:	68ba      	ldr	r2, [r7, #8]
 80040d8:	429a      	cmp	r2, r3
 80040da:	d302      	bcc.n	80040e2 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80040dc:	68bb      	ldr	r3, [r7, #8]
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d116      	bne.n	8004110 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	2200      	movs	r2, #0
 80040e6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	2220      	movs	r2, #32
 80040ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	2200      	movs	r2, #0
 80040f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040fc:	f043 0220 	orr.w	r2, r3, #32
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	2200      	movs	r2, #0
 8004108:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800410c:	2301      	movs	r3, #1
 800410e:	e007      	b.n	8004120 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	695b      	ldr	r3, [r3, #20]
 8004116:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800411a:	2b40      	cmp	r3, #64	; 0x40
 800411c:	d1b5      	bne.n	800408a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800411e:	2300      	movs	r3, #0
}
 8004120:	4618      	mov	r0, r3
 8004122:	3710      	adds	r7, #16
 8004124:	46bd      	mov	sp, r7
 8004126:	bd80      	pop	{r7, pc}

08004128 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004128:	b480      	push	{r7}
 800412a:	b083      	sub	sp, #12
 800412c:	af00      	add	r7, sp, #0
 800412e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	695b      	ldr	r3, [r3, #20]
 8004136:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800413a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800413e:	d11b      	bne.n	8004178 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004148:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	2200      	movs	r2, #0
 800414e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	2220      	movs	r2, #32
 8004154:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	2200      	movs	r2, #0
 800415c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004164:	f043 0204 	orr.w	r2, r3, #4
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	2200      	movs	r2, #0
 8004170:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8004174:	2301      	movs	r3, #1
 8004176:	e000      	b.n	800417a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004178:	2300      	movs	r3, #0
}
 800417a:	4618      	mov	r0, r3
 800417c:	370c      	adds	r7, #12
 800417e:	46bd      	mov	sp, r7
 8004180:	bc80      	pop	{r7}
 8004182:	4770      	bx	lr

08004184 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004184:	b580      	push	{r7, lr}
 8004186:	b086      	sub	sp, #24
 8004188:	af00      	add	r7, sp, #0
 800418a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	2b00      	cmp	r3, #0
 8004190:	d101      	bne.n	8004196 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004192:	2301      	movs	r3, #1
 8004194:	e26c      	b.n	8004670 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	f003 0301 	and.w	r3, r3, #1
 800419e:	2b00      	cmp	r3, #0
 80041a0:	f000 8087 	beq.w	80042b2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80041a4:	4b92      	ldr	r3, [pc, #584]	; (80043f0 <HAL_RCC_OscConfig+0x26c>)
 80041a6:	685b      	ldr	r3, [r3, #4]
 80041a8:	f003 030c 	and.w	r3, r3, #12
 80041ac:	2b04      	cmp	r3, #4
 80041ae:	d00c      	beq.n	80041ca <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80041b0:	4b8f      	ldr	r3, [pc, #572]	; (80043f0 <HAL_RCC_OscConfig+0x26c>)
 80041b2:	685b      	ldr	r3, [r3, #4]
 80041b4:	f003 030c 	and.w	r3, r3, #12
 80041b8:	2b08      	cmp	r3, #8
 80041ba:	d112      	bne.n	80041e2 <HAL_RCC_OscConfig+0x5e>
 80041bc:	4b8c      	ldr	r3, [pc, #560]	; (80043f0 <HAL_RCC_OscConfig+0x26c>)
 80041be:	685b      	ldr	r3, [r3, #4]
 80041c0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80041c4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80041c8:	d10b      	bne.n	80041e2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80041ca:	4b89      	ldr	r3, [pc, #548]	; (80043f0 <HAL_RCC_OscConfig+0x26c>)
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d06c      	beq.n	80042b0 <HAL_RCC_OscConfig+0x12c>
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	685b      	ldr	r3, [r3, #4]
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d168      	bne.n	80042b0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80041de:	2301      	movs	r3, #1
 80041e0:	e246      	b.n	8004670 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	685b      	ldr	r3, [r3, #4]
 80041e6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80041ea:	d106      	bne.n	80041fa <HAL_RCC_OscConfig+0x76>
 80041ec:	4b80      	ldr	r3, [pc, #512]	; (80043f0 <HAL_RCC_OscConfig+0x26c>)
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	4a7f      	ldr	r2, [pc, #508]	; (80043f0 <HAL_RCC_OscConfig+0x26c>)
 80041f2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80041f6:	6013      	str	r3, [r2, #0]
 80041f8:	e02e      	b.n	8004258 <HAL_RCC_OscConfig+0xd4>
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	685b      	ldr	r3, [r3, #4]
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d10c      	bne.n	800421c <HAL_RCC_OscConfig+0x98>
 8004202:	4b7b      	ldr	r3, [pc, #492]	; (80043f0 <HAL_RCC_OscConfig+0x26c>)
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	4a7a      	ldr	r2, [pc, #488]	; (80043f0 <HAL_RCC_OscConfig+0x26c>)
 8004208:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800420c:	6013      	str	r3, [r2, #0]
 800420e:	4b78      	ldr	r3, [pc, #480]	; (80043f0 <HAL_RCC_OscConfig+0x26c>)
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	4a77      	ldr	r2, [pc, #476]	; (80043f0 <HAL_RCC_OscConfig+0x26c>)
 8004214:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004218:	6013      	str	r3, [r2, #0]
 800421a:	e01d      	b.n	8004258 <HAL_RCC_OscConfig+0xd4>
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	685b      	ldr	r3, [r3, #4]
 8004220:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004224:	d10c      	bne.n	8004240 <HAL_RCC_OscConfig+0xbc>
 8004226:	4b72      	ldr	r3, [pc, #456]	; (80043f0 <HAL_RCC_OscConfig+0x26c>)
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	4a71      	ldr	r2, [pc, #452]	; (80043f0 <HAL_RCC_OscConfig+0x26c>)
 800422c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004230:	6013      	str	r3, [r2, #0]
 8004232:	4b6f      	ldr	r3, [pc, #444]	; (80043f0 <HAL_RCC_OscConfig+0x26c>)
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	4a6e      	ldr	r2, [pc, #440]	; (80043f0 <HAL_RCC_OscConfig+0x26c>)
 8004238:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800423c:	6013      	str	r3, [r2, #0]
 800423e:	e00b      	b.n	8004258 <HAL_RCC_OscConfig+0xd4>
 8004240:	4b6b      	ldr	r3, [pc, #428]	; (80043f0 <HAL_RCC_OscConfig+0x26c>)
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	4a6a      	ldr	r2, [pc, #424]	; (80043f0 <HAL_RCC_OscConfig+0x26c>)
 8004246:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800424a:	6013      	str	r3, [r2, #0]
 800424c:	4b68      	ldr	r3, [pc, #416]	; (80043f0 <HAL_RCC_OscConfig+0x26c>)
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	4a67      	ldr	r2, [pc, #412]	; (80043f0 <HAL_RCC_OscConfig+0x26c>)
 8004252:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004256:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	685b      	ldr	r3, [r3, #4]
 800425c:	2b00      	cmp	r3, #0
 800425e:	d013      	beq.n	8004288 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004260:	f7fe faf4 	bl	800284c <HAL_GetTick>
 8004264:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004266:	e008      	b.n	800427a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004268:	f7fe faf0 	bl	800284c <HAL_GetTick>
 800426c:	4602      	mov	r2, r0
 800426e:	693b      	ldr	r3, [r7, #16]
 8004270:	1ad3      	subs	r3, r2, r3
 8004272:	2b64      	cmp	r3, #100	; 0x64
 8004274:	d901      	bls.n	800427a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8004276:	2303      	movs	r3, #3
 8004278:	e1fa      	b.n	8004670 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800427a:	4b5d      	ldr	r3, [pc, #372]	; (80043f0 <HAL_RCC_OscConfig+0x26c>)
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004282:	2b00      	cmp	r3, #0
 8004284:	d0f0      	beq.n	8004268 <HAL_RCC_OscConfig+0xe4>
 8004286:	e014      	b.n	80042b2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004288:	f7fe fae0 	bl	800284c <HAL_GetTick>
 800428c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800428e:	e008      	b.n	80042a2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004290:	f7fe fadc 	bl	800284c <HAL_GetTick>
 8004294:	4602      	mov	r2, r0
 8004296:	693b      	ldr	r3, [r7, #16]
 8004298:	1ad3      	subs	r3, r2, r3
 800429a:	2b64      	cmp	r3, #100	; 0x64
 800429c:	d901      	bls.n	80042a2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800429e:	2303      	movs	r3, #3
 80042a0:	e1e6      	b.n	8004670 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80042a2:	4b53      	ldr	r3, [pc, #332]	; (80043f0 <HAL_RCC_OscConfig+0x26c>)
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d1f0      	bne.n	8004290 <HAL_RCC_OscConfig+0x10c>
 80042ae:	e000      	b.n	80042b2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80042b0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	f003 0302 	and.w	r3, r3, #2
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d063      	beq.n	8004386 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80042be:	4b4c      	ldr	r3, [pc, #304]	; (80043f0 <HAL_RCC_OscConfig+0x26c>)
 80042c0:	685b      	ldr	r3, [r3, #4]
 80042c2:	f003 030c 	and.w	r3, r3, #12
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d00b      	beq.n	80042e2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80042ca:	4b49      	ldr	r3, [pc, #292]	; (80043f0 <HAL_RCC_OscConfig+0x26c>)
 80042cc:	685b      	ldr	r3, [r3, #4]
 80042ce:	f003 030c 	and.w	r3, r3, #12
 80042d2:	2b08      	cmp	r3, #8
 80042d4:	d11c      	bne.n	8004310 <HAL_RCC_OscConfig+0x18c>
 80042d6:	4b46      	ldr	r3, [pc, #280]	; (80043f0 <HAL_RCC_OscConfig+0x26c>)
 80042d8:	685b      	ldr	r3, [r3, #4]
 80042da:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d116      	bne.n	8004310 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80042e2:	4b43      	ldr	r3, [pc, #268]	; (80043f0 <HAL_RCC_OscConfig+0x26c>)
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	f003 0302 	and.w	r3, r3, #2
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d005      	beq.n	80042fa <HAL_RCC_OscConfig+0x176>
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	691b      	ldr	r3, [r3, #16]
 80042f2:	2b01      	cmp	r3, #1
 80042f4:	d001      	beq.n	80042fa <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80042f6:	2301      	movs	r3, #1
 80042f8:	e1ba      	b.n	8004670 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80042fa:	4b3d      	ldr	r3, [pc, #244]	; (80043f0 <HAL_RCC_OscConfig+0x26c>)
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	695b      	ldr	r3, [r3, #20]
 8004306:	00db      	lsls	r3, r3, #3
 8004308:	4939      	ldr	r1, [pc, #228]	; (80043f0 <HAL_RCC_OscConfig+0x26c>)
 800430a:	4313      	orrs	r3, r2
 800430c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800430e:	e03a      	b.n	8004386 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	691b      	ldr	r3, [r3, #16]
 8004314:	2b00      	cmp	r3, #0
 8004316:	d020      	beq.n	800435a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004318:	4b36      	ldr	r3, [pc, #216]	; (80043f4 <HAL_RCC_OscConfig+0x270>)
 800431a:	2201      	movs	r2, #1
 800431c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800431e:	f7fe fa95 	bl	800284c <HAL_GetTick>
 8004322:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004324:	e008      	b.n	8004338 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004326:	f7fe fa91 	bl	800284c <HAL_GetTick>
 800432a:	4602      	mov	r2, r0
 800432c:	693b      	ldr	r3, [r7, #16]
 800432e:	1ad3      	subs	r3, r2, r3
 8004330:	2b02      	cmp	r3, #2
 8004332:	d901      	bls.n	8004338 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8004334:	2303      	movs	r3, #3
 8004336:	e19b      	b.n	8004670 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004338:	4b2d      	ldr	r3, [pc, #180]	; (80043f0 <HAL_RCC_OscConfig+0x26c>)
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	f003 0302 	and.w	r3, r3, #2
 8004340:	2b00      	cmp	r3, #0
 8004342:	d0f0      	beq.n	8004326 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004344:	4b2a      	ldr	r3, [pc, #168]	; (80043f0 <HAL_RCC_OscConfig+0x26c>)
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	695b      	ldr	r3, [r3, #20]
 8004350:	00db      	lsls	r3, r3, #3
 8004352:	4927      	ldr	r1, [pc, #156]	; (80043f0 <HAL_RCC_OscConfig+0x26c>)
 8004354:	4313      	orrs	r3, r2
 8004356:	600b      	str	r3, [r1, #0]
 8004358:	e015      	b.n	8004386 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800435a:	4b26      	ldr	r3, [pc, #152]	; (80043f4 <HAL_RCC_OscConfig+0x270>)
 800435c:	2200      	movs	r2, #0
 800435e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004360:	f7fe fa74 	bl	800284c <HAL_GetTick>
 8004364:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004366:	e008      	b.n	800437a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004368:	f7fe fa70 	bl	800284c <HAL_GetTick>
 800436c:	4602      	mov	r2, r0
 800436e:	693b      	ldr	r3, [r7, #16]
 8004370:	1ad3      	subs	r3, r2, r3
 8004372:	2b02      	cmp	r3, #2
 8004374:	d901      	bls.n	800437a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8004376:	2303      	movs	r3, #3
 8004378:	e17a      	b.n	8004670 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800437a:	4b1d      	ldr	r3, [pc, #116]	; (80043f0 <HAL_RCC_OscConfig+0x26c>)
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	f003 0302 	and.w	r3, r3, #2
 8004382:	2b00      	cmp	r3, #0
 8004384:	d1f0      	bne.n	8004368 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	f003 0308 	and.w	r3, r3, #8
 800438e:	2b00      	cmp	r3, #0
 8004390:	d03a      	beq.n	8004408 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	699b      	ldr	r3, [r3, #24]
 8004396:	2b00      	cmp	r3, #0
 8004398:	d019      	beq.n	80043ce <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800439a:	4b17      	ldr	r3, [pc, #92]	; (80043f8 <HAL_RCC_OscConfig+0x274>)
 800439c:	2201      	movs	r2, #1
 800439e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80043a0:	f7fe fa54 	bl	800284c <HAL_GetTick>
 80043a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80043a6:	e008      	b.n	80043ba <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80043a8:	f7fe fa50 	bl	800284c <HAL_GetTick>
 80043ac:	4602      	mov	r2, r0
 80043ae:	693b      	ldr	r3, [r7, #16]
 80043b0:	1ad3      	subs	r3, r2, r3
 80043b2:	2b02      	cmp	r3, #2
 80043b4:	d901      	bls.n	80043ba <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80043b6:	2303      	movs	r3, #3
 80043b8:	e15a      	b.n	8004670 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80043ba:	4b0d      	ldr	r3, [pc, #52]	; (80043f0 <HAL_RCC_OscConfig+0x26c>)
 80043bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043be:	f003 0302 	and.w	r3, r3, #2
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d0f0      	beq.n	80043a8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80043c6:	2001      	movs	r0, #1
 80043c8:	f000 fac6 	bl	8004958 <RCC_Delay>
 80043cc:	e01c      	b.n	8004408 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80043ce:	4b0a      	ldr	r3, [pc, #40]	; (80043f8 <HAL_RCC_OscConfig+0x274>)
 80043d0:	2200      	movs	r2, #0
 80043d2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80043d4:	f7fe fa3a 	bl	800284c <HAL_GetTick>
 80043d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80043da:	e00f      	b.n	80043fc <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80043dc:	f7fe fa36 	bl	800284c <HAL_GetTick>
 80043e0:	4602      	mov	r2, r0
 80043e2:	693b      	ldr	r3, [r7, #16]
 80043e4:	1ad3      	subs	r3, r2, r3
 80043e6:	2b02      	cmp	r3, #2
 80043e8:	d908      	bls.n	80043fc <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80043ea:	2303      	movs	r3, #3
 80043ec:	e140      	b.n	8004670 <HAL_RCC_OscConfig+0x4ec>
 80043ee:	bf00      	nop
 80043f0:	40021000 	.word	0x40021000
 80043f4:	42420000 	.word	0x42420000
 80043f8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80043fc:	4b9e      	ldr	r3, [pc, #632]	; (8004678 <HAL_RCC_OscConfig+0x4f4>)
 80043fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004400:	f003 0302 	and.w	r3, r3, #2
 8004404:	2b00      	cmp	r3, #0
 8004406:	d1e9      	bne.n	80043dc <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	f003 0304 	and.w	r3, r3, #4
 8004410:	2b00      	cmp	r3, #0
 8004412:	f000 80a6 	beq.w	8004562 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004416:	2300      	movs	r3, #0
 8004418:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800441a:	4b97      	ldr	r3, [pc, #604]	; (8004678 <HAL_RCC_OscConfig+0x4f4>)
 800441c:	69db      	ldr	r3, [r3, #28]
 800441e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004422:	2b00      	cmp	r3, #0
 8004424:	d10d      	bne.n	8004442 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004426:	4b94      	ldr	r3, [pc, #592]	; (8004678 <HAL_RCC_OscConfig+0x4f4>)
 8004428:	69db      	ldr	r3, [r3, #28]
 800442a:	4a93      	ldr	r2, [pc, #588]	; (8004678 <HAL_RCC_OscConfig+0x4f4>)
 800442c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004430:	61d3      	str	r3, [r2, #28]
 8004432:	4b91      	ldr	r3, [pc, #580]	; (8004678 <HAL_RCC_OscConfig+0x4f4>)
 8004434:	69db      	ldr	r3, [r3, #28]
 8004436:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800443a:	60bb      	str	r3, [r7, #8]
 800443c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800443e:	2301      	movs	r3, #1
 8004440:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004442:	4b8e      	ldr	r3, [pc, #568]	; (800467c <HAL_RCC_OscConfig+0x4f8>)
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800444a:	2b00      	cmp	r3, #0
 800444c:	d118      	bne.n	8004480 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800444e:	4b8b      	ldr	r3, [pc, #556]	; (800467c <HAL_RCC_OscConfig+0x4f8>)
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	4a8a      	ldr	r2, [pc, #552]	; (800467c <HAL_RCC_OscConfig+0x4f8>)
 8004454:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004458:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800445a:	f7fe f9f7 	bl	800284c <HAL_GetTick>
 800445e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004460:	e008      	b.n	8004474 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004462:	f7fe f9f3 	bl	800284c <HAL_GetTick>
 8004466:	4602      	mov	r2, r0
 8004468:	693b      	ldr	r3, [r7, #16]
 800446a:	1ad3      	subs	r3, r2, r3
 800446c:	2b64      	cmp	r3, #100	; 0x64
 800446e:	d901      	bls.n	8004474 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8004470:	2303      	movs	r3, #3
 8004472:	e0fd      	b.n	8004670 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004474:	4b81      	ldr	r3, [pc, #516]	; (800467c <HAL_RCC_OscConfig+0x4f8>)
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800447c:	2b00      	cmp	r3, #0
 800447e:	d0f0      	beq.n	8004462 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	68db      	ldr	r3, [r3, #12]
 8004484:	2b01      	cmp	r3, #1
 8004486:	d106      	bne.n	8004496 <HAL_RCC_OscConfig+0x312>
 8004488:	4b7b      	ldr	r3, [pc, #492]	; (8004678 <HAL_RCC_OscConfig+0x4f4>)
 800448a:	6a1b      	ldr	r3, [r3, #32]
 800448c:	4a7a      	ldr	r2, [pc, #488]	; (8004678 <HAL_RCC_OscConfig+0x4f4>)
 800448e:	f043 0301 	orr.w	r3, r3, #1
 8004492:	6213      	str	r3, [r2, #32]
 8004494:	e02d      	b.n	80044f2 <HAL_RCC_OscConfig+0x36e>
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	68db      	ldr	r3, [r3, #12]
 800449a:	2b00      	cmp	r3, #0
 800449c:	d10c      	bne.n	80044b8 <HAL_RCC_OscConfig+0x334>
 800449e:	4b76      	ldr	r3, [pc, #472]	; (8004678 <HAL_RCC_OscConfig+0x4f4>)
 80044a0:	6a1b      	ldr	r3, [r3, #32]
 80044a2:	4a75      	ldr	r2, [pc, #468]	; (8004678 <HAL_RCC_OscConfig+0x4f4>)
 80044a4:	f023 0301 	bic.w	r3, r3, #1
 80044a8:	6213      	str	r3, [r2, #32]
 80044aa:	4b73      	ldr	r3, [pc, #460]	; (8004678 <HAL_RCC_OscConfig+0x4f4>)
 80044ac:	6a1b      	ldr	r3, [r3, #32]
 80044ae:	4a72      	ldr	r2, [pc, #456]	; (8004678 <HAL_RCC_OscConfig+0x4f4>)
 80044b0:	f023 0304 	bic.w	r3, r3, #4
 80044b4:	6213      	str	r3, [r2, #32]
 80044b6:	e01c      	b.n	80044f2 <HAL_RCC_OscConfig+0x36e>
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	68db      	ldr	r3, [r3, #12]
 80044bc:	2b05      	cmp	r3, #5
 80044be:	d10c      	bne.n	80044da <HAL_RCC_OscConfig+0x356>
 80044c0:	4b6d      	ldr	r3, [pc, #436]	; (8004678 <HAL_RCC_OscConfig+0x4f4>)
 80044c2:	6a1b      	ldr	r3, [r3, #32]
 80044c4:	4a6c      	ldr	r2, [pc, #432]	; (8004678 <HAL_RCC_OscConfig+0x4f4>)
 80044c6:	f043 0304 	orr.w	r3, r3, #4
 80044ca:	6213      	str	r3, [r2, #32]
 80044cc:	4b6a      	ldr	r3, [pc, #424]	; (8004678 <HAL_RCC_OscConfig+0x4f4>)
 80044ce:	6a1b      	ldr	r3, [r3, #32]
 80044d0:	4a69      	ldr	r2, [pc, #420]	; (8004678 <HAL_RCC_OscConfig+0x4f4>)
 80044d2:	f043 0301 	orr.w	r3, r3, #1
 80044d6:	6213      	str	r3, [r2, #32]
 80044d8:	e00b      	b.n	80044f2 <HAL_RCC_OscConfig+0x36e>
 80044da:	4b67      	ldr	r3, [pc, #412]	; (8004678 <HAL_RCC_OscConfig+0x4f4>)
 80044dc:	6a1b      	ldr	r3, [r3, #32]
 80044de:	4a66      	ldr	r2, [pc, #408]	; (8004678 <HAL_RCC_OscConfig+0x4f4>)
 80044e0:	f023 0301 	bic.w	r3, r3, #1
 80044e4:	6213      	str	r3, [r2, #32]
 80044e6:	4b64      	ldr	r3, [pc, #400]	; (8004678 <HAL_RCC_OscConfig+0x4f4>)
 80044e8:	6a1b      	ldr	r3, [r3, #32]
 80044ea:	4a63      	ldr	r2, [pc, #396]	; (8004678 <HAL_RCC_OscConfig+0x4f4>)
 80044ec:	f023 0304 	bic.w	r3, r3, #4
 80044f0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	68db      	ldr	r3, [r3, #12]
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d015      	beq.n	8004526 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80044fa:	f7fe f9a7 	bl	800284c <HAL_GetTick>
 80044fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004500:	e00a      	b.n	8004518 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004502:	f7fe f9a3 	bl	800284c <HAL_GetTick>
 8004506:	4602      	mov	r2, r0
 8004508:	693b      	ldr	r3, [r7, #16]
 800450a:	1ad3      	subs	r3, r2, r3
 800450c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004510:	4293      	cmp	r3, r2
 8004512:	d901      	bls.n	8004518 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8004514:	2303      	movs	r3, #3
 8004516:	e0ab      	b.n	8004670 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004518:	4b57      	ldr	r3, [pc, #348]	; (8004678 <HAL_RCC_OscConfig+0x4f4>)
 800451a:	6a1b      	ldr	r3, [r3, #32]
 800451c:	f003 0302 	and.w	r3, r3, #2
 8004520:	2b00      	cmp	r3, #0
 8004522:	d0ee      	beq.n	8004502 <HAL_RCC_OscConfig+0x37e>
 8004524:	e014      	b.n	8004550 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004526:	f7fe f991 	bl	800284c <HAL_GetTick>
 800452a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800452c:	e00a      	b.n	8004544 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800452e:	f7fe f98d 	bl	800284c <HAL_GetTick>
 8004532:	4602      	mov	r2, r0
 8004534:	693b      	ldr	r3, [r7, #16]
 8004536:	1ad3      	subs	r3, r2, r3
 8004538:	f241 3288 	movw	r2, #5000	; 0x1388
 800453c:	4293      	cmp	r3, r2
 800453e:	d901      	bls.n	8004544 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8004540:	2303      	movs	r3, #3
 8004542:	e095      	b.n	8004670 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004544:	4b4c      	ldr	r3, [pc, #304]	; (8004678 <HAL_RCC_OscConfig+0x4f4>)
 8004546:	6a1b      	ldr	r3, [r3, #32]
 8004548:	f003 0302 	and.w	r3, r3, #2
 800454c:	2b00      	cmp	r3, #0
 800454e:	d1ee      	bne.n	800452e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004550:	7dfb      	ldrb	r3, [r7, #23]
 8004552:	2b01      	cmp	r3, #1
 8004554:	d105      	bne.n	8004562 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004556:	4b48      	ldr	r3, [pc, #288]	; (8004678 <HAL_RCC_OscConfig+0x4f4>)
 8004558:	69db      	ldr	r3, [r3, #28]
 800455a:	4a47      	ldr	r2, [pc, #284]	; (8004678 <HAL_RCC_OscConfig+0x4f4>)
 800455c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004560:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	69db      	ldr	r3, [r3, #28]
 8004566:	2b00      	cmp	r3, #0
 8004568:	f000 8081 	beq.w	800466e <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800456c:	4b42      	ldr	r3, [pc, #264]	; (8004678 <HAL_RCC_OscConfig+0x4f4>)
 800456e:	685b      	ldr	r3, [r3, #4]
 8004570:	f003 030c 	and.w	r3, r3, #12
 8004574:	2b08      	cmp	r3, #8
 8004576:	d061      	beq.n	800463c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	69db      	ldr	r3, [r3, #28]
 800457c:	2b02      	cmp	r3, #2
 800457e:	d146      	bne.n	800460e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004580:	4b3f      	ldr	r3, [pc, #252]	; (8004680 <HAL_RCC_OscConfig+0x4fc>)
 8004582:	2200      	movs	r2, #0
 8004584:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004586:	f7fe f961 	bl	800284c <HAL_GetTick>
 800458a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800458c:	e008      	b.n	80045a0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800458e:	f7fe f95d 	bl	800284c <HAL_GetTick>
 8004592:	4602      	mov	r2, r0
 8004594:	693b      	ldr	r3, [r7, #16]
 8004596:	1ad3      	subs	r3, r2, r3
 8004598:	2b02      	cmp	r3, #2
 800459a:	d901      	bls.n	80045a0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800459c:	2303      	movs	r3, #3
 800459e:	e067      	b.n	8004670 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80045a0:	4b35      	ldr	r3, [pc, #212]	; (8004678 <HAL_RCC_OscConfig+0x4f4>)
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d1f0      	bne.n	800458e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	6a1b      	ldr	r3, [r3, #32]
 80045b0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80045b4:	d108      	bne.n	80045c8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80045b6:	4b30      	ldr	r3, [pc, #192]	; (8004678 <HAL_RCC_OscConfig+0x4f4>)
 80045b8:	685b      	ldr	r3, [r3, #4]
 80045ba:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	689b      	ldr	r3, [r3, #8]
 80045c2:	492d      	ldr	r1, [pc, #180]	; (8004678 <HAL_RCC_OscConfig+0x4f4>)
 80045c4:	4313      	orrs	r3, r2
 80045c6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80045c8:	4b2b      	ldr	r3, [pc, #172]	; (8004678 <HAL_RCC_OscConfig+0x4f4>)
 80045ca:	685b      	ldr	r3, [r3, #4]
 80045cc:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	6a19      	ldr	r1, [r3, #32]
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045d8:	430b      	orrs	r3, r1
 80045da:	4927      	ldr	r1, [pc, #156]	; (8004678 <HAL_RCC_OscConfig+0x4f4>)
 80045dc:	4313      	orrs	r3, r2
 80045de:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80045e0:	4b27      	ldr	r3, [pc, #156]	; (8004680 <HAL_RCC_OscConfig+0x4fc>)
 80045e2:	2201      	movs	r2, #1
 80045e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80045e6:	f7fe f931 	bl	800284c <HAL_GetTick>
 80045ea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80045ec:	e008      	b.n	8004600 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80045ee:	f7fe f92d 	bl	800284c <HAL_GetTick>
 80045f2:	4602      	mov	r2, r0
 80045f4:	693b      	ldr	r3, [r7, #16]
 80045f6:	1ad3      	subs	r3, r2, r3
 80045f8:	2b02      	cmp	r3, #2
 80045fa:	d901      	bls.n	8004600 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80045fc:	2303      	movs	r3, #3
 80045fe:	e037      	b.n	8004670 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004600:	4b1d      	ldr	r3, [pc, #116]	; (8004678 <HAL_RCC_OscConfig+0x4f4>)
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004608:	2b00      	cmp	r3, #0
 800460a:	d0f0      	beq.n	80045ee <HAL_RCC_OscConfig+0x46a>
 800460c:	e02f      	b.n	800466e <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800460e:	4b1c      	ldr	r3, [pc, #112]	; (8004680 <HAL_RCC_OscConfig+0x4fc>)
 8004610:	2200      	movs	r2, #0
 8004612:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004614:	f7fe f91a 	bl	800284c <HAL_GetTick>
 8004618:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800461a:	e008      	b.n	800462e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800461c:	f7fe f916 	bl	800284c <HAL_GetTick>
 8004620:	4602      	mov	r2, r0
 8004622:	693b      	ldr	r3, [r7, #16]
 8004624:	1ad3      	subs	r3, r2, r3
 8004626:	2b02      	cmp	r3, #2
 8004628:	d901      	bls.n	800462e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800462a:	2303      	movs	r3, #3
 800462c:	e020      	b.n	8004670 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800462e:	4b12      	ldr	r3, [pc, #72]	; (8004678 <HAL_RCC_OscConfig+0x4f4>)
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004636:	2b00      	cmp	r3, #0
 8004638:	d1f0      	bne.n	800461c <HAL_RCC_OscConfig+0x498>
 800463a:	e018      	b.n	800466e <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	69db      	ldr	r3, [r3, #28]
 8004640:	2b01      	cmp	r3, #1
 8004642:	d101      	bne.n	8004648 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8004644:	2301      	movs	r3, #1
 8004646:	e013      	b.n	8004670 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004648:	4b0b      	ldr	r3, [pc, #44]	; (8004678 <HAL_RCC_OscConfig+0x4f4>)
 800464a:	685b      	ldr	r3, [r3, #4]
 800464c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	6a1b      	ldr	r3, [r3, #32]
 8004658:	429a      	cmp	r2, r3
 800465a:	d106      	bne.n	800466a <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004666:	429a      	cmp	r2, r3
 8004668:	d001      	beq.n	800466e <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 800466a:	2301      	movs	r3, #1
 800466c:	e000      	b.n	8004670 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 800466e:	2300      	movs	r3, #0
}
 8004670:	4618      	mov	r0, r3
 8004672:	3718      	adds	r7, #24
 8004674:	46bd      	mov	sp, r7
 8004676:	bd80      	pop	{r7, pc}
 8004678:	40021000 	.word	0x40021000
 800467c:	40007000 	.word	0x40007000
 8004680:	42420060 	.word	0x42420060

08004684 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004684:	b580      	push	{r7, lr}
 8004686:	b084      	sub	sp, #16
 8004688:	af00      	add	r7, sp, #0
 800468a:	6078      	str	r0, [r7, #4]
 800468c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	2b00      	cmp	r3, #0
 8004692:	d101      	bne.n	8004698 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004694:	2301      	movs	r3, #1
 8004696:	e0d0      	b.n	800483a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004698:	4b6a      	ldr	r3, [pc, #424]	; (8004844 <HAL_RCC_ClockConfig+0x1c0>)
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	f003 0307 	and.w	r3, r3, #7
 80046a0:	683a      	ldr	r2, [r7, #0]
 80046a2:	429a      	cmp	r2, r3
 80046a4:	d910      	bls.n	80046c8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80046a6:	4b67      	ldr	r3, [pc, #412]	; (8004844 <HAL_RCC_ClockConfig+0x1c0>)
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	f023 0207 	bic.w	r2, r3, #7
 80046ae:	4965      	ldr	r1, [pc, #404]	; (8004844 <HAL_RCC_ClockConfig+0x1c0>)
 80046b0:	683b      	ldr	r3, [r7, #0]
 80046b2:	4313      	orrs	r3, r2
 80046b4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80046b6:	4b63      	ldr	r3, [pc, #396]	; (8004844 <HAL_RCC_ClockConfig+0x1c0>)
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	f003 0307 	and.w	r3, r3, #7
 80046be:	683a      	ldr	r2, [r7, #0]
 80046c0:	429a      	cmp	r2, r3
 80046c2:	d001      	beq.n	80046c8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80046c4:	2301      	movs	r3, #1
 80046c6:	e0b8      	b.n	800483a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	f003 0302 	and.w	r3, r3, #2
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	d020      	beq.n	8004716 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	f003 0304 	and.w	r3, r3, #4
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d005      	beq.n	80046ec <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80046e0:	4b59      	ldr	r3, [pc, #356]	; (8004848 <HAL_RCC_ClockConfig+0x1c4>)
 80046e2:	685b      	ldr	r3, [r3, #4]
 80046e4:	4a58      	ldr	r2, [pc, #352]	; (8004848 <HAL_RCC_ClockConfig+0x1c4>)
 80046e6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80046ea:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	f003 0308 	and.w	r3, r3, #8
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d005      	beq.n	8004704 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80046f8:	4b53      	ldr	r3, [pc, #332]	; (8004848 <HAL_RCC_ClockConfig+0x1c4>)
 80046fa:	685b      	ldr	r3, [r3, #4]
 80046fc:	4a52      	ldr	r2, [pc, #328]	; (8004848 <HAL_RCC_ClockConfig+0x1c4>)
 80046fe:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8004702:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004704:	4b50      	ldr	r3, [pc, #320]	; (8004848 <HAL_RCC_ClockConfig+0x1c4>)
 8004706:	685b      	ldr	r3, [r3, #4]
 8004708:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	689b      	ldr	r3, [r3, #8]
 8004710:	494d      	ldr	r1, [pc, #308]	; (8004848 <HAL_RCC_ClockConfig+0x1c4>)
 8004712:	4313      	orrs	r3, r2
 8004714:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	f003 0301 	and.w	r3, r3, #1
 800471e:	2b00      	cmp	r3, #0
 8004720:	d040      	beq.n	80047a4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	685b      	ldr	r3, [r3, #4]
 8004726:	2b01      	cmp	r3, #1
 8004728:	d107      	bne.n	800473a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800472a:	4b47      	ldr	r3, [pc, #284]	; (8004848 <HAL_RCC_ClockConfig+0x1c4>)
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004732:	2b00      	cmp	r3, #0
 8004734:	d115      	bne.n	8004762 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004736:	2301      	movs	r3, #1
 8004738:	e07f      	b.n	800483a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	685b      	ldr	r3, [r3, #4]
 800473e:	2b02      	cmp	r3, #2
 8004740:	d107      	bne.n	8004752 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004742:	4b41      	ldr	r3, [pc, #260]	; (8004848 <HAL_RCC_ClockConfig+0x1c4>)
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800474a:	2b00      	cmp	r3, #0
 800474c:	d109      	bne.n	8004762 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800474e:	2301      	movs	r3, #1
 8004750:	e073      	b.n	800483a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004752:	4b3d      	ldr	r3, [pc, #244]	; (8004848 <HAL_RCC_ClockConfig+0x1c4>)
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	f003 0302 	and.w	r3, r3, #2
 800475a:	2b00      	cmp	r3, #0
 800475c:	d101      	bne.n	8004762 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800475e:	2301      	movs	r3, #1
 8004760:	e06b      	b.n	800483a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004762:	4b39      	ldr	r3, [pc, #228]	; (8004848 <HAL_RCC_ClockConfig+0x1c4>)
 8004764:	685b      	ldr	r3, [r3, #4]
 8004766:	f023 0203 	bic.w	r2, r3, #3
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	685b      	ldr	r3, [r3, #4]
 800476e:	4936      	ldr	r1, [pc, #216]	; (8004848 <HAL_RCC_ClockConfig+0x1c4>)
 8004770:	4313      	orrs	r3, r2
 8004772:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004774:	f7fe f86a 	bl	800284c <HAL_GetTick>
 8004778:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800477a:	e00a      	b.n	8004792 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800477c:	f7fe f866 	bl	800284c <HAL_GetTick>
 8004780:	4602      	mov	r2, r0
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	1ad3      	subs	r3, r2, r3
 8004786:	f241 3288 	movw	r2, #5000	; 0x1388
 800478a:	4293      	cmp	r3, r2
 800478c:	d901      	bls.n	8004792 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800478e:	2303      	movs	r3, #3
 8004790:	e053      	b.n	800483a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004792:	4b2d      	ldr	r3, [pc, #180]	; (8004848 <HAL_RCC_ClockConfig+0x1c4>)
 8004794:	685b      	ldr	r3, [r3, #4]
 8004796:	f003 020c 	and.w	r2, r3, #12
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	685b      	ldr	r3, [r3, #4]
 800479e:	009b      	lsls	r3, r3, #2
 80047a0:	429a      	cmp	r2, r3
 80047a2:	d1eb      	bne.n	800477c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80047a4:	4b27      	ldr	r3, [pc, #156]	; (8004844 <HAL_RCC_ClockConfig+0x1c0>)
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	f003 0307 	and.w	r3, r3, #7
 80047ac:	683a      	ldr	r2, [r7, #0]
 80047ae:	429a      	cmp	r2, r3
 80047b0:	d210      	bcs.n	80047d4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80047b2:	4b24      	ldr	r3, [pc, #144]	; (8004844 <HAL_RCC_ClockConfig+0x1c0>)
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	f023 0207 	bic.w	r2, r3, #7
 80047ba:	4922      	ldr	r1, [pc, #136]	; (8004844 <HAL_RCC_ClockConfig+0x1c0>)
 80047bc:	683b      	ldr	r3, [r7, #0]
 80047be:	4313      	orrs	r3, r2
 80047c0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80047c2:	4b20      	ldr	r3, [pc, #128]	; (8004844 <HAL_RCC_ClockConfig+0x1c0>)
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	f003 0307 	and.w	r3, r3, #7
 80047ca:	683a      	ldr	r2, [r7, #0]
 80047cc:	429a      	cmp	r2, r3
 80047ce:	d001      	beq.n	80047d4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80047d0:	2301      	movs	r3, #1
 80047d2:	e032      	b.n	800483a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	f003 0304 	and.w	r3, r3, #4
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d008      	beq.n	80047f2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80047e0:	4b19      	ldr	r3, [pc, #100]	; (8004848 <HAL_RCC_ClockConfig+0x1c4>)
 80047e2:	685b      	ldr	r3, [r3, #4]
 80047e4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	68db      	ldr	r3, [r3, #12]
 80047ec:	4916      	ldr	r1, [pc, #88]	; (8004848 <HAL_RCC_ClockConfig+0x1c4>)
 80047ee:	4313      	orrs	r3, r2
 80047f0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	f003 0308 	and.w	r3, r3, #8
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d009      	beq.n	8004812 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80047fe:	4b12      	ldr	r3, [pc, #72]	; (8004848 <HAL_RCC_ClockConfig+0x1c4>)
 8004800:	685b      	ldr	r3, [r3, #4]
 8004802:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	691b      	ldr	r3, [r3, #16]
 800480a:	00db      	lsls	r3, r3, #3
 800480c:	490e      	ldr	r1, [pc, #56]	; (8004848 <HAL_RCC_ClockConfig+0x1c4>)
 800480e:	4313      	orrs	r3, r2
 8004810:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004812:	f000 f821 	bl	8004858 <HAL_RCC_GetSysClockFreq>
 8004816:	4601      	mov	r1, r0
 8004818:	4b0b      	ldr	r3, [pc, #44]	; (8004848 <HAL_RCC_ClockConfig+0x1c4>)
 800481a:	685b      	ldr	r3, [r3, #4]
 800481c:	091b      	lsrs	r3, r3, #4
 800481e:	f003 030f 	and.w	r3, r3, #15
 8004822:	4a0a      	ldr	r2, [pc, #40]	; (800484c <HAL_RCC_ClockConfig+0x1c8>)
 8004824:	5cd3      	ldrb	r3, [r2, r3]
 8004826:	fa21 f303 	lsr.w	r3, r1, r3
 800482a:	4a09      	ldr	r2, [pc, #36]	; (8004850 <HAL_RCC_ClockConfig+0x1cc>)
 800482c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800482e:	4b09      	ldr	r3, [pc, #36]	; (8004854 <HAL_RCC_ClockConfig+0x1d0>)
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	4618      	mov	r0, r3
 8004834:	f7fd ffc8 	bl	80027c8 <HAL_InitTick>

  return HAL_OK;
 8004838:	2300      	movs	r3, #0
}
 800483a:	4618      	mov	r0, r3
 800483c:	3710      	adds	r7, #16
 800483e:	46bd      	mov	sp, r7
 8004840:	bd80      	pop	{r7, pc}
 8004842:	bf00      	nop
 8004844:	40022000 	.word	0x40022000
 8004848:	40021000 	.word	0x40021000
 800484c:	08008548 	.word	0x08008548
 8004850:	20000098 	.word	0x20000098
 8004854:	2000009c 	.word	0x2000009c

08004858 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004858:	b490      	push	{r4, r7}
 800485a:	b08a      	sub	sp, #40	; 0x28
 800485c:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800485e:	4b2a      	ldr	r3, [pc, #168]	; (8004908 <HAL_RCC_GetSysClockFreq+0xb0>)
 8004860:	1d3c      	adds	r4, r7, #4
 8004862:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004864:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8004868:	4b28      	ldr	r3, [pc, #160]	; (800490c <HAL_RCC_GetSysClockFreq+0xb4>)
 800486a:	881b      	ldrh	r3, [r3, #0]
 800486c:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800486e:	2300      	movs	r3, #0
 8004870:	61fb      	str	r3, [r7, #28]
 8004872:	2300      	movs	r3, #0
 8004874:	61bb      	str	r3, [r7, #24]
 8004876:	2300      	movs	r3, #0
 8004878:	627b      	str	r3, [r7, #36]	; 0x24
 800487a:	2300      	movs	r3, #0
 800487c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800487e:	2300      	movs	r3, #0
 8004880:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8004882:	4b23      	ldr	r3, [pc, #140]	; (8004910 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004884:	685b      	ldr	r3, [r3, #4]
 8004886:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004888:	69fb      	ldr	r3, [r7, #28]
 800488a:	f003 030c 	and.w	r3, r3, #12
 800488e:	2b04      	cmp	r3, #4
 8004890:	d002      	beq.n	8004898 <HAL_RCC_GetSysClockFreq+0x40>
 8004892:	2b08      	cmp	r3, #8
 8004894:	d003      	beq.n	800489e <HAL_RCC_GetSysClockFreq+0x46>
 8004896:	e02d      	b.n	80048f4 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004898:	4b1e      	ldr	r3, [pc, #120]	; (8004914 <HAL_RCC_GetSysClockFreq+0xbc>)
 800489a:	623b      	str	r3, [r7, #32]
      break;
 800489c:	e02d      	b.n	80048fa <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800489e:	69fb      	ldr	r3, [r7, #28]
 80048a0:	0c9b      	lsrs	r3, r3, #18
 80048a2:	f003 030f 	and.w	r3, r3, #15
 80048a6:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80048aa:	4413      	add	r3, r2
 80048ac:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80048b0:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80048b2:	69fb      	ldr	r3, [r7, #28]
 80048b4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d013      	beq.n	80048e4 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80048bc:	4b14      	ldr	r3, [pc, #80]	; (8004910 <HAL_RCC_GetSysClockFreq+0xb8>)
 80048be:	685b      	ldr	r3, [r3, #4]
 80048c0:	0c5b      	lsrs	r3, r3, #17
 80048c2:	f003 0301 	and.w	r3, r3, #1
 80048c6:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80048ca:	4413      	add	r3, r2
 80048cc:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80048d0:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80048d2:	697b      	ldr	r3, [r7, #20]
 80048d4:	4a0f      	ldr	r2, [pc, #60]	; (8004914 <HAL_RCC_GetSysClockFreq+0xbc>)
 80048d6:	fb02 f203 	mul.w	r2, r2, r3
 80048da:	69bb      	ldr	r3, [r7, #24]
 80048dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80048e0:	627b      	str	r3, [r7, #36]	; 0x24
 80048e2:	e004      	b.n	80048ee <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80048e4:	697b      	ldr	r3, [r7, #20]
 80048e6:	4a0c      	ldr	r2, [pc, #48]	; (8004918 <HAL_RCC_GetSysClockFreq+0xc0>)
 80048e8:	fb02 f303 	mul.w	r3, r2, r3
 80048ec:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80048ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048f0:	623b      	str	r3, [r7, #32]
      break;
 80048f2:	e002      	b.n	80048fa <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80048f4:	4b07      	ldr	r3, [pc, #28]	; (8004914 <HAL_RCC_GetSysClockFreq+0xbc>)
 80048f6:	623b      	str	r3, [r7, #32]
      break;
 80048f8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80048fa:	6a3b      	ldr	r3, [r7, #32]
}
 80048fc:	4618      	mov	r0, r3
 80048fe:	3728      	adds	r7, #40	; 0x28
 8004900:	46bd      	mov	sp, r7
 8004902:	bc90      	pop	{r4, r7}
 8004904:	4770      	bx	lr
 8004906:	bf00      	nop
 8004908:	080071e8 	.word	0x080071e8
 800490c:	080071f8 	.word	0x080071f8
 8004910:	40021000 	.word	0x40021000
 8004914:	007a1200 	.word	0x007a1200
 8004918:	003d0900 	.word	0x003d0900

0800491c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800491c:	b480      	push	{r7}
 800491e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004920:	4b02      	ldr	r3, [pc, #8]	; (800492c <HAL_RCC_GetHCLKFreq+0x10>)
 8004922:	681b      	ldr	r3, [r3, #0]
}
 8004924:	4618      	mov	r0, r3
 8004926:	46bd      	mov	sp, r7
 8004928:	bc80      	pop	{r7}
 800492a:	4770      	bx	lr
 800492c:	20000098 	.word	0x20000098

08004930 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004930:	b580      	push	{r7, lr}
 8004932:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004934:	f7ff fff2 	bl	800491c <HAL_RCC_GetHCLKFreq>
 8004938:	4601      	mov	r1, r0
 800493a:	4b05      	ldr	r3, [pc, #20]	; (8004950 <HAL_RCC_GetPCLK1Freq+0x20>)
 800493c:	685b      	ldr	r3, [r3, #4]
 800493e:	0a1b      	lsrs	r3, r3, #8
 8004940:	f003 0307 	and.w	r3, r3, #7
 8004944:	4a03      	ldr	r2, [pc, #12]	; (8004954 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004946:	5cd3      	ldrb	r3, [r2, r3]
 8004948:	fa21 f303 	lsr.w	r3, r1, r3
}
 800494c:	4618      	mov	r0, r3
 800494e:	bd80      	pop	{r7, pc}
 8004950:	40021000 	.word	0x40021000
 8004954:	08008558 	.word	0x08008558

08004958 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8004958:	b480      	push	{r7}
 800495a:	b085      	sub	sp, #20
 800495c:	af00      	add	r7, sp, #0
 800495e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8004960:	4b0a      	ldr	r3, [pc, #40]	; (800498c <RCC_Delay+0x34>)
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	4a0a      	ldr	r2, [pc, #40]	; (8004990 <RCC_Delay+0x38>)
 8004966:	fba2 2303 	umull	r2, r3, r2, r3
 800496a:	0a5b      	lsrs	r3, r3, #9
 800496c:	687a      	ldr	r2, [r7, #4]
 800496e:	fb02 f303 	mul.w	r3, r2, r3
 8004972:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8004974:	bf00      	nop
  }
  while (Delay --);
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	1e5a      	subs	r2, r3, #1
 800497a:	60fa      	str	r2, [r7, #12]
 800497c:	2b00      	cmp	r3, #0
 800497e:	d1f9      	bne.n	8004974 <RCC_Delay+0x1c>
}
 8004980:	bf00      	nop
 8004982:	3714      	adds	r7, #20
 8004984:	46bd      	mov	sp, r7
 8004986:	bc80      	pop	{r7}
 8004988:	4770      	bx	lr
 800498a:	bf00      	nop
 800498c:	20000098 	.word	0x20000098
 8004990:	10624dd3 	.word	0x10624dd3

08004994 <__errno>:
 8004994:	4b01      	ldr	r3, [pc, #4]	; (800499c <__errno+0x8>)
 8004996:	6818      	ldr	r0, [r3, #0]
 8004998:	4770      	bx	lr
 800499a:	bf00      	nop
 800499c:	200000a4 	.word	0x200000a4

080049a0 <__libc_init_array>:
 80049a0:	b570      	push	{r4, r5, r6, lr}
 80049a2:	2500      	movs	r5, #0
 80049a4:	4e0c      	ldr	r6, [pc, #48]	; (80049d8 <__libc_init_array+0x38>)
 80049a6:	4c0d      	ldr	r4, [pc, #52]	; (80049dc <__libc_init_array+0x3c>)
 80049a8:	1ba4      	subs	r4, r4, r6
 80049aa:	10a4      	asrs	r4, r4, #2
 80049ac:	42a5      	cmp	r5, r4
 80049ae:	d109      	bne.n	80049c4 <__libc_init_array+0x24>
 80049b0:	f002 fc06 	bl	80071c0 <_init>
 80049b4:	2500      	movs	r5, #0
 80049b6:	4e0a      	ldr	r6, [pc, #40]	; (80049e0 <__libc_init_array+0x40>)
 80049b8:	4c0a      	ldr	r4, [pc, #40]	; (80049e4 <__libc_init_array+0x44>)
 80049ba:	1ba4      	subs	r4, r4, r6
 80049bc:	10a4      	asrs	r4, r4, #2
 80049be:	42a5      	cmp	r5, r4
 80049c0:	d105      	bne.n	80049ce <__libc_init_array+0x2e>
 80049c2:	bd70      	pop	{r4, r5, r6, pc}
 80049c4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80049c8:	4798      	blx	r3
 80049ca:	3501      	adds	r5, #1
 80049cc:	e7ee      	b.n	80049ac <__libc_init_array+0xc>
 80049ce:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80049d2:	4798      	blx	r3
 80049d4:	3501      	adds	r5, #1
 80049d6:	e7f2      	b.n	80049be <__libc_init_array+0x1e>
 80049d8:	08008808 	.word	0x08008808
 80049dc:	08008808 	.word	0x08008808
 80049e0:	08008808 	.word	0x08008808
 80049e4:	0800880c 	.word	0x0800880c

080049e8 <memset>:
 80049e8:	4603      	mov	r3, r0
 80049ea:	4402      	add	r2, r0
 80049ec:	4293      	cmp	r3, r2
 80049ee:	d100      	bne.n	80049f2 <memset+0xa>
 80049f0:	4770      	bx	lr
 80049f2:	f803 1b01 	strb.w	r1, [r3], #1
 80049f6:	e7f9      	b.n	80049ec <memset+0x4>

080049f8 <__cvt>:
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80049fe:	461e      	mov	r6, r3
 8004a00:	bfbb      	ittet	lt
 8004a02:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8004a06:	461e      	movlt	r6, r3
 8004a08:	2300      	movge	r3, #0
 8004a0a:	232d      	movlt	r3, #45	; 0x2d
 8004a0c:	b088      	sub	sp, #32
 8004a0e:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8004a10:	e9dd 1a12 	ldrd	r1, sl, [sp, #72]	; 0x48
 8004a14:	f027 0720 	bic.w	r7, r7, #32
 8004a18:	2f46      	cmp	r7, #70	; 0x46
 8004a1a:	4614      	mov	r4, r2
 8004a1c:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8004a1e:	700b      	strb	r3, [r1, #0]
 8004a20:	d004      	beq.n	8004a2c <__cvt+0x34>
 8004a22:	2f45      	cmp	r7, #69	; 0x45
 8004a24:	d100      	bne.n	8004a28 <__cvt+0x30>
 8004a26:	3501      	adds	r5, #1
 8004a28:	2302      	movs	r3, #2
 8004a2a:	e000      	b.n	8004a2e <__cvt+0x36>
 8004a2c:	2303      	movs	r3, #3
 8004a2e:	aa07      	add	r2, sp, #28
 8004a30:	9204      	str	r2, [sp, #16]
 8004a32:	aa06      	add	r2, sp, #24
 8004a34:	e9cd a202 	strd	sl, r2, [sp, #8]
 8004a38:	e9cd 3500 	strd	r3, r5, [sp]
 8004a3c:	4622      	mov	r2, r4
 8004a3e:	4633      	mov	r3, r6
 8004a40:	f000 fcea 	bl	8005418 <_dtoa_r>
 8004a44:	2f47      	cmp	r7, #71	; 0x47
 8004a46:	4680      	mov	r8, r0
 8004a48:	d102      	bne.n	8004a50 <__cvt+0x58>
 8004a4a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8004a4c:	07db      	lsls	r3, r3, #31
 8004a4e:	d526      	bpl.n	8004a9e <__cvt+0xa6>
 8004a50:	2f46      	cmp	r7, #70	; 0x46
 8004a52:	eb08 0905 	add.w	r9, r8, r5
 8004a56:	d111      	bne.n	8004a7c <__cvt+0x84>
 8004a58:	f898 3000 	ldrb.w	r3, [r8]
 8004a5c:	2b30      	cmp	r3, #48	; 0x30
 8004a5e:	d10a      	bne.n	8004a76 <__cvt+0x7e>
 8004a60:	2200      	movs	r2, #0
 8004a62:	2300      	movs	r3, #0
 8004a64:	4620      	mov	r0, r4
 8004a66:	4631      	mov	r1, r6
 8004a68:	f7fb ff9e 	bl	80009a8 <__aeabi_dcmpeq>
 8004a6c:	b918      	cbnz	r0, 8004a76 <__cvt+0x7e>
 8004a6e:	f1c5 0501 	rsb	r5, r5, #1
 8004a72:	f8ca 5000 	str.w	r5, [sl]
 8004a76:	f8da 3000 	ldr.w	r3, [sl]
 8004a7a:	4499      	add	r9, r3
 8004a7c:	2200      	movs	r2, #0
 8004a7e:	2300      	movs	r3, #0
 8004a80:	4620      	mov	r0, r4
 8004a82:	4631      	mov	r1, r6
 8004a84:	f7fb ff90 	bl	80009a8 <__aeabi_dcmpeq>
 8004a88:	b938      	cbnz	r0, 8004a9a <__cvt+0xa2>
 8004a8a:	2230      	movs	r2, #48	; 0x30
 8004a8c:	9b07      	ldr	r3, [sp, #28]
 8004a8e:	454b      	cmp	r3, r9
 8004a90:	d205      	bcs.n	8004a9e <__cvt+0xa6>
 8004a92:	1c59      	adds	r1, r3, #1
 8004a94:	9107      	str	r1, [sp, #28]
 8004a96:	701a      	strb	r2, [r3, #0]
 8004a98:	e7f8      	b.n	8004a8c <__cvt+0x94>
 8004a9a:	f8cd 901c 	str.w	r9, [sp, #28]
 8004a9e:	4640      	mov	r0, r8
 8004aa0:	9b07      	ldr	r3, [sp, #28]
 8004aa2:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8004aa4:	eba3 0308 	sub.w	r3, r3, r8
 8004aa8:	6013      	str	r3, [r2, #0]
 8004aaa:	b008      	add	sp, #32
 8004aac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08004ab0 <__exponent>:
 8004ab0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004ab2:	2900      	cmp	r1, #0
 8004ab4:	bfb4      	ite	lt
 8004ab6:	232d      	movlt	r3, #45	; 0x2d
 8004ab8:	232b      	movge	r3, #43	; 0x2b
 8004aba:	4604      	mov	r4, r0
 8004abc:	bfb8      	it	lt
 8004abe:	4249      	neglt	r1, r1
 8004ac0:	2909      	cmp	r1, #9
 8004ac2:	f804 2b02 	strb.w	r2, [r4], #2
 8004ac6:	7043      	strb	r3, [r0, #1]
 8004ac8:	dd21      	ble.n	8004b0e <__exponent+0x5e>
 8004aca:	f10d 0307 	add.w	r3, sp, #7
 8004ace:	461f      	mov	r7, r3
 8004ad0:	260a      	movs	r6, #10
 8004ad2:	fb91 f5f6 	sdiv	r5, r1, r6
 8004ad6:	fb06 1115 	mls	r1, r6, r5, r1
 8004ada:	2d09      	cmp	r5, #9
 8004adc:	f101 0130 	add.w	r1, r1, #48	; 0x30
 8004ae0:	f803 1c01 	strb.w	r1, [r3, #-1]
 8004ae4:	f103 32ff 	add.w	r2, r3, #4294967295
 8004ae8:	4629      	mov	r1, r5
 8004aea:	dc09      	bgt.n	8004b00 <__exponent+0x50>
 8004aec:	3130      	adds	r1, #48	; 0x30
 8004aee:	3b02      	subs	r3, #2
 8004af0:	f802 1c01 	strb.w	r1, [r2, #-1]
 8004af4:	42bb      	cmp	r3, r7
 8004af6:	4622      	mov	r2, r4
 8004af8:	d304      	bcc.n	8004b04 <__exponent+0x54>
 8004afa:	1a10      	subs	r0, r2, r0
 8004afc:	b003      	add	sp, #12
 8004afe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004b00:	4613      	mov	r3, r2
 8004b02:	e7e6      	b.n	8004ad2 <__exponent+0x22>
 8004b04:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004b08:	f804 2b01 	strb.w	r2, [r4], #1
 8004b0c:	e7f2      	b.n	8004af4 <__exponent+0x44>
 8004b0e:	2330      	movs	r3, #48	; 0x30
 8004b10:	4419      	add	r1, r3
 8004b12:	7083      	strb	r3, [r0, #2]
 8004b14:	1d02      	adds	r2, r0, #4
 8004b16:	70c1      	strb	r1, [r0, #3]
 8004b18:	e7ef      	b.n	8004afa <__exponent+0x4a>
	...

08004b1c <_printf_float>:
 8004b1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004b20:	b091      	sub	sp, #68	; 0x44
 8004b22:	460c      	mov	r4, r1
 8004b24:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 8004b26:	4693      	mov	fp, r2
 8004b28:	461e      	mov	r6, r3
 8004b2a:	4605      	mov	r5, r0
 8004b2c:	f001 fa28 	bl	8005f80 <_localeconv_r>
 8004b30:	6803      	ldr	r3, [r0, #0]
 8004b32:	4618      	mov	r0, r3
 8004b34:	9309      	str	r3, [sp, #36]	; 0x24
 8004b36:	f7fb fb0b 	bl	8000150 <strlen>
 8004b3a:	2300      	movs	r3, #0
 8004b3c:	930e      	str	r3, [sp, #56]	; 0x38
 8004b3e:	683b      	ldr	r3, [r7, #0]
 8004b40:	900a      	str	r0, [sp, #40]	; 0x28
 8004b42:	3307      	adds	r3, #7
 8004b44:	f023 0307 	bic.w	r3, r3, #7
 8004b48:	f103 0208 	add.w	r2, r3, #8
 8004b4c:	f894 8018 	ldrb.w	r8, [r4, #24]
 8004b50:	f8d4 a000 	ldr.w	sl, [r4]
 8004b54:	603a      	str	r2, [r7, #0]
 8004b56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b5a:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8004b5e:	e9d4 7912 	ldrd	r7, r9, [r4, #72]	; 0x48
 8004b62:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8004b66:	930b      	str	r3, [sp, #44]	; 0x2c
 8004b68:	f04f 32ff 	mov.w	r2, #4294967295
 8004b6c:	4ba6      	ldr	r3, [pc, #664]	; (8004e08 <_printf_float+0x2ec>)
 8004b6e:	4638      	mov	r0, r7
 8004b70:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004b72:	f7fb ff4b 	bl	8000a0c <__aeabi_dcmpun>
 8004b76:	bb68      	cbnz	r0, 8004bd4 <_printf_float+0xb8>
 8004b78:	f04f 32ff 	mov.w	r2, #4294967295
 8004b7c:	4ba2      	ldr	r3, [pc, #648]	; (8004e08 <_printf_float+0x2ec>)
 8004b7e:	4638      	mov	r0, r7
 8004b80:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004b82:	f7fb ff25 	bl	80009d0 <__aeabi_dcmple>
 8004b86:	bb28      	cbnz	r0, 8004bd4 <_printf_float+0xb8>
 8004b88:	2200      	movs	r2, #0
 8004b8a:	2300      	movs	r3, #0
 8004b8c:	4638      	mov	r0, r7
 8004b8e:	4649      	mov	r1, r9
 8004b90:	f7fb ff14 	bl	80009bc <__aeabi_dcmplt>
 8004b94:	b110      	cbz	r0, 8004b9c <_printf_float+0x80>
 8004b96:	232d      	movs	r3, #45	; 0x2d
 8004b98:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004b9c:	4f9b      	ldr	r7, [pc, #620]	; (8004e0c <_printf_float+0x2f0>)
 8004b9e:	4b9c      	ldr	r3, [pc, #624]	; (8004e10 <_printf_float+0x2f4>)
 8004ba0:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8004ba4:	bf98      	it	ls
 8004ba6:	461f      	movls	r7, r3
 8004ba8:	2303      	movs	r3, #3
 8004baa:	f04f 0900 	mov.w	r9, #0
 8004bae:	6123      	str	r3, [r4, #16]
 8004bb0:	f02a 0304 	bic.w	r3, sl, #4
 8004bb4:	6023      	str	r3, [r4, #0]
 8004bb6:	9600      	str	r6, [sp, #0]
 8004bb8:	465b      	mov	r3, fp
 8004bba:	aa0f      	add	r2, sp, #60	; 0x3c
 8004bbc:	4621      	mov	r1, r4
 8004bbe:	4628      	mov	r0, r5
 8004bc0:	f000 f9e2 	bl	8004f88 <_printf_common>
 8004bc4:	3001      	adds	r0, #1
 8004bc6:	f040 8090 	bne.w	8004cea <_printf_float+0x1ce>
 8004bca:	f04f 30ff 	mov.w	r0, #4294967295
 8004bce:	b011      	add	sp, #68	; 0x44
 8004bd0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004bd4:	463a      	mov	r2, r7
 8004bd6:	464b      	mov	r3, r9
 8004bd8:	4638      	mov	r0, r7
 8004bda:	4649      	mov	r1, r9
 8004bdc:	f7fb ff16 	bl	8000a0c <__aeabi_dcmpun>
 8004be0:	b110      	cbz	r0, 8004be8 <_printf_float+0xcc>
 8004be2:	4f8c      	ldr	r7, [pc, #560]	; (8004e14 <_printf_float+0x2f8>)
 8004be4:	4b8c      	ldr	r3, [pc, #560]	; (8004e18 <_printf_float+0x2fc>)
 8004be6:	e7db      	b.n	8004ba0 <_printf_float+0x84>
 8004be8:	6863      	ldr	r3, [r4, #4]
 8004bea:	f44a 6280 	orr.w	r2, sl, #1024	; 0x400
 8004bee:	1c59      	adds	r1, r3, #1
 8004bf0:	a80d      	add	r0, sp, #52	; 0x34
 8004bf2:	a90e      	add	r1, sp, #56	; 0x38
 8004bf4:	d140      	bne.n	8004c78 <_printf_float+0x15c>
 8004bf6:	2306      	movs	r3, #6
 8004bf8:	6063      	str	r3, [r4, #4]
 8004bfa:	f04f 0c00 	mov.w	ip, #0
 8004bfe:	f10d 0333 	add.w	r3, sp, #51	; 0x33
 8004c02:	e9cd 2301 	strd	r2, r3, [sp, #4]
 8004c06:	6863      	ldr	r3, [r4, #4]
 8004c08:	6022      	str	r2, [r4, #0]
 8004c0a:	e9cd 0803 	strd	r0, r8, [sp, #12]
 8004c0e:	9300      	str	r3, [sp, #0]
 8004c10:	463a      	mov	r2, r7
 8004c12:	464b      	mov	r3, r9
 8004c14:	e9cd 1c05 	strd	r1, ip, [sp, #20]
 8004c18:	4628      	mov	r0, r5
 8004c1a:	f7ff feed 	bl	80049f8 <__cvt>
 8004c1e:	f008 03df 	and.w	r3, r8, #223	; 0xdf
 8004c22:	2b47      	cmp	r3, #71	; 0x47
 8004c24:	4607      	mov	r7, r0
 8004c26:	d109      	bne.n	8004c3c <_printf_float+0x120>
 8004c28:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004c2a:	1cd8      	adds	r0, r3, #3
 8004c2c:	db02      	blt.n	8004c34 <_printf_float+0x118>
 8004c2e:	6862      	ldr	r2, [r4, #4]
 8004c30:	4293      	cmp	r3, r2
 8004c32:	dd47      	ble.n	8004cc4 <_printf_float+0x1a8>
 8004c34:	f1a8 0802 	sub.w	r8, r8, #2
 8004c38:	fa5f f888 	uxtb.w	r8, r8
 8004c3c:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
 8004c40:	990d      	ldr	r1, [sp, #52]	; 0x34
 8004c42:	d824      	bhi.n	8004c8e <_printf_float+0x172>
 8004c44:	3901      	subs	r1, #1
 8004c46:	4642      	mov	r2, r8
 8004c48:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8004c4c:	910d      	str	r1, [sp, #52]	; 0x34
 8004c4e:	f7ff ff2f 	bl	8004ab0 <__exponent>
 8004c52:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004c54:	4681      	mov	r9, r0
 8004c56:	1813      	adds	r3, r2, r0
 8004c58:	2a01      	cmp	r2, #1
 8004c5a:	6123      	str	r3, [r4, #16]
 8004c5c:	dc02      	bgt.n	8004c64 <_printf_float+0x148>
 8004c5e:	6822      	ldr	r2, [r4, #0]
 8004c60:	07d1      	lsls	r1, r2, #31
 8004c62:	d501      	bpl.n	8004c68 <_printf_float+0x14c>
 8004c64:	3301      	adds	r3, #1
 8004c66:	6123      	str	r3, [r4, #16]
 8004c68:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d0a2      	beq.n	8004bb6 <_printf_float+0x9a>
 8004c70:	232d      	movs	r3, #45	; 0x2d
 8004c72:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004c76:	e79e      	b.n	8004bb6 <_printf_float+0x9a>
 8004c78:	f1b8 0f67 	cmp.w	r8, #103	; 0x67
 8004c7c:	f000 816e 	beq.w	8004f5c <_printf_float+0x440>
 8004c80:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8004c84:	d1b9      	bne.n	8004bfa <_printf_float+0xde>
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d1b7      	bne.n	8004bfa <_printf_float+0xde>
 8004c8a:	2301      	movs	r3, #1
 8004c8c:	e7b4      	b.n	8004bf8 <_printf_float+0xdc>
 8004c8e:	f1b8 0f66 	cmp.w	r8, #102	; 0x66
 8004c92:	d119      	bne.n	8004cc8 <_printf_float+0x1ac>
 8004c94:	2900      	cmp	r1, #0
 8004c96:	6863      	ldr	r3, [r4, #4]
 8004c98:	dd0c      	ble.n	8004cb4 <_printf_float+0x198>
 8004c9a:	6121      	str	r1, [r4, #16]
 8004c9c:	b913      	cbnz	r3, 8004ca4 <_printf_float+0x188>
 8004c9e:	6822      	ldr	r2, [r4, #0]
 8004ca0:	07d2      	lsls	r2, r2, #31
 8004ca2:	d502      	bpl.n	8004caa <_printf_float+0x18e>
 8004ca4:	3301      	adds	r3, #1
 8004ca6:	440b      	add	r3, r1
 8004ca8:	6123      	str	r3, [r4, #16]
 8004caa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004cac:	f04f 0900 	mov.w	r9, #0
 8004cb0:	65a3      	str	r3, [r4, #88]	; 0x58
 8004cb2:	e7d9      	b.n	8004c68 <_printf_float+0x14c>
 8004cb4:	b913      	cbnz	r3, 8004cbc <_printf_float+0x1a0>
 8004cb6:	6822      	ldr	r2, [r4, #0]
 8004cb8:	07d0      	lsls	r0, r2, #31
 8004cba:	d501      	bpl.n	8004cc0 <_printf_float+0x1a4>
 8004cbc:	3302      	adds	r3, #2
 8004cbe:	e7f3      	b.n	8004ca8 <_printf_float+0x18c>
 8004cc0:	2301      	movs	r3, #1
 8004cc2:	e7f1      	b.n	8004ca8 <_printf_float+0x18c>
 8004cc4:	f04f 0867 	mov.w	r8, #103	; 0x67
 8004cc8:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 8004ccc:	4293      	cmp	r3, r2
 8004cce:	db05      	blt.n	8004cdc <_printf_float+0x1c0>
 8004cd0:	6822      	ldr	r2, [r4, #0]
 8004cd2:	6123      	str	r3, [r4, #16]
 8004cd4:	07d1      	lsls	r1, r2, #31
 8004cd6:	d5e8      	bpl.n	8004caa <_printf_float+0x18e>
 8004cd8:	3301      	adds	r3, #1
 8004cda:	e7e5      	b.n	8004ca8 <_printf_float+0x18c>
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	bfcc      	ite	gt
 8004ce0:	2301      	movgt	r3, #1
 8004ce2:	f1c3 0302 	rsble	r3, r3, #2
 8004ce6:	4413      	add	r3, r2
 8004ce8:	e7de      	b.n	8004ca8 <_printf_float+0x18c>
 8004cea:	6823      	ldr	r3, [r4, #0]
 8004cec:	055a      	lsls	r2, r3, #21
 8004cee:	d407      	bmi.n	8004d00 <_printf_float+0x1e4>
 8004cf0:	6923      	ldr	r3, [r4, #16]
 8004cf2:	463a      	mov	r2, r7
 8004cf4:	4659      	mov	r1, fp
 8004cf6:	4628      	mov	r0, r5
 8004cf8:	47b0      	blx	r6
 8004cfa:	3001      	adds	r0, #1
 8004cfc:	d129      	bne.n	8004d52 <_printf_float+0x236>
 8004cfe:	e764      	b.n	8004bca <_printf_float+0xae>
 8004d00:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
 8004d04:	f240 80d7 	bls.w	8004eb6 <_printf_float+0x39a>
 8004d08:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004d0c:	2200      	movs	r2, #0
 8004d0e:	2300      	movs	r3, #0
 8004d10:	f7fb fe4a 	bl	80009a8 <__aeabi_dcmpeq>
 8004d14:	b388      	cbz	r0, 8004d7a <_printf_float+0x25e>
 8004d16:	2301      	movs	r3, #1
 8004d18:	4a40      	ldr	r2, [pc, #256]	; (8004e1c <_printf_float+0x300>)
 8004d1a:	4659      	mov	r1, fp
 8004d1c:	4628      	mov	r0, r5
 8004d1e:	47b0      	blx	r6
 8004d20:	3001      	adds	r0, #1
 8004d22:	f43f af52 	beq.w	8004bca <_printf_float+0xae>
 8004d26:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8004d2a:	429a      	cmp	r2, r3
 8004d2c:	db02      	blt.n	8004d34 <_printf_float+0x218>
 8004d2e:	6823      	ldr	r3, [r4, #0]
 8004d30:	07d8      	lsls	r0, r3, #31
 8004d32:	d50e      	bpl.n	8004d52 <_printf_float+0x236>
 8004d34:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004d38:	4659      	mov	r1, fp
 8004d3a:	4628      	mov	r0, r5
 8004d3c:	47b0      	blx	r6
 8004d3e:	3001      	adds	r0, #1
 8004d40:	f43f af43 	beq.w	8004bca <_printf_float+0xae>
 8004d44:	2700      	movs	r7, #0
 8004d46:	f104 081a 	add.w	r8, r4, #26
 8004d4a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004d4c:	3b01      	subs	r3, #1
 8004d4e:	42bb      	cmp	r3, r7
 8004d50:	dc09      	bgt.n	8004d66 <_printf_float+0x24a>
 8004d52:	6823      	ldr	r3, [r4, #0]
 8004d54:	079f      	lsls	r7, r3, #30
 8004d56:	f100 80fd 	bmi.w	8004f54 <_printf_float+0x438>
 8004d5a:	68e0      	ldr	r0, [r4, #12]
 8004d5c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8004d5e:	4298      	cmp	r0, r3
 8004d60:	bfb8      	it	lt
 8004d62:	4618      	movlt	r0, r3
 8004d64:	e733      	b.n	8004bce <_printf_float+0xb2>
 8004d66:	2301      	movs	r3, #1
 8004d68:	4642      	mov	r2, r8
 8004d6a:	4659      	mov	r1, fp
 8004d6c:	4628      	mov	r0, r5
 8004d6e:	47b0      	blx	r6
 8004d70:	3001      	adds	r0, #1
 8004d72:	f43f af2a 	beq.w	8004bca <_printf_float+0xae>
 8004d76:	3701      	adds	r7, #1
 8004d78:	e7e7      	b.n	8004d4a <_printf_float+0x22e>
 8004d7a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	dc2b      	bgt.n	8004dd8 <_printf_float+0x2bc>
 8004d80:	2301      	movs	r3, #1
 8004d82:	4a26      	ldr	r2, [pc, #152]	; (8004e1c <_printf_float+0x300>)
 8004d84:	4659      	mov	r1, fp
 8004d86:	4628      	mov	r0, r5
 8004d88:	47b0      	blx	r6
 8004d8a:	3001      	adds	r0, #1
 8004d8c:	f43f af1d 	beq.w	8004bca <_printf_float+0xae>
 8004d90:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004d92:	b923      	cbnz	r3, 8004d9e <_printf_float+0x282>
 8004d94:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004d96:	b913      	cbnz	r3, 8004d9e <_printf_float+0x282>
 8004d98:	6823      	ldr	r3, [r4, #0]
 8004d9a:	07d9      	lsls	r1, r3, #31
 8004d9c:	d5d9      	bpl.n	8004d52 <_printf_float+0x236>
 8004d9e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004da2:	4659      	mov	r1, fp
 8004da4:	4628      	mov	r0, r5
 8004da6:	47b0      	blx	r6
 8004da8:	3001      	adds	r0, #1
 8004daa:	f43f af0e 	beq.w	8004bca <_printf_float+0xae>
 8004dae:	f04f 0800 	mov.w	r8, #0
 8004db2:	f104 091a 	add.w	r9, r4, #26
 8004db6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004db8:	425b      	negs	r3, r3
 8004dba:	4543      	cmp	r3, r8
 8004dbc:	dc01      	bgt.n	8004dc2 <_printf_float+0x2a6>
 8004dbe:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004dc0:	e797      	b.n	8004cf2 <_printf_float+0x1d6>
 8004dc2:	2301      	movs	r3, #1
 8004dc4:	464a      	mov	r2, r9
 8004dc6:	4659      	mov	r1, fp
 8004dc8:	4628      	mov	r0, r5
 8004dca:	47b0      	blx	r6
 8004dcc:	3001      	adds	r0, #1
 8004dce:	f43f aefc 	beq.w	8004bca <_printf_float+0xae>
 8004dd2:	f108 0801 	add.w	r8, r8, #1
 8004dd6:	e7ee      	b.n	8004db6 <_printf_float+0x29a>
 8004dd8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004dda:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004ddc:	429a      	cmp	r2, r3
 8004dde:	bfa8      	it	ge
 8004de0:	461a      	movge	r2, r3
 8004de2:	2a00      	cmp	r2, #0
 8004de4:	4690      	mov	r8, r2
 8004de6:	dd07      	ble.n	8004df8 <_printf_float+0x2dc>
 8004de8:	4613      	mov	r3, r2
 8004dea:	4659      	mov	r1, fp
 8004dec:	463a      	mov	r2, r7
 8004dee:	4628      	mov	r0, r5
 8004df0:	47b0      	blx	r6
 8004df2:	3001      	adds	r0, #1
 8004df4:	f43f aee9 	beq.w	8004bca <_printf_float+0xae>
 8004df8:	f104 031a 	add.w	r3, r4, #26
 8004dfc:	f04f 0a00 	mov.w	sl, #0
 8004e00:	ea28 78e8 	bic.w	r8, r8, r8, asr #31
 8004e04:	930b      	str	r3, [sp, #44]	; 0x2c
 8004e06:	e015      	b.n	8004e34 <_printf_float+0x318>
 8004e08:	7fefffff 	.word	0x7fefffff
 8004e0c:	08008564 	.word	0x08008564
 8004e10:	08008560 	.word	0x08008560
 8004e14:	0800856c 	.word	0x0800856c
 8004e18:	08008568 	.word	0x08008568
 8004e1c:	08008570 	.word	0x08008570
 8004e20:	2301      	movs	r3, #1
 8004e22:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8004e24:	4659      	mov	r1, fp
 8004e26:	4628      	mov	r0, r5
 8004e28:	47b0      	blx	r6
 8004e2a:	3001      	adds	r0, #1
 8004e2c:	f43f aecd 	beq.w	8004bca <_printf_float+0xae>
 8004e30:	f10a 0a01 	add.w	sl, sl, #1
 8004e34:	f8d4 9058 	ldr.w	r9, [r4, #88]	; 0x58
 8004e38:	eba9 0308 	sub.w	r3, r9, r8
 8004e3c:	4553      	cmp	r3, sl
 8004e3e:	dcef      	bgt.n	8004e20 <_printf_float+0x304>
 8004e40:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8004e44:	429a      	cmp	r2, r3
 8004e46:	444f      	add	r7, r9
 8004e48:	db14      	blt.n	8004e74 <_printf_float+0x358>
 8004e4a:	6823      	ldr	r3, [r4, #0]
 8004e4c:	07da      	lsls	r2, r3, #31
 8004e4e:	d411      	bmi.n	8004e74 <_printf_float+0x358>
 8004e50:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004e52:	990d      	ldr	r1, [sp, #52]	; 0x34
 8004e54:	eba3 0209 	sub.w	r2, r3, r9
 8004e58:	eba3 0901 	sub.w	r9, r3, r1
 8004e5c:	4591      	cmp	r9, r2
 8004e5e:	bfa8      	it	ge
 8004e60:	4691      	movge	r9, r2
 8004e62:	f1b9 0f00 	cmp.w	r9, #0
 8004e66:	dc0d      	bgt.n	8004e84 <_printf_float+0x368>
 8004e68:	2700      	movs	r7, #0
 8004e6a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004e6e:	f104 081a 	add.w	r8, r4, #26
 8004e72:	e018      	b.n	8004ea6 <_printf_float+0x38a>
 8004e74:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004e78:	4659      	mov	r1, fp
 8004e7a:	4628      	mov	r0, r5
 8004e7c:	47b0      	blx	r6
 8004e7e:	3001      	adds	r0, #1
 8004e80:	d1e6      	bne.n	8004e50 <_printf_float+0x334>
 8004e82:	e6a2      	b.n	8004bca <_printf_float+0xae>
 8004e84:	464b      	mov	r3, r9
 8004e86:	463a      	mov	r2, r7
 8004e88:	4659      	mov	r1, fp
 8004e8a:	4628      	mov	r0, r5
 8004e8c:	47b0      	blx	r6
 8004e8e:	3001      	adds	r0, #1
 8004e90:	d1ea      	bne.n	8004e68 <_printf_float+0x34c>
 8004e92:	e69a      	b.n	8004bca <_printf_float+0xae>
 8004e94:	2301      	movs	r3, #1
 8004e96:	4642      	mov	r2, r8
 8004e98:	4659      	mov	r1, fp
 8004e9a:	4628      	mov	r0, r5
 8004e9c:	47b0      	blx	r6
 8004e9e:	3001      	adds	r0, #1
 8004ea0:	f43f ae93 	beq.w	8004bca <_printf_float+0xae>
 8004ea4:	3701      	adds	r7, #1
 8004ea6:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8004eaa:	1a9b      	subs	r3, r3, r2
 8004eac:	eba3 0309 	sub.w	r3, r3, r9
 8004eb0:	42bb      	cmp	r3, r7
 8004eb2:	dcef      	bgt.n	8004e94 <_printf_float+0x378>
 8004eb4:	e74d      	b.n	8004d52 <_printf_float+0x236>
 8004eb6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004eb8:	2a01      	cmp	r2, #1
 8004eba:	dc01      	bgt.n	8004ec0 <_printf_float+0x3a4>
 8004ebc:	07db      	lsls	r3, r3, #31
 8004ebe:	d538      	bpl.n	8004f32 <_printf_float+0x416>
 8004ec0:	2301      	movs	r3, #1
 8004ec2:	463a      	mov	r2, r7
 8004ec4:	4659      	mov	r1, fp
 8004ec6:	4628      	mov	r0, r5
 8004ec8:	47b0      	blx	r6
 8004eca:	3001      	adds	r0, #1
 8004ecc:	f43f ae7d 	beq.w	8004bca <_printf_float+0xae>
 8004ed0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004ed4:	4659      	mov	r1, fp
 8004ed6:	4628      	mov	r0, r5
 8004ed8:	47b0      	blx	r6
 8004eda:	3001      	adds	r0, #1
 8004edc:	f107 0701 	add.w	r7, r7, #1
 8004ee0:	f43f ae73 	beq.w	8004bca <_printf_float+0xae>
 8004ee4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004ee8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004eea:	2200      	movs	r2, #0
 8004eec:	f103 38ff 	add.w	r8, r3, #4294967295
 8004ef0:	2300      	movs	r3, #0
 8004ef2:	f7fb fd59 	bl	80009a8 <__aeabi_dcmpeq>
 8004ef6:	b9c0      	cbnz	r0, 8004f2a <_printf_float+0x40e>
 8004ef8:	4643      	mov	r3, r8
 8004efa:	463a      	mov	r2, r7
 8004efc:	4659      	mov	r1, fp
 8004efe:	4628      	mov	r0, r5
 8004f00:	47b0      	blx	r6
 8004f02:	3001      	adds	r0, #1
 8004f04:	d10d      	bne.n	8004f22 <_printf_float+0x406>
 8004f06:	e660      	b.n	8004bca <_printf_float+0xae>
 8004f08:	2301      	movs	r3, #1
 8004f0a:	4642      	mov	r2, r8
 8004f0c:	4659      	mov	r1, fp
 8004f0e:	4628      	mov	r0, r5
 8004f10:	47b0      	blx	r6
 8004f12:	3001      	adds	r0, #1
 8004f14:	f43f ae59 	beq.w	8004bca <_printf_float+0xae>
 8004f18:	3701      	adds	r7, #1
 8004f1a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004f1c:	3b01      	subs	r3, #1
 8004f1e:	42bb      	cmp	r3, r7
 8004f20:	dcf2      	bgt.n	8004f08 <_printf_float+0x3ec>
 8004f22:	464b      	mov	r3, r9
 8004f24:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8004f28:	e6e4      	b.n	8004cf4 <_printf_float+0x1d8>
 8004f2a:	2700      	movs	r7, #0
 8004f2c:	f104 081a 	add.w	r8, r4, #26
 8004f30:	e7f3      	b.n	8004f1a <_printf_float+0x3fe>
 8004f32:	2301      	movs	r3, #1
 8004f34:	e7e1      	b.n	8004efa <_printf_float+0x3de>
 8004f36:	2301      	movs	r3, #1
 8004f38:	4642      	mov	r2, r8
 8004f3a:	4659      	mov	r1, fp
 8004f3c:	4628      	mov	r0, r5
 8004f3e:	47b0      	blx	r6
 8004f40:	3001      	adds	r0, #1
 8004f42:	f43f ae42 	beq.w	8004bca <_printf_float+0xae>
 8004f46:	3701      	adds	r7, #1
 8004f48:	68e3      	ldr	r3, [r4, #12]
 8004f4a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8004f4c:	1a9b      	subs	r3, r3, r2
 8004f4e:	42bb      	cmp	r3, r7
 8004f50:	dcf1      	bgt.n	8004f36 <_printf_float+0x41a>
 8004f52:	e702      	b.n	8004d5a <_printf_float+0x23e>
 8004f54:	2700      	movs	r7, #0
 8004f56:	f104 0819 	add.w	r8, r4, #25
 8004f5a:	e7f5      	b.n	8004f48 <_printf_float+0x42c>
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	f43f ae94 	beq.w	8004c8a <_printf_float+0x16e>
 8004f62:	f04f 0c00 	mov.w	ip, #0
 8004f66:	e9cd 1c05 	strd	r1, ip, [sp, #20]
 8004f6a:	f10d 0133 	add.w	r1, sp, #51	; 0x33
 8004f6e:	6022      	str	r2, [r4, #0]
 8004f70:	e9cd 0803 	strd	r0, r8, [sp, #12]
 8004f74:	e9cd 2101 	strd	r2, r1, [sp, #4]
 8004f78:	9300      	str	r3, [sp, #0]
 8004f7a:	463a      	mov	r2, r7
 8004f7c:	464b      	mov	r3, r9
 8004f7e:	4628      	mov	r0, r5
 8004f80:	f7ff fd3a 	bl	80049f8 <__cvt>
 8004f84:	4607      	mov	r7, r0
 8004f86:	e64f      	b.n	8004c28 <_printf_float+0x10c>

08004f88 <_printf_common>:
 8004f88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004f8c:	4691      	mov	r9, r2
 8004f8e:	461f      	mov	r7, r3
 8004f90:	688a      	ldr	r2, [r1, #8]
 8004f92:	690b      	ldr	r3, [r1, #16]
 8004f94:	4606      	mov	r6, r0
 8004f96:	4293      	cmp	r3, r2
 8004f98:	bfb8      	it	lt
 8004f9a:	4613      	movlt	r3, r2
 8004f9c:	f8c9 3000 	str.w	r3, [r9]
 8004fa0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004fa4:	460c      	mov	r4, r1
 8004fa6:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004faa:	b112      	cbz	r2, 8004fb2 <_printf_common+0x2a>
 8004fac:	3301      	adds	r3, #1
 8004fae:	f8c9 3000 	str.w	r3, [r9]
 8004fb2:	6823      	ldr	r3, [r4, #0]
 8004fb4:	0699      	lsls	r1, r3, #26
 8004fb6:	bf42      	ittt	mi
 8004fb8:	f8d9 3000 	ldrmi.w	r3, [r9]
 8004fbc:	3302      	addmi	r3, #2
 8004fbe:	f8c9 3000 	strmi.w	r3, [r9]
 8004fc2:	6825      	ldr	r5, [r4, #0]
 8004fc4:	f015 0506 	ands.w	r5, r5, #6
 8004fc8:	d107      	bne.n	8004fda <_printf_common+0x52>
 8004fca:	f104 0a19 	add.w	sl, r4, #25
 8004fce:	68e3      	ldr	r3, [r4, #12]
 8004fd0:	f8d9 2000 	ldr.w	r2, [r9]
 8004fd4:	1a9b      	subs	r3, r3, r2
 8004fd6:	42ab      	cmp	r3, r5
 8004fd8:	dc29      	bgt.n	800502e <_printf_common+0xa6>
 8004fda:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8004fde:	6822      	ldr	r2, [r4, #0]
 8004fe0:	3300      	adds	r3, #0
 8004fe2:	bf18      	it	ne
 8004fe4:	2301      	movne	r3, #1
 8004fe6:	0692      	lsls	r2, r2, #26
 8004fe8:	d42e      	bmi.n	8005048 <_printf_common+0xc0>
 8004fea:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004fee:	4639      	mov	r1, r7
 8004ff0:	4630      	mov	r0, r6
 8004ff2:	47c0      	blx	r8
 8004ff4:	3001      	adds	r0, #1
 8004ff6:	d021      	beq.n	800503c <_printf_common+0xb4>
 8004ff8:	6823      	ldr	r3, [r4, #0]
 8004ffa:	68e5      	ldr	r5, [r4, #12]
 8004ffc:	f003 0306 	and.w	r3, r3, #6
 8005000:	2b04      	cmp	r3, #4
 8005002:	bf18      	it	ne
 8005004:	2500      	movne	r5, #0
 8005006:	f8d9 2000 	ldr.w	r2, [r9]
 800500a:	f04f 0900 	mov.w	r9, #0
 800500e:	bf08      	it	eq
 8005010:	1aad      	subeq	r5, r5, r2
 8005012:	68a3      	ldr	r3, [r4, #8]
 8005014:	6922      	ldr	r2, [r4, #16]
 8005016:	bf08      	it	eq
 8005018:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800501c:	4293      	cmp	r3, r2
 800501e:	bfc4      	itt	gt
 8005020:	1a9b      	subgt	r3, r3, r2
 8005022:	18ed      	addgt	r5, r5, r3
 8005024:	341a      	adds	r4, #26
 8005026:	454d      	cmp	r5, r9
 8005028:	d11a      	bne.n	8005060 <_printf_common+0xd8>
 800502a:	2000      	movs	r0, #0
 800502c:	e008      	b.n	8005040 <_printf_common+0xb8>
 800502e:	2301      	movs	r3, #1
 8005030:	4652      	mov	r2, sl
 8005032:	4639      	mov	r1, r7
 8005034:	4630      	mov	r0, r6
 8005036:	47c0      	blx	r8
 8005038:	3001      	adds	r0, #1
 800503a:	d103      	bne.n	8005044 <_printf_common+0xbc>
 800503c:	f04f 30ff 	mov.w	r0, #4294967295
 8005040:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005044:	3501      	adds	r5, #1
 8005046:	e7c2      	b.n	8004fce <_printf_common+0x46>
 8005048:	2030      	movs	r0, #48	; 0x30
 800504a:	18e1      	adds	r1, r4, r3
 800504c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005050:	1c5a      	adds	r2, r3, #1
 8005052:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005056:	4422      	add	r2, r4
 8005058:	3302      	adds	r3, #2
 800505a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800505e:	e7c4      	b.n	8004fea <_printf_common+0x62>
 8005060:	2301      	movs	r3, #1
 8005062:	4622      	mov	r2, r4
 8005064:	4639      	mov	r1, r7
 8005066:	4630      	mov	r0, r6
 8005068:	47c0      	blx	r8
 800506a:	3001      	adds	r0, #1
 800506c:	d0e6      	beq.n	800503c <_printf_common+0xb4>
 800506e:	f109 0901 	add.w	r9, r9, #1
 8005072:	e7d8      	b.n	8005026 <_printf_common+0x9e>

08005074 <_printf_i>:
 8005074:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005078:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800507c:	460c      	mov	r4, r1
 800507e:	7e09      	ldrb	r1, [r1, #24]
 8005080:	b085      	sub	sp, #20
 8005082:	296e      	cmp	r1, #110	; 0x6e
 8005084:	4617      	mov	r7, r2
 8005086:	4606      	mov	r6, r0
 8005088:	4698      	mov	r8, r3
 800508a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800508c:	f000 80b3 	beq.w	80051f6 <_printf_i+0x182>
 8005090:	d822      	bhi.n	80050d8 <_printf_i+0x64>
 8005092:	2963      	cmp	r1, #99	; 0x63
 8005094:	d036      	beq.n	8005104 <_printf_i+0x90>
 8005096:	d80a      	bhi.n	80050ae <_printf_i+0x3a>
 8005098:	2900      	cmp	r1, #0
 800509a:	f000 80b9 	beq.w	8005210 <_printf_i+0x19c>
 800509e:	2958      	cmp	r1, #88	; 0x58
 80050a0:	f000 8083 	beq.w	80051aa <_printf_i+0x136>
 80050a4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80050a8:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 80050ac:	e032      	b.n	8005114 <_printf_i+0xa0>
 80050ae:	2964      	cmp	r1, #100	; 0x64
 80050b0:	d001      	beq.n	80050b6 <_printf_i+0x42>
 80050b2:	2969      	cmp	r1, #105	; 0x69
 80050b4:	d1f6      	bne.n	80050a4 <_printf_i+0x30>
 80050b6:	6820      	ldr	r0, [r4, #0]
 80050b8:	6813      	ldr	r3, [r2, #0]
 80050ba:	0605      	lsls	r5, r0, #24
 80050bc:	f103 0104 	add.w	r1, r3, #4
 80050c0:	d52a      	bpl.n	8005118 <_printf_i+0xa4>
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	6011      	str	r1, [r2, #0]
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	da03      	bge.n	80050d2 <_printf_i+0x5e>
 80050ca:	222d      	movs	r2, #45	; 0x2d
 80050cc:	425b      	negs	r3, r3
 80050ce:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80050d2:	486f      	ldr	r0, [pc, #444]	; (8005290 <_printf_i+0x21c>)
 80050d4:	220a      	movs	r2, #10
 80050d6:	e039      	b.n	800514c <_printf_i+0xd8>
 80050d8:	2973      	cmp	r1, #115	; 0x73
 80050da:	f000 809d 	beq.w	8005218 <_printf_i+0x1a4>
 80050de:	d808      	bhi.n	80050f2 <_printf_i+0x7e>
 80050e0:	296f      	cmp	r1, #111	; 0x6f
 80050e2:	d020      	beq.n	8005126 <_printf_i+0xb2>
 80050e4:	2970      	cmp	r1, #112	; 0x70
 80050e6:	d1dd      	bne.n	80050a4 <_printf_i+0x30>
 80050e8:	6823      	ldr	r3, [r4, #0]
 80050ea:	f043 0320 	orr.w	r3, r3, #32
 80050ee:	6023      	str	r3, [r4, #0]
 80050f0:	e003      	b.n	80050fa <_printf_i+0x86>
 80050f2:	2975      	cmp	r1, #117	; 0x75
 80050f4:	d017      	beq.n	8005126 <_printf_i+0xb2>
 80050f6:	2978      	cmp	r1, #120	; 0x78
 80050f8:	d1d4      	bne.n	80050a4 <_printf_i+0x30>
 80050fa:	2378      	movs	r3, #120	; 0x78
 80050fc:	4865      	ldr	r0, [pc, #404]	; (8005294 <_printf_i+0x220>)
 80050fe:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005102:	e055      	b.n	80051b0 <_printf_i+0x13c>
 8005104:	6813      	ldr	r3, [r2, #0]
 8005106:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800510a:	1d19      	adds	r1, r3, #4
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	6011      	str	r1, [r2, #0]
 8005110:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005114:	2301      	movs	r3, #1
 8005116:	e08c      	b.n	8005232 <_printf_i+0x1be>
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	f010 0f40 	tst.w	r0, #64	; 0x40
 800511e:	6011      	str	r1, [r2, #0]
 8005120:	bf18      	it	ne
 8005122:	b21b      	sxthne	r3, r3
 8005124:	e7cf      	b.n	80050c6 <_printf_i+0x52>
 8005126:	6813      	ldr	r3, [r2, #0]
 8005128:	6825      	ldr	r5, [r4, #0]
 800512a:	1d18      	adds	r0, r3, #4
 800512c:	6010      	str	r0, [r2, #0]
 800512e:	0628      	lsls	r0, r5, #24
 8005130:	d501      	bpl.n	8005136 <_printf_i+0xc2>
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	e002      	b.n	800513c <_printf_i+0xc8>
 8005136:	0668      	lsls	r0, r5, #25
 8005138:	d5fb      	bpl.n	8005132 <_printf_i+0xbe>
 800513a:	881b      	ldrh	r3, [r3, #0]
 800513c:	296f      	cmp	r1, #111	; 0x6f
 800513e:	bf14      	ite	ne
 8005140:	220a      	movne	r2, #10
 8005142:	2208      	moveq	r2, #8
 8005144:	4852      	ldr	r0, [pc, #328]	; (8005290 <_printf_i+0x21c>)
 8005146:	2100      	movs	r1, #0
 8005148:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800514c:	6865      	ldr	r5, [r4, #4]
 800514e:	2d00      	cmp	r5, #0
 8005150:	60a5      	str	r5, [r4, #8]
 8005152:	f2c0 8095 	blt.w	8005280 <_printf_i+0x20c>
 8005156:	6821      	ldr	r1, [r4, #0]
 8005158:	f021 0104 	bic.w	r1, r1, #4
 800515c:	6021      	str	r1, [r4, #0]
 800515e:	2b00      	cmp	r3, #0
 8005160:	d13d      	bne.n	80051de <_printf_i+0x16a>
 8005162:	2d00      	cmp	r5, #0
 8005164:	f040 808e 	bne.w	8005284 <_printf_i+0x210>
 8005168:	4665      	mov	r5, ip
 800516a:	2a08      	cmp	r2, #8
 800516c:	d10b      	bne.n	8005186 <_printf_i+0x112>
 800516e:	6823      	ldr	r3, [r4, #0]
 8005170:	07db      	lsls	r3, r3, #31
 8005172:	d508      	bpl.n	8005186 <_printf_i+0x112>
 8005174:	6923      	ldr	r3, [r4, #16]
 8005176:	6862      	ldr	r2, [r4, #4]
 8005178:	429a      	cmp	r2, r3
 800517a:	bfde      	ittt	le
 800517c:	2330      	movle	r3, #48	; 0x30
 800517e:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005182:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005186:	ebac 0305 	sub.w	r3, ip, r5
 800518a:	6123      	str	r3, [r4, #16]
 800518c:	f8cd 8000 	str.w	r8, [sp]
 8005190:	463b      	mov	r3, r7
 8005192:	aa03      	add	r2, sp, #12
 8005194:	4621      	mov	r1, r4
 8005196:	4630      	mov	r0, r6
 8005198:	f7ff fef6 	bl	8004f88 <_printf_common>
 800519c:	3001      	adds	r0, #1
 800519e:	d14d      	bne.n	800523c <_printf_i+0x1c8>
 80051a0:	f04f 30ff 	mov.w	r0, #4294967295
 80051a4:	b005      	add	sp, #20
 80051a6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80051aa:	4839      	ldr	r0, [pc, #228]	; (8005290 <_printf_i+0x21c>)
 80051ac:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 80051b0:	6813      	ldr	r3, [r2, #0]
 80051b2:	6821      	ldr	r1, [r4, #0]
 80051b4:	1d1d      	adds	r5, r3, #4
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	6015      	str	r5, [r2, #0]
 80051ba:	060a      	lsls	r2, r1, #24
 80051bc:	d50b      	bpl.n	80051d6 <_printf_i+0x162>
 80051be:	07ca      	lsls	r2, r1, #31
 80051c0:	bf44      	itt	mi
 80051c2:	f041 0120 	orrmi.w	r1, r1, #32
 80051c6:	6021      	strmi	r1, [r4, #0]
 80051c8:	b91b      	cbnz	r3, 80051d2 <_printf_i+0x15e>
 80051ca:	6822      	ldr	r2, [r4, #0]
 80051cc:	f022 0220 	bic.w	r2, r2, #32
 80051d0:	6022      	str	r2, [r4, #0]
 80051d2:	2210      	movs	r2, #16
 80051d4:	e7b7      	b.n	8005146 <_printf_i+0xd2>
 80051d6:	064d      	lsls	r5, r1, #25
 80051d8:	bf48      	it	mi
 80051da:	b29b      	uxthmi	r3, r3
 80051dc:	e7ef      	b.n	80051be <_printf_i+0x14a>
 80051de:	4665      	mov	r5, ip
 80051e0:	fbb3 f1f2 	udiv	r1, r3, r2
 80051e4:	fb02 3311 	mls	r3, r2, r1, r3
 80051e8:	5cc3      	ldrb	r3, [r0, r3]
 80051ea:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80051ee:	460b      	mov	r3, r1
 80051f0:	2900      	cmp	r1, #0
 80051f2:	d1f5      	bne.n	80051e0 <_printf_i+0x16c>
 80051f4:	e7b9      	b.n	800516a <_printf_i+0xf6>
 80051f6:	6813      	ldr	r3, [r2, #0]
 80051f8:	6825      	ldr	r5, [r4, #0]
 80051fa:	1d18      	adds	r0, r3, #4
 80051fc:	6961      	ldr	r1, [r4, #20]
 80051fe:	6010      	str	r0, [r2, #0]
 8005200:	0628      	lsls	r0, r5, #24
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	d501      	bpl.n	800520a <_printf_i+0x196>
 8005206:	6019      	str	r1, [r3, #0]
 8005208:	e002      	b.n	8005210 <_printf_i+0x19c>
 800520a:	066a      	lsls	r2, r5, #25
 800520c:	d5fb      	bpl.n	8005206 <_printf_i+0x192>
 800520e:	8019      	strh	r1, [r3, #0]
 8005210:	2300      	movs	r3, #0
 8005212:	4665      	mov	r5, ip
 8005214:	6123      	str	r3, [r4, #16]
 8005216:	e7b9      	b.n	800518c <_printf_i+0x118>
 8005218:	6813      	ldr	r3, [r2, #0]
 800521a:	1d19      	adds	r1, r3, #4
 800521c:	6011      	str	r1, [r2, #0]
 800521e:	681d      	ldr	r5, [r3, #0]
 8005220:	6862      	ldr	r2, [r4, #4]
 8005222:	2100      	movs	r1, #0
 8005224:	4628      	mov	r0, r5
 8005226:	f000 fec1 	bl	8005fac <memchr>
 800522a:	b108      	cbz	r0, 8005230 <_printf_i+0x1bc>
 800522c:	1b40      	subs	r0, r0, r5
 800522e:	6060      	str	r0, [r4, #4]
 8005230:	6863      	ldr	r3, [r4, #4]
 8005232:	6123      	str	r3, [r4, #16]
 8005234:	2300      	movs	r3, #0
 8005236:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800523a:	e7a7      	b.n	800518c <_printf_i+0x118>
 800523c:	6923      	ldr	r3, [r4, #16]
 800523e:	462a      	mov	r2, r5
 8005240:	4639      	mov	r1, r7
 8005242:	4630      	mov	r0, r6
 8005244:	47c0      	blx	r8
 8005246:	3001      	adds	r0, #1
 8005248:	d0aa      	beq.n	80051a0 <_printf_i+0x12c>
 800524a:	6823      	ldr	r3, [r4, #0]
 800524c:	079b      	lsls	r3, r3, #30
 800524e:	d413      	bmi.n	8005278 <_printf_i+0x204>
 8005250:	68e0      	ldr	r0, [r4, #12]
 8005252:	9b03      	ldr	r3, [sp, #12]
 8005254:	4298      	cmp	r0, r3
 8005256:	bfb8      	it	lt
 8005258:	4618      	movlt	r0, r3
 800525a:	e7a3      	b.n	80051a4 <_printf_i+0x130>
 800525c:	2301      	movs	r3, #1
 800525e:	464a      	mov	r2, r9
 8005260:	4639      	mov	r1, r7
 8005262:	4630      	mov	r0, r6
 8005264:	47c0      	blx	r8
 8005266:	3001      	adds	r0, #1
 8005268:	d09a      	beq.n	80051a0 <_printf_i+0x12c>
 800526a:	3501      	adds	r5, #1
 800526c:	68e3      	ldr	r3, [r4, #12]
 800526e:	9a03      	ldr	r2, [sp, #12]
 8005270:	1a9b      	subs	r3, r3, r2
 8005272:	42ab      	cmp	r3, r5
 8005274:	dcf2      	bgt.n	800525c <_printf_i+0x1e8>
 8005276:	e7eb      	b.n	8005250 <_printf_i+0x1dc>
 8005278:	2500      	movs	r5, #0
 800527a:	f104 0919 	add.w	r9, r4, #25
 800527e:	e7f5      	b.n	800526c <_printf_i+0x1f8>
 8005280:	2b00      	cmp	r3, #0
 8005282:	d1ac      	bne.n	80051de <_printf_i+0x16a>
 8005284:	7803      	ldrb	r3, [r0, #0]
 8005286:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800528a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800528e:	e76c      	b.n	800516a <_printf_i+0xf6>
 8005290:	08008572 	.word	0x08008572
 8005294:	08008583 	.word	0x08008583

08005298 <siprintf>:
 8005298:	b40e      	push	{r1, r2, r3}
 800529a:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800529e:	b500      	push	{lr}
 80052a0:	b09c      	sub	sp, #112	; 0x70
 80052a2:	ab1d      	add	r3, sp, #116	; 0x74
 80052a4:	9002      	str	r0, [sp, #8]
 80052a6:	9006      	str	r0, [sp, #24]
 80052a8:	9107      	str	r1, [sp, #28]
 80052aa:	9104      	str	r1, [sp, #16]
 80052ac:	4808      	ldr	r0, [pc, #32]	; (80052d0 <siprintf+0x38>)
 80052ae:	4909      	ldr	r1, [pc, #36]	; (80052d4 <siprintf+0x3c>)
 80052b0:	f853 2b04 	ldr.w	r2, [r3], #4
 80052b4:	9105      	str	r1, [sp, #20]
 80052b6:	6800      	ldr	r0, [r0, #0]
 80052b8:	a902      	add	r1, sp, #8
 80052ba:	9301      	str	r3, [sp, #4]
 80052bc:	f001 fa7a 	bl	80067b4 <_svfiprintf_r>
 80052c0:	2200      	movs	r2, #0
 80052c2:	9b02      	ldr	r3, [sp, #8]
 80052c4:	701a      	strb	r2, [r3, #0]
 80052c6:	b01c      	add	sp, #112	; 0x70
 80052c8:	f85d eb04 	ldr.w	lr, [sp], #4
 80052cc:	b003      	add	sp, #12
 80052ce:	4770      	bx	lr
 80052d0:	200000a4 	.word	0x200000a4
 80052d4:	ffff0208 	.word	0xffff0208

080052d8 <strcat>:
 80052d8:	4603      	mov	r3, r0
 80052da:	b510      	push	{r4, lr}
 80052dc:	781a      	ldrb	r2, [r3, #0]
 80052de:	1c5c      	adds	r4, r3, #1
 80052e0:	b93a      	cbnz	r2, 80052f2 <strcat+0x1a>
 80052e2:	3b01      	subs	r3, #1
 80052e4:	f811 2b01 	ldrb.w	r2, [r1], #1
 80052e8:	f803 2f01 	strb.w	r2, [r3, #1]!
 80052ec:	2a00      	cmp	r2, #0
 80052ee:	d1f9      	bne.n	80052e4 <strcat+0xc>
 80052f0:	bd10      	pop	{r4, pc}
 80052f2:	4623      	mov	r3, r4
 80052f4:	e7f2      	b.n	80052dc <strcat+0x4>

080052f6 <quorem>:
 80052f6:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80052fa:	6903      	ldr	r3, [r0, #16]
 80052fc:	690c      	ldr	r4, [r1, #16]
 80052fe:	4680      	mov	r8, r0
 8005300:	42a3      	cmp	r3, r4
 8005302:	f2c0 8084 	blt.w	800540e <quorem+0x118>
 8005306:	3c01      	subs	r4, #1
 8005308:	f101 0714 	add.w	r7, r1, #20
 800530c:	f100 0614 	add.w	r6, r0, #20
 8005310:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 8005314:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8005318:	3501      	adds	r5, #1
 800531a:	fbb0 f5f5 	udiv	r5, r0, r5
 800531e:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8005322:	eb06 030c 	add.w	r3, r6, ip
 8005326:	eb07 090c 	add.w	r9, r7, ip
 800532a:	9301      	str	r3, [sp, #4]
 800532c:	b39d      	cbz	r5, 8005396 <quorem+0xa0>
 800532e:	f04f 0a00 	mov.w	sl, #0
 8005332:	4638      	mov	r0, r7
 8005334:	46b6      	mov	lr, r6
 8005336:	46d3      	mov	fp, sl
 8005338:	f850 2b04 	ldr.w	r2, [r0], #4
 800533c:	b293      	uxth	r3, r2
 800533e:	fb05 a303 	mla	r3, r5, r3, sl
 8005342:	0c12      	lsrs	r2, r2, #16
 8005344:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8005348:	fb05 a202 	mla	r2, r5, r2, sl
 800534c:	b29b      	uxth	r3, r3
 800534e:	ebab 0303 	sub.w	r3, fp, r3
 8005352:	f8de b000 	ldr.w	fp, [lr]
 8005356:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 800535a:	fa1f fb8b 	uxth.w	fp, fp
 800535e:	445b      	add	r3, fp
 8005360:	fa1f fb82 	uxth.w	fp, r2
 8005364:	f8de 2000 	ldr.w	r2, [lr]
 8005368:	4581      	cmp	r9, r0
 800536a:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 800536e:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005372:	b29b      	uxth	r3, r3
 8005374:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005378:	ea4f 4b22 	mov.w	fp, r2, asr #16
 800537c:	f84e 3b04 	str.w	r3, [lr], #4
 8005380:	d2da      	bcs.n	8005338 <quorem+0x42>
 8005382:	f856 300c 	ldr.w	r3, [r6, ip]
 8005386:	b933      	cbnz	r3, 8005396 <quorem+0xa0>
 8005388:	9b01      	ldr	r3, [sp, #4]
 800538a:	3b04      	subs	r3, #4
 800538c:	429e      	cmp	r6, r3
 800538e:	461a      	mov	r2, r3
 8005390:	d331      	bcc.n	80053f6 <quorem+0x100>
 8005392:	f8c8 4010 	str.w	r4, [r8, #16]
 8005396:	4640      	mov	r0, r8
 8005398:	f001 f836 	bl	8006408 <__mcmp>
 800539c:	2800      	cmp	r0, #0
 800539e:	db26      	blt.n	80053ee <quorem+0xf8>
 80053a0:	4630      	mov	r0, r6
 80053a2:	f04f 0c00 	mov.w	ip, #0
 80053a6:	3501      	adds	r5, #1
 80053a8:	f857 1b04 	ldr.w	r1, [r7], #4
 80053ac:	f8d0 e000 	ldr.w	lr, [r0]
 80053b0:	b28b      	uxth	r3, r1
 80053b2:	ebac 0303 	sub.w	r3, ip, r3
 80053b6:	fa1f f28e 	uxth.w	r2, lr
 80053ba:	4413      	add	r3, r2
 80053bc:	0c0a      	lsrs	r2, r1, #16
 80053be:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80053c2:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80053c6:	b29b      	uxth	r3, r3
 80053c8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80053cc:	45b9      	cmp	r9, r7
 80053ce:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80053d2:	f840 3b04 	str.w	r3, [r0], #4
 80053d6:	d2e7      	bcs.n	80053a8 <quorem+0xb2>
 80053d8:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 80053dc:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 80053e0:	b92a      	cbnz	r2, 80053ee <quorem+0xf8>
 80053e2:	3b04      	subs	r3, #4
 80053e4:	429e      	cmp	r6, r3
 80053e6:	461a      	mov	r2, r3
 80053e8:	d30b      	bcc.n	8005402 <quorem+0x10c>
 80053ea:	f8c8 4010 	str.w	r4, [r8, #16]
 80053ee:	4628      	mov	r0, r5
 80053f0:	b003      	add	sp, #12
 80053f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80053f6:	6812      	ldr	r2, [r2, #0]
 80053f8:	3b04      	subs	r3, #4
 80053fa:	2a00      	cmp	r2, #0
 80053fc:	d1c9      	bne.n	8005392 <quorem+0x9c>
 80053fe:	3c01      	subs	r4, #1
 8005400:	e7c4      	b.n	800538c <quorem+0x96>
 8005402:	6812      	ldr	r2, [r2, #0]
 8005404:	3b04      	subs	r3, #4
 8005406:	2a00      	cmp	r2, #0
 8005408:	d1ef      	bne.n	80053ea <quorem+0xf4>
 800540a:	3c01      	subs	r4, #1
 800540c:	e7ea      	b.n	80053e4 <quorem+0xee>
 800540e:	2000      	movs	r0, #0
 8005410:	e7ee      	b.n	80053f0 <quorem+0xfa>
 8005412:	0000      	movs	r0, r0
 8005414:	0000      	movs	r0, r0
	...

08005418 <_dtoa_r>:
 8005418:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800541c:	4616      	mov	r6, r2
 800541e:	461f      	mov	r7, r3
 8005420:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8005422:	b095      	sub	sp, #84	; 0x54
 8005424:	4604      	mov	r4, r0
 8005426:	f8dd 8084 	ldr.w	r8, [sp, #132]	; 0x84
 800542a:	e9cd 6702 	strd	r6, r7, [sp, #8]
 800542e:	b93d      	cbnz	r5, 8005440 <_dtoa_r+0x28>
 8005430:	2010      	movs	r0, #16
 8005432:	f000 fdb3 	bl	8005f9c <malloc>
 8005436:	6260      	str	r0, [r4, #36]	; 0x24
 8005438:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800543c:	6005      	str	r5, [r0, #0]
 800543e:	60c5      	str	r5, [r0, #12]
 8005440:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005442:	6819      	ldr	r1, [r3, #0]
 8005444:	b151      	cbz	r1, 800545c <_dtoa_r+0x44>
 8005446:	685a      	ldr	r2, [r3, #4]
 8005448:	2301      	movs	r3, #1
 800544a:	4093      	lsls	r3, r2
 800544c:	604a      	str	r2, [r1, #4]
 800544e:	608b      	str	r3, [r1, #8]
 8005450:	4620      	mov	r0, r4
 8005452:	f000 fdf8 	bl	8006046 <_Bfree>
 8005456:	2200      	movs	r2, #0
 8005458:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800545a:	601a      	str	r2, [r3, #0]
 800545c:	1e3b      	subs	r3, r7, #0
 800545e:	bfaf      	iteee	ge
 8005460:	2300      	movge	r3, #0
 8005462:	2201      	movlt	r2, #1
 8005464:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8005468:	9303      	strlt	r3, [sp, #12]
 800546a:	bfac      	ite	ge
 800546c:	f8c8 3000 	strge.w	r3, [r8]
 8005470:	f8c8 2000 	strlt.w	r2, [r8]
 8005474:	4bae      	ldr	r3, [pc, #696]	; (8005730 <_dtoa_r+0x318>)
 8005476:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800547a:	ea33 0308 	bics.w	r3, r3, r8
 800547e:	d11b      	bne.n	80054b8 <_dtoa_r+0xa0>
 8005480:	f242 730f 	movw	r3, #9999	; 0x270f
 8005484:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8005486:	6013      	str	r3, [r2, #0]
 8005488:	9b02      	ldr	r3, [sp, #8]
 800548a:	b923      	cbnz	r3, 8005496 <_dtoa_r+0x7e>
 800548c:	f3c8 0013 	ubfx	r0, r8, #0, #20
 8005490:	2800      	cmp	r0, #0
 8005492:	f000 8545 	beq.w	8005f20 <_dtoa_r+0xb08>
 8005496:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005498:	b953      	cbnz	r3, 80054b0 <_dtoa_r+0x98>
 800549a:	4ba6      	ldr	r3, [pc, #664]	; (8005734 <_dtoa_r+0x31c>)
 800549c:	e021      	b.n	80054e2 <_dtoa_r+0xca>
 800549e:	4ba6      	ldr	r3, [pc, #664]	; (8005738 <_dtoa_r+0x320>)
 80054a0:	9306      	str	r3, [sp, #24]
 80054a2:	3308      	adds	r3, #8
 80054a4:	9a22      	ldr	r2, [sp, #136]	; 0x88
 80054a6:	6013      	str	r3, [r2, #0]
 80054a8:	9806      	ldr	r0, [sp, #24]
 80054aa:	b015      	add	sp, #84	; 0x54
 80054ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80054b0:	4ba0      	ldr	r3, [pc, #640]	; (8005734 <_dtoa_r+0x31c>)
 80054b2:	9306      	str	r3, [sp, #24]
 80054b4:	3303      	adds	r3, #3
 80054b6:	e7f5      	b.n	80054a4 <_dtoa_r+0x8c>
 80054b8:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80054bc:	2200      	movs	r2, #0
 80054be:	2300      	movs	r3, #0
 80054c0:	4630      	mov	r0, r6
 80054c2:	4639      	mov	r1, r7
 80054c4:	f7fb fa70 	bl	80009a8 <__aeabi_dcmpeq>
 80054c8:	4682      	mov	sl, r0
 80054ca:	b160      	cbz	r0, 80054e6 <_dtoa_r+0xce>
 80054cc:	2301      	movs	r3, #1
 80054ce:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80054d0:	6013      	str	r3, [r2, #0]
 80054d2:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	f000 8520 	beq.w	8005f1a <_dtoa_r+0xb02>
 80054da:	4b98      	ldr	r3, [pc, #608]	; (800573c <_dtoa_r+0x324>)
 80054dc:	9a22      	ldr	r2, [sp, #136]	; 0x88
 80054de:	6013      	str	r3, [r2, #0]
 80054e0:	3b01      	subs	r3, #1
 80054e2:	9306      	str	r3, [sp, #24]
 80054e4:	e7e0      	b.n	80054a8 <_dtoa_r+0x90>
 80054e6:	ab12      	add	r3, sp, #72	; 0x48
 80054e8:	9301      	str	r3, [sp, #4]
 80054ea:	ab13      	add	r3, sp, #76	; 0x4c
 80054ec:	9300      	str	r3, [sp, #0]
 80054ee:	4632      	mov	r2, r6
 80054f0:	463b      	mov	r3, r7
 80054f2:	4620      	mov	r0, r4
 80054f4:	f001 f800 	bl	80064f8 <__d2b>
 80054f8:	f3c8 550a 	ubfx	r5, r8, #20, #11
 80054fc:	4683      	mov	fp, r0
 80054fe:	2d00      	cmp	r5, #0
 8005500:	d07d      	beq.n	80055fe <_dtoa_r+0x1e6>
 8005502:	46b0      	mov	r8, r6
 8005504:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8005508:	f043 597f 	orr.w	r9, r3, #1069547520	; 0x3fc00000
 800550c:	f449 1940 	orr.w	r9, r9, #3145728	; 0x300000
 8005510:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8005514:	f8cd a040 	str.w	sl, [sp, #64]	; 0x40
 8005518:	2200      	movs	r2, #0
 800551a:	4b89      	ldr	r3, [pc, #548]	; (8005740 <_dtoa_r+0x328>)
 800551c:	4640      	mov	r0, r8
 800551e:	4649      	mov	r1, r9
 8005520:	f7fa fe22 	bl	8000168 <__aeabi_dsub>
 8005524:	a37c      	add	r3, pc, #496	; (adr r3, 8005718 <_dtoa_r+0x300>)
 8005526:	e9d3 2300 	ldrd	r2, r3, [r3]
 800552a:	f7fa ffd5 	bl	80004d8 <__aeabi_dmul>
 800552e:	a37c      	add	r3, pc, #496	; (adr r3, 8005720 <_dtoa_r+0x308>)
 8005530:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005534:	f7fa fe1a 	bl	800016c <__adddf3>
 8005538:	4606      	mov	r6, r0
 800553a:	4628      	mov	r0, r5
 800553c:	460f      	mov	r7, r1
 800553e:	f7fa ff61 	bl	8000404 <__aeabi_i2d>
 8005542:	a379      	add	r3, pc, #484	; (adr r3, 8005728 <_dtoa_r+0x310>)
 8005544:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005548:	f7fa ffc6 	bl	80004d8 <__aeabi_dmul>
 800554c:	4602      	mov	r2, r0
 800554e:	460b      	mov	r3, r1
 8005550:	4630      	mov	r0, r6
 8005552:	4639      	mov	r1, r7
 8005554:	f7fa fe0a 	bl	800016c <__adddf3>
 8005558:	4606      	mov	r6, r0
 800555a:	460f      	mov	r7, r1
 800555c:	f7fb fa6c 	bl	8000a38 <__aeabi_d2iz>
 8005560:	2200      	movs	r2, #0
 8005562:	4682      	mov	sl, r0
 8005564:	2300      	movs	r3, #0
 8005566:	4630      	mov	r0, r6
 8005568:	4639      	mov	r1, r7
 800556a:	f7fb fa27 	bl	80009bc <__aeabi_dcmplt>
 800556e:	b148      	cbz	r0, 8005584 <_dtoa_r+0x16c>
 8005570:	4650      	mov	r0, sl
 8005572:	f7fa ff47 	bl	8000404 <__aeabi_i2d>
 8005576:	4632      	mov	r2, r6
 8005578:	463b      	mov	r3, r7
 800557a:	f7fb fa15 	bl	80009a8 <__aeabi_dcmpeq>
 800557e:	b908      	cbnz	r0, 8005584 <_dtoa_r+0x16c>
 8005580:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005584:	f1ba 0f16 	cmp.w	sl, #22
 8005588:	d85a      	bhi.n	8005640 <_dtoa_r+0x228>
 800558a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800558e:	496d      	ldr	r1, [pc, #436]	; (8005744 <_dtoa_r+0x32c>)
 8005590:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8005594:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005598:	f7fb fa2e 	bl	80009f8 <__aeabi_dcmpgt>
 800559c:	2800      	cmp	r0, #0
 800559e:	d051      	beq.n	8005644 <_dtoa_r+0x22c>
 80055a0:	2300      	movs	r3, #0
 80055a2:	f10a 3aff 	add.w	sl, sl, #4294967295
 80055a6:	930d      	str	r3, [sp, #52]	; 0x34
 80055a8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80055aa:	1b5d      	subs	r5, r3, r5
 80055ac:	1e6b      	subs	r3, r5, #1
 80055ae:	9307      	str	r3, [sp, #28]
 80055b0:	bf43      	ittte	mi
 80055b2:	2300      	movmi	r3, #0
 80055b4:	f1c5 0901 	rsbmi	r9, r5, #1
 80055b8:	9307      	strmi	r3, [sp, #28]
 80055ba:	f04f 0900 	movpl.w	r9, #0
 80055be:	f1ba 0f00 	cmp.w	sl, #0
 80055c2:	db41      	blt.n	8005648 <_dtoa_r+0x230>
 80055c4:	9b07      	ldr	r3, [sp, #28]
 80055c6:	f8cd a030 	str.w	sl, [sp, #48]	; 0x30
 80055ca:	4453      	add	r3, sl
 80055cc:	9307      	str	r3, [sp, #28]
 80055ce:	2300      	movs	r3, #0
 80055d0:	9308      	str	r3, [sp, #32]
 80055d2:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80055d4:	2b09      	cmp	r3, #9
 80055d6:	f200 808f 	bhi.w	80056f8 <_dtoa_r+0x2e0>
 80055da:	2b05      	cmp	r3, #5
 80055dc:	bfc4      	itt	gt
 80055de:	3b04      	subgt	r3, #4
 80055e0:	931e      	strgt	r3, [sp, #120]	; 0x78
 80055e2:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80055e4:	bfc8      	it	gt
 80055e6:	2500      	movgt	r5, #0
 80055e8:	f1a3 0302 	sub.w	r3, r3, #2
 80055ec:	bfd8      	it	le
 80055ee:	2501      	movle	r5, #1
 80055f0:	2b03      	cmp	r3, #3
 80055f2:	f200 808d 	bhi.w	8005710 <_dtoa_r+0x2f8>
 80055f6:	e8df f003 	tbb	[pc, r3]
 80055fa:	7d7b      	.short	0x7d7b
 80055fc:	6f2f      	.short	0x6f2f
 80055fe:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 8005602:	441d      	add	r5, r3
 8005604:	f205 4032 	addw	r0, r5, #1074	; 0x432
 8005608:	2820      	cmp	r0, #32
 800560a:	dd13      	ble.n	8005634 <_dtoa_r+0x21c>
 800560c:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 8005610:	9b02      	ldr	r3, [sp, #8]
 8005612:	fa08 f800 	lsl.w	r8, r8, r0
 8005616:	f205 4012 	addw	r0, r5, #1042	; 0x412
 800561a:	fa23 f000 	lsr.w	r0, r3, r0
 800561e:	ea48 0000 	orr.w	r0, r8, r0
 8005622:	f7fa fedf 	bl	80003e4 <__aeabi_ui2d>
 8005626:	2301      	movs	r3, #1
 8005628:	4680      	mov	r8, r0
 800562a:	f1a1 79f8 	sub.w	r9, r1, #32505856	; 0x1f00000
 800562e:	3d01      	subs	r5, #1
 8005630:	9310      	str	r3, [sp, #64]	; 0x40
 8005632:	e771      	b.n	8005518 <_dtoa_r+0x100>
 8005634:	9b02      	ldr	r3, [sp, #8]
 8005636:	f1c0 0020 	rsb	r0, r0, #32
 800563a:	fa03 f000 	lsl.w	r0, r3, r0
 800563e:	e7f0      	b.n	8005622 <_dtoa_r+0x20a>
 8005640:	2301      	movs	r3, #1
 8005642:	e7b0      	b.n	80055a6 <_dtoa_r+0x18e>
 8005644:	900d      	str	r0, [sp, #52]	; 0x34
 8005646:	e7af      	b.n	80055a8 <_dtoa_r+0x190>
 8005648:	f1ca 0300 	rsb	r3, sl, #0
 800564c:	9308      	str	r3, [sp, #32]
 800564e:	2300      	movs	r3, #0
 8005650:	eba9 090a 	sub.w	r9, r9, sl
 8005654:	930c      	str	r3, [sp, #48]	; 0x30
 8005656:	e7bc      	b.n	80055d2 <_dtoa_r+0x1ba>
 8005658:	2301      	movs	r3, #1
 800565a:	9309      	str	r3, [sp, #36]	; 0x24
 800565c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800565e:	2b00      	cmp	r3, #0
 8005660:	dd74      	ble.n	800574c <_dtoa_r+0x334>
 8005662:	4698      	mov	r8, r3
 8005664:	9304      	str	r3, [sp, #16]
 8005666:	2200      	movs	r2, #0
 8005668:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800566a:	6072      	str	r2, [r6, #4]
 800566c:	2204      	movs	r2, #4
 800566e:	f102 0014 	add.w	r0, r2, #20
 8005672:	4298      	cmp	r0, r3
 8005674:	6871      	ldr	r1, [r6, #4]
 8005676:	d96e      	bls.n	8005756 <_dtoa_r+0x33e>
 8005678:	4620      	mov	r0, r4
 800567a:	f000 fcb0 	bl	8005fde <_Balloc>
 800567e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005680:	6030      	str	r0, [r6, #0]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	f1b8 0f0e 	cmp.w	r8, #14
 8005688:	9306      	str	r3, [sp, #24]
 800568a:	f200 80ed 	bhi.w	8005868 <_dtoa_r+0x450>
 800568e:	2d00      	cmp	r5, #0
 8005690:	f000 80ea 	beq.w	8005868 <_dtoa_r+0x450>
 8005694:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005698:	f1ba 0f00 	cmp.w	sl, #0
 800569c:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 80056a0:	dd77      	ble.n	8005792 <_dtoa_r+0x37a>
 80056a2:	4a28      	ldr	r2, [pc, #160]	; (8005744 <_dtoa_r+0x32c>)
 80056a4:	f00a 030f 	and.w	r3, sl, #15
 80056a8:	ea4f 162a 	mov.w	r6, sl, asr #4
 80056ac:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80056b0:	06f0      	lsls	r0, r6, #27
 80056b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056b6:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 80056ba:	d568      	bpl.n	800578e <_dtoa_r+0x376>
 80056bc:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 80056c0:	4b21      	ldr	r3, [pc, #132]	; (8005748 <_dtoa_r+0x330>)
 80056c2:	2503      	movs	r5, #3
 80056c4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80056c8:	f7fb f830 	bl	800072c <__aeabi_ddiv>
 80056cc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80056d0:	f006 060f 	and.w	r6, r6, #15
 80056d4:	4f1c      	ldr	r7, [pc, #112]	; (8005748 <_dtoa_r+0x330>)
 80056d6:	e04f      	b.n	8005778 <_dtoa_r+0x360>
 80056d8:	2301      	movs	r3, #1
 80056da:	9309      	str	r3, [sp, #36]	; 0x24
 80056dc:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80056de:	4453      	add	r3, sl
 80056e0:	f103 0801 	add.w	r8, r3, #1
 80056e4:	9304      	str	r3, [sp, #16]
 80056e6:	4643      	mov	r3, r8
 80056e8:	2b01      	cmp	r3, #1
 80056ea:	bfb8      	it	lt
 80056ec:	2301      	movlt	r3, #1
 80056ee:	e7ba      	b.n	8005666 <_dtoa_r+0x24e>
 80056f0:	2300      	movs	r3, #0
 80056f2:	e7b2      	b.n	800565a <_dtoa_r+0x242>
 80056f4:	2300      	movs	r3, #0
 80056f6:	e7f0      	b.n	80056da <_dtoa_r+0x2c2>
 80056f8:	2501      	movs	r5, #1
 80056fa:	2300      	movs	r3, #0
 80056fc:	9509      	str	r5, [sp, #36]	; 0x24
 80056fe:	931e      	str	r3, [sp, #120]	; 0x78
 8005700:	f04f 33ff 	mov.w	r3, #4294967295
 8005704:	2200      	movs	r2, #0
 8005706:	9304      	str	r3, [sp, #16]
 8005708:	4698      	mov	r8, r3
 800570a:	2312      	movs	r3, #18
 800570c:	921f      	str	r2, [sp, #124]	; 0x7c
 800570e:	e7aa      	b.n	8005666 <_dtoa_r+0x24e>
 8005710:	2301      	movs	r3, #1
 8005712:	9309      	str	r3, [sp, #36]	; 0x24
 8005714:	e7f4      	b.n	8005700 <_dtoa_r+0x2e8>
 8005716:	bf00      	nop
 8005718:	636f4361 	.word	0x636f4361
 800571c:	3fd287a7 	.word	0x3fd287a7
 8005720:	8b60c8b3 	.word	0x8b60c8b3
 8005724:	3fc68a28 	.word	0x3fc68a28
 8005728:	509f79fb 	.word	0x509f79fb
 800572c:	3fd34413 	.word	0x3fd34413
 8005730:	7ff00000 	.word	0x7ff00000
 8005734:	0800859d 	.word	0x0800859d
 8005738:	08008594 	.word	0x08008594
 800573c:	08008571 	.word	0x08008571
 8005740:	3ff80000 	.word	0x3ff80000
 8005744:	080085d0 	.word	0x080085d0
 8005748:	080085a8 	.word	0x080085a8
 800574c:	2301      	movs	r3, #1
 800574e:	9304      	str	r3, [sp, #16]
 8005750:	4698      	mov	r8, r3
 8005752:	461a      	mov	r2, r3
 8005754:	e7da      	b.n	800570c <_dtoa_r+0x2f4>
 8005756:	3101      	adds	r1, #1
 8005758:	6071      	str	r1, [r6, #4]
 800575a:	0052      	lsls	r2, r2, #1
 800575c:	e787      	b.n	800566e <_dtoa_r+0x256>
 800575e:	07f1      	lsls	r1, r6, #31
 8005760:	d508      	bpl.n	8005774 <_dtoa_r+0x35c>
 8005762:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8005766:	e9d7 2300 	ldrd	r2, r3, [r7]
 800576a:	f7fa feb5 	bl	80004d8 <__aeabi_dmul>
 800576e:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8005772:	3501      	adds	r5, #1
 8005774:	1076      	asrs	r6, r6, #1
 8005776:	3708      	adds	r7, #8
 8005778:	2e00      	cmp	r6, #0
 800577a:	d1f0      	bne.n	800575e <_dtoa_r+0x346>
 800577c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8005780:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005784:	f7fa ffd2 	bl	800072c <__aeabi_ddiv>
 8005788:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800578c:	e01b      	b.n	80057c6 <_dtoa_r+0x3ae>
 800578e:	2502      	movs	r5, #2
 8005790:	e7a0      	b.n	80056d4 <_dtoa_r+0x2bc>
 8005792:	f000 80a4 	beq.w	80058de <_dtoa_r+0x4c6>
 8005796:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800579a:	f1ca 0600 	rsb	r6, sl, #0
 800579e:	4ba0      	ldr	r3, [pc, #640]	; (8005a20 <_dtoa_r+0x608>)
 80057a0:	f006 020f 	and.w	r2, r6, #15
 80057a4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80057a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057ac:	f7fa fe94 	bl	80004d8 <__aeabi_dmul>
 80057b0:	2502      	movs	r5, #2
 80057b2:	2300      	movs	r3, #0
 80057b4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80057b8:	4f9a      	ldr	r7, [pc, #616]	; (8005a24 <_dtoa_r+0x60c>)
 80057ba:	1136      	asrs	r6, r6, #4
 80057bc:	2e00      	cmp	r6, #0
 80057be:	f040 8083 	bne.w	80058c8 <_dtoa_r+0x4b0>
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	d1e0      	bne.n	8005788 <_dtoa_r+0x370>
 80057c6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	f000 808a 	beq.w	80058e2 <_dtoa_r+0x4ca>
 80057ce:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80057d2:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 80057d6:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80057da:	2200      	movs	r2, #0
 80057dc:	4b92      	ldr	r3, [pc, #584]	; (8005a28 <_dtoa_r+0x610>)
 80057de:	f7fb f8ed 	bl	80009bc <__aeabi_dcmplt>
 80057e2:	2800      	cmp	r0, #0
 80057e4:	d07d      	beq.n	80058e2 <_dtoa_r+0x4ca>
 80057e6:	f1b8 0f00 	cmp.w	r8, #0
 80057ea:	d07a      	beq.n	80058e2 <_dtoa_r+0x4ca>
 80057ec:	9b04      	ldr	r3, [sp, #16]
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	dd36      	ble.n	8005860 <_dtoa_r+0x448>
 80057f2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80057f6:	2200      	movs	r2, #0
 80057f8:	4b8c      	ldr	r3, [pc, #560]	; (8005a2c <_dtoa_r+0x614>)
 80057fa:	f7fa fe6d 	bl	80004d8 <__aeabi_dmul>
 80057fe:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005802:	9e04      	ldr	r6, [sp, #16]
 8005804:	f10a 37ff 	add.w	r7, sl, #4294967295
 8005808:	3501      	adds	r5, #1
 800580a:	4628      	mov	r0, r5
 800580c:	f7fa fdfa 	bl	8000404 <__aeabi_i2d>
 8005810:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005814:	f7fa fe60 	bl	80004d8 <__aeabi_dmul>
 8005818:	2200      	movs	r2, #0
 800581a:	4b85      	ldr	r3, [pc, #532]	; (8005a30 <_dtoa_r+0x618>)
 800581c:	f7fa fca6 	bl	800016c <__adddf3>
 8005820:	f1a1 7550 	sub.w	r5, r1, #54525952	; 0x3400000
 8005824:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8005828:	950b      	str	r5, [sp, #44]	; 0x2c
 800582a:	2e00      	cmp	r6, #0
 800582c:	d15c      	bne.n	80058e8 <_dtoa_r+0x4d0>
 800582e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005832:	2200      	movs	r2, #0
 8005834:	4b7f      	ldr	r3, [pc, #508]	; (8005a34 <_dtoa_r+0x61c>)
 8005836:	f7fa fc97 	bl	8000168 <__aeabi_dsub>
 800583a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800583c:	462b      	mov	r3, r5
 800583e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005842:	f7fb f8d9 	bl	80009f8 <__aeabi_dcmpgt>
 8005846:	2800      	cmp	r0, #0
 8005848:	f040 8281 	bne.w	8005d4e <_dtoa_r+0x936>
 800584c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005850:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005852:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 8005856:	f7fb f8b1 	bl	80009bc <__aeabi_dcmplt>
 800585a:	2800      	cmp	r0, #0
 800585c:	f040 8275 	bne.w	8005d4a <_dtoa_r+0x932>
 8005860:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8005864:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8005868:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800586a:	2b00      	cmp	r3, #0
 800586c:	f2c0 814b 	blt.w	8005b06 <_dtoa_r+0x6ee>
 8005870:	f1ba 0f0e 	cmp.w	sl, #14
 8005874:	f300 8147 	bgt.w	8005b06 <_dtoa_r+0x6ee>
 8005878:	4b69      	ldr	r3, [pc, #420]	; (8005a20 <_dtoa_r+0x608>)
 800587a:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800587e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005882:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8005886:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8005888:	2b00      	cmp	r3, #0
 800588a:	f280 80d7 	bge.w	8005a3c <_dtoa_r+0x624>
 800588e:	f1b8 0f00 	cmp.w	r8, #0
 8005892:	f300 80d3 	bgt.w	8005a3c <_dtoa_r+0x624>
 8005896:	f040 8257 	bne.w	8005d48 <_dtoa_r+0x930>
 800589a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800589e:	2200      	movs	r2, #0
 80058a0:	4b64      	ldr	r3, [pc, #400]	; (8005a34 <_dtoa_r+0x61c>)
 80058a2:	f7fa fe19 	bl	80004d8 <__aeabi_dmul>
 80058a6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80058aa:	f7fb f89b 	bl	80009e4 <__aeabi_dcmpge>
 80058ae:	4646      	mov	r6, r8
 80058b0:	4647      	mov	r7, r8
 80058b2:	2800      	cmp	r0, #0
 80058b4:	f040 822d 	bne.w	8005d12 <_dtoa_r+0x8fa>
 80058b8:	9b06      	ldr	r3, [sp, #24]
 80058ba:	9a06      	ldr	r2, [sp, #24]
 80058bc:	1c5d      	adds	r5, r3, #1
 80058be:	2331      	movs	r3, #49	; 0x31
 80058c0:	f10a 0a01 	add.w	sl, sl, #1
 80058c4:	7013      	strb	r3, [r2, #0]
 80058c6:	e228      	b.n	8005d1a <_dtoa_r+0x902>
 80058c8:	07f2      	lsls	r2, r6, #31
 80058ca:	d505      	bpl.n	80058d8 <_dtoa_r+0x4c0>
 80058cc:	e9d7 2300 	ldrd	r2, r3, [r7]
 80058d0:	f7fa fe02 	bl	80004d8 <__aeabi_dmul>
 80058d4:	2301      	movs	r3, #1
 80058d6:	3501      	adds	r5, #1
 80058d8:	1076      	asrs	r6, r6, #1
 80058da:	3708      	adds	r7, #8
 80058dc:	e76e      	b.n	80057bc <_dtoa_r+0x3a4>
 80058de:	2502      	movs	r5, #2
 80058e0:	e771      	b.n	80057c6 <_dtoa_r+0x3ae>
 80058e2:	4657      	mov	r7, sl
 80058e4:	4646      	mov	r6, r8
 80058e6:	e790      	b.n	800580a <_dtoa_r+0x3f2>
 80058e8:	4b4d      	ldr	r3, [pc, #308]	; (8005a20 <_dtoa_r+0x608>)
 80058ea:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80058ee:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 80058f2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	d048      	beq.n	800598a <_dtoa_r+0x572>
 80058f8:	4602      	mov	r2, r0
 80058fa:	460b      	mov	r3, r1
 80058fc:	2000      	movs	r0, #0
 80058fe:	494e      	ldr	r1, [pc, #312]	; (8005a38 <_dtoa_r+0x620>)
 8005900:	f7fa ff14 	bl	800072c <__aeabi_ddiv>
 8005904:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8005908:	f7fa fc2e 	bl	8000168 <__aeabi_dsub>
 800590c:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8005910:	9d06      	ldr	r5, [sp, #24]
 8005912:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005916:	f7fb f88f 	bl	8000a38 <__aeabi_d2iz>
 800591a:	9011      	str	r0, [sp, #68]	; 0x44
 800591c:	f7fa fd72 	bl	8000404 <__aeabi_i2d>
 8005920:	4602      	mov	r2, r0
 8005922:	460b      	mov	r3, r1
 8005924:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005928:	f7fa fc1e 	bl	8000168 <__aeabi_dsub>
 800592c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800592e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005932:	3330      	adds	r3, #48	; 0x30
 8005934:	f805 3b01 	strb.w	r3, [r5], #1
 8005938:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800593c:	f7fb f83e 	bl	80009bc <__aeabi_dcmplt>
 8005940:	2800      	cmp	r0, #0
 8005942:	d163      	bne.n	8005a0c <_dtoa_r+0x5f4>
 8005944:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005948:	2000      	movs	r0, #0
 800594a:	4937      	ldr	r1, [pc, #220]	; (8005a28 <_dtoa_r+0x610>)
 800594c:	f7fa fc0c 	bl	8000168 <__aeabi_dsub>
 8005950:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8005954:	f7fb f832 	bl	80009bc <__aeabi_dcmplt>
 8005958:	2800      	cmp	r0, #0
 800595a:	f040 80b5 	bne.w	8005ac8 <_dtoa_r+0x6b0>
 800595e:	9b06      	ldr	r3, [sp, #24]
 8005960:	1aeb      	subs	r3, r5, r3
 8005962:	429e      	cmp	r6, r3
 8005964:	f77f af7c 	ble.w	8005860 <_dtoa_r+0x448>
 8005968:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800596c:	2200      	movs	r2, #0
 800596e:	4b2f      	ldr	r3, [pc, #188]	; (8005a2c <_dtoa_r+0x614>)
 8005970:	f7fa fdb2 	bl	80004d8 <__aeabi_dmul>
 8005974:	2200      	movs	r2, #0
 8005976:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800597a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800597e:	4b2b      	ldr	r3, [pc, #172]	; (8005a2c <_dtoa_r+0x614>)
 8005980:	f7fa fdaa 	bl	80004d8 <__aeabi_dmul>
 8005984:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005988:	e7c3      	b.n	8005912 <_dtoa_r+0x4fa>
 800598a:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800598e:	f7fa fda3 	bl	80004d8 <__aeabi_dmul>
 8005992:	9b06      	ldr	r3, [sp, #24]
 8005994:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8005998:	199d      	adds	r5, r3, r6
 800599a:	461e      	mov	r6, r3
 800599c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80059a0:	f7fb f84a 	bl	8000a38 <__aeabi_d2iz>
 80059a4:	9011      	str	r0, [sp, #68]	; 0x44
 80059a6:	f7fa fd2d 	bl	8000404 <__aeabi_i2d>
 80059aa:	4602      	mov	r2, r0
 80059ac:	460b      	mov	r3, r1
 80059ae:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80059b2:	f7fa fbd9 	bl	8000168 <__aeabi_dsub>
 80059b6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80059b8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80059bc:	3330      	adds	r3, #48	; 0x30
 80059be:	f806 3b01 	strb.w	r3, [r6], #1
 80059c2:	42ae      	cmp	r6, r5
 80059c4:	f04f 0200 	mov.w	r2, #0
 80059c8:	d124      	bne.n	8005a14 <_dtoa_r+0x5fc>
 80059ca:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80059ce:	4b1a      	ldr	r3, [pc, #104]	; (8005a38 <_dtoa_r+0x620>)
 80059d0:	f7fa fbcc 	bl	800016c <__adddf3>
 80059d4:	4602      	mov	r2, r0
 80059d6:	460b      	mov	r3, r1
 80059d8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80059dc:	f7fb f80c 	bl	80009f8 <__aeabi_dcmpgt>
 80059e0:	2800      	cmp	r0, #0
 80059e2:	d171      	bne.n	8005ac8 <_dtoa_r+0x6b0>
 80059e4:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80059e8:	2000      	movs	r0, #0
 80059ea:	4913      	ldr	r1, [pc, #76]	; (8005a38 <_dtoa_r+0x620>)
 80059ec:	f7fa fbbc 	bl	8000168 <__aeabi_dsub>
 80059f0:	4602      	mov	r2, r0
 80059f2:	460b      	mov	r3, r1
 80059f4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80059f8:	f7fa ffe0 	bl	80009bc <__aeabi_dcmplt>
 80059fc:	2800      	cmp	r0, #0
 80059fe:	f43f af2f 	beq.w	8005860 <_dtoa_r+0x448>
 8005a02:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8005a06:	1e6a      	subs	r2, r5, #1
 8005a08:	2b30      	cmp	r3, #48	; 0x30
 8005a0a:	d001      	beq.n	8005a10 <_dtoa_r+0x5f8>
 8005a0c:	46ba      	mov	sl, r7
 8005a0e:	e04a      	b.n	8005aa6 <_dtoa_r+0x68e>
 8005a10:	4615      	mov	r5, r2
 8005a12:	e7f6      	b.n	8005a02 <_dtoa_r+0x5ea>
 8005a14:	4b05      	ldr	r3, [pc, #20]	; (8005a2c <_dtoa_r+0x614>)
 8005a16:	f7fa fd5f 	bl	80004d8 <__aeabi_dmul>
 8005a1a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005a1e:	e7bd      	b.n	800599c <_dtoa_r+0x584>
 8005a20:	080085d0 	.word	0x080085d0
 8005a24:	080085a8 	.word	0x080085a8
 8005a28:	3ff00000 	.word	0x3ff00000
 8005a2c:	40240000 	.word	0x40240000
 8005a30:	401c0000 	.word	0x401c0000
 8005a34:	40140000 	.word	0x40140000
 8005a38:	3fe00000 	.word	0x3fe00000
 8005a3c:	9d06      	ldr	r5, [sp, #24]
 8005a3e:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8005a42:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005a46:	4630      	mov	r0, r6
 8005a48:	4639      	mov	r1, r7
 8005a4a:	f7fa fe6f 	bl	800072c <__aeabi_ddiv>
 8005a4e:	f7fa fff3 	bl	8000a38 <__aeabi_d2iz>
 8005a52:	4681      	mov	r9, r0
 8005a54:	f7fa fcd6 	bl	8000404 <__aeabi_i2d>
 8005a58:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005a5c:	f7fa fd3c 	bl	80004d8 <__aeabi_dmul>
 8005a60:	4602      	mov	r2, r0
 8005a62:	460b      	mov	r3, r1
 8005a64:	4630      	mov	r0, r6
 8005a66:	4639      	mov	r1, r7
 8005a68:	f7fa fb7e 	bl	8000168 <__aeabi_dsub>
 8005a6c:	f109 0630 	add.w	r6, r9, #48	; 0x30
 8005a70:	f805 6b01 	strb.w	r6, [r5], #1
 8005a74:	9e06      	ldr	r6, [sp, #24]
 8005a76:	4602      	mov	r2, r0
 8005a78:	1bae      	subs	r6, r5, r6
 8005a7a:	45b0      	cmp	r8, r6
 8005a7c:	460b      	mov	r3, r1
 8005a7e:	d135      	bne.n	8005aec <_dtoa_r+0x6d4>
 8005a80:	f7fa fb74 	bl	800016c <__adddf3>
 8005a84:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005a88:	4606      	mov	r6, r0
 8005a8a:	460f      	mov	r7, r1
 8005a8c:	f7fa ffb4 	bl	80009f8 <__aeabi_dcmpgt>
 8005a90:	b9c8      	cbnz	r0, 8005ac6 <_dtoa_r+0x6ae>
 8005a92:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005a96:	4630      	mov	r0, r6
 8005a98:	4639      	mov	r1, r7
 8005a9a:	f7fa ff85 	bl	80009a8 <__aeabi_dcmpeq>
 8005a9e:	b110      	cbz	r0, 8005aa6 <_dtoa_r+0x68e>
 8005aa0:	f019 0f01 	tst.w	r9, #1
 8005aa4:	d10f      	bne.n	8005ac6 <_dtoa_r+0x6ae>
 8005aa6:	4659      	mov	r1, fp
 8005aa8:	4620      	mov	r0, r4
 8005aaa:	f000 facc 	bl	8006046 <_Bfree>
 8005aae:	2300      	movs	r3, #0
 8005ab0:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8005ab2:	702b      	strb	r3, [r5, #0]
 8005ab4:	f10a 0301 	add.w	r3, sl, #1
 8005ab8:	6013      	str	r3, [r2, #0]
 8005aba:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005abc:	2b00      	cmp	r3, #0
 8005abe:	f43f acf3 	beq.w	80054a8 <_dtoa_r+0x90>
 8005ac2:	601d      	str	r5, [r3, #0]
 8005ac4:	e4f0      	b.n	80054a8 <_dtoa_r+0x90>
 8005ac6:	4657      	mov	r7, sl
 8005ac8:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8005acc:	1e6b      	subs	r3, r5, #1
 8005ace:	2a39      	cmp	r2, #57	; 0x39
 8005ad0:	d106      	bne.n	8005ae0 <_dtoa_r+0x6c8>
 8005ad2:	9a06      	ldr	r2, [sp, #24]
 8005ad4:	429a      	cmp	r2, r3
 8005ad6:	d107      	bne.n	8005ae8 <_dtoa_r+0x6d0>
 8005ad8:	2330      	movs	r3, #48	; 0x30
 8005ada:	7013      	strb	r3, [r2, #0]
 8005adc:	4613      	mov	r3, r2
 8005ade:	3701      	adds	r7, #1
 8005ae0:	781a      	ldrb	r2, [r3, #0]
 8005ae2:	3201      	adds	r2, #1
 8005ae4:	701a      	strb	r2, [r3, #0]
 8005ae6:	e791      	b.n	8005a0c <_dtoa_r+0x5f4>
 8005ae8:	461d      	mov	r5, r3
 8005aea:	e7ed      	b.n	8005ac8 <_dtoa_r+0x6b0>
 8005aec:	2200      	movs	r2, #0
 8005aee:	4b99      	ldr	r3, [pc, #612]	; (8005d54 <_dtoa_r+0x93c>)
 8005af0:	f7fa fcf2 	bl	80004d8 <__aeabi_dmul>
 8005af4:	2200      	movs	r2, #0
 8005af6:	2300      	movs	r3, #0
 8005af8:	4606      	mov	r6, r0
 8005afa:	460f      	mov	r7, r1
 8005afc:	f7fa ff54 	bl	80009a8 <__aeabi_dcmpeq>
 8005b00:	2800      	cmp	r0, #0
 8005b02:	d09e      	beq.n	8005a42 <_dtoa_r+0x62a>
 8005b04:	e7cf      	b.n	8005aa6 <_dtoa_r+0x68e>
 8005b06:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005b08:	2a00      	cmp	r2, #0
 8005b0a:	f000 8088 	beq.w	8005c1e <_dtoa_r+0x806>
 8005b0e:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8005b10:	2a01      	cmp	r2, #1
 8005b12:	dc6d      	bgt.n	8005bf0 <_dtoa_r+0x7d8>
 8005b14:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8005b16:	2a00      	cmp	r2, #0
 8005b18:	d066      	beq.n	8005be8 <_dtoa_r+0x7d0>
 8005b1a:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8005b1e:	464d      	mov	r5, r9
 8005b20:	9e08      	ldr	r6, [sp, #32]
 8005b22:	9a07      	ldr	r2, [sp, #28]
 8005b24:	2101      	movs	r1, #1
 8005b26:	441a      	add	r2, r3
 8005b28:	4620      	mov	r0, r4
 8005b2a:	4499      	add	r9, r3
 8005b2c:	9207      	str	r2, [sp, #28]
 8005b2e:	f000 fb2a 	bl	8006186 <__i2b>
 8005b32:	4607      	mov	r7, r0
 8005b34:	2d00      	cmp	r5, #0
 8005b36:	dd0b      	ble.n	8005b50 <_dtoa_r+0x738>
 8005b38:	9b07      	ldr	r3, [sp, #28]
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	dd08      	ble.n	8005b50 <_dtoa_r+0x738>
 8005b3e:	42ab      	cmp	r3, r5
 8005b40:	bfa8      	it	ge
 8005b42:	462b      	movge	r3, r5
 8005b44:	9a07      	ldr	r2, [sp, #28]
 8005b46:	eba9 0903 	sub.w	r9, r9, r3
 8005b4a:	1aed      	subs	r5, r5, r3
 8005b4c:	1ad3      	subs	r3, r2, r3
 8005b4e:	9307      	str	r3, [sp, #28]
 8005b50:	9b08      	ldr	r3, [sp, #32]
 8005b52:	b1eb      	cbz	r3, 8005b90 <_dtoa_r+0x778>
 8005b54:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005b56:	2b00      	cmp	r3, #0
 8005b58:	d065      	beq.n	8005c26 <_dtoa_r+0x80e>
 8005b5a:	b18e      	cbz	r6, 8005b80 <_dtoa_r+0x768>
 8005b5c:	4639      	mov	r1, r7
 8005b5e:	4632      	mov	r2, r6
 8005b60:	4620      	mov	r0, r4
 8005b62:	f000 fbaf 	bl	80062c4 <__pow5mult>
 8005b66:	465a      	mov	r2, fp
 8005b68:	4601      	mov	r1, r0
 8005b6a:	4607      	mov	r7, r0
 8005b6c:	4620      	mov	r0, r4
 8005b6e:	f000 fb13 	bl	8006198 <__multiply>
 8005b72:	4659      	mov	r1, fp
 8005b74:	900a      	str	r0, [sp, #40]	; 0x28
 8005b76:	4620      	mov	r0, r4
 8005b78:	f000 fa65 	bl	8006046 <_Bfree>
 8005b7c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005b7e:	469b      	mov	fp, r3
 8005b80:	9b08      	ldr	r3, [sp, #32]
 8005b82:	1b9a      	subs	r2, r3, r6
 8005b84:	d004      	beq.n	8005b90 <_dtoa_r+0x778>
 8005b86:	4659      	mov	r1, fp
 8005b88:	4620      	mov	r0, r4
 8005b8a:	f000 fb9b 	bl	80062c4 <__pow5mult>
 8005b8e:	4683      	mov	fp, r0
 8005b90:	2101      	movs	r1, #1
 8005b92:	4620      	mov	r0, r4
 8005b94:	f000 faf7 	bl	8006186 <__i2b>
 8005b98:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005b9a:	4606      	mov	r6, r0
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	f000 81c6 	beq.w	8005f2e <_dtoa_r+0xb16>
 8005ba2:	461a      	mov	r2, r3
 8005ba4:	4601      	mov	r1, r0
 8005ba6:	4620      	mov	r0, r4
 8005ba8:	f000 fb8c 	bl	80062c4 <__pow5mult>
 8005bac:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8005bae:	4606      	mov	r6, r0
 8005bb0:	2b01      	cmp	r3, #1
 8005bb2:	dc3e      	bgt.n	8005c32 <_dtoa_r+0x81a>
 8005bb4:	9b02      	ldr	r3, [sp, #8]
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	d137      	bne.n	8005c2a <_dtoa_r+0x812>
 8005bba:	9b03      	ldr	r3, [sp, #12]
 8005bbc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005bc0:	2b00      	cmp	r3, #0
 8005bc2:	d134      	bne.n	8005c2e <_dtoa_r+0x816>
 8005bc4:	9b03      	ldr	r3, [sp, #12]
 8005bc6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005bca:	0d1b      	lsrs	r3, r3, #20
 8005bcc:	051b      	lsls	r3, r3, #20
 8005bce:	b12b      	cbz	r3, 8005bdc <_dtoa_r+0x7c4>
 8005bd0:	9b07      	ldr	r3, [sp, #28]
 8005bd2:	f109 0901 	add.w	r9, r9, #1
 8005bd6:	3301      	adds	r3, #1
 8005bd8:	9307      	str	r3, [sp, #28]
 8005bda:	2301      	movs	r3, #1
 8005bdc:	9308      	str	r3, [sp, #32]
 8005bde:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005be0:	2b00      	cmp	r3, #0
 8005be2:	d128      	bne.n	8005c36 <_dtoa_r+0x81e>
 8005be4:	2001      	movs	r0, #1
 8005be6:	e02e      	b.n	8005c46 <_dtoa_r+0x82e>
 8005be8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005bea:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8005bee:	e796      	b.n	8005b1e <_dtoa_r+0x706>
 8005bf0:	9b08      	ldr	r3, [sp, #32]
 8005bf2:	f108 36ff 	add.w	r6, r8, #4294967295
 8005bf6:	42b3      	cmp	r3, r6
 8005bf8:	bfb7      	itett	lt
 8005bfa:	9b08      	ldrlt	r3, [sp, #32]
 8005bfc:	1b9e      	subge	r6, r3, r6
 8005bfe:	1af2      	sublt	r2, r6, r3
 8005c00:	9b0c      	ldrlt	r3, [sp, #48]	; 0x30
 8005c02:	bfbf      	itttt	lt
 8005c04:	9608      	strlt	r6, [sp, #32]
 8005c06:	189b      	addlt	r3, r3, r2
 8005c08:	930c      	strlt	r3, [sp, #48]	; 0x30
 8005c0a:	2600      	movlt	r6, #0
 8005c0c:	f1b8 0f00 	cmp.w	r8, #0
 8005c10:	bfb9      	ittee	lt
 8005c12:	eba9 0508 	sublt.w	r5, r9, r8
 8005c16:	2300      	movlt	r3, #0
 8005c18:	464d      	movge	r5, r9
 8005c1a:	4643      	movge	r3, r8
 8005c1c:	e781      	b.n	8005b22 <_dtoa_r+0x70a>
 8005c1e:	9e08      	ldr	r6, [sp, #32]
 8005c20:	464d      	mov	r5, r9
 8005c22:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8005c24:	e786      	b.n	8005b34 <_dtoa_r+0x71c>
 8005c26:	9a08      	ldr	r2, [sp, #32]
 8005c28:	e7ad      	b.n	8005b86 <_dtoa_r+0x76e>
 8005c2a:	2300      	movs	r3, #0
 8005c2c:	e7d6      	b.n	8005bdc <_dtoa_r+0x7c4>
 8005c2e:	9b02      	ldr	r3, [sp, #8]
 8005c30:	e7d4      	b.n	8005bdc <_dtoa_r+0x7c4>
 8005c32:	2300      	movs	r3, #0
 8005c34:	9308      	str	r3, [sp, #32]
 8005c36:	6933      	ldr	r3, [r6, #16]
 8005c38:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8005c3c:	6918      	ldr	r0, [r3, #16]
 8005c3e:	f000 fa54 	bl	80060ea <__hi0bits>
 8005c42:	f1c0 0020 	rsb	r0, r0, #32
 8005c46:	9b07      	ldr	r3, [sp, #28]
 8005c48:	4418      	add	r0, r3
 8005c4a:	f010 001f 	ands.w	r0, r0, #31
 8005c4e:	d047      	beq.n	8005ce0 <_dtoa_r+0x8c8>
 8005c50:	f1c0 0320 	rsb	r3, r0, #32
 8005c54:	2b04      	cmp	r3, #4
 8005c56:	dd3b      	ble.n	8005cd0 <_dtoa_r+0x8b8>
 8005c58:	9b07      	ldr	r3, [sp, #28]
 8005c5a:	f1c0 001c 	rsb	r0, r0, #28
 8005c5e:	4481      	add	r9, r0
 8005c60:	4405      	add	r5, r0
 8005c62:	4403      	add	r3, r0
 8005c64:	9307      	str	r3, [sp, #28]
 8005c66:	f1b9 0f00 	cmp.w	r9, #0
 8005c6a:	dd05      	ble.n	8005c78 <_dtoa_r+0x860>
 8005c6c:	4659      	mov	r1, fp
 8005c6e:	464a      	mov	r2, r9
 8005c70:	4620      	mov	r0, r4
 8005c72:	f000 fb75 	bl	8006360 <__lshift>
 8005c76:	4683      	mov	fp, r0
 8005c78:	9b07      	ldr	r3, [sp, #28]
 8005c7a:	2b00      	cmp	r3, #0
 8005c7c:	dd05      	ble.n	8005c8a <_dtoa_r+0x872>
 8005c7e:	4631      	mov	r1, r6
 8005c80:	461a      	mov	r2, r3
 8005c82:	4620      	mov	r0, r4
 8005c84:	f000 fb6c 	bl	8006360 <__lshift>
 8005c88:	4606      	mov	r6, r0
 8005c8a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005c8c:	b353      	cbz	r3, 8005ce4 <_dtoa_r+0x8cc>
 8005c8e:	4631      	mov	r1, r6
 8005c90:	4658      	mov	r0, fp
 8005c92:	f000 fbb9 	bl	8006408 <__mcmp>
 8005c96:	2800      	cmp	r0, #0
 8005c98:	da24      	bge.n	8005ce4 <_dtoa_r+0x8cc>
 8005c9a:	2300      	movs	r3, #0
 8005c9c:	4659      	mov	r1, fp
 8005c9e:	220a      	movs	r2, #10
 8005ca0:	4620      	mov	r0, r4
 8005ca2:	f000 f9e7 	bl	8006074 <__multadd>
 8005ca6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005ca8:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005cac:	4683      	mov	fp, r0
 8005cae:	2b00      	cmp	r3, #0
 8005cb0:	f000 8144 	beq.w	8005f3c <_dtoa_r+0xb24>
 8005cb4:	2300      	movs	r3, #0
 8005cb6:	4639      	mov	r1, r7
 8005cb8:	220a      	movs	r2, #10
 8005cba:	4620      	mov	r0, r4
 8005cbc:	f000 f9da 	bl	8006074 <__multadd>
 8005cc0:	9b04      	ldr	r3, [sp, #16]
 8005cc2:	4607      	mov	r7, r0
 8005cc4:	2b00      	cmp	r3, #0
 8005cc6:	dc4d      	bgt.n	8005d64 <_dtoa_r+0x94c>
 8005cc8:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8005cca:	2b02      	cmp	r3, #2
 8005ccc:	dd4a      	ble.n	8005d64 <_dtoa_r+0x94c>
 8005cce:	e011      	b.n	8005cf4 <_dtoa_r+0x8dc>
 8005cd0:	d0c9      	beq.n	8005c66 <_dtoa_r+0x84e>
 8005cd2:	9a07      	ldr	r2, [sp, #28]
 8005cd4:	331c      	adds	r3, #28
 8005cd6:	441a      	add	r2, r3
 8005cd8:	4499      	add	r9, r3
 8005cda:	441d      	add	r5, r3
 8005cdc:	4613      	mov	r3, r2
 8005cde:	e7c1      	b.n	8005c64 <_dtoa_r+0x84c>
 8005ce0:	4603      	mov	r3, r0
 8005ce2:	e7f6      	b.n	8005cd2 <_dtoa_r+0x8ba>
 8005ce4:	f1b8 0f00 	cmp.w	r8, #0
 8005ce8:	dc36      	bgt.n	8005d58 <_dtoa_r+0x940>
 8005cea:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8005cec:	2b02      	cmp	r3, #2
 8005cee:	dd33      	ble.n	8005d58 <_dtoa_r+0x940>
 8005cf0:	f8cd 8010 	str.w	r8, [sp, #16]
 8005cf4:	9b04      	ldr	r3, [sp, #16]
 8005cf6:	b963      	cbnz	r3, 8005d12 <_dtoa_r+0x8fa>
 8005cf8:	4631      	mov	r1, r6
 8005cfa:	2205      	movs	r2, #5
 8005cfc:	4620      	mov	r0, r4
 8005cfe:	f000 f9b9 	bl	8006074 <__multadd>
 8005d02:	4601      	mov	r1, r0
 8005d04:	4606      	mov	r6, r0
 8005d06:	4658      	mov	r0, fp
 8005d08:	f000 fb7e 	bl	8006408 <__mcmp>
 8005d0c:	2800      	cmp	r0, #0
 8005d0e:	f73f add3 	bgt.w	80058b8 <_dtoa_r+0x4a0>
 8005d12:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8005d14:	9d06      	ldr	r5, [sp, #24]
 8005d16:	ea6f 0a03 	mvn.w	sl, r3
 8005d1a:	f04f 0900 	mov.w	r9, #0
 8005d1e:	4631      	mov	r1, r6
 8005d20:	4620      	mov	r0, r4
 8005d22:	f000 f990 	bl	8006046 <_Bfree>
 8005d26:	2f00      	cmp	r7, #0
 8005d28:	f43f aebd 	beq.w	8005aa6 <_dtoa_r+0x68e>
 8005d2c:	f1b9 0f00 	cmp.w	r9, #0
 8005d30:	d005      	beq.n	8005d3e <_dtoa_r+0x926>
 8005d32:	45b9      	cmp	r9, r7
 8005d34:	d003      	beq.n	8005d3e <_dtoa_r+0x926>
 8005d36:	4649      	mov	r1, r9
 8005d38:	4620      	mov	r0, r4
 8005d3a:	f000 f984 	bl	8006046 <_Bfree>
 8005d3e:	4639      	mov	r1, r7
 8005d40:	4620      	mov	r0, r4
 8005d42:	f000 f980 	bl	8006046 <_Bfree>
 8005d46:	e6ae      	b.n	8005aa6 <_dtoa_r+0x68e>
 8005d48:	2600      	movs	r6, #0
 8005d4a:	4637      	mov	r7, r6
 8005d4c:	e7e1      	b.n	8005d12 <_dtoa_r+0x8fa>
 8005d4e:	46ba      	mov	sl, r7
 8005d50:	4637      	mov	r7, r6
 8005d52:	e5b1      	b.n	80058b8 <_dtoa_r+0x4a0>
 8005d54:	40240000 	.word	0x40240000
 8005d58:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005d5a:	f8cd 8010 	str.w	r8, [sp, #16]
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	f000 80f3 	beq.w	8005f4a <_dtoa_r+0xb32>
 8005d64:	2d00      	cmp	r5, #0
 8005d66:	dd05      	ble.n	8005d74 <_dtoa_r+0x95c>
 8005d68:	4639      	mov	r1, r7
 8005d6a:	462a      	mov	r2, r5
 8005d6c:	4620      	mov	r0, r4
 8005d6e:	f000 faf7 	bl	8006360 <__lshift>
 8005d72:	4607      	mov	r7, r0
 8005d74:	9b08      	ldr	r3, [sp, #32]
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	d04c      	beq.n	8005e14 <_dtoa_r+0x9fc>
 8005d7a:	6879      	ldr	r1, [r7, #4]
 8005d7c:	4620      	mov	r0, r4
 8005d7e:	f000 f92e 	bl	8005fde <_Balloc>
 8005d82:	4605      	mov	r5, r0
 8005d84:	693a      	ldr	r2, [r7, #16]
 8005d86:	f107 010c 	add.w	r1, r7, #12
 8005d8a:	3202      	adds	r2, #2
 8005d8c:	0092      	lsls	r2, r2, #2
 8005d8e:	300c      	adds	r0, #12
 8005d90:	f000 f91a 	bl	8005fc8 <memcpy>
 8005d94:	2201      	movs	r2, #1
 8005d96:	4629      	mov	r1, r5
 8005d98:	4620      	mov	r0, r4
 8005d9a:	f000 fae1 	bl	8006360 <__lshift>
 8005d9e:	46b9      	mov	r9, r7
 8005da0:	4607      	mov	r7, r0
 8005da2:	9b06      	ldr	r3, [sp, #24]
 8005da4:	9307      	str	r3, [sp, #28]
 8005da6:	9b02      	ldr	r3, [sp, #8]
 8005da8:	f003 0301 	and.w	r3, r3, #1
 8005dac:	9308      	str	r3, [sp, #32]
 8005dae:	4631      	mov	r1, r6
 8005db0:	4658      	mov	r0, fp
 8005db2:	f7ff faa0 	bl	80052f6 <quorem>
 8005db6:	4649      	mov	r1, r9
 8005db8:	4605      	mov	r5, r0
 8005dba:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8005dbe:	4658      	mov	r0, fp
 8005dc0:	f000 fb22 	bl	8006408 <__mcmp>
 8005dc4:	463a      	mov	r2, r7
 8005dc6:	9002      	str	r0, [sp, #8]
 8005dc8:	4631      	mov	r1, r6
 8005dca:	4620      	mov	r0, r4
 8005dcc:	f000 fb36 	bl	800643c <__mdiff>
 8005dd0:	68c3      	ldr	r3, [r0, #12]
 8005dd2:	4602      	mov	r2, r0
 8005dd4:	bb03      	cbnz	r3, 8005e18 <_dtoa_r+0xa00>
 8005dd6:	4601      	mov	r1, r0
 8005dd8:	9009      	str	r0, [sp, #36]	; 0x24
 8005dda:	4658      	mov	r0, fp
 8005ddc:	f000 fb14 	bl	8006408 <__mcmp>
 8005de0:	4603      	mov	r3, r0
 8005de2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005de4:	4611      	mov	r1, r2
 8005de6:	4620      	mov	r0, r4
 8005de8:	9309      	str	r3, [sp, #36]	; 0x24
 8005dea:	f000 f92c 	bl	8006046 <_Bfree>
 8005dee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005df0:	b9a3      	cbnz	r3, 8005e1c <_dtoa_r+0xa04>
 8005df2:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8005df4:	b992      	cbnz	r2, 8005e1c <_dtoa_r+0xa04>
 8005df6:	9a08      	ldr	r2, [sp, #32]
 8005df8:	b982      	cbnz	r2, 8005e1c <_dtoa_r+0xa04>
 8005dfa:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8005dfe:	d029      	beq.n	8005e54 <_dtoa_r+0xa3c>
 8005e00:	9b02      	ldr	r3, [sp, #8]
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	dd01      	ble.n	8005e0a <_dtoa_r+0x9f2>
 8005e06:	f105 0831 	add.w	r8, r5, #49	; 0x31
 8005e0a:	9b07      	ldr	r3, [sp, #28]
 8005e0c:	1c5d      	adds	r5, r3, #1
 8005e0e:	f883 8000 	strb.w	r8, [r3]
 8005e12:	e784      	b.n	8005d1e <_dtoa_r+0x906>
 8005e14:	4638      	mov	r0, r7
 8005e16:	e7c2      	b.n	8005d9e <_dtoa_r+0x986>
 8005e18:	2301      	movs	r3, #1
 8005e1a:	e7e3      	b.n	8005de4 <_dtoa_r+0x9cc>
 8005e1c:	9a02      	ldr	r2, [sp, #8]
 8005e1e:	2a00      	cmp	r2, #0
 8005e20:	db04      	blt.n	8005e2c <_dtoa_r+0xa14>
 8005e22:	d123      	bne.n	8005e6c <_dtoa_r+0xa54>
 8005e24:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8005e26:	bb0a      	cbnz	r2, 8005e6c <_dtoa_r+0xa54>
 8005e28:	9a08      	ldr	r2, [sp, #32]
 8005e2a:	b9fa      	cbnz	r2, 8005e6c <_dtoa_r+0xa54>
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	ddec      	ble.n	8005e0a <_dtoa_r+0x9f2>
 8005e30:	4659      	mov	r1, fp
 8005e32:	2201      	movs	r2, #1
 8005e34:	4620      	mov	r0, r4
 8005e36:	f000 fa93 	bl	8006360 <__lshift>
 8005e3a:	4631      	mov	r1, r6
 8005e3c:	4683      	mov	fp, r0
 8005e3e:	f000 fae3 	bl	8006408 <__mcmp>
 8005e42:	2800      	cmp	r0, #0
 8005e44:	dc03      	bgt.n	8005e4e <_dtoa_r+0xa36>
 8005e46:	d1e0      	bne.n	8005e0a <_dtoa_r+0x9f2>
 8005e48:	f018 0f01 	tst.w	r8, #1
 8005e4c:	d0dd      	beq.n	8005e0a <_dtoa_r+0x9f2>
 8005e4e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8005e52:	d1d8      	bne.n	8005e06 <_dtoa_r+0x9ee>
 8005e54:	9b07      	ldr	r3, [sp, #28]
 8005e56:	9a07      	ldr	r2, [sp, #28]
 8005e58:	1c5d      	adds	r5, r3, #1
 8005e5a:	2339      	movs	r3, #57	; 0x39
 8005e5c:	7013      	strb	r3, [r2, #0]
 8005e5e:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8005e62:	1e6a      	subs	r2, r5, #1
 8005e64:	2b39      	cmp	r3, #57	; 0x39
 8005e66:	d04d      	beq.n	8005f04 <_dtoa_r+0xaec>
 8005e68:	3301      	adds	r3, #1
 8005e6a:	e052      	b.n	8005f12 <_dtoa_r+0xafa>
 8005e6c:	9a07      	ldr	r2, [sp, #28]
 8005e6e:	2b00      	cmp	r3, #0
 8005e70:	f102 0501 	add.w	r5, r2, #1
 8005e74:	dd06      	ble.n	8005e84 <_dtoa_r+0xa6c>
 8005e76:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8005e7a:	d0eb      	beq.n	8005e54 <_dtoa_r+0xa3c>
 8005e7c:	f108 0801 	add.w	r8, r8, #1
 8005e80:	9b07      	ldr	r3, [sp, #28]
 8005e82:	e7c4      	b.n	8005e0e <_dtoa_r+0x9f6>
 8005e84:	9b06      	ldr	r3, [sp, #24]
 8005e86:	9a04      	ldr	r2, [sp, #16]
 8005e88:	1aeb      	subs	r3, r5, r3
 8005e8a:	4293      	cmp	r3, r2
 8005e8c:	f805 8c01 	strb.w	r8, [r5, #-1]
 8005e90:	d021      	beq.n	8005ed6 <_dtoa_r+0xabe>
 8005e92:	4659      	mov	r1, fp
 8005e94:	2300      	movs	r3, #0
 8005e96:	220a      	movs	r2, #10
 8005e98:	4620      	mov	r0, r4
 8005e9a:	f000 f8eb 	bl	8006074 <__multadd>
 8005e9e:	45b9      	cmp	r9, r7
 8005ea0:	4683      	mov	fp, r0
 8005ea2:	f04f 0300 	mov.w	r3, #0
 8005ea6:	f04f 020a 	mov.w	r2, #10
 8005eaa:	4649      	mov	r1, r9
 8005eac:	4620      	mov	r0, r4
 8005eae:	d105      	bne.n	8005ebc <_dtoa_r+0xaa4>
 8005eb0:	f000 f8e0 	bl	8006074 <__multadd>
 8005eb4:	4681      	mov	r9, r0
 8005eb6:	4607      	mov	r7, r0
 8005eb8:	9507      	str	r5, [sp, #28]
 8005eba:	e778      	b.n	8005dae <_dtoa_r+0x996>
 8005ebc:	f000 f8da 	bl	8006074 <__multadd>
 8005ec0:	4639      	mov	r1, r7
 8005ec2:	4681      	mov	r9, r0
 8005ec4:	2300      	movs	r3, #0
 8005ec6:	220a      	movs	r2, #10
 8005ec8:	4620      	mov	r0, r4
 8005eca:	f000 f8d3 	bl	8006074 <__multadd>
 8005ece:	4607      	mov	r7, r0
 8005ed0:	e7f2      	b.n	8005eb8 <_dtoa_r+0xaa0>
 8005ed2:	f04f 0900 	mov.w	r9, #0
 8005ed6:	4659      	mov	r1, fp
 8005ed8:	2201      	movs	r2, #1
 8005eda:	4620      	mov	r0, r4
 8005edc:	f000 fa40 	bl	8006360 <__lshift>
 8005ee0:	4631      	mov	r1, r6
 8005ee2:	4683      	mov	fp, r0
 8005ee4:	f000 fa90 	bl	8006408 <__mcmp>
 8005ee8:	2800      	cmp	r0, #0
 8005eea:	dcb8      	bgt.n	8005e5e <_dtoa_r+0xa46>
 8005eec:	d102      	bne.n	8005ef4 <_dtoa_r+0xadc>
 8005eee:	f018 0f01 	tst.w	r8, #1
 8005ef2:	d1b4      	bne.n	8005e5e <_dtoa_r+0xa46>
 8005ef4:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8005ef8:	1e6a      	subs	r2, r5, #1
 8005efa:	2b30      	cmp	r3, #48	; 0x30
 8005efc:	f47f af0f 	bne.w	8005d1e <_dtoa_r+0x906>
 8005f00:	4615      	mov	r5, r2
 8005f02:	e7f7      	b.n	8005ef4 <_dtoa_r+0xadc>
 8005f04:	9b06      	ldr	r3, [sp, #24]
 8005f06:	4293      	cmp	r3, r2
 8005f08:	d105      	bne.n	8005f16 <_dtoa_r+0xafe>
 8005f0a:	2331      	movs	r3, #49	; 0x31
 8005f0c:	9a06      	ldr	r2, [sp, #24]
 8005f0e:	f10a 0a01 	add.w	sl, sl, #1
 8005f12:	7013      	strb	r3, [r2, #0]
 8005f14:	e703      	b.n	8005d1e <_dtoa_r+0x906>
 8005f16:	4615      	mov	r5, r2
 8005f18:	e7a1      	b.n	8005e5e <_dtoa_r+0xa46>
 8005f1a:	4b17      	ldr	r3, [pc, #92]	; (8005f78 <_dtoa_r+0xb60>)
 8005f1c:	f7ff bae1 	b.w	80054e2 <_dtoa_r+0xca>
 8005f20:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	f47f aabb 	bne.w	800549e <_dtoa_r+0x86>
 8005f28:	4b14      	ldr	r3, [pc, #80]	; (8005f7c <_dtoa_r+0xb64>)
 8005f2a:	f7ff bada 	b.w	80054e2 <_dtoa_r+0xca>
 8005f2e:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8005f30:	2b01      	cmp	r3, #1
 8005f32:	f77f ae3f 	ble.w	8005bb4 <_dtoa_r+0x79c>
 8005f36:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005f38:	9308      	str	r3, [sp, #32]
 8005f3a:	e653      	b.n	8005be4 <_dtoa_r+0x7cc>
 8005f3c:	9b04      	ldr	r3, [sp, #16]
 8005f3e:	2b00      	cmp	r3, #0
 8005f40:	dc03      	bgt.n	8005f4a <_dtoa_r+0xb32>
 8005f42:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8005f44:	2b02      	cmp	r3, #2
 8005f46:	f73f aed5 	bgt.w	8005cf4 <_dtoa_r+0x8dc>
 8005f4a:	9d06      	ldr	r5, [sp, #24]
 8005f4c:	4631      	mov	r1, r6
 8005f4e:	4658      	mov	r0, fp
 8005f50:	f7ff f9d1 	bl	80052f6 <quorem>
 8005f54:	9b06      	ldr	r3, [sp, #24]
 8005f56:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8005f5a:	f805 8b01 	strb.w	r8, [r5], #1
 8005f5e:	9a04      	ldr	r2, [sp, #16]
 8005f60:	1aeb      	subs	r3, r5, r3
 8005f62:	429a      	cmp	r2, r3
 8005f64:	ddb5      	ble.n	8005ed2 <_dtoa_r+0xaba>
 8005f66:	4659      	mov	r1, fp
 8005f68:	2300      	movs	r3, #0
 8005f6a:	220a      	movs	r2, #10
 8005f6c:	4620      	mov	r0, r4
 8005f6e:	f000 f881 	bl	8006074 <__multadd>
 8005f72:	4683      	mov	fp, r0
 8005f74:	e7ea      	b.n	8005f4c <_dtoa_r+0xb34>
 8005f76:	bf00      	nop
 8005f78:	08008570 	.word	0x08008570
 8005f7c:	08008594 	.word	0x08008594

08005f80 <_localeconv_r>:
 8005f80:	4b04      	ldr	r3, [pc, #16]	; (8005f94 <_localeconv_r+0x14>)
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	6a18      	ldr	r0, [r3, #32]
 8005f86:	4b04      	ldr	r3, [pc, #16]	; (8005f98 <_localeconv_r+0x18>)
 8005f88:	2800      	cmp	r0, #0
 8005f8a:	bf08      	it	eq
 8005f8c:	4618      	moveq	r0, r3
 8005f8e:	30f0      	adds	r0, #240	; 0xf0
 8005f90:	4770      	bx	lr
 8005f92:	bf00      	nop
 8005f94:	200000a4 	.word	0x200000a4
 8005f98:	20000108 	.word	0x20000108

08005f9c <malloc>:
 8005f9c:	4b02      	ldr	r3, [pc, #8]	; (8005fa8 <malloc+0xc>)
 8005f9e:	4601      	mov	r1, r0
 8005fa0:	6818      	ldr	r0, [r3, #0]
 8005fa2:	f000 bb53 	b.w	800664c <_malloc_r>
 8005fa6:	bf00      	nop
 8005fa8:	200000a4 	.word	0x200000a4

08005fac <memchr>:
 8005fac:	b510      	push	{r4, lr}
 8005fae:	b2c9      	uxtb	r1, r1
 8005fb0:	4402      	add	r2, r0
 8005fb2:	4290      	cmp	r0, r2
 8005fb4:	4603      	mov	r3, r0
 8005fb6:	d101      	bne.n	8005fbc <memchr+0x10>
 8005fb8:	2300      	movs	r3, #0
 8005fba:	e003      	b.n	8005fc4 <memchr+0x18>
 8005fbc:	781c      	ldrb	r4, [r3, #0]
 8005fbe:	3001      	adds	r0, #1
 8005fc0:	428c      	cmp	r4, r1
 8005fc2:	d1f6      	bne.n	8005fb2 <memchr+0x6>
 8005fc4:	4618      	mov	r0, r3
 8005fc6:	bd10      	pop	{r4, pc}

08005fc8 <memcpy>:
 8005fc8:	b510      	push	{r4, lr}
 8005fca:	1e43      	subs	r3, r0, #1
 8005fcc:	440a      	add	r2, r1
 8005fce:	4291      	cmp	r1, r2
 8005fd0:	d100      	bne.n	8005fd4 <memcpy+0xc>
 8005fd2:	bd10      	pop	{r4, pc}
 8005fd4:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005fd8:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005fdc:	e7f7      	b.n	8005fce <memcpy+0x6>

08005fde <_Balloc>:
 8005fde:	b570      	push	{r4, r5, r6, lr}
 8005fe0:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8005fe2:	4604      	mov	r4, r0
 8005fe4:	460e      	mov	r6, r1
 8005fe6:	b93d      	cbnz	r5, 8005ff8 <_Balloc+0x1a>
 8005fe8:	2010      	movs	r0, #16
 8005fea:	f7ff ffd7 	bl	8005f9c <malloc>
 8005fee:	6260      	str	r0, [r4, #36]	; 0x24
 8005ff0:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8005ff4:	6005      	str	r5, [r0, #0]
 8005ff6:	60c5      	str	r5, [r0, #12]
 8005ff8:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8005ffa:	68eb      	ldr	r3, [r5, #12]
 8005ffc:	b183      	cbz	r3, 8006020 <_Balloc+0x42>
 8005ffe:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006000:	68db      	ldr	r3, [r3, #12]
 8006002:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8006006:	b9b8      	cbnz	r0, 8006038 <_Balloc+0x5a>
 8006008:	2101      	movs	r1, #1
 800600a:	fa01 f506 	lsl.w	r5, r1, r6
 800600e:	1d6a      	adds	r2, r5, #5
 8006010:	0092      	lsls	r2, r2, #2
 8006012:	4620      	mov	r0, r4
 8006014:	f000 fabf 	bl	8006596 <_calloc_r>
 8006018:	b160      	cbz	r0, 8006034 <_Balloc+0x56>
 800601a:	e9c0 6501 	strd	r6, r5, [r0, #4]
 800601e:	e00e      	b.n	800603e <_Balloc+0x60>
 8006020:	2221      	movs	r2, #33	; 0x21
 8006022:	2104      	movs	r1, #4
 8006024:	4620      	mov	r0, r4
 8006026:	f000 fab6 	bl	8006596 <_calloc_r>
 800602a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800602c:	60e8      	str	r0, [r5, #12]
 800602e:	68db      	ldr	r3, [r3, #12]
 8006030:	2b00      	cmp	r3, #0
 8006032:	d1e4      	bne.n	8005ffe <_Balloc+0x20>
 8006034:	2000      	movs	r0, #0
 8006036:	bd70      	pop	{r4, r5, r6, pc}
 8006038:	6802      	ldr	r2, [r0, #0]
 800603a:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 800603e:	2300      	movs	r3, #0
 8006040:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8006044:	e7f7      	b.n	8006036 <_Balloc+0x58>

08006046 <_Bfree>:
 8006046:	b570      	push	{r4, r5, r6, lr}
 8006048:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800604a:	4606      	mov	r6, r0
 800604c:	460d      	mov	r5, r1
 800604e:	b93c      	cbnz	r4, 8006060 <_Bfree+0x1a>
 8006050:	2010      	movs	r0, #16
 8006052:	f7ff ffa3 	bl	8005f9c <malloc>
 8006056:	6270      	str	r0, [r6, #36]	; 0x24
 8006058:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800605c:	6004      	str	r4, [r0, #0]
 800605e:	60c4      	str	r4, [r0, #12]
 8006060:	b13d      	cbz	r5, 8006072 <_Bfree+0x2c>
 8006062:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8006064:	686a      	ldr	r2, [r5, #4]
 8006066:	68db      	ldr	r3, [r3, #12]
 8006068:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800606c:	6029      	str	r1, [r5, #0]
 800606e:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8006072:	bd70      	pop	{r4, r5, r6, pc}

08006074 <__multadd>:
 8006074:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006078:	461f      	mov	r7, r3
 800607a:	4606      	mov	r6, r0
 800607c:	460c      	mov	r4, r1
 800607e:	2300      	movs	r3, #0
 8006080:	690d      	ldr	r5, [r1, #16]
 8006082:	f101 0c14 	add.w	ip, r1, #20
 8006086:	f8dc 0000 	ldr.w	r0, [ip]
 800608a:	3301      	adds	r3, #1
 800608c:	b281      	uxth	r1, r0
 800608e:	fb02 7101 	mla	r1, r2, r1, r7
 8006092:	0c00      	lsrs	r0, r0, #16
 8006094:	0c0f      	lsrs	r7, r1, #16
 8006096:	fb02 7000 	mla	r0, r2, r0, r7
 800609a:	b289      	uxth	r1, r1
 800609c:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 80060a0:	429d      	cmp	r5, r3
 80060a2:	ea4f 4710 	mov.w	r7, r0, lsr #16
 80060a6:	f84c 1b04 	str.w	r1, [ip], #4
 80060aa:	dcec      	bgt.n	8006086 <__multadd+0x12>
 80060ac:	b1d7      	cbz	r7, 80060e4 <__multadd+0x70>
 80060ae:	68a3      	ldr	r3, [r4, #8]
 80060b0:	42ab      	cmp	r3, r5
 80060b2:	dc12      	bgt.n	80060da <__multadd+0x66>
 80060b4:	6861      	ldr	r1, [r4, #4]
 80060b6:	4630      	mov	r0, r6
 80060b8:	3101      	adds	r1, #1
 80060ba:	f7ff ff90 	bl	8005fde <_Balloc>
 80060be:	4680      	mov	r8, r0
 80060c0:	6922      	ldr	r2, [r4, #16]
 80060c2:	f104 010c 	add.w	r1, r4, #12
 80060c6:	3202      	adds	r2, #2
 80060c8:	0092      	lsls	r2, r2, #2
 80060ca:	300c      	adds	r0, #12
 80060cc:	f7ff ff7c 	bl	8005fc8 <memcpy>
 80060d0:	4621      	mov	r1, r4
 80060d2:	4630      	mov	r0, r6
 80060d4:	f7ff ffb7 	bl	8006046 <_Bfree>
 80060d8:	4644      	mov	r4, r8
 80060da:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80060de:	3501      	adds	r5, #1
 80060e0:	615f      	str	r7, [r3, #20]
 80060e2:	6125      	str	r5, [r4, #16]
 80060e4:	4620      	mov	r0, r4
 80060e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080060ea <__hi0bits>:
 80060ea:	0c02      	lsrs	r2, r0, #16
 80060ec:	0412      	lsls	r2, r2, #16
 80060ee:	4603      	mov	r3, r0
 80060f0:	b9b2      	cbnz	r2, 8006120 <__hi0bits+0x36>
 80060f2:	0403      	lsls	r3, r0, #16
 80060f4:	2010      	movs	r0, #16
 80060f6:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 80060fa:	bf04      	itt	eq
 80060fc:	021b      	lsleq	r3, r3, #8
 80060fe:	3008      	addeq	r0, #8
 8006100:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8006104:	bf04      	itt	eq
 8006106:	011b      	lsleq	r3, r3, #4
 8006108:	3004      	addeq	r0, #4
 800610a:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800610e:	bf04      	itt	eq
 8006110:	009b      	lsleq	r3, r3, #2
 8006112:	3002      	addeq	r0, #2
 8006114:	2b00      	cmp	r3, #0
 8006116:	db06      	blt.n	8006126 <__hi0bits+0x3c>
 8006118:	005b      	lsls	r3, r3, #1
 800611a:	d503      	bpl.n	8006124 <__hi0bits+0x3a>
 800611c:	3001      	adds	r0, #1
 800611e:	4770      	bx	lr
 8006120:	2000      	movs	r0, #0
 8006122:	e7e8      	b.n	80060f6 <__hi0bits+0xc>
 8006124:	2020      	movs	r0, #32
 8006126:	4770      	bx	lr

08006128 <__lo0bits>:
 8006128:	6803      	ldr	r3, [r0, #0]
 800612a:	4601      	mov	r1, r0
 800612c:	f013 0207 	ands.w	r2, r3, #7
 8006130:	d00b      	beq.n	800614a <__lo0bits+0x22>
 8006132:	07da      	lsls	r2, r3, #31
 8006134:	d423      	bmi.n	800617e <__lo0bits+0x56>
 8006136:	0798      	lsls	r0, r3, #30
 8006138:	bf49      	itett	mi
 800613a:	085b      	lsrmi	r3, r3, #1
 800613c:	089b      	lsrpl	r3, r3, #2
 800613e:	2001      	movmi	r0, #1
 8006140:	600b      	strmi	r3, [r1, #0]
 8006142:	bf5c      	itt	pl
 8006144:	600b      	strpl	r3, [r1, #0]
 8006146:	2002      	movpl	r0, #2
 8006148:	4770      	bx	lr
 800614a:	b298      	uxth	r0, r3
 800614c:	b9a8      	cbnz	r0, 800617a <__lo0bits+0x52>
 800614e:	2010      	movs	r0, #16
 8006150:	0c1b      	lsrs	r3, r3, #16
 8006152:	f013 0fff 	tst.w	r3, #255	; 0xff
 8006156:	bf04      	itt	eq
 8006158:	0a1b      	lsreq	r3, r3, #8
 800615a:	3008      	addeq	r0, #8
 800615c:	071a      	lsls	r2, r3, #28
 800615e:	bf04      	itt	eq
 8006160:	091b      	lsreq	r3, r3, #4
 8006162:	3004      	addeq	r0, #4
 8006164:	079a      	lsls	r2, r3, #30
 8006166:	bf04      	itt	eq
 8006168:	089b      	lsreq	r3, r3, #2
 800616a:	3002      	addeq	r0, #2
 800616c:	07da      	lsls	r2, r3, #31
 800616e:	d402      	bmi.n	8006176 <__lo0bits+0x4e>
 8006170:	085b      	lsrs	r3, r3, #1
 8006172:	d006      	beq.n	8006182 <__lo0bits+0x5a>
 8006174:	3001      	adds	r0, #1
 8006176:	600b      	str	r3, [r1, #0]
 8006178:	4770      	bx	lr
 800617a:	4610      	mov	r0, r2
 800617c:	e7e9      	b.n	8006152 <__lo0bits+0x2a>
 800617e:	2000      	movs	r0, #0
 8006180:	4770      	bx	lr
 8006182:	2020      	movs	r0, #32
 8006184:	4770      	bx	lr

08006186 <__i2b>:
 8006186:	b510      	push	{r4, lr}
 8006188:	460c      	mov	r4, r1
 800618a:	2101      	movs	r1, #1
 800618c:	f7ff ff27 	bl	8005fde <_Balloc>
 8006190:	2201      	movs	r2, #1
 8006192:	6144      	str	r4, [r0, #20]
 8006194:	6102      	str	r2, [r0, #16]
 8006196:	bd10      	pop	{r4, pc}

08006198 <__multiply>:
 8006198:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800619c:	4614      	mov	r4, r2
 800619e:	690a      	ldr	r2, [r1, #16]
 80061a0:	6923      	ldr	r3, [r4, #16]
 80061a2:	4688      	mov	r8, r1
 80061a4:	429a      	cmp	r2, r3
 80061a6:	bfbe      	ittt	lt
 80061a8:	460b      	movlt	r3, r1
 80061aa:	46a0      	movlt	r8, r4
 80061ac:	461c      	movlt	r4, r3
 80061ae:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80061b2:	f8d4 9010 	ldr.w	r9, [r4, #16]
 80061b6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80061ba:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80061be:	eb07 0609 	add.w	r6, r7, r9
 80061c2:	42b3      	cmp	r3, r6
 80061c4:	bfb8      	it	lt
 80061c6:	3101      	addlt	r1, #1
 80061c8:	f7ff ff09 	bl	8005fde <_Balloc>
 80061cc:	f100 0514 	add.w	r5, r0, #20
 80061d0:	462b      	mov	r3, r5
 80061d2:	2200      	movs	r2, #0
 80061d4:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 80061d8:	4573      	cmp	r3, lr
 80061da:	d316      	bcc.n	800620a <__multiply+0x72>
 80061dc:	f104 0214 	add.w	r2, r4, #20
 80061e0:	f108 0114 	add.w	r1, r8, #20
 80061e4:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 80061e8:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 80061ec:	9300      	str	r3, [sp, #0]
 80061ee:	9b00      	ldr	r3, [sp, #0]
 80061f0:	9201      	str	r2, [sp, #4]
 80061f2:	4293      	cmp	r3, r2
 80061f4:	d80c      	bhi.n	8006210 <__multiply+0x78>
 80061f6:	2e00      	cmp	r6, #0
 80061f8:	dd03      	ble.n	8006202 <__multiply+0x6a>
 80061fa:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 80061fe:	2b00      	cmp	r3, #0
 8006200:	d05d      	beq.n	80062be <__multiply+0x126>
 8006202:	6106      	str	r6, [r0, #16]
 8006204:	b003      	add	sp, #12
 8006206:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800620a:	f843 2b04 	str.w	r2, [r3], #4
 800620e:	e7e3      	b.n	80061d8 <__multiply+0x40>
 8006210:	f8b2 b000 	ldrh.w	fp, [r2]
 8006214:	f1bb 0f00 	cmp.w	fp, #0
 8006218:	d023      	beq.n	8006262 <__multiply+0xca>
 800621a:	4689      	mov	r9, r1
 800621c:	46ac      	mov	ip, r5
 800621e:	f04f 0800 	mov.w	r8, #0
 8006222:	f859 4b04 	ldr.w	r4, [r9], #4
 8006226:	f8dc a000 	ldr.w	sl, [ip]
 800622a:	b2a3      	uxth	r3, r4
 800622c:	fa1f fa8a 	uxth.w	sl, sl
 8006230:	fb0b a303 	mla	r3, fp, r3, sl
 8006234:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8006238:	f8dc 4000 	ldr.w	r4, [ip]
 800623c:	4443      	add	r3, r8
 800623e:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8006242:	fb0b 840a 	mla	r4, fp, sl, r8
 8006246:	46e2      	mov	sl, ip
 8006248:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 800624c:	b29b      	uxth	r3, r3
 800624e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8006252:	454f      	cmp	r7, r9
 8006254:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8006258:	f84a 3b04 	str.w	r3, [sl], #4
 800625c:	d82b      	bhi.n	80062b6 <__multiply+0x11e>
 800625e:	f8cc 8004 	str.w	r8, [ip, #4]
 8006262:	9b01      	ldr	r3, [sp, #4]
 8006264:	3204      	adds	r2, #4
 8006266:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 800626a:	f1ba 0f00 	cmp.w	sl, #0
 800626e:	d020      	beq.n	80062b2 <__multiply+0x11a>
 8006270:	4689      	mov	r9, r1
 8006272:	46a8      	mov	r8, r5
 8006274:	f04f 0b00 	mov.w	fp, #0
 8006278:	682b      	ldr	r3, [r5, #0]
 800627a:	f8b9 c000 	ldrh.w	ip, [r9]
 800627e:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 8006282:	b29b      	uxth	r3, r3
 8006284:	fb0a 440c 	mla	r4, sl, ip, r4
 8006288:	46c4      	mov	ip, r8
 800628a:	445c      	add	r4, fp
 800628c:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8006290:	f84c 3b04 	str.w	r3, [ip], #4
 8006294:	f859 3b04 	ldr.w	r3, [r9], #4
 8006298:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 800629c:	0c1b      	lsrs	r3, r3, #16
 800629e:	fb0a b303 	mla	r3, sl, r3, fp
 80062a2:	454f      	cmp	r7, r9
 80062a4:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 80062a8:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 80062ac:	d805      	bhi.n	80062ba <__multiply+0x122>
 80062ae:	f8c8 3004 	str.w	r3, [r8, #4]
 80062b2:	3504      	adds	r5, #4
 80062b4:	e79b      	b.n	80061ee <__multiply+0x56>
 80062b6:	46d4      	mov	ip, sl
 80062b8:	e7b3      	b.n	8006222 <__multiply+0x8a>
 80062ba:	46e0      	mov	r8, ip
 80062bc:	e7dd      	b.n	800627a <__multiply+0xe2>
 80062be:	3e01      	subs	r6, #1
 80062c0:	e799      	b.n	80061f6 <__multiply+0x5e>
	...

080062c4 <__pow5mult>:
 80062c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80062c8:	4615      	mov	r5, r2
 80062ca:	f012 0203 	ands.w	r2, r2, #3
 80062ce:	4606      	mov	r6, r0
 80062d0:	460f      	mov	r7, r1
 80062d2:	d007      	beq.n	80062e4 <__pow5mult+0x20>
 80062d4:	4c21      	ldr	r4, [pc, #132]	; (800635c <__pow5mult+0x98>)
 80062d6:	3a01      	subs	r2, #1
 80062d8:	2300      	movs	r3, #0
 80062da:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80062de:	f7ff fec9 	bl	8006074 <__multadd>
 80062e2:	4607      	mov	r7, r0
 80062e4:	10ad      	asrs	r5, r5, #2
 80062e6:	d035      	beq.n	8006354 <__pow5mult+0x90>
 80062e8:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80062ea:	b93c      	cbnz	r4, 80062fc <__pow5mult+0x38>
 80062ec:	2010      	movs	r0, #16
 80062ee:	f7ff fe55 	bl	8005f9c <malloc>
 80062f2:	6270      	str	r0, [r6, #36]	; 0x24
 80062f4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80062f8:	6004      	str	r4, [r0, #0]
 80062fa:	60c4      	str	r4, [r0, #12]
 80062fc:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8006300:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8006304:	b94c      	cbnz	r4, 800631a <__pow5mult+0x56>
 8006306:	f240 2171 	movw	r1, #625	; 0x271
 800630a:	4630      	mov	r0, r6
 800630c:	f7ff ff3b 	bl	8006186 <__i2b>
 8006310:	2300      	movs	r3, #0
 8006312:	4604      	mov	r4, r0
 8006314:	f8c8 0008 	str.w	r0, [r8, #8]
 8006318:	6003      	str	r3, [r0, #0]
 800631a:	f04f 0800 	mov.w	r8, #0
 800631e:	07eb      	lsls	r3, r5, #31
 8006320:	d50a      	bpl.n	8006338 <__pow5mult+0x74>
 8006322:	4639      	mov	r1, r7
 8006324:	4622      	mov	r2, r4
 8006326:	4630      	mov	r0, r6
 8006328:	f7ff ff36 	bl	8006198 <__multiply>
 800632c:	4681      	mov	r9, r0
 800632e:	4639      	mov	r1, r7
 8006330:	4630      	mov	r0, r6
 8006332:	f7ff fe88 	bl	8006046 <_Bfree>
 8006336:	464f      	mov	r7, r9
 8006338:	106d      	asrs	r5, r5, #1
 800633a:	d00b      	beq.n	8006354 <__pow5mult+0x90>
 800633c:	6820      	ldr	r0, [r4, #0]
 800633e:	b938      	cbnz	r0, 8006350 <__pow5mult+0x8c>
 8006340:	4622      	mov	r2, r4
 8006342:	4621      	mov	r1, r4
 8006344:	4630      	mov	r0, r6
 8006346:	f7ff ff27 	bl	8006198 <__multiply>
 800634a:	6020      	str	r0, [r4, #0]
 800634c:	f8c0 8000 	str.w	r8, [r0]
 8006350:	4604      	mov	r4, r0
 8006352:	e7e4      	b.n	800631e <__pow5mult+0x5a>
 8006354:	4638      	mov	r0, r7
 8006356:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800635a:	bf00      	nop
 800635c:	08008698 	.word	0x08008698

08006360 <__lshift>:
 8006360:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006364:	460c      	mov	r4, r1
 8006366:	4607      	mov	r7, r0
 8006368:	4616      	mov	r6, r2
 800636a:	6923      	ldr	r3, [r4, #16]
 800636c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8006370:	eb0a 0903 	add.w	r9, sl, r3
 8006374:	6849      	ldr	r1, [r1, #4]
 8006376:	68a3      	ldr	r3, [r4, #8]
 8006378:	f109 0501 	add.w	r5, r9, #1
 800637c:	42ab      	cmp	r3, r5
 800637e:	db32      	blt.n	80063e6 <__lshift+0x86>
 8006380:	4638      	mov	r0, r7
 8006382:	f7ff fe2c 	bl	8005fde <_Balloc>
 8006386:	2300      	movs	r3, #0
 8006388:	4680      	mov	r8, r0
 800638a:	461a      	mov	r2, r3
 800638c:	f100 0114 	add.w	r1, r0, #20
 8006390:	4553      	cmp	r3, sl
 8006392:	db2b      	blt.n	80063ec <__lshift+0x8c>
 8006394:	6920      	ldr	r0, [r4, #16]
 8006396:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800639a:	f104 0314 	add.w	r3, r4, #20
 800639e:	f016 021f 	ands.w	r2, r6, #31
 80063a2:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80063a6:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80063aa:	d025      	beq.n	80063f8 <__lshift+0x98>
 80063ac:	2000      	movs	r0, #0
 80063ae:	f1c2 0e20 	rsb	lr, r2, #32
 80063b2:	468a      	mov	sl, r1
 80063b4:	681e      	ldr	r6, [r3, #0]
 80063b6:	4096      	lsls	r6, r2
 80063b8:	4330      	orrs	r0, r6
 80063ba:	f84a 0b04 	str.w	r0, [sl], #4
 80063be:	f853 0b04 	ldr.w	r0, [r3], #4
 80063c2:	459c      	cmp	ip, r3
 80063c4:	fa20 f00e 	lsr.w	r0, r0, lr
 80063c8:	d814      	bhi.n	80063f4 <__lshift+0x94>
 80063ca:	6048      	str	r0, [r1, #4]
 80063cc:	b108      	cbz	r0, 80063d2 <__lshift+0x72>
 80063ce:	f109 0502 	add.w	r5, r9, #2
 80063d2:	3d01      	subs	r5, #1
 80063d4:	4638      	mov	r0, r7
 80063d6:	f8c8 5010 	str.w	r5, [r8, #16]
 80063da:	4621      	mov	r1, r4
 80063dc:	f7ff fe33 	bl	8006046 <_Bfree>
 80063e0:	4640      	mov	r0, r8
 80063e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80063e6:	3101      	adds	r1, #1
 80063e8:	005b      	lsls	r3, r3, #1
 80063ea:	e7c7      	b.n	800637c <__lshift+0x1c>
 80063ec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 80063f0:	3301      	adds	r3, #1
 80063f2:	e7cd      	b.n	8006390 <__lshift+0x30>
 80063f4:	4651      	mov	r1, sl
 80063f6:	e7dc      	b.n	80063b2 <__lshift+0x52>
 80063f8:	3904      	subs	r1, #4
 80063fa:	f853 2b04 	ldr.w	r2, [r3], #4
 80063fe:	459c      	cmp	ip, r3
 8006400:	f841 2f04 	str.w	r2, [r1, #4]!
 8006404:	d8f9      	bhi.n	80063fa <__lshift+0x9a>
 8006406:	e7e4      	b.n	80063d2 <__lshift+0x72>

08006408 <__mcmp>:
 8006408:	6903      	ldr	r3, [r0, #16]
 800640a:	690a      	ldr	r2, [r1, #16]
 800640c:	b530      	push	{r4, r5, lr}
 800640e:	1a9b      	subs	r3, r3, r2
 8006410:	d10c      	bne.n	800642c <__mcmp+0x24>
 8006412:	0092      	lsls	r2, r2, #2
 8006414:	3014      	adds	r0, #20
 8006416:	3114      	adds	r1, #20
 8006418:	1884      	adds	r4, r0, r2
 800641a:	4411      	add	r1, r2
 800641c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8006420:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8006424:	4295      	cmp	r5, r2
 8006426:	d003      	beq.n	8006430 <__mcmp+0x28>
 8006428:	d305      	bcc.n	8006436 <__mcmp+0x2e>
 800642a:	2301      	movs	r3, #1
 800642c:	4618      	mov	r0, r3
 800642e:	bd30      	pop	{r4, r5, pc}
 8006430:	42a0      	cmp	r0, r4
 8006432:	d3f3      	bcc.n	800641c <__mcmp+0x14>
 8006434:	e7fa      	b.n	800642c <__mcmp+0x24>
 8006436:	f04f 33ff 	mov.w	r3, #4294967295
 800643a:	e7f7      	b.n	800642c <__mcmp+0x24>

0800643c <__mdiff>:
 800643c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006440:	460d      	mov	r5, r1
 8006442:	4607      	mov	r7, r0
 8006444:	4611      	mov	r1, r2
 8006446:	4628      	mov	r0, r5
 8006448:	4614      	mov	r4, r2
 800644a:	f7ff ffdd 	bl	8006408 <__mcmp>
 800644e:	1e06      	subs	r6, r0, #0
 8006450:	d108      	bne.n	8006464 <__mdiff+0x28>
 8006452:	4631      	mov	r1, r6
 8006454:	4638      	mov	r0, r7
 8006456:	f7ff fdc2 	bl	8005fde <_Balloc>
 800645a:	2301      	movs	r3, #1
 800645c:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8006460:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006464:	bfa4      	itt	ge
 8006466:	4623      	movge	r3, r4
 8006468:	462c      	movge	r4, r5
 800646a:	4638      	mov	r0, r7
 800646c:	6861      	ldr	r1, [r4, #4]
 800646e:	bfa6      	itte	ge
 8006470:	461d      	movge	r5, r3
 8006472:	2600      	movge	r6, #0
 8006474:	2601      	movlt	r6, #1
 8006476:	f7ff fdb2 	bl	8005fde <_Balloc>
 800647a:	f04f 0e00 	mov.w	lr, #0
 800647e:	60c6      	str	r6, [r0, #12]
 8006480:	692b      	ldr	r3, [r5, #16]
 8006482:	6926      	ldr	r6, [r4, #16]
 8006484:	f104 0214 	add.w	r2, r4, #20
 8006488:	f105 0914 	add.w	r9, r5, #20
 800648c:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8006490:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8006494:	f100 0114 	add.w	r1, r0, #20
 8006498:	f852 ab04 	ldr.w	sl, [r2], #4
 800649c:	f859 5b04 	ldr.w	r5, [r9], #4
 80064a0:	fa1f f38a 	uxth.w	r3, sl
 80064a4:	4473      	add	r3, lr
 80064a6:	b2ac      	uxth	r4, r5
 80064a8:	1b1b      	subs	r3, r3, r4
 80064aa:	0c2c      	lsrs	r4, r5, #16
 80064ac:	ebc4 441a 	rsb	r4, r4, sl, lsr #16
 80064b0:	eb04 4423 	add.w	r4, r4, r3, asr #16
 80064b4:	b29b      	uxth	r3, r3
 80064b6:	ea4f 4e24 	mov.w	lr, r4, asr #16
 80064ba:	45c8      	cmp	r8, r9
 80064bc:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80064c0:	4694      	mov	ip, r2
 80064c2:	f841 4b04 	str.w	r4, [r1], #4
 80064c6:	d8e7      	bhi.n	8006498 <__mdiff+0x5c>
 80064c8:	45bc      	cmp	ip, r7
 80064ca:	d304      	bcc.n	80064d6 <__mdiff+0x9a>
 80064cc:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 80064d0:	b183      	cbz	r3, 80064f4 <__mdiff+0xb8>
 80064d2:	6106      	str	r6, [r0, #16]
 80064d4:	e7c4      	b.n	8006460 <__mdiff+0x24>
 80064d6:	f85c 4b04 	ldr.w	r4, [ip], #4
 80064da:	b2a2      	uxth	r2, r4
 80064dc:	4472      	add	r2, lr
 80064de:	1413      	asrs	r3, r2, #16
 80064e0:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 80064e4:	b292      	uxth	r2, r2
 80064e6:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 80064ea:	ea4f 4e23 	mov.w	lr, r3, asr #16
 80064ee:	f841 2b04 	str.w	r2, [r1], #4
 80064f2:	e7e9      	b.n	80064c8 <__mdiff+0x8c>
 80064f4:	3e01      	subs	r6, #1
 80064f6:	e7e9      	b.n	80064cc <__mdiff+0x90>

080064f8 <__d2b>:
 80064f8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80064fc:	461c      	mov	r4, r3
 80064fe:	e9dd 6508 	ldrd	r6, r5, [sp, #32]
 8006502:	2101      	movs	r1, #1
 8006504:	4690      	mov	r8, r2
 8006506:	f7ff fd6a 	bl	8005fde <_Balloc>
 800650a:	f3c4 0213 	ubfx	r2, r4, #0, #20
 800650e:	f3c4 540a 	ubfx	r4, r4, #20, #11
 8006512:	4607      	mov	r7, r0
 8006514:	bb34      	cbnz	r4, 8006564 <__d2b+0x6c>
 8006516:	9201      	str	r2, [sp, #4]
 8006518:	f1b8 0200 	subs.w	r2, r8, #0
 800651c:	d027      	beq.n	800656e <__d2b+0x76>
 800651e:	a802      	add	r0, sp, #8
 8006520:	f840 2d08 	str.w	r2, [r0, #-8]!
 8006524:	f7ff fe00 	bl	8006128 <__lo0bits>
 8006528:	9900      	ldr	r1, [sp, #0]
 800652a:	b1f0      	cbz	r0, 800656a <__d2b+0x72>
 800652c:	9a01      	ldr	r2, [sp, #4]
 800652e:	f1c0 0320 	rsb	r3, r0, #32
 8006532:	fa02 f303 	lsl.w	r3, r2, r3
 8006536:	430b      	orrs	r3, r1
 8006538:	40c2      	lsrs	r2, r0
 800653a:	617b      	str	r3, [r7, #20]
 800653c:	9201      	str	r2, [sp, #4]
 800653e:	9b01      	ldr	r3, [sp, #4]
 8006540:	2b00      	cmp	r3, #0
 8006542:	bf14      	ite	ne
 8006544:	2102      	movne	r1, #2
 8006546:	2101      	moveq	r1, #1
 8006548:	61bb      	str	r3, [r7, #24]
 800654a:	6139      	str	r1, [r7, #16]
 800654c:	b1c4      	cbz	r4, 8006580 <__d2b+0x88>
 800654e:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8006552:	4404      	add	r4, r0
 8006554:	6034      	str	r4, [r6, #0]
 8006556:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800655a:	6028      	str	r0, [r5, #0]
 800655c:	4638      	mov	r0, r7
 800655e:	b002      	add	sp, #8
 8006560:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006564:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8006568:	e7d5      	b.n	8006516 <__d2b+0x1e>
 800656a:	6179      	str	r1, [r7, #20]
 800656c:	e7e7      	b.n	800653e <__d2b+0x46>
 800656e:	a801      	add	r0, sp, #4
 8006570:	f7ff fdda 	bl	8006128 <__lo0bits>
 8006574:	2101      	movs	r1, #1
 8006576:	9b01      	ldr	r3, [sp, #4]
 8006578:	6139      	str	r1, [r7, #16]
 800657a:	617b      	str	r3, [r7, #20]
 800657c:	3020      	adds	r0, #32
 800657e:	e7e5      	b.n	800654c <__d2b+0x54>
 8006580:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8006584:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8006588:	6030      	str	r0, [r6, #0]
 800658a:	6918      	ldr	r0, [r3, #16]
 800658c:	f7ff fdad 	bl	80060ea <__hi0bits>
 8006590:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8006594:	e7e1      	b.n	800655a <__d2b+0x62>

08006596 <_calloc_r>:
 8006596:	b538      	push	{r3, r4, r5, lr}
 8006598:	fb02 f401 	mul.w	r4, r2, r1
 800659c:	4621      	mov	r1, r4
 800659e:	f000 f855 	bl	800664c <_malloc_r>
 80065a2:	4605      	mov	r5, r0
 80065a4:	b118      	cbz	r0, 80065ae <_calloc_r+0x18>
 80065a6:	4622      	mov	r2, r4
 80065a8:	2100      	movs	r1, #0
 80065aa:	f7fe fa1d 	bl	80049e8 <memset>
 80065ae:	4628      	mov	r0, r5
 80065b0:	bd38      	pop	{r3, r4, r5, pc}
	...

080065b4 <_free_r>:
 80065b4:	b538      	push	{r3, r4, r5, lr}
 80065b6:	4605      	mov	r5, r0
 80065b8:	2900      	cmp	r1, #0
 80065ba:	d043      	beq.n	8006644 <_free_r+0x90>
 80065bc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80065c0:	1f0c      	subs	r4, r1, #4
 80065c2:	2b00      	cmp	r3, #0
 80065c4:	bfb8      	it	lt
 80065c6:	18e4      	addlt	r4, r4, r3
 80065c8:	f000 fa27 	bl	8006a1a <__malloc_lock>
 80065cc:	4a1e      	ldr	r2, [pc, #120]	; (8006648 <_free_r+0x94>)
 80065ce:	6813      	ldr	r3, [r2, #0]
 80065d0:	4610      	mov	r0, r2
 80065d2:	b933      	cbnz	r3, 80065e2 <_free_r+0x2e>
 80065d4:	6063      	str	r3, [r4, #4]
 80065d6:	6014      	str	r4, [r2, #0]
 80065d8:	4628      	mov	r0, r5
 80065da:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80065de:	f000 ba1d 	b.w	8006a1c <__malloc_unlock>
 80065e2:	42a3      	cmp	r3, r4
 80065e4:	d90b      	bls.n	80065fe <_free_r+0x4a>
 80065e6:	6821      	ldr	r1, [r4, #0]
 80065e8:	1862      	adds	r2, r4, r1
 80065ea:	4293      	cmp	r3, r2
 80065ec:	bf01      	itttt	eq
 80065ee:	681a      	ldreq	r2, [r3, #0]
 80065f0:	685b      	ldreq	r3, [r3, #4]
 80065f2:	1852      	addeq	r2, r2, r1
 80065f4:	6022      	streq	r2, [r4, #0]
 80065f6:	6063      	str	r3, [r4, #4]
 80065f8:	6004      	str	r4, [r0, #0]
 80065fa:	e7ed      	b.n	80065d8 <_free_r+0x24>
 80065fc:	4613      	mov	r3, r2
 80065fe:	685a      	ldr	r2, [r3, #4]
 8006600:	b10a      	cbz	r2, 8006606 <_free_r+0x52>
 8006602:	42a2      	cmp	r2, r4
 8006604:	d9fa      	bls.n	80065fc <_free_r+0x48>
 8006606:	6819      	ldr	r1, [r3, #0]
 8006608:	1858      	adds	r0, r3, r1
 800660a:	42a0      	cmp	r0, r4
 800660c:	d10b      	bne.n	8006626 <_free_r+0x72>
 800660e:	6820      	ldr	r0, [r4, #0]
 8006610:	4401      	add	r1, r0
 8006612:	1858      	adds	r0, r3, r1
 8006614:	4282      	cmp	r2, r0
 8006616:	6019      	str	r1, [r3, #0]
 8006618:	d1de      	bne.n	80065d8 <_free_r+0x24>
 800661a:	6810      	ldr	r0, [r2, #0]
 800661c:	6852      	ldr	r2, [r2, #4]
 800661e:	4401      	add	r1, r0
 8006620:	6019      	str	r1, [r3, #0]
 8006622:	605a      	str	r2, [r3, #4]
 8006624:	e7d8      	b.n	80065d8 <_free_r+0x24>
 8006626:	d902      	bls.n	800662e <_free_r+0x7a>
 8006628:	230c      	movs	r3, #12
 800662a:	602b      	str	r3, [r5, #0]
 800662c:	e7d4      	b.n	80065d8 <_free_r+0x24>
 800662e:	6820      	ldr	r0, [r4, #0]
 8006630:	1821      	adds	r1, r4, r0
 8006632:	428a      	cmp	r2, r1
 8006634:	bf01      	itttt	eq
 8006636:	6811      	ldreq	r1, [r2, #0]
 8006638:	6852      	ldreq	r2, [r2, #4]
 800663a:	1809      	addeq	r1, r1, r0
 800663c:	6021      	streq	r1, [r4, #0]
 800663e:	6062      	str	r2, [r4, #4]
 8006640:	605c      	str	r4, [r3, #4]
 8006642:	e7c9      	b.n	80065d8 <_free_r+0x24>
 8006644:	bd38      	pop	{r3, r4, r5, pc}
 8006646:	bf00      	nop
 8006648:	200006d0 	.word	0x200006d0

0800664c <_malloc_r>:
 800664c:	b570      	push	{r4, r5, r6, lr}
 800664e:	1ccd      	adds	r5, r1, #3
 8006650:	f025 0503 	bic.w	r5, r5, #3
 8006654:	3508      	adds	r5, #8
 8006656:	2d0c      	cmp	r5, #12
 8006658:	bf38      	it	cc
 800665a:	250c      	movcc	r5, #12
 800665c:	2d00      	cmp	r5, #0
 800665e:	4606      	mov	r6, r0
 8006660:	db01      	blt.n	8006666 <_malloc_r+0x1a>
 8006662:	42a9      	cmp	r1, r5
 8006664:	d903      	bls.n	800666e <_malloc_r+0x22>
 8006666:	230c      	movs	r3, #12
 8006668:	6033      	str	r3, [r6, #0]
 800666a:	2000      	movs	r0, #0
 800666c:	bd70      	pop	{r4, r5, r6, pc}
 800666e:	f000 f9d4 	bl	8006a1a <__malloc_lock>
 8006672:	4a21      	ldr	r2, [pc, #132]	; (80066f8 <_malloc_r+0xac>)
 8006674:	6814      	ldr	r4, [r2, #0]
 8006676:	4621      	mov	r1, r4
 8006678:	b991      	cbnz	r1, 80066a0 <_malloc_r+0x54>
 800667a:	4c20      	ldr	r4, [pc, #128]	; (80066fc <_malloc_r+0xb0>)
 800667c:	6823      	ldr	r3, [r4, #0]
 800667e:	b91b      	cbnz	r3, 8006688 <_malloc_r+0x3c>
 8006680:	4630      	mov	r0, r6
 8006682:	f000 f98f 	bl	80069a4 <_sbrk_r>
 8006686:	6020      	str	r0, [r4, #0]
 8006688:	4629      	mov	r1, r5
 800668a:	4630      	mov	r0, r6
 800668c:	f000 f98a 	bl	80069a4 <_sbrk_r>
 8006690:	1c43      	adds	r3, r0, #1
 8006692:	d124      	bne.n	80066de <_malloc_r+0x92>
 8006694:	230c      	movs	r3, #12
 8006696:	4630      	mov	r0, r6
 8006698:	6033      	str	r3, [r6, #0]
 800669a:	f000 f9bf 	bl	8006a1c <__malloc_unlock>
 800669e:	e7e4      	b.n	800666a <_malloc_r+0x1e>
 80066a0:	680b      	ldr	r3, [r1, #0]
 80066a2:	1b5b      	subs	r3, r3, r5
 80066a4:	d418      	bmi.n	80066d8 <_malloc_r+0x8c>
 80066a6:	2b0b      	cmp	r3, #11
 80066a8:	d90f      	bls.n	80066ca <_malloc_r+0x7e>
 80066aa:	600b      	str	r3, [r1, #0]
 80066ac:	18cc      	adds	r4, r1, r3
 80066ae:	50cd      	str	r5, [r1, r3]
 80066b0:	4630      	mov	r0, r6
 80066b2:	f000 f9b3 	bl	8006a1c <__malloc_unlock>
 80066b6:	f104 000b 	add.w	r0, r4, #11
 80066ba:	1d23      	adds	r3, r4, #4
 80066bc:	f020 0007 	bic.w	r0, r0, #7
 80066c0:	1ac3      	subs	r3, r0, r3
 80066c2:	d0d3      	beq.n	800666c <_malloc_r+0x20>
 80066c4:	425a      	negs	r2, r3
 80066c6:	50e2      	str	r2, [r4, r3]
 80066c8:	e7d0      	b.n	800666c <_malloc_r+0x20>
 80066ca:	684b      	ldr	r3, [r1, #4]
 80066cc:	428c      	cmp	r4, r1
 80066ce:	bf16      	itet	ne
 80066d0:	6063      	strne	r3, [r4, #4]
 80066d2:	6013      	streq	r3, [r2, #0]
 80066d4:	460c      	movne	r4, r1
 80066d6:	e7eb      	b.n	80066b0 <_malloc_r+0x64>
 80066d8:	460c      	mov	r4, r1
 80066da:	6849      	ldr	r1, [r1, #4]
 80066dc:	e7cc      	b.n	8006678 <_malloc_r+0x2c>
 80066de:	1cc4      	adds	r4, r0, #3
 80066e0:	f024 0403 	bic.w	r4, r4, #3
 80066e4:	42a0      	cmp	r0, r4
 80066e6:	d005      	beq.n	80066f4 <_malloc_r+0xa8>
 80066e8:	1a21      	subs	r1, r4, r0
 80066ea:	4630      	mov	r0, r6
 80066ec:	f000 f95a 	bl	80069a4 <_sbrk_r>
 80066f0:	3001      	adds	r0, #1
 80066f2:	d0cf      	beq.n	8006694 <_malloc_r+0x48>
 80066f4:	6025      	str	r5, [r4, #0]
 80066f6:	e7db      	b.n	80066b0 <_malloc_r+0x64>
 80066f8:	200006d0 	.word	0x200006d0
 80066fc:	200006d4 	.word	0x200006d4

08006700 <__ssputs_r>:
 8006700:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006704:	688e      	ldr	r6, [r1, #8]
 8006706:	4682      	mov	sl, r0
 8006708:	429e      	cmp	r6, r3
 800670a:	460c      	mov	r4, r1
 800670c:	4690      	mov	r8, r2
 800670e:	4699      	mov	r9, r3
 8006710:	d837      	bhi.n	8006782 <__ssputs_r+0x82>
 8006712:	898a      	ldrh	r2, [r1, #12]
 8006714:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006718:	d031      	beq.n	800677e <__ssputs_r+0x7e>
 800671a:	2302      	movs	r3, #2
 800671c:	6825      	ldr	r5, [r4, #0]
 800671e:	6909      	ldr	r1, [r1, #16]
 8006720:	1a6f      	subs	r7, r5, r1
 8006722:	6965      	ldr	r5, [r4, #20]
 8006724:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006728:	fb95 f5f3 	sdiv	r5, r5, r3
 800672c:	f109 0301 	add.w	r3, r9, #1
 8006730:	443b      	add	r3, r7
 8006732:	429d      	cmp	r5, r3
 8006734:	bf38      	it	cc
 8006736:	461d      	movcc	r5, r3
 8006738:	0553      	lsls	r3, r2, #21
 800673a:	d530      	bpl.n	800679e <__ssputs_r+0x9e>
 800673c:	4629      	mov	r1, r5
 800673e:	f7ff ff85 	bl	800664c <_malloc_r>
 8006742:	4606      	mov	r6, r0
 8006744:	b950      	cbnz	r0, 800675c <__ssputs_r+0x5c>
 8006746:	230c      	movs	r3, #12
 8006748:	f04f 30ff 	mov.w	r0, #4294967295
 800674c:	f8ca 3000 	str.w	r3, [sl]
 8006750:	89a3      	ldrh	r3, [r4, #12]
 8006752:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006756:	81a3      	strh	r3, [r4, #12]
 8006758:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800675c:	463a      	mov	r2, r7
 800675e:	6921      	ldr	r1, [r4, #16]
 8006760:	f7ff fc32 	bl	8005fc8 <memcpy>
 8006764:	89a3      	ldrh	r3, [r4, #12]
 8006766:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800676a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800676e:	81a3      	strh	r3, [r4, #12]
 8006770:	6126      	str	r6, [r4, #16]
 8006772:	443e      	add	r6, r7
 8006774:	6026      	str	r6, [r4, #0]
 8006776:	464e      	mov	r6, r9
 8006778:	6165      	str	r5, [r4, #20]
 800677a:	1bed      	subs	r5, r5, r7
 800677c:	60a5      	str	r5, [r4, #8]
 800677e:	454e      	cmp	r6, r9
 8006780:	d900      	bls.n	8006784 <__ssputs_r+0x84>
 8006782:	464e      	mov	r6, r9
 8006784:	4632      	mov	r2, r6
 8006786:	4641      	mov	r1, r8
 8006788:	6820      	ldr	r0, [r4, #0]
 800678a:	f000 f92d 	bl	80069e8 <memmove>
 800678e:	68a3      	ldr	r3, [r4, #8]
 8006790:	2000      	movs	r0, #0
 8006792:	1b9b      	subs	r3, r3, r6
 8006794:	60a3      	str	r3, [r4, #8]
 8006796:	6823      	ldr	r3, [r4, #0]
 8006798:	441e      	add	r6, r3
 800679a:	6026      	str	r6, [r4, #0]
 800679c:	e7dc      	b.n	8006758 <__ssputs_r+0x58>
 800679e:	462a      	mov	r2, r5
 80067a0:	f000 f93d 	bl	8006a1e <_realloc_r>
 80067a4:	4606      	mov	r6, r0
 80067a6:	2800      	cmp	r0, #0
 80067a8:	d1e2      	bne.n	8006770 <__ssputs_r+0x70>
 80067aa:	6921      	ldr	r1, [r4, #16]
 80067ac:	4650      	mov	r0, sl
 80067ae:	f7ff ff01 	bl	80065b4 <_free_r>
 80067b2:	e7c8      	b.n	8006746 <__ssputs_r+0x46>

080067b4 <_svfiprintf_r>:
 80067b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80067b8:	461d      	mov	r5, r3
 80067ba:	898b      	ldrh	r3, [r1, #12]
 80067bc:	b09d      	sub	sp, #116	; 0x74
 80067be:	061f      	lsls	r7, r3, #24
 80067c0:	4680      	mov	r8, r0
 80067c2:	460c      	mov	r4, r1
 80067c4:	4616      	mov	r6, r2
 80067c6:	d50f      	bpl.n	80067e8 <_svfiprintf_r+0x34>
 80067c8:	690b      	ldr	r3, [r1, #16]
 80067ca:	b96b      	cbnz	r3, 80067e8 <_svfiprintf_r+0x34>
 80067cc:	2140      	movs	r1, #64	; 0x40
 80067ce:	f7ff ff3d 	bl	800664c <_malloc_r>
 80067d2:	6020      	str	r0, [r4, #0]
 80067d4:	6120      	str	r0, [r4, #16]
 80067d6:	b928      	cbnz	r0, 80067e4 <_svfiprintf_r+0x30>
 80067d8:	230c      	movs	r3, #12
 80067da:	f8c8 3000 	str.w	r3, [r8]
 80067de:	f04f 30ff 	mov.w	r0, #4294967295
 80067e2:	e0c8      	b.n	8006976 <_svfiprintf_r+0x1c2>
 80067e4:	2340      	movs	r3, #64	; 0x40
 80067e6:	6163      	str	r3, [r4, #20]
 80067e8:	2300      	movs	r3, #0
 80067ea:	9309      	str	r3, [sp, #36]	; 0x24
 80067ec:	2320      	movs	r3, #32
 80067ee:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80067f2:	2330      	movs	r3, #48	; 0x30
 80067f4:	f04f 0b01 	mov.w	fp, #1
 80067f8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80067fc:	9503      	str	r5, [sp, #12]
 80067fe:	4637      	mov	r7, r6
 8006800:	463d      	mov	r5, r7
 8006802:	f815 3b01 	ldrb.w	r3, [r5], #1
 8006806:	b10b      	cbz	r3, 800680c <_svfiprintf_r+0x58>
 8006808:	2b25      	cmp	r3, #37	; 0x25
 800680a:	d13e      	bne.n	800688a <_svfiprintf_r+0xd6>
 800680c:	ebb7 0a06 	subs.w	sl, r7, r6
 8006810:	d00b      	beq.n	800682a <_svfiprintf_r+0x76>
 8006812:	4653      	mov	r3, sl
 8006814:	4632      	mov	r2, r6
 8006816:	4621      	mov	r1, r4
 8006818:	4640      	mov	r0, r8
 800681a:	f7ff ff71 	bl	8006700 <__ssputs_r>
 800681e:	3001      	adds	r0, #1
 8006820:	f000 80a4 	beq.w	800696c <_svfiprintf_r+0x1b8>
 8006824:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006826:	4453      	add	r3, sl
 8006828:	9309      	str	r3, [sp, #36]	; 0x24
 800682a:	783b      	ldrb	r3, [r7, #0]
 800682c:	2b00      	cmp	r3, #0
 800682e:	f000 809d 	beq.w	800696c <_svfiprintf_r+0x1b8>
 8006832:	2300      	movs	r3, #0
 8006834:	f04f 32ff 	mov.w	r2, #4294967295
 8006838:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800683c:	9304      	str	r3, [sp, #16]
 800683e:	9307      	str	r3, [sp, #28]
 8006840:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006844:	931a      	str	r3, [sp, #104]	; 0x68
 8006846:	462f      	mov	r7, r5
 8006848:	2205      	movs	r2, #5
 800684a:	f817 1b01 	ldrb.w	r1, [r7], #1
 800684e:	4850      	ldr	r0, [pc, #320]	; (8006990 <_svfiprintf_r+0x1dc>)
 8006850:	f7ff fbac 	bl	8005fac <memchr>
 8006854:	9b04      	ldr	r3, [sp, #16]
 8006856:	b9d0      	cbnz	r0, 800688e <_svfiprintf_r+0xda>
 8006858:	06d9      	lsls	r1, r3, #27
 800685a:	bf44      	itt	mi
 800685c:	2220      	movmi	r2, #32
 800685e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8006862:	071a      	lsls	r2, r3, #28
 8006864:	bf44      	itt	mi
 8006866:	222b      	movmi	r2, #43	; 0x2b
 8006868:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800686c:	782a      	ldrb	r2, [r5, #0]
 800686e:	2a2a      	cmp	r2, #42	; 0x2a
 8006870:	d015      	beq.n	800689e <_svfiprintf_r+0xea>
 8006872:	462f      	mov	r7, r5
 8006874:	2000      	movs	r0, #0
 8006876:	250a      	movs	r5, #10
 8006878:	9a07      	ldr	r2, [sp, #28]
 800687a:	4639      	mov	r1, r7
 800687c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006880:	3b30      	subs	r3, #48	; 0x30
 8006882:	2b09      	cmp	r3, #9
 8006884:	d94d      	bls.n	8006922 <_svfiprintf_r+0x16e>
 8006886:	b1b8      	cbz	r0, 80068b8 <_svfiprintf_r+0x104>
 8006888:	e00f      	b.n	80068aa <_svfiprintf_r+0xf6>
 800688a:	462f      	mov	r7, r5
 800688c:	e7b8      	b.n	8006800 <_svfiprintf_r+0x4c>
 800688e:	4a40      	ldr	r2, [pc, #256]	; (8006990 <_svfiprintf_r+0x1dc>)
 8006890:	463d      	mov	r5, r7
 8006892:	1a80      	subs	r0, r0, r2
 8006894:	fa0b f000 	lsl.w	r0, fp, r0
 8006898:	4318      	orrs	r0, r3
 800689a:	9004      	str	r0, [sp, #16]
 800689c:	e7d3      	b.n	8006846 <_svfiprintf_r+0x92>
 800689e:	9a03      	ldr	r2, [sp, #12]
 80068a0:	1d11      	adds	r1, r2, #4
 80068a2:	6812      	ldr	r2, [r2, #0]
 80068a4:	9103      	str	r1, [sp, #12]
 80068a6:	2a00      	cmp	r2, #0
 80068a8:	db01      	blt.n	80068ae <_svfiprintf_r+0xfa>
 80068aa:	9207      	str	r2, [sp, #28]
 80068ac:	e004      	b.n	80068b8 <_svfiprintf_r+0x104>
 80068ae:	4252      	negs	r2, r2
 80068b0:	f043 0302 	orr.w	r3, r3, #2
 80068b4:	9207      	str	r2, [sp, #28]
 80068b6:	9304      	str	r3, [sp, #16]
 80068b8:	783b      	ldrb	r3, [r7, #0]
 80068ba:	2b2e      	cmp	r3, #46	; 0x2e
 80068bc:	d10c      	bne.n	80068d8 <_svfiprintf_r+0x124>
 80068be:	787b      	ldrb	r3, [r7, #1]
 80068c0:	2b2a      	cmp	r3, #42	; 0x2a
 80068c2:	d133      	bne.n	800692c <_svfiprintf_r+0x178>
 80068c4:	9b03      	ldr	r3, [sp, #12]
 80068c6:	3702      	adds	r7, #2
 80068c8:	1d1a      	adds	r2, r3, #4
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	9203      	str	r2, [sp, #12]
 80068ce:	2b00      	cmp	r3, #0
 80068d0:	bfb8      	it	lt
 80068d2:	f04f 33ff 	movlt.w	r3, #4294967295
 80068d6:	9305      	str	r3, [sp, #20]
 80068d8:	4d2e      	ldr	r5, [pc, #184]	; (8006994 <_svfiprintf_r+0x1e0>)
 80068da:	2203      	movs	r2, #3
 80068dc:	7839      	ldrb	r1, [r7, #0]
 80068de:	4628      	mov	r0, r5
 80068e0:	f7ff fb64 	bl	8005fac <memchr>
 80068e4:	b138      	cbz	r0, 80068f6 <_svfiprintf_r+0x142>
 80068e6:	2340      	movs	r3, #64	; 0x40
 80068e8:	1b40      	subs	r0, r0, r5
 80068ea:	fa03 f000 	lsl.w	r0, r3, r0
 80068ee:	9b04      	ldr	r3, [sp, #16]
 80068f0:	3701      	adds	r7, #1
 80068f2:	4303      	orrs	r3, r0
 80068f4:	9304      	str	r3, [sp, #16]
 80068f6:	7839      	ldrb	r1, [r7, #0]
 80068f8:	2206      	movs	r2, #6
 80068fa:	4827      	ldr	r0, [pc, #156]	; (8006998 <_svfiprintf_r+0x1e4>)
 80068fc:	1c7e      	adds	r6, r7, #1
 80068fe:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006902:	f7ff fb53 	bl	8005fac <memchr>
 8006906:	2800      	cmp	r0, #0
 8006908:	d038      	beq.n	800697c <_svfiprintf_r+0x1c8>
 800690a:	4b24      	ldr	r3, [pc, #144]	; (800699c <_svfiprintf_r+0x1e8>)
 800690c:	bb13      	cbnz	r3, 8006954 <_svfiprintf_r+0x1a0>
 800690e:	9b03      	ldr	r3, [sp, #12]
 8006910:	3307      	adds	r3, #7
 8006912:	f023 0307 	bic.w	r3, r3, #7
 8006916:	3308      	adds	r3, #8
 8006918:	9303      	str	r3, [sp, #12]
 800691a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800691c:	444b      	add	r3, r9
 800691e:	9309      	str	r3, [sp, #36]	; 0x24
 8006920:	e76d      	b.n	80067fe <_svfiprintf_r+0x4a>
 8006922:	fb05 3202 	mla	r2, r5, r2, r3
 8006926:	2001      	movs	r0, #1
 8006928:	460f      	mov	r7, r1
 800692a:	e7a6      	b.n	800687a <_svfiprintf_r+0xc6>
 800692c:	2300      	movs	r3, #0
 800692e:	250a      	movs	r5, #10
 8006930:	4619      	mov	r1, r3
 8006932:	3701      	adds	r7, #1
 8006934:	9305      	str	r3, [sp, #20]
 8006936:	4638      	mov	r0, r7
 8006938:	f810 2b01 	ldrb.w	r2, [r0], #1
 800693c:	3a30      	subs	r2, #48	; 0x30
 800693e:	2a09      	cmp	r2, #9
 8006940:	d903      	bls.n	800694a <_svfiprintf_r+0x196>
 8006942:	2b00      	cmp	r3, #0
 8006944:	d0c8      	beq.n	80068d8 <_svfiprintf_r+0x124>
 8006946:	9105      	str	r1, [sp, #20]
 8006948:	e7c6      	b.n	80068d8 <_svfiprintf_r+0x124>
 800694a:	fb05 2101 	mla	r1, r5, r1, r2
 800694e:	2301      	movs	r3, #1
 8006950:	4607      	mov	r7, r0
 8006952:	e7f0      	b.n	8006936 <_svfiprintf_r+0x182>
 8006954:	ab03      	add	r3, sp, #12
 8006956:	9300      	str	r3, [sp, #0]
 8006958:	4622      	mov	r2, r4
 800695a:	4b11      	ldr	r3, [pc, #68]	; (80069a0 <_svfiprintf_r+0x1ec>)
 800695c:	a904      	add	r1, sp, #16
 800695e:	4640      	mov	r0, r8
 8006960:	f7fe f8dc 	bl	8004b1c <_printf_float>
 8006964:	f1b0 3fff 	cmp.w	r0, #4294967295
 8006968:	4681      	mov	r9, r0
 800696a:	d1d6      	bne.n	800691a <_svfiprintf_r+0x166>
 800696c:	89a3      	ldrh	r3, [r4, #12]
 800696e:	065b      	lsls	r3, r3, #25
 8006970:	f53f af35 	bmi.w	80067de <_svfiprintf_r+0x2a>
 8006974:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006976:	b01d      	add	sp, #116	; 0x74
 8006978:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800697c:	ab03      	add	r3, sp, #12
 800697e:	9300      	str	r3, [sp, #0]
 8006980:	4622      	mov	r2, r4
 8006982:	4b07      	ldr	r3, [pc, #28]	; (80069a0 <_svfiprintf_r+0x1ec>)
 8006984:	a904      	add	r1, sp, #16
 8006986:	4640      	mov	r0, r8
 8006988:	f7fe fb74 	bl	8005074 <_printf_i>
 800698c:	e7ea      	b.n	8006964 <_svfiprintf_r+0x1b0>
 800698e:	bf00      	nop
 8006990:	080086a4 	.word	0x080086a4
 8006994:	080086aa 	.word	0x080086aa
 8006998:	080086ae 	.word	0x080086ae
 800699c:	08004b1d 	.word	0x08004b1d
 80069a0:	08006701 	.word	0x08006701

080069a4 <_sbrk_r>:
 80069a4:	b538      	push	{r3, r4, r5, lr}
 80069a6:	2300      	movs	r3, #0
 80069a8:	4c05      	ldr	r4, [pc, #20]	; (80069c0 <_sbrk_r+0x1c>)
 80069aa:	4605      	mov	r5, r0
 80069ac:	4608      	mov	r0, r1
 80069ae:	6023      	str	r3, [r4, #0]
 80069b0:	f7fb fd68 	bl	8002484 <_sbrk>
 80069b4:	1c43      	adds	r3, r0, #1
 80069b6:	d102      	bne.n	80069be <_sbrk_r+0x1a>
 80069b8:	6823      	ldr	r3, [r4, #0]
 80069ba:	b103      	cbz	r3, 80069be <_sbrk_r+0x1a>
 80069bc:	602b      	str	r3, [r5, #0]
 80069be:	bd38      	pop	{r3, r4, r5, pc}
 80069c0:	200008b0 	.word	0x200008b0

080069c4 <__ascii_mbtowc>:
 80069c4:	b082      	sub	sp, #8
 80069c6:	b901      	cbnz	r1, 80069ca <__ascii_mbtowc+0x6>
 80069c8:	a901      	add	r1, sp, #4
 80069ca:	b142      	cbz	r2, 80069de <__ascii_mbtowc+0x1a>
 80069cc:	b14b      	cbz	r3, 80069e2 <__ascii_mbtowc+0x1e>
 80069ce:	7813      	ldrb	r3, [r2, #0]
 80069d0:	600b      	str	r3, [r1, #0]
 80069d2:	7812      	ldrb	r2, [r2, #0]
 80069d4:	1c10      	adds	r0, r2, #0
 80069d6:	bf18      	it	ne
 80069d8:	2001      	movne	r0, #1
 80069da:	b002      	add	sp, #8
 80069dc:	4770      	bx	lr
 80069de:	4610      	mov	r0, r2
 80069e0:	e7fb      	b.n	80069da <__ascii_mbtowc+0x16>
 80069e2:	f06f 0001 	mvn.w	r0, #1
 80069e6:	e7f8      	b.n	80069da <__ascii_mbtowc+0x16>

080069e8 <memmove>:
 80069e8:	4288      	cmp	r0, r1
 80069ea:	b510      	push	{r4, lr}
 80069ec:	eb01 0302 	add.w	r3, r1, r2
 80069f0:	d807      	bhi.n	8006a02 <memmove+0x1a>
 80069f2:	1e42      	subs	r2, r0, #1
 80069f4:	4299      	cmp	r1, r3
 80069f6:	d00a      	beq.n	8006a0e <memmove+0x26>
 80069f8:	f811 4b01 	ldrb.w	r4, [r1], #1
 80069fc:	f802 4f01 	strb.w	r4, [r2, #1]!
 8006a00:	e7f8      	b.n	80069f4 <memmove+0xc>
 8006a02:	4283      	cmp	r3, r0
 8006a04:	d9f5      	bls.n	80069f2 <memmove+0xa>
 8006a06:	1881      	adds	r1, r0, r2
 8006a08:	1ad2      	subs	r2, r2, r3
 8006a0a:	42d3      	cmn	r3, r2
 8006a0c:	d100      	bne.n	8006a10 <memmove+0x28>
 8006a0e:	bd10      	pop	{r4, pc}
 8006a10:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006a14:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8006a18:	e7f7      	b.n	8006a0a <memmove+0x22>

08006a1a <__malloc_lock>:
 8006a1a:	4770      	bx	lr

08006a1c <__malloc_unlock>:
 8006a1c:	4770      	bx	lr

08006a1e <_realloc_r>:
 8006a1e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006a20:	4607      	mov	r7, r0
 8006a22:	4614      	mov	r4, r2
 8006a24:	460e      	mov	r6, r1
 8006a26:	b921      	cbnz	r1, 8006a32 <_realloc_r+0x14>
 8006a28:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8006a2c:	4611      	mov	r1, r2
 8006a2e:	f7ff be0d 	b.w	800664c <_malloc_r>
 8006a32:	b922      	cbnz	r2, 8006a3e <_realloc_r+0x20>
 8006a34:	f7ff fdbe 	bl	80065b4 <_free_r>
 8006a38:	4625      	mov	r5, r4
 8006a3a:	4628      	mov	r0, r5
 8006a3c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006a3e:	f000 f821 	bl	8006a84 <_malloc_usable_size_r>
 8006a42:	42a0      	cmp	r0, r4
 8006a44:	d20f      	bcs.n	8006a66 <_realloc_r+0x48>
 8006a46:	4621      	mov	r1, r4
 8006a48:	4638      	mov	r0, r7
 8006a4a:	f7ff fdff 	bl	800664c <_malloc_r>
 8006a4e:	4605      	mov	r5, r0
 8006a50:	2800      	cmp	r0, #0
 8006a52:	d0f2      	beq.n	8006a3a <_realloc_r+0x1c>
 8006a54:	4631      	mov	r1, r6
 8006a56:	4622      	mov	r2, r4
 8006a58:	f7ff fab6 	bl	8005fc8 <memcpy>
 8006a5c:	4631      	mov	r1, r6
 8006a5e:	4638      	mov	r0, r7
 8006a60:	f7ff fda8 	bl	80065b4 <_free_r>
 8006a64:	e7e9      	b.n	8006a3a <_realloc_r+0x1c>
 8006a66:	4635      	mov	r5, r6
 8006a68:	e7e7      	b.n	8006a3a <_realloc_r+0x1c>

08006a6a <__ascii_wctomb>:
 8006a6a:	b149      	cbz	r1, 8006a80 <__ascii_wctomb+0x16>
 8006a6c:	2aff      	cmp	r2, #255	; 0xff
 8006a6e:	bf8b      	itete	hi
 8006a70:	238a      	movhi	r3, #138	; 0x8a
 8006a72:	700a      	strbls	r2, [r1, #0]
 8006a74:	6003      	strhi	r3, [r0, #0]
 8006a76:	2001      	movls	r0, #1
 8006a78:	bf88      	it	hi
 8006a7a:	f04f 30ff 	movhi.w	r0, #4294967295
 8006a7e:	4770      	bx	lr
 8006a80:	4608      	mov	r0, r1
 8006a82:	4770      	bx	lr

08006a84 <_malloc_usable_size_r>:
 8006a84:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006a88:	1f18      	subs	r0, r3, #4
 8006a8a:	2b00      	cmp	r3, #0
 8006a8c:	bfbc      	itt	lt
 8006a8e:	580b      	ldrlt	r3, [r1, r0]
 8006a90:	18c0      	addlt	r0, r0, r3
 8006a92:	4770      	bx	lr
 8006a94:	0000      	movs	r0, r0
	...

08006a98 <atan>:
 8006a98:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006a9c:	4bb6      	ldr	r3, [pc, #728]	; (8006d78 <atan+0x2e0>)
 8006a9e:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8006aa2:	429e      	cmp	r6, r3
 8006aa4:	4604      	mov	r4, r0
 8006aa6:	460d      	mov	r5, r1
 8006aa8:	468b      	mov	fp, r1
 8006aaa:	dd17      	ble.n	8006adc <atan+0x44>
 8006aac:	4bb3      	ldr	r3, [pc, #716]	; (8006d7c <atan+0x2e4>)
 8006aae:	429e      	cmp	r6, r3
 8006ab0:	dc01      	bgt.n	8006ab6 <atan+0x1e>
 8006ab2:	d109      	bne.n	8006ac8 <atan+0x30>
 8006ab4:	b140      	cbz	r0, 8006ac8 <atan+0x30>
 8006ab6:	4622      	mov	r2, r4
 8006ab8:	462b      	mov	r3, r5
 8006aba:	4620      	mov	r0, r4
 8006abc:	4629      	mov	r1, r5
 8006abe:	f7f9 fb55 	bl	800016c <__adddf3>
 8006ac2:	4604      	mov	r4, r0
 8006ac4:	460d      	mov	r5, r1
 8006ac6:	e005      	b.n	8006ad4 <atan+0x3c>
 8006ac8:	f1bb 0f00 	cmp.w	fp, #0
 8006acc:	4cac      	ldr	r4, [pc, #688]	; (8006d80 <atan+0x2e8>)
 8006ace:	f340 8121 	ble.w	8006d14 <atan+0x27c>
 8006ad2:	4dac      	ldr	r5, [pc, #688]	; (8006d84 <atan+0x2ec>)
 8006ad4:	4620      	mov	r0, r4
 8006ad6:	4629      	mov	r1, r5
 8006ad8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006adc:	4baa      	ldr	r3, [pc, #680]	; (8006d88 <atan+0x2f0>)
 8006ade:	429e      	cmp	r6, r3
 8006ae0:	dc11      	bgt.n	8006b06 <atan+0x6e>
 8006ae2:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 8006ae6:	429e      	cmp	r6, r3
 8006ae8:	dc0a      	bgt.n	8006b00 <atan+0x68>
 8006aea:	a38b      	add	r3, pc, #556	; (adr r3, 8006d18 <atan+0x280>)
 8006aec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006af0:	f7f9 fb3c 	bl	800016c <__adddf3>
 8006af4:	2200      	movs	r2, #0
 8006af6:	4ba5      	ldr	r3, [pc, #660]	; (8006d8c <atan+0x2f4>)
 8006af8:	f7f9 ff7e 	bl	80009f8 <__aeabi_dcmpgt>
 8006afc:	2800      	cmp	r0, #0
 8006afe:	d1e9      	bne.n	8006ad4 <atan+0x3c>
 8006b00:	f04f 3aff 	mov.w	sl, #4294967295
 8006b04:	e027      	b.n	8006b56 <atan+0xbe>
 8006b06:	f000 f951 	bl	8006dac <fabs>
 8006b0a:	4ba1      	ldr	r3, [pc, #644]	; (8006d90 <atan+0x2f8>)
 8006b0c:	4604      	mov	r4, r0
 8006b0e:	429e      	cmp	r6, r3
 8006b10:	460d      	mov	r5, r1
 8006b12:	f300 80b8 	bgt.w	8006c86 <atan+0x1ee>
 8006b16:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 8006b1a:	429e      	cmp	r6, r3
 8006b1c:	f300 809c 	bgt.w	8006c58 <atan+0x1c0>
 8006b20:	4602      	mov	r2, r0
 8006b22:	460b      	mov	r3, r1
 8006b24:	f7f9 fb22 	bl	800016c <__adddf3>
 8006b28:	2200      	movs	r2, #0
 8006b2a:	4b98      	ldr	r3, [pc, #608]	; (8006d8c <atan+0x2f4>)
 8006b2c:	f7f9 fb1c 	bl	8000168 <__aeabi_dsub>
 8006b30:	2200      	movs	r2, #0
 8006b32:	4606      	mov	r6, r0
 8006b34:	460f      	mov	r7, r1
 8006b36:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8006b3a:	4620      	mov	r0, r4
 8006b3c:	4629      	mov	r1, r5
 8006b3e:	f7f9 fb15 	bl	800016c <__adddf3>
 8006b42:	4602      	mov	r2, r0
 8006b44:	460b      	mov	r3, r1
 8006b46:	4630      	mov	r0, r6
 8006b48:	4639      	mov	r1, r7
 8006b4a:	f7f9 fdef 	bl	800072c <__aeabi_ddiv>
 8006b4e:	f04f 0a00 	mov.w	sl, #0
 8006b52:	4604      	mov	r4, r0
 8006b54:	460d      	mov	r5, r1
 8006b56:	4622      	mov	r2, r4
 8006b58:	462b      	mov	r3, r5
 8006b5a:	4620      	mov	r0, r4
 8006b5c:	4629      	mov	r1, r5
 8006b5e:	f7f9 fcbb 	bl	80004d8 <__aeabi_dmul>
 8006b62:	4602      	mov	r2, r0
 8006b64:	460b      	mov	r3, r1
 8006b66:	4680      	mov	r8, r0
 8006b68:	4689      	mov	r9, r1
 8006b6a:	f7f9 fcb5 	bl	80004d8 <__aeabi_dmul>
 8006b6e:	a36c      	add	r3, pc, #432	; (adr r3, 8006d20 <atan+0x288>)
 8006b70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b74:	4606      	mov	r6, r0
 8006b76:	460f      	mov	r7, r1
 8006b78:	f7f9 fcae 	bl	80004d8 <__aeabi_dmul>
 8006b7c:	a36a      	add	r3, pc, #424	; (adr r3, 8006d28 <atan+0x290>)
 8006b7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b82:	f7f9 faf3 	bl	800016c <__adddf3>
 8006b86:	4632      	mov	r2, r6
 8006b88:	463b      	mov	r3, r7
 8006b8a:	f7f9 fca5 	bl	80004d8 <__aeabi_dmul>
 8006b8e:	a368      	add	r3, pc, #416	; (adr r3, 8006d30 <atan+0x298>)
 8006b90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b94:	f7f9 faea 	bl	800016c <__adddf3>
 8006b98:	4632      	mov	r2, r6
 8006b9a:	463b      	mov	r3, r7
 8006b9c:	f7f9 fc9c 	bl	80004d8 <__aeabi_dmul>
 8006ba0:	a365      	add	r3, pc, #404	; (adr r3, 8006d38 <atan+0x2a0>)
 8006ba2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ba6:	f7f9 fae1 	bl	800016c <__adddf3>
 8006baa:	4632      	mov	r2, r6
 8006bac:	463b      	mov	r3, r7
 8006bae:	f7f9 fc93 	bl	80004d8 <__aeabi_dmul>
 8006bb2:	a363      	add	r3, pc, #396	; (adr r3, 8006d40 <atan+0x2a8>)
 8006bb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006bb8:	f7f9 fad8 	bl	800016c <__adddf3>
 8006bbc:	4632      	mov	r2, r6
 8006bbe:	463b      	mov	r3, r7
 8006bc0:	f7f9 fc8a 	bl	80004d8 <__aeabi_dmul>
 8006bc4:	a360      	add	r3, pc, #384	; (adr r3, 8006d48 <atan+0x2b0>)
 8006bc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006bca:	f7f9 facf 	bl	800016c <__adddf3>
 8006bce:	4642      	mov	r2, r8
 8006bd0:	464b      	mov	r3, r9
 8006bd2:	f7f9 fc81 	bl	80004d8 <__aeabi_dmul>
 8006bd6:	a35e      	add	r3, pc, #376	; (adr r3, 8006d50 <atan+0x2b8>)
 8006bd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006bdc:	4680      	mov	r8, r0
 8006bde:	4689      	mov	r9, r1
 8006be0:	4630      	mov	r0, r6
 8006be2:	4639      	mov	r1, r7
 8006be4:	f7f9 fc78 	bl	80004d8 <__aeabi_dmul>
 8006be8:	a35b      	add	r3, pc, #364	; (adr r3, 8006d58 <atan+0x2c0>)
 8006bea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006bee:	f7f9 fabb 	bl	8000168 <__aeabi_dsub>
 8006bf2:	4632      	mov	r2, r6
 8006bf4:	463b      	mov	r3, r7
 8006bf6:	f7f9 fc6f 	bl	80004d8 <__aeabi_dmul>
 8006bfa:	a359      	add	r3, pc, #356	; (adr r3, 8006d60 <atan+0x2c8>)
 8006bfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c00:	f7f9 fab2 	bl	8000168 <__aeabi_dsub>
 8006c04:	4632      	mov	r2, r6
 8006c06:	463b      	mov	r3, r7
 8006c08:	f7f9 fc66 	bl	80004d8 <__aeabi_dmul>
 8006c0c:	a356      	add	r3, pc, #344	; (adr r3, 8006d68 <atan+0x2d0>)
 8006c0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c12:	f7f9 faa9 	bl	8000168 <__aeabi_dsub>
 8006c16:	4632      	mov	r2, r6
 8006c18:	463b      	mov	r3, r7
 8006c1a:	f7f9 fc5d 	bl	80004d8 <__aeabi_dmul>
 8006c1e:	a354      	add	r3, pc, #336	; (adr r3, 8006d70 <atan+0x2d8>)
 8006c20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c24:	f7f9 faa0 	bl	8000168 <__aeabi_dsub>
 8006c28:	4632      	mov	r2, r6
 8006c2a:	463b      	mov	r3, r7
 8006c2c:	f7f9 fc54 	bl	80004d8 <__aeabi_dmul>
 8006c30:	4602      	mov	r2, r0
 8006c32:	460b      	mov	r3, r1
 8006c34:	4640      	mov	r0, r8
 8006c36:	4649      	mov	r1, r9
 8006c38:	f7f9 fa98 	bl	800016c <__adddf3>
 8006c3c:	4622      	mov	r2, r4
 8006c3e:	462b      	mov	r3, r5
 8006c40:	f7f9 fc4a 	bl	80004d8 <__aeabi_dmul>
 8006c44:	f1ba 3fff 	cmp.w	sl, #4294967295
 8006c48:	4602      	mov	r2, r0
 8006c4a:	460b      	mov	r3, r1
 8006c4c:	d144      	bne.n	8006cd8 <atan+0x240>
 8006c4e:	4620      	mov	r0, r4
 8006c50:	4629      	mov	r1, r5
 8006c52:	f7f9 fa89 	bl	8000168 <__aeabi_dsub>
 8006c56:	e734      	b.n	8006ac2 <atan+0x2a>
 8006c58:	2200      	movs	r2, #0
 8006c5a:	4b4c      	ldr	r3, [pc, #304]	; (8006d8c <atan+0x2f4>)
 8006c5c:	f7f9 fa84 	bl	8000168 <__aeabi_dsub>
 8006c60:	2200      	movs	r2, #0
 8006c62:	4606      	mov	r6, r0
 8006c64:	460f      	mov	r7, r1
 8006c66:	4b49      	ldr	r3, [pc, #292]	; (8006d8c <atan+0x2f4>)
 8006c68:	4620      	mov	r0, r4
 8006c6a:	4629      	mov	r1, r5
 8006c6c:	f7f9 fa7e 	bl	800016c <__adddf3>
 8006c70:	4602      	mov	r2, r0
 8006c72:	460b      	mov	r3, r1
 8006c74:	4630      	mov	r0, r6
 8006c76:	4639      	mov	r1, r7
 8006c78:	f7f9 fd58 	bl	800072c <__aeabi_ddiv>
 8006c7c:	f04f 0a01 	mov.w	sl, #1
 8006c80:	4604      	mov	r4, r0
 8006c82:	460d      	mov	r5, r1
 8006c84:	e767      	b.n	8006b56 <atan+0xbe>
 8006c86:	4b43      	ldr	r3, [pc, #268]	; (8006d94 <atan+0x2fc>)
 8006c88:	429e      	cmp	r6, r3
 8006c8a:	dc1a      	bgt.n	8006cc2 <atan+0x22a>
 8006c8c:	2200      	movs	r2, #0
 8006c8e:	4b42      	ldr	r3, [pc, #264]	; (8006d98 <atan+0x300>)
 8006c90:	f7f9 fa6a 	bl	8000168 <__aeabi_dsub>
 8006c94:	2200      	movs	r2, #0
 8006c96:	4606      	mov	r6, r0
 8006c98:	460f      	mov	r7, r1
 8006c9a:	4b3f      	ldr	r3, [pc, #252]	; (8006d98 <atan+0x300>)
 8006c9c:	4620      	mov	r0, r4
 8006c9e:	4629      	mov	r1, r5
 8006ca0:	f7f9 fc1a 	bl	80004d8 <__aeabi_dmul>
 8006ca4:	2200      	movs	r2, #0
 8006ca6:	4b39      	ldr	r3, [pc, #228]	; (8006d8c <atan+0x2f4>)
 8006ca8:	f7f9 fa60 	bl	800016c <__adddf3>
 8006cac:	4602      	mov	r2, r0
 8006cae:	460b      	mov	r3, r1
 8006cb0:	4630      	mov	r0, r6
 8006cb2:	4639      	mov	r1, r7
 8006cb4:	f7f9 fd3a 	bl	800072c <__aeabi_ddiv>
 8006cb8:	f04f 0a02 	mov.w	sl, #2
 8006cbc:	4604      	mov	r4, r0
 8006cbe:	460d      	mov	r5, r1
 8006cc0:	e749      	b.n	8006b56 <atan+0xbe>
 8006cc2:	4602      	mov	r2, r0
 8006cc4:	460b      	mov	r3, r1
 8006cc6:	2000      	movs	r0, #0
 8006cc8:	4934      	ldr	r1, [pc, #208]	; (8006d9c <atan+0x304>)
 8006cca:	f7f9 fd2f 	bl	800072c <__aeabi_ddiv>
 8006cce:	f04f 0a03 	mov.w	sl, #3
 8006cd2:	4604      	mov	r4, r0
 8006cd4:	460d      	mov	r5, r1
 8006cd6:	e73e      	b.n	8006b56 <atan+0xbe>
 8006cd8:	4b31      	ldr	r3, [pc, #196]	; (8006da0 <atan+0x308>)
 8006cda:	4e32      	ldr	r6, [pc, #200]	; (8006da4 <atan+0x30c>)
 8006cdc:	ea4f 0aca 	mov.w	sl, sl, lsl #3
 8006ce0:	4456      	add	r6, sl
 8006ce2:	449a      	add	sl, r3
 8006ce4:	e9da 2300 	ldrd	r2, r3, [sl]
 8006ce8:	f7f9 fa3e 	bl	8000168 <__aeabi_dsub>
 8006cec:	4622      	mov	r2, r4
 8006cee:	462b      	mov	r3, r5
 8006cf0:	f7f9 fa3a 	bl	8000168 <__aeabi_dsub>
 8006cf4:	4602      	mov	r2, r0
 8006cf6:	460b      	mov	r3, r1
 8006cf8:	e9d6 0100 	ldrd	r0, r1, [r6]
 8006cfc:	f7f9 fa34 	bl	8000168 <__aeabi_dsub>
 8006d00:	f1bb 0f00 	cmp.w	fp, #0
 8006d04:	4604      	mov	r4, r0
 8006d06:	460d      	mov	r5, r1
 8006d08:	f6bf aee4 	bge.w	8006ad4 <atan+0x3c>
 8006d0c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006d10:	461d      	mov	r5, r3
 8006d12:	e6df      	b.n	8006ad4 <atan+0x3c>
 8006d14:	4d24      	ldr	r5, [pc, #144]	; (8006da8 <atan+0x310>)
 8006d16:	e6dd      	b.n	8006ad4 <atan+0x3c>
 8006d18:	8800759c 	.word	0x8800759c
 8006d1c:	7e37e43c 	.word	0x7e37e43c
 8006d20:	e322da11 	.word	0xe322da11
 8006d24:	3f90ad3a 	.word	0x3f90ad3a
 8006d28:	24760deb 	.word	0x24760deb
 8006d2c:	3fa97b4b 	.word	0x3fa97b4b
 8006d30:	a0d03d51 	.word	0xa0d03d51
 8006d34:	3fb10d66 	.word	0x3fb10d66
 8006d38:	c54c206e 	.word	0xc54c206e
 8006d3c:	3fb745cd 	.word	0x3fb745cd
 8006d40:	920083ff 	.word	0x920083ff
 8006d44:	3fc24924 	.word	0x3fc24924
 8006d48:	5555550d 	.word	0x5555550d
 8006d4c:	3fd55555 	.word	0x3fd55555
 8006d50:	2c6a6c2f 	.word	0x2c6a6c2f
 8006d54:	bfa2b444 	.word	0xbfa2b444
 8006d58:	52defd9a 	.word	0x52defd9a
 8006d5c:	3fadde2d 	.word	0x3fadde2d
 8006d60:	af749a6d 	.word	0xaf749a6d
 8006d64:	3fb3b0f2 	.word	0x3fb3b0f2
 8006d68:	fe231671 	.word	0xfe231671
 8006d6c:	3fbc71c6 	.word	0x3fbc71c6
 8006d70:	9998ebc4 	.word	0x9998ebc4
 8006d74:	3fc99999 	.word	0x3fc99999
 8006d78:	440fffff 	.word	0x440fffff
 8006d7c:	7ff00000 	.word	0x7ff00000
 8006d80:	54442d18 	.word	0x54442d18
 8006d84:	3ff921fb 	.word	0x3ff921fb
 8006d88:	3fdbffff 	.word	0x3fdbffff
 8006d8c:	3ff00000 	.word	0x3ff00000
 8006d90:	3ff2ffff 	.word	0x3ff2ffff
 8006d94:	40037fff 	.word	0x40037fff
 8006d98:	3ff80000 	.word	0x3ff80000
 8006d9c:	bff00000 	.word	0xbff00000
 8006da0:	080087e0 	.word	0x080087e0
 8006da4:	080087c0 	.word	0x080087c0
 8006da8:	bff921fb 	.word	0xbff921fb

08006dac <fabs>:
 8006dac:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8006db0:	4619      	mov	r1, r3
 8006db2:	4770      	bx	lr

08006db4 <roundf>:
 8006db4:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 8006db8:	3b7f      	subs	r3, #127	; 0x7f
 8006dba:	2b16      	cmp	r3, #22
 8006dbc:	b510      	push	{r4, lr}
 8006dbe:	4601      	mov	r1, r0
 8006dc0:	dc14      	bgt.n	8006dec <roundf+0x38>
 8006dc2:	2b00      	cmp	r3, #0
 8006dc4:	da07      	bge.n	8006dd6 <roundf+0x22>
 8006dc6:	3301      	adds	r3, #1
 8006dc8:	f000 4100 	and.w	r1, r0, #2147483648	; 0x80000000
 8006dcc:	d101      	bne.n	8006dd2 <roundf+0x1e>
 8006dce:	f041 517e 	orr.w	r1, r1, #1065353216	; 0x3f800000
 8006dd2:	4608      	mov	r0, r1
 8006dd4:	bd10      	pop	{r4, pc}
 8006dd6:	4a08      	ldr	r2, [pc, #32]	; (8006df8 <roundf+0x44>)
 8006dd8:	411a      	asrs	r2, r3
 8006dda:	4210      	tst	r0, r2
 8006ddc:	d0f9      	beq.n	8006dd2 <roundf+0x1e>
 8006dde:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006de2:	4119      	asrs	r1, r3
 8006de4:	4401      	add	r1, r0
 8006de6:	ea21 0102 	bic.w	r1, r1, r2
 8006dea:	e7f2      	b.n	8006dd2 <roundf+0x1e>
 8006dec:	2b80      	cmp	r3, #128	; 0x80
 8006dee:	d1f0      	bne.n	8006dd2 <roundf+0x1e>
 8006df0:	f7f9 fea0 	bl	8000b34 <__addsf3>
 8006df4:	4601      	mov	r1, r0
 8006df6:	e7ec      	b.n	8006dd2 <roundf+0x1e>
 8006df8:	007fffff 	.word	0x007fffff

08006dfc <atan2>:
 8006dfc:	f000 b854 	b.w	8006ea8 <__ieee754_atan2>

08006e00 <sqrt>:
 8006e00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006e04:	b08b      	sub	sp, #44	; 0x2c
 8006e06:	4604      	mov	r4, r0
 8006e08:	460d      	mov	r5, r1
 8006e0a:	f000 f92b 	bl	8007064 <__ieee754_sqrt>
 8006e0e:	4b24      	ldr	r3, [pc, #144]	; (8006ea0 <sqrt+0xa0>)
 8006e10:	4680      	mov	r8, r0
 8006e12:	f993 a000 	ldrsb.w	sl, [r3]
 8006e16:	4689      	mov	r9, r1
 8006e18:	f1ba 3fff 	cmp.w	sl, #4294967295
 8006e1c:	d02b      	beq.n	8006e76 <sqrt+0x76>
 8006e1e:	4622      	mov	r2, r4
 8006e20:	462b      	mov	r3, r5
 8006e22:	4620      	mov	r0, r4
 8006e24:	4629      	mov	r1, r5
 8006e26:	f7f9 fdf1 	bl	8000a0c <__aeabi_dcmpun>
 8006e2a:	4683      	mov	fp, r0
 8006e2c:	bb18      	cbnz	r0, 8006e76 <sqrt+0x76>
 8006e2e:	2600      	movs	r6, #0
 8006e30:	2700      	movs	r7, #0
 8006e32:	4632      	mov	r2, r6
 8006e34:	463b      	mov	r3, r7
 8006e36:	4620      	mov	r0, r4
 8006e38:	4629      	mov	r1, r5
 8006e3a:	f7f9 fdbf 	bl	80009bc <__aeabi_dcmplt>
 8006e3e:	b1d0      	cbz	r0, 8006e76 <sqrt+0x76>
 8006e40:	2301      	movs	r3, #1
 8006e42:	9300      	str	r3, [sp, #0]
 8006e44:	4b17      	ldr	r3, [pc, #92]	; (8006ea4 <sqrt+0xa4>)
 8006e46:	f8cd b020 	str.w	fp, [sp, #32]
 8006e4a:	9301      	str	r3, [sp, #4]
 8006e4c:	e9cd 4504 	strd	r4, r5, [sp, #16]
 8006e50:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8006e54:	f1ba 0f00 	cmp.w	sl, #0
 8006e58:	d112      	bne.n	8006e80 <sqrt+0x80>
 8006e5a:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8006e5e:	4668      	mov	r0, sp
 8006e60:	f000 f9ac 	bl	80071bc <matherr>
 8006e64:	b1b8      	cbz	r0, 8006e96 <sqrt+0x96>
 8006e66:	9b08      	ldr	r3, [sp, #32]
 8006e68:	b11b      	cbz	r3, 8006e72 <sqrt+0x72>
 8006e6a:	f7fd fd93 	bl	8004994 <__errno>
 8006e6e:	9b08      	ldr	r3, [sp, #32]
 8006e70:	6003      	str	r3, [r0, #0]
 8006e72:	e9dd 8906 	ldrd	r8, r9, [sp, #24]
 8006e76:	4640      	mov	r0, r8
 8006e78:	4649      	mov	r1, r9
 8006e7a:	b00b      	add	sp, #44	; 0x2c
 8006e7c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006e80:	4632      	mov	r2, r6
 8006e82:	463b      	mov	r3, r7
 8006e84:	4630      	mov	r0, r6
 8006e86:	4639      	mov	r1, r7
 8006e88:	f7f9 fc50 	bl	800072c <__aeabi_ddiv>
 8006e8c:	f1ba 0f02 	cmp.w	sl, #2
 8006e90:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8006e94:	d1e3      	bne.n	8006e5e <sqrt+0x5e>
 8006e96:	f7fd fd7d 	bl	8004994 <__errno>
 8006e9a:	2321      	movs	r3, #33	; 0x21
 8006e9c:	6003      	str	r3, [r0, #0]
 8006e9e:	e7e2      	b.n	8006e66 <sqrt+0x66>
 8006ea0:	20000274 	.word	0x20000274
 8006ea4:	08008800 	.word	0x08008800

08006ea8 <__ieee754_atan2>:
 8006ea8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006eac:	4256      	negs	r6, r2
 8006eae:	f023 4c00 	bic.w	ip, r3, #2147483648	; 0x80000000
 8006eb2:	4316      	orrs	r6, r2
 8006eb4:	f8df 91a8 	ldr.w	r9, [pc, #424]	; 8007060 <__ieee754_atan2+0x1b8>
 8006eb8:	ea4c 76d6 	orr.w	r6, ip, r6, lsr #31
 8006ebc:	454e      	cmp	r6, r9
 8006ebe:	4604      	mov	r4, r0
 8006ec0:	460d      	mov	r5, r1
 8006ec2:	469e      	mov	lr, r3
 8006ec4:	d808      	bhi.n	8006ed8 <__ieee754_atan2+0x30>
 8006ec6:	4246      	negs	r6, r0
 8006ec8:	f021 4700 	bic.w	r7, r1, #2147483648	; 0x80000000
 8006ecc:	4306      	orrs	r6, r0
 8006ece:	ea47 76d6 	orr.w	r6, r7, r6, lsr #31
 8006ed2:	454e      	cmp	r6, r9
 8006ed4:	4688      	mov	r8, r1
 8006ed6:	d906      	bls.n	8006ee6 <__ieee754_atan2+0x3e>
 8006ed8:	4620      	mov	r0, r4
 8006eda:	4629      	mov	r1, r5
 8006edc:	f7f9 f946 	bl	800016c <__adddf3>
 8006ee0:	4604      	mov	r4, r0
 8006ee2:	460d      	mov	r5, r1
 8006ee4:	e030      	b.n	8006f48 <__ieee754_atan2+0xa0>
 8006ee6:	f103 4640 	add.w	r6, r3, #3221225472	; 0xc0000000
 8006eea:	f506 1680 	add.w	r6, r6, #1048576	; 0x100000
 8006eee:	4316      	orrs	r6, r2
 8006ef0:	d103      	bne.n	8006efa <__ieee754_atan2+0x52>
 8006ef2:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006ef6:	f7ff bdcf 	b.w	8006a98 <atan>
 8006efa:	179e      	asrs	r6, r3, #30
 8006efc:	f006 0602 	and.w	r6, r6, #2
 8006f00:	ea46 76d1 	orr.w	r6, r6, r1, lsr #31
 8006f04:	ea57 0100 	orrs.w	r1, r7, r0
 8006f08:	d107      	bne.n	8006f1a <__ieee754_atan2+0x72>
 8006f0a:	2e02      	cmp	r6, #2
 8006f0c:	d079      	beq.n	8007002 <__ieee754_atan2+0x15a>
 8006f0e:	2e03      	cmp	r6, #3
 8006f10:	d11a      	bne.n	8006f48 <__ieee754_atan2+0xa0>
 8006f12:	a541      	add	r5, pc, #260	; (adr r5, 8007018 <__ieee754_atan2+0x170>)
 8006f14:	e9d5 4500 	ldrd	r4, r5, [r5]
 8006f18:	e016      	b.n	8006f48 <__ieee754_atan2+0xa0>
 8006f1a:	ea5c 0102 	orrs.w	r1, ip, r2
 8006f1e:	d106      	bne.n	8006f2e <__ieee754_atan2+0x86>
 8006f20:	f1b8 0f00 	cmp.w	r8, #0
 8006f24:	da71      	bge.n	800700a <__ieee754_atan2+0x162>
 8006f26:	a53e      	add	r5, pc, #248	; (adr r5, 8007020 <__ieee754_atan2+0x178>)
 8006f28:	e9d5 4500 	ldrd	r4, r5, [r5]
 8006f2c:	e00c      	b.n	8006f48 <__ieee754_atan2+0xa0>
 8006f2e:	45cc      	cmp	ip, r9
 8006f30:	d123      	bne.n	8006f7a <__ieee754_atan2+0xd2>
 8006f32:	4567      	cmp	r7, ip
 8006f34:	d114      	bne.n	8006f60 <__ieee754_atan2+0xb8>
 8006f36:	2e02      	cmp	r6, #2
 8006f38:	d00a      	beq.n	8006f50 <__ieee754_atan2+0xa8>
 8006f3a:	2e03      	cmp	r6, #3
 8006f3c:	d00c      	beq.n	8006f58 <__ieee754_atan2+0xb0>
 8006f3e:	2e01      	cmp	r6, #1
 8006f40:	d15b      	bne.n	8006ffa <__ieee754_atan2+0x152>
 8006f42:	a539      	add	r5, pc, #228	; (adr r5, 8007028 <__ieee754_atan2+0x180>)
 8006f44:	e9d5 4500 	ldrd	r4, r5, [r5]
 8006f48:	4620      	mov	r0, r4
 8006f4a:	4629      	mov	r1, r5
 8006f4c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006f50:	a537      	add	r5, pc, #220	; (adr r5, 8007030 <__ieee754_atan2+0x188>)
 8006f52:	e9d5 4500 	ldrd	r4, r5, [r5]
 8006f56:	e7f7      	b.n	8006f48 <__ieee754_atan2+0xa0>
 8006f58:	a537      	add	r5, pc, #220	; (adr r5, 8007038 <__ieee754_atan2+0x190>)
 8006f5a:	e9d5 4500 	ldrd	r4, r5, [r5]
 8006f5e:	e7f3      	b.n	8006f48 <__ieee754_atan2+0xa0>
 8006f60:	2e02      	cmp	r6, #2
 8006f62:	d04e      	beq.n	8007002 <__ieee754_atan2+0x15a>
 8006f64:	2e03      	cmp	r6, #3
 8006f66:	d0d4      	beq.n	8006f12 <__ieee754_atan2+0x6a>
 8006f68:	2e01      	cmp	r6, #1
 8006f6a:	f04f 0400 	mov.w	r4, #0
 8006f6e:	d102      	bne.n	8006f76 <__ieee754_atan2+0xce>
 8006f70:	f04f 4500 	mov.w	r5, #2147483648	; 0x80000000
 8006f74:	e7e8      	b.n	8006f48 <__ieee754_atan2+0xa0>
 8006f76:	2500      	movs	r5, #0
 8006f78:	e7e6      	b.n	8006f48 <__ieee754_atan2+0xa0>
 8006f7a:	454f      	cmp	r7, r9
 8006f7c:	d0d0      	beq.n	8006f20 <__ieee754_atan2+0x78>
 8006f7e:	eba7 070c 	sub.w	r7, r7, ip
 8006f82:	153f      	asrs	r7, r7, #20
 8006f84:	2f3c      	cmp	r7, #60	; 0x3c
 8006f86:	dc1e      	bgt.n	8006fc6 <__ieee754_atan2+0x11e>
 8006f88:	2b00      	cmp	r3, #0
 8006f8a:	da01      	bge.n	8006f90 <__ieee754_atan2+0xe8>
 8006f8c:	373c      	adds	r7, #60	; 0x3c
 8006f8e:	db1e      	blt.n	8006fce <__ieee754_atan2+0x126>
 8006f90:	4620      	mov	r0, r4
 8006f92:	4629      	mov	r1, r5
 8006f94:	f7f9 fbca 	bl	800072c <__aeabi_ddiv>
 8006f98:	f7ff ff08 	bl	8006dac <fabs>
 8006f9c:	f7ff fd7c 	bl	8006a98 <atan>
 8006fa0:	4604      	mov	r4, r0
 8006fa2:	460d      	mov	r5, r1
 8006fa4:	2e01      	cmp	r6, #1
 8006fa6:	d015      	beq.n	8006fd4 <__ieee754_atan2+0x12c>
 8006fa8:	2e02      	cmp	r6, #2
 8006faa:	d017      	beq.n	8006fdc <__ieee754_atan2+0x134>
 8006fac:	2e00      	cmp	r6, #0
 8006fae:	d0cb      	beq.n	8006f48 <__ieee754_atan2+0xa0>
 8006fb0:	a323      	add	r3, pc, #140	; (adr r3, 8007040 <__ieee754_atan2+0x198>)
 8006fb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006fb6:	4620      	mov	r0, r4
 8006fb8:	4629      	mov	r1, r5
 8006fba:	f7f9 f8d5 	bl	8000168 <__aeabi_dsub>
 8006fbe:	a322      	add	r3, pc, #136	; (adr r3, 8007048 <__ieee754_atan2+0x1a0>)
 8006fc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006fc4:	e016      	b.n	8006ff4 <__ieee754_atan2+0x14c>
 8006fc6:	a522      	add	r5, pc, #136	; (adr r5, 8007050 <__ieee754_atan2+0x1a8>)
 8006fc8:	e9d5 4500 	ldrd	r4, r5, [r5]
 8006fcc:	e7ea      	b.n	8006fa4 <__ieee754_atan2+0xfc>
 8006fce:	2400      	movs	r4, #0
 8006fd0:	2500      	movs	r5, #0
 8006fd2:	e7e7      	b.n	8006fa4 <__ieee754_atan2+0xfc>
 8006fd4:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 8006fd8:	461d      	mov	r5, r3
 8006fda:	e7b5      	b.n	8006f48 <__ieee754_atan2+0xa0>
 8006fdc:	a318      	add	r3, pc, #96	; (adr r3, 8007040 <__ieee754_atan2+0x198>)
 8006fde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006fe2:	4620      	mov	r0, r4
 8006fe4:	4629      	mov	r1, r5
 8006fe6:	f7f9 f8bf 	bl	8000168 <__aeabi_dsub>
 8006fea:	4602      	mov	r2, r0
 8006fec:	460b      	mov	r3, r1
 8006fee:	a116      	add	r1, pc, #88	; (adr r1, 8007048 <__ieee754_atan2+0x1a0>)
 8006ff0:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006ff4:	f7f9 f8b8 	bl	8000168 <__aeabi_dsub>
 8006ff8:	e772      	b.n	8006ee0 <__ieee754_atan2+0x38>
 8006ffa:	a517      	add	r5, pc, #92	; (adr r5, 8007058 <__ieee754_atan2+0x1b0>)
 8006ffc:	e9d5 4500 	ldrd	r4, r5, [r5]
 8007000:	e7a2      	b.n	8006f48 <__ieee754_atan2+0xa0>
 8007002:	a511      	add	r5, pc, #68	; (adr r5, 8007048 <__ieee754_atan2+0x1a0>)
 8007004:	e9d5 4500 	ldrd	r4, r5, [r5]
 8007008:	e79e      	b.n	8006f48 <__ieee754_atan2+0xa0>
 800700a:	a511      	add	r5, pc, #68	; (adr r5, 8007050 <__ieee754_atan2+0x1a8>)
 800700c:	e9d5 4500 	ldrd	r4, r5, [r5]
 8007010:	e79a      	b.n	8006f48 <__ieee754_atan2+0xa0>
 8007012:	bf00      	nop
 8007014:	f3af 8000 	nop.w
 8007018:	54442d18 	.word	0x54442d18
 800701c:	c00921fb 	.word	0xc00921fb
 8007020:	54442d18 	.word	0x54442d18
 8007024:	bff921fb 	.word	0xbff921fb
 8007028:	54442d18 	.word	0x54442d18
 800702c:	bfe921fb 	.word	0xbfe921fb
 8007030:	7f3321d2 	.word	0x7f3321d2
 8007034:	4002d97c 	.word	0x4002d97c
 8007038:	7f3321d2 	.word	0x7f3321d2
 800703c:	c002d97c 	.word	0xc002d97c
 8007040:	33145c07 	.word	0x33145c07
 8007044:	3ca1a626 	.word	0x3ca1a626
 8007048:	54442d18 	.word	0x54442d18
 800704c:	400921fb 	.word	0x400921fb
 8007050:	54442d18 	.word	0x54442d18
 8007054:	3ff921fb 	.word	0x3ff921fb
 8007058:	54442d18 	.word	0x54442d18
 800705c:	3fe921fb 	.word	0x3fe921fb
 8007060:	7ff00000 	.word	0x7ff00000

08007064 <__ieee754_sqrt>:
 8007064:	4b54      	ldr	r3, [pc, #336]	; (80071b8 <__ieee754_sqrt+0x154>)
 8007066:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800706a:	438b      	bics	r3, r1
 800706c:	4606      	mov	r6, r0
 800706e:	460d      	mov	r5, r1
 8007070:	460a      	mov	r2, r1
 8007072:	460c      	mov	r4, r1
 8007074:	d10f      	bne.n	8007096 <__ieee754_sqrt+0x32>
 8007076:	4602      	mov	r2, r0
 8007078:	460b      	mov	r3, r1
 800707a:	f7f9 fa2d 	bl	80004d8 <__aeabi_dmul>
 800707e:	4602      	mov	r2, r0
 8007080:	460b      	mov	r3, r1
 8007082:	4630      	mov	r0, r6
 8007084:	4629      	mov	r1, r5
 8007086:	f7f9 f871 	bl	800016c <__adddf3>
 800708a:	4606      	mov	r6, r0
 800708c:	460d      	mov	r5, r1
 800708e:	4630      	mov	r0, r6
 8007090:	4629      	mov	r1, r5
 8007092:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007096:	2900      	cmp	r1, #0
 8007098:	4607      	mov	r7, r0
 800709a:	4603      	mov	r3, r0
 800709c:	dc0e      	bgt.n	80070bc <__ieee754_sqrt+0x58>
 800709e:	f021 4c00 	bic.w	ip, r1, #2147483648	; 0x80000000
 80070a2:	ea5c 0707 	orrs.w	r7, ip, r7
 80070a6:	d0f2      	beq.n	800708e <__ieee754_sqrt+0x2a>
 80070a8:	b141      	cbz	r1, 80070bc <__ieee754_sqrt+0x58>
 80070aa:	4602      	mov	r2, r0
 80070ac:	460b      	mov	r3, r1
 80070ae:	f7f9 f85b 	bl	8000168 <__aeabi_dsub>
 80070b2:	4602      	mov	r2, r0
 80070b4:	460b      	mov	r3, r1
 80070b6:	f7f9 fb39 	bl	800072c <__aeabi_ddiv>
 80070ba:	e7e6      	b.n	800708a <__ieee754_sqrt+0x26>
 80070bc:	1512      	asrs	r2, r2, #20
 80070be:	d074      	beq.n	80071aa <__ieee754_sqrt+0x146>
 80070c0:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 80070c4:	07d5      	lsls	r5, r2, #31
 80070c6:	f04f 0500 	mov.w	r5, #0
 80070ca:	f3c4 0413 	ubfx	r4, r4, #0, #20
 80070ce:	bf48      	it	mi
 80070d0:	0fd9      	lsrmi	r1, r3, #31
 80070d2:	f444 1480 	orr.w	r4, r4, #1048576	; 0x100000
 80070d6:	bf44      	itt	mi
 80070d8:	005b      	lslmi	r3, r3, #1
 80070da:	eb01 0444 	addmi.w	r4, r1, r4, lsl #1
 80070de:	1051      	asrs	r1, r2, #1
 80070e0:	0fda      	lsrs	r2, r3, #31
 80070e2:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 80070e6:	4628      	mov	r0, r5
 80070e8:	2216      	movs	r2, #22
 80070ea:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 80070ee:	005b      	lsls	r3, r3, #1
 80070f0:	1987      	adds	r7, r0, r6
 80070f2:	42a7      	cmp	r7, r4
 80070f4:	bfde      	ittt	le
 80070f6:	19b8      	addle	r0, r7, r6
 80070f8:	1be4      	suble	r4, r4, r7
 80070fa:	19ad      	addle	r5, r5, r6
 80070fc:	0fdf      	lsrs	r7, r3, #31
 80070fe:	3a01      	subs	r2, #1
 8007100:	eb07 0444 	add.w	r4, r7, r4, lsl #1
 8007104:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8007108:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800710c:	d1f0      	bne.n	80070f0 <__ieee754_sqrt+0x8c>
 800710e:	f04f 0c20 	mov.w	ip, #32
 8007112:	4696      	mov	lr, r2
 8007114:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8007118:	4284      	cmp	r4, r0
 800711a:	eb06 070e 	add.w	r7, r6, lr
 800711e:	dc02      	bgt.n	8007126 <__ieee754_sqrt+0xc2>
 8007120:	d112      	bne.n	8007148 <__ieee754_sqrt+0xe4>
 8007122:	429f      	cmp	r7, r3
 8007124:	d810      	bhi.n	8007148 <__ieee754_sqrt+0xe4>
 8007126:	2f00      	cmp	r7, #0
 8007128:	eb07 0e06 	add.w	lr, r7, r6
 800712c:	da42      	bge.n	80071b4 <__ieee754_sqrt+0x150>
 800712e:	f1be 0f00 	cmp.w	lr, #0
 8007132:	db3f      	blt.n	80071b4 <__ieee754_sqrt+0x150>
 8007134:	f100 0801 	add.w	r8, r0, #1
 8007138:	1a24      	subs	r4, r4, r0
 800713a:	4640      	mov	r0, r8
 800713c:	429f      	cmp	r7, r3
 800713e:	bf88      	it	hi
 8007140:	f104 34ff 	addhi.w	r4, r4, #4294967295
 8007144:	1bdb      	subs	r3, r3, r7
 8007146:	4432      	add	r2, r6
 8007148:	0064      	lsls	r4, r4, #1
 800714a:	f1bc 0c01 	subs.w	ip, ip, #1
 800714e:	eb04 74d3 	add.w	r4, r4, r3, lsr #31
 8007152:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8007156:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800715a:	d1dd      	bne.n	8007118 <__ieee754_sqrt+0xb4>
 800715c:	4323      	orrs	r3, r4
 800715e:	d006      	beq.n	800716e <__ieee754_sqrt+0x10a>
 8007160:	1c54      	adds	r4, r2, #1
 8007162:	bf0b      	itete	eq
 8007164:	4662      	moveq	r2, ip
 8007166:	3201      	addne	r2, #1
 8007168:	3501      	addeq	r5, #1
 800716a:	f022 0201 	bicne.w	r2, r2, #1
 800716e:	106b      	asrs	r3, r5, #1
 8007170:	0852      	lsrs	r2, r2, #1
 8007172:	07e8      	lsls	r0, r5, #31
 8007174:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8007178:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800717c:	bf48      	it	mi
 800717e:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 8007182:	eb03 5501 	add.w	r5, r3, r1, lsl #20
 8007186:	4616      	mov	r6, r2
 8007188:	e781      	b.n	800708e <__ieee754_sqrt+0x2a>
 800718a:	0adc      	lsrs	r4, r3, #11
 800718c:	3915      	subs	r1, #21
 800718e:	055b      	lsls	r3, r3, #21
 8007190:	2c00      	cmp	r4, #0
 8007192:	d0fa      	beq.n	800718a <__ieee754_sqrt+0x126>
 8007194:	02e6      	lsls	r6, r4, #11
 8007196:	d50a      	bpl.n	80071ae <__ieee754_sqrt+0x14a>
 8007198:	f1c2 0020 	rsb	r0, r2, #32
 800719c:	fa23 f000 	lsr.w	r0, r3, r0
 80071a0:	1e55      	subs	r5, r2, #1
 80071a2:	4093      	lsls	r3, r2
 80071a4:	4304      	orrs	r4, r0
 80071a6:	1b4a      	subs	r2, r1, r5
 80071a8:	e78a      	b.n	80070c0 <__ieee754_sqrt+0x5c>
 80071aa:	4611      	mov	r1, r2
 80071ac:	e7f0      	b.n	8007190 <__ieee754_sqrt+0x12c>
 80071ae:	0064      	lsls	r4, r4, #1
 80071b0:	3201      	adds	r2, #1
 80071b2:	e7ef      	b.n	8007194 <__ieee754_sqrt+0x130>
 80071b4:	4680      	mov	r8, r0
 80071b6:	e7bf      	b.n	8007138 <__ieee754_sqrt+0xd4>
 80071b8:	7ff00000 	.word	0x7ff00000

080071bc <matherr>:
 80071bc:	2000      	movs	r0, #0
 80071be:	4770      	bx	lr

080071c0 <_init>:
 80071c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80071c2:	bf00      	nop
 80071c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80071c6:	bc08      	pop	{r3}
 80071c8:	469e      	mov	lr, r3
 80071ca:	4770      	bx	lr

080071cc <_fini>:
 80071cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80071ce:	bf00      	nop
 80071d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80071d2:	bc08      	pop	{r3}
 80071d4:	469e      	mov	lr, r3
 80071d6:	4770      	bx	lr
