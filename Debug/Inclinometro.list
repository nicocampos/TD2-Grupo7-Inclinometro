
Inclinometro.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007618  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002388  08007728  08007728  00017728  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009ab0  08009ab0  00020280  2**0
                  CONTENTS
  4 .ARM          00000000  08009ab0  08009ab0  00020280  2**0
                  CONTENTS
  5 .preinit_array 00000000  08009ab0  08009ab0  00020280  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009ab0  08009ab0  00019ab0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009ab4  08009ab4  00019ab4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000280  20000000  08009ab8  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000640  20000280  08009d38  00020280  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  200008c0  08009d38  000208c0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020280  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b9a6  00000000  00000000  000202a9  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001c93  00000000  00000000  0002bc4f  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000888  00000000  00000000  0002d8e8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000007c0  00000000  00000000  0002e170  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00004366  00000000  00000000  0002e930  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000083b6  00000000  00000000  00032c96  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00074cde  00000000  00000000  0003b04c  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000afd2a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002ebc  00000000  00000000  000afda8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000280 	.word	0x20000280
 800012c:	00000000 	.word	0x00000000
 8000130:	08007710 	.word	0x08007710

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000284 	.word	0x20000284
 800014c:	08007710 	.word	0x08007710

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800029e:	f1a4 0401 	sub.w	r4, r4, #1
 80002a2:	d1e9      	bne.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2f>:
 8000a88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a8c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a90:	bf24      	itt	cs
 8000a92:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a96:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a9a:	d90d      	bls.n	8000ab8 <__aeabi_d2f+0x30>
 8000a9c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000aa0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000aa4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000aa8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000aac:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ab0:	bf08      	it	eq
 8000ab2:	f020 0001 	biceq.w	r0, r0, #1
 8000ab6:	4770      	bx	lr
 8000ab8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000abc:	d121      	bne.n	8000b02 <__aeabi_d2f+0x7a>
 8000abe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000ac2:	bfbc      	itt	lt
 8000ac4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000ac8:	4770      	bxlt	lr
 8000aca:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000ace:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ad2:	f1c2 0218 	rsb	r2, r2, #24
 8000ad6:	f1c2 0c20 	rsb	ip, r2, #32
 8000ada:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ade:	fa20 f002 	lsr.w	r0, r0, r2
 8000ae2:	bf18      	it	ne
 8000ae4:	f040 0001 	orrne.w	r0, r0, #1
 8000ae8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aec:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000af0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000af4:	ea40 000c 	orr.w	r0, r0, ip
 8000af8:	fa23 f302 	lsr.w	r3, r3, r2
 8000afc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b00:	e7cc      	b.n	8000a9c <__aeabi_d2f+0x14>
 8000b02:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b06:	d107      	bne.n	8000b18 <__aeabi_d2f+0x90>
 8000b08:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b0c:	bf1e      	ittt	ne
 8000b0e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b12:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b16:	4770      	bxne	lr
 8000b18:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b1c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b20:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b24:	4770      	bx	lr
 8000b26:	bf00      	nop

08000b28 <__aeabi_frsub>:
 8000b28:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b2c:	e002      	b.n	8000b34 <__addsf3>
 8000b2e:	bf00      	nop

08000b30 <__aeabi_fsub>:
 8000b30:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b34 <__addsf3>:
 8000b34:	0042      	lsls	r2, r0, #1
 8000b36:	bf1f      	itttt	ne
 8000b38:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b3c:	ea92 0f03 	teqne	r2, r3
 8000b40:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b44:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b48:	d06a      	beq.n	8000c20 <__addsf3+0xec>
 8000b4a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b4e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b52:	bfc1      	itttt	gt
 8000b54:	18d2      	addgt	r2, r2, r3
 8000b56:	4041      	eorgt	r1, r0
 8000b58:	4048      	eorgt	r0, r1
 8000b5a:	4041      	eorgt	r1, r0
 8000b5c:	bfb8      	it	lt
 8000b5e:	425b      	neglt	r3, r3
 8000b60:	2b19      	cmp	r3, #25
 8000b62:	bf88      	it	hi
 8000b64:	4770      	bxhi	lr
 8000b66:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000b6a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b6e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000b72:	bf18      	it	ne
 8000b74:	4240      	negne	r0, r0
 8000b76:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7a:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000b7e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000b82:	bf18      	it	ne
 8000b84:	4249      	negne	r1, r1
 8000b86:	ea92 0f03 	teq	r2, r3
 8000b8a:	d03f      	beq.n	8000c0c <__addsf3+0xd8>
 8000b8c:	f1a2 0201 	sub.w	r2, r2, #1
 8000b90:	fa41 fc03 	asr.w	ip, r1, r3
 8000b94:	eb10 000c 	adds.w	r0, r0, ip
 8000b98:	f1c3 0320 	rsb	r3, r3, #32
 8000b9c:	fa01 f103 	lsl.w	r1, r1, r3
 8000ba0:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000ba4:	d502      	bpl.n	8000bac <__addsf3+0x78>
 8000ba6:	4249      	negs	r1, r1
 8000ba8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bac:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000bb0:	d313      	bcc.n	8000bda <__addsf3+0xa6>
 8000bb2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000bb6:	d306      	bcc.n	8000bc6 <__addsf3+0x92>
 8000bb8:	0840      	lsrs	r0, r0, #1
 8000bba:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bbe:	f102 0201 	add.w	r2, r2, #1
 8000bc2:	2afe      	cmp	r2, #254	; 0xfe
 8000bc4:	d251      	bcs.n	8000c6a <__addsf3+0x136>
 8000bc6:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000bca:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000bce:	bf08      	it	eq
 8000bd0:	f020 0001 	biceq.w	r0, r0, #1
 8000bd4:	ea40 0003 	orr.w	r0, r0, r3
 8000bd8:	4770      	bx	lr
 8000bda:	0049      	lsls	r1, r1, #1
 8000bdc:	eb40 0000 	adc.w	r0, r0, r0
 8000be0:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 8000be4:	f1a2 0201 	sub.w	r2, r2, #1
 8000be8:	d1ed      	bne.n	8000bc6 <__addsf3+0x92>
 8000bea:	fab0 fc80 	clz	ip, r0
 8000bee:	f1ac 0c08 	sub.w	ip, ip, #8
 8000bf2:	ebb2 020c 	subs.w	r2, r2, ip
 8000bf6:	fa00 f00c 	lsl.w	r0, r0, ip
 8000bfa:	bfaa      	itet	ge
 8000bfc:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c00:	4252      	neglt	r2, r2
 8000c02:	4318      	orrge	r0, r3
 8000c04:	bfbc      	itt	lt
 8000c06:	40d0      	lsrlt	r0, r2
 8000c08:	4318      	orrlt	r0, r3
 8000c0a:	4770      	bx	lr
 8000c0c:	f092 0f00 	teq	r2, #0
 8000c10:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c14:	bf06      	itte	eq
 8000c16:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c1a:	3201      	addeq	r2, #1
 8000c1c:	3b01      	subne	r3, #1
 8000c1e:	e7b5      	b.n	8000b8c <__addsf3+0x58>
 8000c20:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c24:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c28:	bf18      	it	ne
 8000c2a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c2e:	d021      	beq.n	8000c74 <__addsf3+0x140>
 8000c30:	ea92 0f03 	teq	r2, r3
 8000c34:	d004      	beq.n	8000c40 <__addsf3+0x10c>
 8000c36:	f092 0f00 	teq	r2, #0
 8000c3a:	bf08      	it	eq
 8000c3c:	4608      	moveq	r0, r1
 8000c3e:	4770      	bx	lr
 8000c40:	ea90 0f01 	teq	r0, r1
 8000c44:	bf1c      	itt	ne
 8000c46:	2000      	movne	r0, #0
 8000c48:	4770      	bxne	lr
 8000c4a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c4e:	d104      	bne.n	8000c5a <__addsf3+0x126>
 8000c50:	0040      	lsls	r0, r0, #1
 8000c52:	bf28      	it	cs
 8000c54:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c58:	4770      	bx	lr
 8000c5a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c5e:	bf3c      	itt	cc
 8000c60:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000c64:	4770      	bxcc	lr
 8000c66:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c6a:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000c6e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c72:	4770      	bx	lr
 8000c74:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c78:	bf16      	itet	ne
 8000c7a:	4608      	movne	r0, r1
 8000c7c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c80:	4601      	movne	r1, r0
 8000c82:	0242      	lsls	r2, r0, #9
 8000c84:	bf06      	itte	eq
 8000c86:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c8a:	ea90 0f01 	teqeq	r0, r1
 8000c8e:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000c92:	4770      	bx	lr

08000c94 <__aeabi_ui2f>:
 8000c94:	f04f 0300 	mov.w	r3, #0
 8000c98:	e004      	b.n	8000ca4 <__aeabi_i2f+0x8>
 8000c9a:	bf00      	nop

08000c9c <__aeabi_i2f>:
 8000c9c:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000ca0:	bf48      	it	mi
 8000ca2:	4240      	negmi	r0, r0
 8000ca4:	ea5f 0c00 	movs.w	ip, r0
 8000ca8:	bf08      	it	eq
 8000caa:	4770      	bxeq	lr
 8000cac:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000cb0:	4601      	mov	r1, r0
 8000cb2:	f04f 0000 	mov.w	r0, #0
 8000cb6:	e01c      	b.n	8000cf2 <__aeabi_l2f+0x2a>

08000cb8 <__aeabi_ul2f>:
 8000cb8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cbc:	bf08      	it	eq
 8000cbe:	4770      	bxeq	lr
 8000cc0:	f04f 0300 	mov.w	r3, #0
 8000cc4:	e00a      	b.n	8000cdc <__aeabi_l2f+0x14>
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_l2f>:
 8000cc8:	ea50 0201 	orrs.w	r2, r0, r1
 8000ccc:	bf08      	it	eq
 8000cce:	4770      	bxeq	lr
 8000cd0:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000cd4:	d502      	bpl.n	8000cdc <__aeabi_l2f+0x14>
 8000cd6:	4240      	negs	r0, r0
 8000cd8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cdc:	ea5f 0c01 	movs.w	ip, r1
 8000ce0:	bf02      	ittt	eq
 8000ce2:	4684      	moveq	ip, r0
 8000ce4:	4601      	moveq	r1, r0
 8000ce6:	2000      	moveq	r0, #0
 8000ce8:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000cec:	bf08      	it	eq
 8000cee:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000cf2:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000cf6:	fabc f28c 	clz	r2, ip
 8000cfa:	3a08      	subs	r2, #8
 8000cfc:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d00:	db10      	blt.n	8000d24 <__aeabi_l2f+0x5c>
 8000d02:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d06:	4463      	add	r3, ip
 8000d08:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d0c:	f1c2 0220 	rsb	r2, r2, #32
 8000d10:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d14:	fa20 f202 	lsr.w	r2, r0, r2
 8000d18:	eb43 0002 	adc.w	r0, r3, r2
 8000d1c:	bf08      	it	eq
 8000d1e:	f020 0001 	biceq.w	r0, r0, #1
 8000d22:	4770      	bx	lr
 8000d24:	f102 0220 	add.w	r2, r2, #32
 8000d28:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d2c:	f1c2 0220 	rsb	r2, r2, #32
 8000d30:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d34:	fa21 f202 	lsr.w	r2, r1, r2
 8000d38:	eb43 0002 	adc.w	r0, r3, r2
 8000d3c:	bf08      	it	eq
 8000d3e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d42:	4770      	bx	lr

08000d44 <__aeabi_fmul>:
 8000d44:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d48:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d4c:	bf1e      	ittt	ne
 8000d4e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d52:	ea92 0f0c 	teqne	r2, ip
 8000d56:	ea93 0f0c 	teqne	r3, ip
 8000d5a:	d06f      	beq.n	8000e3c <__aeabi_fmul+0xf8>
 8000d5c:	441a      	add	r2, r3
 8000d5e:	ea80 0c01 	eor.w	ip, r0, r1
 8000d62:	0240      	lsls	r0, r0, #9
 8000d64:	bf18      	it	ne
 8000d66:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000d6a:	d01e      	beq.n	8000daa <__aeabi_fmul+0x66>
 8000d6c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000d70:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000d74:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000d78:	fba0 3101 	umull	r3, r1, r0, r1
 8000d7c:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000d80:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000d84:	bf3e      	ittt	cc
 8000d86:	0049      	lslcc	r1, r1, #1
 8000d88:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000d8c:	005b      	lslcc	r3, r3, #1
 8000d8e:	ea40 0001 	orr.w	r0, r0, r1
 8000d92:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000d96:	2afd      	cmp	r2, #253	; 0xfd
 8000d98:	d81d      	bhi.n	8000dd6 <__aeabi_fmul+0x92>
 8000d9a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000d9e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000da2:	bf08      	it	eq
 8000da4:	f020 0001 	biceq.w	r0, r0, #1
 8000da8:	4770      	bx	lr
 8000daa:	f090 0f00 	teq	r0, #0
 8000dae:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000db2:	bf08      	it	eq
 8000db4:	0249      	lsleq	r1, r1, #9
 8000db6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dba:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000dbe:	3a7f      	subs	r2, #127	; 0x7f
 8000dc0:	bfc2      	ittt	gt
 8000dc2:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000dc6:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000dca:	4770      	bxgt	lr
 8000dcc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000dd0:	f04f 0300 	mov.w	r3, #0
 8000dd4:	3a01      	subs	r2, #1
 8000dd6:	dc5d      	bgt.n	8000e94 <__aeabi_fmul+0x150>
 8000dd8:	f112 0f19 	cmn.w	r2, #25
 8000ddc:	bfdc      	itt	le
 8000dde:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000de2:	4770      	bxle	lr
 8000de4:	f1c2 0200 	rsb	r2, r2, #0
 8000de8:	0041      	lsls	r1, r0, #1
 8000dea:	fa21 f102 	lsr.w	r1, r1, r2
 8000dee:	f1c2 0220 	rsb	r2, r2, #32
 8000df2:	fa00 fc02 	lsl.w	ip, r0, r2
 8000df6:	ea5f 0031 	movs.w	r0, r1, rrx
 8000dfa:	f140 0000 	adc.w	r0, r0, #0
 8000dfe:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e02:	bf08      	it	eq
 8000e04:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e08:	4770      	bx	lr
 8000e0a:	f092 0f00 	teq	r2, #0
 8000e0e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e12:	bf02      	ittt	eq
 8000e14:	0040      	lsleq	r0, r0, #1
 8000e16:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e1a:	3a01      	subeq	r2, #1
 8000e1c:	d0f9      	beq.n	8000e12 <__aeabi_fmul+0xce>
 8000e1e:	ea40 000c 	orr.w	r0, r0, ip
 8000e22:	f093 0f00 	teq	r3, #0
 8000e26:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e2a:	bf02      	ittt	eq
 8000e2c:	0049      	lsleq	r1, r1, #1
 8000e2e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e32:	3b01      	subeq	r3, #1
 8000e34:	d0f9      	beq.n	8000e2a <__aeabi_fmul+0xe6>
 8000e36:	ea41 010c 	orr.w	r1, r1, ip
 8000e3a:	e78f      	b.n	8000d5c <__aeabi_fmul+0x18>
 8000e3c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e40:	ea92 0f0c 	teq	r2, ip
 8000e44:	bf18      	it	ne
 8000e46:	ea93 0f0c 	teqne	r3, ip
 8000e4a:	d00a      	beq.n	8000e62 <__aeabi_fmul+0x11e>
 8000e4c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e50:	bf18      	it	ne
 8000e52:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e56:	d1d8      	bne.n	8000e0a <__aeabi_fmul+0xc6>
 8000e58:	ea80 0001 	eor.w	r0, r0, r1
 8000e5c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e60:	4770      	bx	lr
 8000e62:	f090 0f00 	teq	r0, #0
 8000e66:	bf17      	itett	ne
 8000e68:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000e6c:	4608      	moveq	r0, r1
 8000e6e:	f091 0f00 	teqne	r1, #0
 8000e72:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000e76:	d014      	beq.n	8000ea2 <__aeabi_fmul+0x15e>
 8000e78:	ea92 0f0c 	teq	r2, ip
 8000e7c:	d101      	bne.n	8000e82 <__aeabi_fmul+0x13e>
 8000e7e:	0242      	lsls	r2, r0, #9
 8000e80:	d10f      	bne.n	8000ea2 <__aeabi_fmul+0x15e>
 8000e82:	ea93 0f0c 	teq	r3, ip
 8000e86:	d103      	bne.n	8000e90 <__aeabi_fmul+0x14c>
 8000e88:	024b      	lsls	r3, r1, #9
 8000e8a:	bf18      	it	ne
 8000e8c:	4608      	movne	r0, r1
 8000e8e:	d108      	bne.n	8000ea2 <__aeabi_fmul+0x15e>
 8000e90:	ea80 0001 	eor.w	r0, r0, r1
 8000e94:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e98:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e9c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ea0:	4770      	bx	lr
 8000ea2:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ea6:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000eaa:	4770      	bx	lr

08000eac <__aeabi_fdiv>:
 8000eac:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000eb0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000eb4:	bf1e      	ittt	ne
 8000eb6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000eba:	ea92 0f0c 	teqne	r2, ip
 8000ebe:	ea93 0f0c 	teqne	r3, ip
 8000ec2:	d069      	beq.n	8000f98 <__aeabi_fdiv+0xec>
 8000ec4:	eba2 0203 	sub.w	r2, r2, r3
 8000ec8:	ea80 0c01 	eor.w	ip, r0, r1
 8000ecc:	0249      	lsls	r1, r1, #9
 8000ece:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000ed2:	d037      	beq.n	8000f44 <__aeabi_fdiv+0x98>
 8000ed4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000ed8:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000edc:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000ee0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000ee4:	428b      	cmp	r3, r1
 8000ee6:	bf38      	it	cc
 8000ee8:	005b      	lslcc	r3, r3, #1
 8000eea:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000eee:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000ef2:	428b      	cmp	r3, r1
 8000ef4:	bf24      	itt	cs
 8000ef6:	1a5b      	subcs	r3, r3, r1
 8000ef8:	ea40 000c 	orrcs.w	r0, r0, ip
 8000efc:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f00:	bf24      	itt	cs
 8000f02:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f06:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f0a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f0e:	bf24      	itt	cs
 8000f10:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f14:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f18:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f1c:	bf24      	itt	cs
 8000f1e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f22:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f26:	011b      	lsls	r3, r3, #4
 8000f28:	bf18      	it	ne
 8000f2a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f2e:	d1e0      	bne.n	8000ef2 <__aeabi_fdiv+0x46>
 8000f30:	2afd      	cmp	r2, #253	; 0xfd
 8000f32:	f63f af50 	bhi.w	8000dd6 <__aeabi_fmul+0x92>
 8000f36:	428b      	cmp	r3, r1
 8000f38:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f3c:	bf08      	it	eq
 8000f3e:	f020 0001 	biceq.w	r0, r0, #1
 8000f42:	4770      	bx	lr
 8000f44:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000f48:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f4c:	327f      	adds	r2, #127	; 0x7f
 8000f4e:	bfc2      	ittt	gt
 8000f50:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000f54:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f58:	4770      	bxgt	lr
 8000f5a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f5e:	f04f 0300 	mov.w	r3, #0
 8000f62:	3a01      	subs	r2, #1
 8000f64:	e737      	b.n	8000dd6 <__aeabi_fmul+0x92>
 8000f66:	f092 0f00 	teq	r2, #0
 8000f6a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000f6e:	bf02      	ittt	eq
 8000f70:	0040      	lsleq	r0, r0, #1
 8000f72:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000f76:	3a01      	subeq	r2, #1
 8000f78:	d0f9      	beq.n	8000f6e <__aeabi_fdiv+0xc2>
 8000f7a:	ea40 000c 	orr.w	r0, r0, ip
 8000f7e:	f093 0f00 	teq	r3, #0
 8000f82:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000f86:	bf02      	ittt	eq
 8000f88:	0049      	lsleq	r1, r1, #1
 8000f8a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000f8e:	3b01      	subeq	r3, #1
 8000f90:	d0f9      	beq.n	8000f86 <__aeabi_fdiv+0xda>
 8000f92:	ea41 010c 	orr.w	r1, r1, ip
 8000f96:	e795      	b.n	8000ec4 <__aeabi_fdiv+0x18>
 8000f98:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f9c:	ea92 0f0c 	teq	r2, ip
 8000fa0:	d108      	bne.n	8000fb4 <__aeabi_fdiv+0x108>
 8000fa2:	0242      	lsls	r2, r0, #9
 8000fa4:	f47f af7d 	bne.w	8000ea2 <__aeabi_fmul+0x15e>
 8000fa8:	ea93 0f0c 	teq	r3, ip
 8000fac:	f47f af70 	bne.w	8000e90 <__aeabi_fmul+0x14c>
 8000fb0:	4608      	mov	r0, r1
 8000fb2:	e776      	b.n	8000ea2 <__aeabi_fmul+0x15e>
 8000fb4:	ea93 0f0c 	teq	r3, ip
 8000fb8:	d104      	bne.n	8000fc4 <__aeabi_fdiv+0x118>
 8000fba:	024b      	lsls	r3, r1, #9
 8000fbc:	f43f af4c 	beq.w	8000e58 <__aeabi_fmul+0x114>
 8000fc0:	4608      	mov	r0, r1
 8000fc2:	e76e      	b.n	8000ea2 <__aeabi_fmul+0x15e>
 8000fc4:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000fc8:	bf18      	it	ne
 8000fca:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000fce:	d1ca      	bne.n	8000f66 <__aeabi_fdiv+0xba>
 8000fd0:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000fd4:	f47f af5c 	bne.w	8000e90 <__aeabi_fmul+0x14c>
 8000fd8:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000fdc:	f47f af3c 	bne.w	8000e58 <__aeabi_fmul+0x114>
 8000fe0:	e75f      	b.n	8000ea2 <__aeabi_fmul+0x15e>
 8000fe2:	bf00      	nop

08000fe4 <__gesf2>:
 8000fe4:	f04f 3cff 	mov.w	ip, #4294967295
 8000fe8:	e006      	b.n	8000ff8 <__cmpsf2+0x4>
 8000fea:	bf00      	nop

08000fec <__lesf2>:
 8000fec:	f04f 0c01 	mov.w	ip, #1
 8000ff0:	e002      	b.n	8000ff8 <__cmpsf2+0x4>
 8000ff2:	bf00      	nop

08000ff4 <__cmpsf2>:
 8000ff4:	f04f 0c01 	mov.w	ip, #1
 8000ff8:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000ffc:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001000:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8001004:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001008:	bf18      	it	ne
 800100a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800100e:	d011      	beq.n	8001034 <__cmpsf2+0x40>
 8001010:	b001      	add	sp, #4
 8001012:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8001016:	bf18      	it	ne
 8001018:	ea90 0f01 	teqne	r0, r1
 800101c:	bf58      	it	pl
 800101e:	ebb2 0003 	subspl.w	r0, r2, r3
 8001022:	bf88      	it	hi
 8001024:	17c8      	asrhi	r0, r1, #31
 8001026:	bf38      	it	cc
 8001028:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 800102c:	bf18      	it	ne
 800102e:	f040 0001 	orrne.w	r0, r0, #1
 8001032:	4770      	bx	lr
 8001034:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001038:	d102      	bne.n	8001040 <__cmpsf2+0x4c>
 800103a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 800103e:	d105      	bne.n	800104c <__cmpsf2+0x58>
 8001040:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001044:	d1e4      	bne.n	8001010 <__cmpsf2+0x1c>
 8001046:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800104a:	d0e1      	beq.n	8001010 <__cmpsf2+0x1c>
 800104c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8001050:	4770      	bx	lr
 8001052:	bf00      	nop

08001054 <__aeabi_cfrcmple>:
 8001054:	4684      	mov	ip, r0
 8001056:	4608      	mov	r0, r1
 8001058:	4661      	mov	r1, ip
 800105a:	e7ff      	b.n	800105c <__aeabi_cfcmpeq>

0800105c <__aeabi_cfcmpeq>:
 800105c:	b50f      	push	{r0, r1, r2, r3, lr}
 800105e:	f7ff ffc9 	bl	8000ff4 <__cmpsf2>
 8001062:	2800      	cmp	r0, #0
 8001064:	bf48      	it	mi
 8001066:	f110 0f00 	cmnmi.w	r0, #0
 800106a:	bd0f      	pop	{r0, r1, r2, r3, pc}

0800106c <__aeabi_fcmpeq>:
 800106c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001070:	f7ff fff4 	bl	800105c <__aeabi_cfcmpeq>
 8001074:	bf0c      	ite	eq
 8001076:	2001      	moveq	r0, #1
 8001078:	2000      	movne	r0, #0
 800107a:	f85d fb08 	ldr.w	pc, [sp], #8
 800107e:	bf00      	nop

08001080 <__aeabi_fcmplt>:
 8001080:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001084:	f7ff ffea 	bl	800105c <__aeabi_cfcmpeq>
 8001088:	bf34      	ite	cc
 800108a:	2001      	movcc	r0, #1
 800108c:	2000      	movcs	r0, #0
 800108e:	f85d fb08 	ldr.w	pc, [sp], #8
 8001092:	bf00      	nop

08001094 <__aeabi_fcmple>:
 8001094:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001098:	f7ff ffe0 	bl	800105c <__aeabi_cfcmpeq>
 800109c:	bf94      	ite	ls
 800109e:	2001      	movls	r0, #1
 80010a0:	2000      	movhi	r0, #0
 80010a2:	f85d fb08 	ldr.w	pc, [sp], #8
 80010a6:	bf00      	nop

080010a8 <__aeabi_fcmpge>:
 80010a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010ac:	f7ff ffd2 	bl	8001054 <__aeabi_cfrcmple>
 80010b0:	bf94      	ite	ls
 80010b2:	2001      	movls	r0, #1
 80010b4:	2000      	movhi	r0, #0
 80010b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80010ba:	bf00      	nop

080010bc <__aeabi_fcmpgt>:
 80010bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010c0:	f7ff ffc8 	bl	8001054 <__aeabi_cfrcmple>
 80010c4:	bf34      	ite	cc
 80010c6:	2001      	movcc	r0, #1
 80010c8:	2000      	movcs	r0, #0
 80010ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80010ce:	bf00      	nop

080010d0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80010d0:	b580      	push	{r7, lr}
 80010d2:	b088      	sub	sp, #32
 80010d4:	af04      	add	r7, sp, #16
  /* USER CODE BEGIN 1 */
	uint32_t tics_despachador;
	uint32_t wcet_todo = 0;
 80010d6:	2300      	movs	r3, #0
 80010d8:	60fb      	str	r3, [r7, #12]

	/*
	 * Pongo en diez la variable que cuenta la cantidad de ticks que tienen
	 * que pasar entre llamadas del despachador.
	 */
	ticks = TICK_SISTEMA;
 80010da:	4b57      	ldr	r3, [pc, #348]	; (8001238 <main+0x168>)
 80010dc:	220a      	movs	r2, #10
 80010de:	601a      	str	r2, [r3, #0]
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80010e0:	f001 fdec 	bl	8002cbc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80010e4:	f000 fccc 	bl	8001a80 <SystemClock_Config>

  /* Initialize all configured peripherals */
  /*
   * Inicializo todo el hardware.
   */
  dwt_init();
 80010e8:	4b54      	ldr	r3, [pc, #336]	; (800123c <main+0x16c>)
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	4a53      	ldr	r2, [pc, #332]	; (800123c <main+0x16c>)
 80010ee:	f043 0301 	orr.w	r3, r3, #1
 80010f2:	6013      	str	r3, [r2, #0]
 80010f4:	4b51      	ldr	r3, [pc, #324]	; (800123c <main+0x16c>)
 80010f6:	2200      	movs	r2, #0
 80010f8:	605a      	str	r2, [r3, #4]
  MX_GPIO_Init();
 80010fa:	f000 fd37 	bl	8001b6c <MX_GPIO_Init>
  MX_I2C1_Init();
 80010fe:	f000 fd07 	bl	8001b10 <MX_I2C1_Init>
  MPU6050_Init();
 8001102:	f000 fc6d 	bl	80019e0 <MPU6050_Init>
  SSD1306_Init();
 8001106:	f001 f8f3 	bl	80022f0 <SSD1306_Init>
  /* USER CODE BEGIN 2 */
	#ifdef __SET_IWDG
		MX_IWDG_Init();
	#endif
  /* USER CODE END 2 */
	HAL_GPIO_WritePin(GPIOC, Led_Blink_Pin, GPIO_PIN_RESET);
 800110a:	2200      	movs	r2, #0
 800110c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001110:	484b      	ldr	r0, [pc, #300]	; (8001240 <main+0x170>)
 8001112:	f002 f88a 	bl	800322a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, outputLed_Pin, GPIO_PIN_RESET);
 8001116:	2200      	movs	r2, #0
 8001118:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800111c:	4849      	ldr	r0, [pc, #292]	; (8001244 <main+0x174>)
 800111e:	f002 f884 	bl	800322a <HAL_GPIO_WritePin>
	Alarmas FedeGay;

	/*
	 * Uso el timer 2 para el monitor del sistema.
	 */
	RCC->APB1ENR |= RCC_APB1ENR_TIM2EN;
 8001122:	4b49      	ldr	r3, [pc, #292]	; (8001248 <main+0x178>)
 8001124:	69db      	ldr	r3, [r3, #28]
 8001126:	4a48      	ldr	r2, [pc, #288]	; (8001248 <main+0x178>)
 8001128:	f043 0301 	orr.w	r3, r3, #1
 800112c:	61d3      	str	r3, [r2, #28]
	/*
	 * Esta línea configura el prescaler del timer
	 * que cuenta tiempo del procesador. Prestar atención.
	 */
	TIM2->PSC = (SystemCoreClock / 1000000) - 1;
 800112e:	4b47      	ldr	r3, [pc, #284]	; (800124c <main+0x17c>)
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	4a47      	ldr	r2, [pc, #284]	; (8001250 <main+0x180>)
 8001134:	fba2 2303 	umull	r2, r3, r2, r3
 8001138:	0c9b      	lsrs	r3, r3, #18
 800113a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800113e:	3b01      	subs	r3, #1
 8001140:	6293      	str	r3, [r2, #40]	; 0x28
	TIM2->CNT = -1;
 8001142:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001146:	f04f 32ff 	mov.w	r2, #4294967295
 800114a:	625a      	str	r2, [r3, #36]	; 0x24
	TIM2->CR1 |= TIM_CR1_CEN;
 800114c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001156:	f043 0301 	orr.w	r3, r3, #1
 800115a:	6013      	str	r3, [r2, #0]
	TIM2->CR1 &= ~TIM_CR1_CEN;
 800115c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001166:	f023 0301 	bic.w	r3, r3, #1
 800116a:	6013      	str	r3, [r2, #0]
	 * un timer y otro para que me devuelva la cuenta y lo frene. El
	 * puntero restante es un puntero a función que se llama cuando
	 * hay falla en la medición de tiempos de las funciones.
	 *
	 */
	inicializar_despachador(lista_tareas,
 800116c:	4b39      	ldr	r3, [pc, #228]	; (8001254 <main+0x184>)
 800116e:	9300      	str	r3, [sp, #0]
 8001170:	4b39      	ldr	r3, [pc, #228]	; (8001258 <main+0x188>)
 8001172:	4a3a      	ldr	r2, [pc, #232]	; (800125c <main+0x18c>)
 8001174:	2108      	movs	r1, #8
 8001176:	483a      	ldr	r0, [pc, #232]	; (8001260 <main+0x190>)
 8001178:	f001 fc9a 	bl	8002ab0 <inicializar_despachador>
	MAX_LEN_TASK_LIST, start_timer, stop_timer, falla_sistema);

	//agregar_tarea(lista_tareas, tarea_iwdg, NULL, 0, 1, 0, 100000);
	agregar_tarea(lista_tareas, tarea_led_blinking, NULL, 0, 10, 0, 4); // et_wcet = 2
 800117c:	2304      	movs	r3, #4
 800117e:	9302      	str	r3, [sp, #8]
 8001180:	2300      	movs	r3, #0
 8001182:	9301      	str	r3, [sp, #4]
 8001184:	230a      	movs	r3, #10
 8001186:	9300      	str	r3, [sp, #0]
 8001188:	2300      	movs	r3, #0
 800118a:	2200      	movs	r2, #0
 800118c:	4935      	ldr	r1, [pc, #212]	; (8001264 <main+0x194>)
 800118e:	4834      	ldr	r0, [pc, #208]	; (8001260 <main+0x190>)
 8001190:	f001 fcca 	bl	8002b28 <agregar_tarea>
	agregar_tarea(lista_tareas, tarea_orienta, NULL, 0, 1, 0, 100000);   	// et_wcet = 926
 8001194:	4b34      	ldr	r3, [pc, #208]	; (8001268 <main+0x198>)
 8001196:	9302      	str	r3, [sp, #8]
 8001198:	2300      	movs	r3, #0
 800119a:	9301      	str	r3, [sp, #4]
 800119c:	2301      	movs	r3, #1
 800119e:	9300      	str	r3, [sp, #0]
 80011a0:	2300      	movs	r3, #0
 80011a2:	2200      	movs	r2, #0
 80011a4:	4931      	ldr	r1, [pc, #196]	; (800126c <main+0x19c>)
 80011a6:	482e      	ldr	r0, [pc, #184]	; (8001260 <main+0x190>)
 80011a8:	f001 fcbe 	bl	8002b28 <agregar_tarea>
    agregar_tarea(lista_tareas, tarea_refresh, NULL, 0, 1, 0, 100000);  	// et_wcet = 3632
 80011ac:	4b2e      	ldr	r3, [pc, #184]	; (8001268 <main+0x198>)
 80011ae:	9302      	str	r3, [sp, #8]
 80011b0:	2300      	movs	r3, #0
 80011b2:	9301      	str	r3, [sp, #4]
 80011b4:	2301      	movs	r3, #1
 80011b6:	9300      	str	r3, [sp, #0]
 80011b8:	2300      	movs	r3, #0
 80011ba:	2200      	movs	r2, #0
 80011bc:	492c      	ldr	r1, [pc, #176]	; (8001270 <main+0x1a0>)
 80011be:	4828      	ldr	r0, [pc, #160]	; (8001260 <main+0x190>)
 80011c0:	f001 fcb2 	bl	8002b28 <agregar_tarea>
    agregar_tarea(lista_tareas, tarea_pulsadores, NULL, 0, 10, 0, 100000);  	// et_wcet =
 80011c4:	4b28      	ldr	r3, [pc, #160]	; (8001268 <main+0x198>)
 80011c6:	9302      	str	r3, [sp, #8]
 80011c8:	2300      	movs	r3, #0
 80011ca:	9301      	str	r3, [sp, #4]
 80011cc:	230a      	movs	r3, #10
 80011ce:	9300      	str	r3, [sp, #0]
 80011d0:	2300      	movs	r3, #0
 80011d2:	2200      	movs	r2, #0
 80011d4:	4927      	ldr	r1, [pc, #156]	; (8001274 <main+0x1a4>)
 80011d6:	4822      	ldr	r0, [pc, #136]	; (8001260 <main+0x190>)
 80011d8:	f001 fca6 	bl	8002b28 <agregar_tarea>
    agregar_tarea(lista_tareas, tarea_modos, NULL, 0, 10, 0, 100000);  	// et_wcet =
 80011dc:	4b22      	ldr	r3, [pc, #136]	; (8001268 <main+0x198>)
 80011de:	9302      	str	r3, [sp, #8]
 80011e0:	2300      	movs	r3, #0
 80011e2:	9301      	str	r3, [sp, #4]
 80011e4:	230a      	movs	r3, #10
 80011e6:	9300      	str	r3, [sp, #0]
 80011e8:	2300      	movs	r3, #0
 80011ea:	2200      	movs	r2, #0
 80011ec:	4922      	ldr	r1, [pc, #136]	; (8001278 <main+0x1a8>)
 80011ee:	481c      	ldr	r0, [pc, #112]	; (8001260 <main+0x190>)
 80011f0:	f001 fc9a 	bl	8002b28 <agregar_tarea>
    agregar_tarea(lista_tareas, tarea_display, NULL, 0, 1, 0, 100000); 	// et_wcet = 7876
 80011f4:	4b1c      	ldr	r3, [pc, #112]	; (8001268 <main+0x198>)
 80011f6:	9302      	str	r3, [sp, #8]
 80011f8:	2300      	movs	r3, #0
 80011fa:	9301      	str	r3, [sp, #4]
 80011fc:	2301      	movs	r3, #1
 80011fe:	9300      	str	r3, [sp, #0]
 8001200:	2300      	movs	r3, #0
 8001202:	2200      	movs	r2, #0
 8001204:	491d      	ldr	r1, [pc, #116]	; (800127c <main+0x1ac>)
 8001206:	4816      	ldr	r0, [pc, #88]	; (8001260 <main+0x190>)
 8001208:	f001 fc8e 	bl	8002b28 <agregar_tarea>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1)
	{
		dwt_reset();
 800120c:	4b0b      	ldr	r3, [pc, #44]	; (800123c <main+0x16c>)
 800120e:	2200      	movs	r2, #0
 8001210:	605a      	str	r2, [r3, #4]
		if (!ticks)
 8001212:	4b09      	ldr	r3, [pc, #36]	; (8001238 <main+0x168>)
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	2b00      	cmp	r3, #0
 8001218:	d104      	bne.n	8001224 <main+0x154>
		{
			ticks = TICK_SISTEMA;
 800121a:	4b07      	ldr	r3, [pc, #28]	; (8001238 <main+0x168>)
 800121c:	220a      	movs	r2, #10
 800121e:	601a      	str	r2, [r3, #0]
			despachar_tareas();
 8001220:	f001 fd1e 	bl	8002c60 <despachar_tareas>
		}
		tics_despachador = dwt_read();
 8001224:	4b05      	ldr	r3, [pc, #20]	; (800123c <main+0x16c>)
 8001226:	685b      	ldr	r3, [r3, #4]
 8001228:	60bb      	str	r3, [r7, #8]
		if (tics_despachador > wcet_todo)
 800122a:	68ba      	ldr	r2, [r7, #8]
 800122c:	68fb      	ldr	r3, [r7, #12]
 800122e:	429a      	cmp	r2, r3
 8001230:	d9ec      	bls.n	800120c <main+0x13c>
			wcet_todo = tics_despachador;
 8001232:	68bb      	ldr	r3, [r7, #8]
 8001234:	60fb      	str	r3, [r7, #12]
		dwt_reset();
 8001236:	e7e9      	b.n	800120c <main+0x13c>
 8001238:	200007b0 	.word	0x200007b0
 800123c:	e0001000 	.word	0xe0001000
 8001240:	40011000 	.word	0x40011000
 8001244:	40010c00 	.word	0x40010c00
 8001248:	40021000 	.word	0x40021000
 800124c:	200000a0 	.word	0x200000a0
 8001250:	431bde83 	.word	0x431bde83
 8001254:	08001961 	.word	0x08001961
 8001258:	080019b5 	.word	0x080019b5
 800125c:	08001991 	.word	0x08001991
 8001260:	200007b4 	.word	0x200007b4
 8001264:	08001921 	.word	0x08001921
 8001268:	000186a0 	.word	0x000186a0
 800126c:	08001901 	.word	0x08001901
 8001270:	08001941 	.word	0x08001941
 8001274:	080012d5 	.word	0x080012d5
 8001278:	08001349 	.word	0x08001349
 800127c:	080014a1 	.word	0x080014a1

08001280 <antirebote>:
// Recibe el Pin donde esta el pulsador, y el tiempo en ticks debido a la funcion xTaskGetTickCount().
// Veo el pulsador hasta detectar pulso por primera vez, si pasados los 50ms sigue presionado, retorno un 1.
// Si no hay tecla presionada o si no pasaron 50ms desde la primera deteccion devuelvo un 0.

uint8_t antirebote (uint8_t teclaActual)
{
 8001280:	b480      	push	{r7}
 8001282:	b083      	sub	sp, #12
 8001284:	af00      	add	r7, sp, #0
 8001286:	4603      	mov	r3, r0
 8001288:	71fb      	strb	r3, [r7, #7]
	static uint8_t teclaAnt = NO_KEY;
	static uint8_t cont = 0;

	if(cont == 0){
 800128a:	4b10      	ldr	r3, [pc, #64]	; (80012cc <antirebote+0x4c>)
 800128c:	781b      	ldrb	r3, [r3, #0]
 800128e:	2b00      	cmp	r3, #0
 8001290:	d10a      	bne.n	80012a8 <antirebote+0x28>
		teclaAnt = teclaActual;
 8001292:	4a0f      	ldr	r2, [pc, #60]	; (80012d0 <antirebote+0x50>)
 8001294:	79fb      	ldrb	r3, [r7, #7]
 8001296:	7013      	strb	r3, [r2, #0]
		cont++;
 8001298:	4b0c      	ldr	r3, [pc, #48]	; (80012cc <antirebote+0x4c>)
 800129a:	781b      	ldrb	r3, [r3, #0]
 800129c:	3301      	adds	r3, #1
 800129e:	b2da      	uxtb	r2, r3
 80012a0:	4b0a      	ldr	r3, [pc, #40]	; (80012cc <antirebote+0x4c>)
 80012a2:	701a      	strb	r2, [r3, #0]
		}
		else{
			return NO_KEY;
		}
	}
	return NO_KEY;
 80012a4:	2300      	movs	r3, #0
 80012a6:	e00b      	b.n	80012c0 <antirebote+0x40>
		cont = 0;
 80012a8:	4b08      	ldr	r3, [pc, #32]	; (80012cc <antirebote+0x4c>)
 80012aa:	2200      	movs	r2, #0
 80012ac:	701a      	strb	r2, [r3, #0]
		if(teclaActual == teclaAnt){
 80012ae:	4b08      	ldr	r3, [pc, #32]	; (80012d0 <antirebote+0x50>)
 80012b0:	781b      	ldrb	r3, [r3, #0]
 80012b2:	79fa      	ldrb	r2, [r7, #7]
 80012b4:	429a      	cmp	r2, r3
 80012b6:	d102      	bne.n	80012be <antirebote+0x3e>
			return teclaAnt;
 80012b8:	4b05      	ldr	r3, [pc, #20]	; (80012d0 <antirebote+0x50>)
 80012ba:	781b      	ldrb	r3, [r3, #0]
 80012bc:	e000      	b.n	80012c0 <antirebote+0x40>
			return NO_KEY;
 80012be:	2300      	movs	r3, #0
}
 80012c0:	4618      	mov	r0, r3
 80012c2:	370c      	adds	r7, #12
 80012c4:	46bd      	mov	sp, r7
 80012c6:	bc80      	pop	{r7}
 80012c8:	4770      	bx	lr
 80012ca:	bf00      	nop
 80012cc:	200002a8 	.word	0x200002a8
 80012d0:	200002a9 	.word	0x200002a9

080012d4 <tarea_pulsadores>:


// TAREAS

void tarea_pulsadores (void *p)
{
 80012d4:	b580      	push	{r7, lr}
 80012d6:	b082      	sub	sp, #8
 80012d8:	af00      	add	r7, sp, #0
 80012da:	6078      	str	r0, [r7, #4]

	if(HAL_GPIO_ReadPin(MODE_KEY)){
 80012dc:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80012e0:	4817      	ldr	r0, [pc, #92]	; (8001340 <tarea_pulsadores+0x6c>)
 80012e2:	f001 ff8b 	bl	80031fc <HAL_GPIO_ReadPin>
 80012e6:	4603      	mov	r3, r0
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d002      	beq.n	80012f2 <tarea_pulsadores+0x1e>
		tecla = MODE;
 80012ec:	4b15      	ldr	r3, [pc, #84]	; (8001344 <tarea_pulsadores+0x70>)
 80012ee:	2201      	movs	r2, #1
 80012f0:	701a      	strb	r2, [r3, #0]
	}

	if(HAL_GPIO_ReadPin(ZERO_KEY)){
 80012f2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80012f6:	4812      	ldr	r0, [pc, #72]	; (8001340 <tarea_pulsadores+0x6c>)
 80012f8:	f001 ff80 	bl	80031fc <HAL_GPIO_ReadPin>
 80012fc:	4603      	mov	r3, r0
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d002      	beq.n	8001308 <tarea_pulsadores+0x34>
		tecla = ZERO;
 8001302:	4b10      	ldr	r3, [pc, #64]	; (8001344 <tarea_pulsadores+0x70>)
 8001304:	2202      	movs	r2, #2
 8001306:	701a      	strb	r2, [r3, #0]
	}

	if(HAL_GPIO_ReadPin(HOLD_KEY)){
 8001308:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800130c:	480c      	ldr	r0, [pc, #48]	; (8001340 <tarea_pulsadores+0x6c>)
 800130e:	f001 ff75 	bl	80031fc <HAL_GPIO_ReadPin>
 8001312:	4603      	mov	r3, r0
 8001314:	2b00      	cmp	r3, #0
 8001316:	d002      	beq.n	800131e <tarea_pulsadores+0x4a>
		tecla = HOLD;
 8001318:	4b0a      	ldr	r3, [pc, #40]	; (8001344 <tarea_pulsadores+0x70>)
 800131a:	2203      	movs	r2, #3
 800131c:	701a      	strb	r2, [r3, #0]
	}

	if (tecla != NO_KEY)
 800131e:	4b09      	ldr	r3, [pc, #36]	; (8001344 <tarea_pulsadores+0x70>)
 8001320:	781b      	ldrb	r3, [r3, #0]
 8001322:	2b00      	cmp	r3, #0
 8001324:	d008      	beq.n	8001338 <tarea_pulsadores+0x64>
		tecla = antirebote(tecla);
 8001326:	4b07      	ldr	r3, [pc, #28]	; (8001344 <tarea_pulsadores+0x70>)
 8001328:	781b      	ldrb	r3, [r3, #0]
 800132a:	4618      	mov	r0, r3
 800132c:	f7ff ffa8 	bl	8001280 <antirebote>
 8001330:	4603      	mov	r3, r0
 8001332:	461a      	mov	r2, r3
 8001334:	4b03      	ldr	r3, [pc, #12]	; (8001344 <tarea_pulsadores+0x70>)
 8001336:	701a      	strb	r2, [r3, #0]

}
 8001338:	bf00      	nop
 800133a:	3708      	adds	r7, #8
 800133c:	46bd      	mov	sp, r7
 800133e:	bd80      	pop	{r7, pc}
 8001340:	40010c00 	.word	0x40010c00
 8001344:	200002a4 	.word	0x200002a4

08001348 <tarea_modos>:

void tarea_modos(void *p)
{
 8001348:	b580      	push	{r7, lr}
 800134a:	b082      	sub	sp, #8
 800134c:	af00      	add	r7, sp, #0
 800134e:	6078      	str	r0, [r7, #4]
	static uint8_t clean = OFF;
	static uint8_t mode = MODO_MEDIR;

	if(tecla == MODE){
 8001350:	4b49      	ldr	r3, [pc, #292]	; (8001478 <tarea_modos+0x130>)
 8001352:	781b      	ldrb	r3, [r3, #0]
 8001354:	2b01      	cmp	r3, #1
 8001356:	d115      	bne.n	8001384 <tarea_modos+0x3c>
		mode++;
 8001358:	4b48      	ldr	r3, [pc, #288]	; (800147c <tarea_modos+0x134>)
 800135a:	781b      	ldrb	r3, [r3, #0]
 800135c:	3301      	adds	r3, #1
 800135e:	b2da      	uxtb	r2, r3
 8001360:	4b46      	ldr	r3, [pc, #280]	; (800147c <tarea_modos+0x134>)
 8001362:	701a      	strb	r2, [r3, #0]
		mode%=CANT_MODOS;
 8001364:	4b45      	ldr	r3, [pc, #276]	; (800147c <tarea_modos+0x134>)
 8001366:	781a      	ldrb	r2, [r3, #0]
 8001368:	4b45      	ldr	r3, [pc, #276]	; (8001480 <tarea_modos+0x138>)
 800136a:	fba3 1302 	umull	r1, r3, r3, r2
 800136e:	0859      	lsrs	r1, r3, #1
 8001370:	460b      	mov	r3, r1
 8001372:	005b      	lsls	r3, r3, #1
 8001374:	440b      	add	r3, r1
 8001376:	1ad3      	subs	r3, r2, r3
 8001378:	b2da      	uxtb	r2, r3
 800137a:	4b40      	ldr	r3, [pc, #256]	; (800147c <tarea_modos+0x134>)
 800137c:	701a      	strb	r2, [r3, #0]
		clean = OFF;
 800137e:	4b41      	ldr	r3, [pc, #260]	; (8001484 <tarea_modos+0x13c>)
 8001380:	2200      	movs	r2, #0
 8001382:	701a      	strb	r2, [r3, #0]
	}

	switch(mode){
 8001384:	4b3d      	ldr	r3, [pc, #244]	; (800147c <tarea_modos+0x134>)
 8001386:	781b      	ldrb	r3, [r3, #0]
 8001388:	2b01      	cmp	r3, #1
 800138a:	d02a      	beq.n	80013e2 <tarea_modos+0x9a>
 800138c:	2b02      	cmp	r3, #2
 800138e:	d04f      	beq.n	8001430 <tarea_modos+0xe8>
 8001390:	2b00      	cmp	r3, #0
 8001392:	d166      	bne.n	8001462 <tarea_modos+0x11a>
	case MODO_MEDIR:
		if(clean == OFF){
 8001394:	4b3b      	ldr	r3, [pc, #236]	; (8001484 <tarea_modos+0x13c>)
 8001396:	781b      	ldrb	r3, [r3, #0]
 8001398:	2b00      	cmp	r3, #0
 800139a:	d10d      	bne.n	80013b8 <tarea_modos+0x70>
			SSD1306_Fill(SSD1306_COLOR_BLACK); /* Clear screen */
 800139c:	2000      	movs	r0, #0
 800139e:	f001 f8a3 	bl	80024e8 <SSD1306_Fill>
			offset_x = 0;
 80013a2:	4b39      	ldr	r3, [pc, #228]	; (8001488 <tarea_modos+0x140>)
 80013a4:	f04f 0200 	mov.w	r2, #0
 80013a8:	601a      	str	r2, [r3, #0]
			offset_y = 0;
 80013aa:	4b38      	ldr	r3, [pc, #224]	; (800148c <tarea_modos+0x144>)
 80013ac:	f04f 0200 	mov.w	r2, #0
 80013b0:	601a      	str	r2, [r3, #0]
			clean = ON;
 80013b2:	4b34      	ldr	r3, [pc, #208]	; (8001484 <tarea_modos+0x13c>)
 80013b4:	2201      	movs	r2, #1
 80013b6:	701a      	strb	r2, [r3, #0]
		}
		fEjeY = OFF;
 80013b8:	4b35      	ldr	r3, [pc, #212]	; (8001490 <tarea_modos+0x148>)
 80013ba:	2200      	movs	r2, #0
 80013bc:	701a      	strb	r2, [r3, #0]
		if(tecla == HOLD){
 80013be:	4b2e      	ldr	r3, [pc, #184]	; (8001478 <tarea_modos+0x130>)
 80013c0:	781b      	ldrb	r3, [r3, #0]
 80013c2:	2b03      	cmp	r3, #3
 80013c4:	d105      	bne.n	80013d2 <tarea_modos+0x8a>
			f_hold = ~ f_hold; // toggle flag
 80013c6:	4b33      	ldr	r3, [pc, #204]	; (8001494 <tarea_modos+0x14c>)
 80013c8:	781b      	ldrb	r3, [r3, #0]
 80013ca:	43db      	mvns	r3, r3
 80013cc:	b2da      	uxtb	r2, r3
 80013ce:	4b31      	ldr	r3, [pc, #196]	; (8001494 <tarea_modos+0x14c>)
 80013d0:	701a      	strb	r2, [r3, #0]
		}
		if(tecla == ZERO){
 80013d2:	4b29      	ldr	r3, [pc, #164]	; (8001478 <tarea_modos+0x130>)
 80013d4:	781b      	ldrb	r3, [r3, #0]
 80013d6:	2b02      	cmp	r3, #2
 80013d8:	d147      	bne.n	800146a <tarea_modos+0x122>
			// VER COMO IMPLEMENTAR -- NO LO VOY A PENSAR AHORA -- gg ez
			f_zero = ON;
 80013da:	4b2f      	ldr	r3, [pc, #188]	; (8001498 <tarea_modos+0x150>)
 80013dc:	2201      	movs	r2, #1
 80013de:	701a      	strb	r2, [r3, #0]
		}
		break;
 80013e0:	e043      	b.n	800146a <tarea_modos+0x122>

	case MODO_NIVEL:
		if(clean == OFF){
 80013e2:	4b28      	ldr	r3, [pc, #160]	; (8001484 <tarea_modos+0x13c>)
 80013e4:	781b      	ldrb	r3, [r3, #0]
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d10d      	bne.n	8001406 <tarea_modos+0xbe>
			SSD1306_Fill(SSD1306_COLOR_BLACK); /* Clear screen */
 80013ea:	2000      	movs	r0, #0
 80013ec:	f001 f87c 	bl	80024e8 <SSD1306_Fill>
			offset_x = 0;
 80013f0:	4b25      	ldr	r3, [pc, #148]	; (8001488 <tarea_modos+0x140>)
 80013f2:	f04f 0200 	mov.w	r2, #0
 80013f6:	601a      	str	r2, [r3, #0]
			offset_y = 0;
 80013f8:	4b24      	ldr	r3, [pc, #144]	; (800148c <tarea_modos+0x144>)
 80013fa:	f04f 0200 	mov.w	r2, #0
 80013fe:	601a      	str	r2, [r3, #0]
			clean = ON;
 8001400:	4b20      	ldr	r3, [pc, #128]	; (8001484 <tarea_modos+0x13c>)
 8001402:	2201      	movs	r2, #1
 8001404:	701a      	strb	r2, [r3, #0]
		}
		fEjeY = ON;
 8001406:	4b22      	ldr	r3, [pc, #136]	; (8001490 <tarea_modos+0x148>)
 8001408:	2201      	movs	r2, #1
 800140a:	701a      	strb	r2, [r3, #0]
		if(tecla == HOLD){
 800140c:	4b1a      	ldr	r3, [pc, #104]	; (8001478 <tarea_modos+0x130>)
 800140e:	781b      	ldrb	r3, [r3, #0]
 8001410:	2b03      	cmp	r3, #3
 8001412:	d105      	bne.n	8001420 <tarea_modos+0xd8>
			f_hold = ~ f_hold; // toggle flag
 8001414:	4b1f      	ldr	r3, [pc, #124]	; (8001494 <tarea_modos+0x14c>)
 8001416:	781b      	ldrb	r3, [r3, #0]
 8001418:	43db      	mvns	r3, r3
 800141a:	b2da      	uxtb	r2, r3
 800141c:	4b1d      	ldr	r3, [pc, #116]	; (8001494 <tarea_modos+0x14c>)
 800141e:	701a      	strb	r2, [r3, #0]
		}
		if(tecla == ZERO){
 8001420:	4b15      	ldr	r3, [pc, #84]	; (8001478 <tarea_modos+0x130>)
 8001422:	781b      	ldrb	r3, [r3, #0]
 8001424:	2b02      	cmp	r3, #2
 8001426:	d122      	bne.n	800146e <tarea_modos+0x126>
			// VER COMO IMPLEMENTAR -- NO LO VOY A PENSAR AHORA -- gg ez
			f_zero = ON;
 8001428:	4b1b      	ldr	r3, [pc, #108]	; (8001498 <tarea_modos+0x150>)
 800142a:	2201      	movs	r2, #1
 800142c:	701a      	strb	r2, [r3, #0]
		}
		break;
 800142e:	e01e      	b.n	800146e <tarea_modos+0x126>
	case MODO_ALARMAS:
		if(clean == OFF){
 8001430:	4b14      	ldr	r3, [pc, #80]	; (8001484 <tarea_modos+0x13c>)
 8001432:	781b      	ldrb	r3, [r3, #0]
 8001434:	2b00      	cmp	r3, #0
 8001436:	d10d      	bne.n	8001454 <tarea_modos+0x10c>
			SSD1306_Fill(SSD1306_COLOR_BLACK); /* Clear screen */
 8001438:	2000      	movs	r0, #0
 800143a:	f001 f855 	bl	80024e8 <SSD1306_Fill>
			offset_x = 0;
 800143e:	4b12      	ldr	r3, [pc, #72]	; (8001488 <tarea_modos+0x140>)
 8001440:	f04f 0200 	mov.w	r2, #0
 8001444:	601a      	str	r2, [r3, #0]
			offset_y = 0;
 8001446:	4b11      	ldr	r3, [pc, #68]	; (800148c <tarea_modos+0x144>)
 8001448:	f04f 0200 	mov.w	r2, #0
 800144c:	601a      	str	r2, [r3, #0]
			clean = ON;
 800144e:	4b0d      	ldr	r3, [pc, #52]	; (8001484 <tarea_modos+0x13c>)
 8001450:	2201      	movs	r2, #1
 8001452:	701a      	strb	r2, [r3, #0]
		}
		fEjeY = OFF;
 8001454:	4b0e      	ldr	r3, [pc, #56]	; (8001490 <tarea_modos+0x148>)
 8001456:	2200      	movs	r2, #0
 8001458:	701a      	strb	r2, [r3, #0]
		f_hold = OFF;
 800145a:	4b0e      	ldr	r3, [pc, #56]	; (8001494 <tarea_modos+0x14c>)
 800145c:	2200      	movs	r2, #0
 800145e:	701a      	strb	r2, [r3, #0]


		break;
 8001460:	e006      	b.n	8001470 <tarea_modos+0x128>
	default:
		mode = MODO_MEDIR;
 8001462:	4b06      	ldr	r3, [pc, #24]	; (800147c <tarea_modos+0x134>)
 8001464:	2200      	movs	r2, #0
 8001466:	701a      	strb	r2, [r3, #0]
	}
}
 8001468:	e002      	b.n	8001470 <tarea_modos+0x128>
		break;
 800146a:	bf00      	nop
 800146c:	e000      	b.n	8001470 <tarea_modos+0x128>
		break;
 800146e:	bf00      	nop
}
 8001470:	bf00      	nop
 8001472:	3708      	adds	r7, #8
 8001474:	46bd      	mov	sp, r7
 8001476:	bd80      	pop	{r7, pc}
 8001478:	200002a4 	.word	0x200002a4
 800147c:	200002aa 	.word	0x200002aa
 8001480:	aaaaaaab 	.word	0xaaaaaaab
 8001484:	200002ab 	.word	0x200002ab
 8001488:	2000029c 	.word	0x2000029c
 800148c:	200002a0 	.word	0x200002a0
 8001490:	200002a7 	.word	0x200002a7
 8001494:	200002a5 	.word	0x200002a5
 8001498:	200002a6 	.word	0x200002a6
 800149c:	00000000 	.word	0x00000000

080014a0 <tarea_display>:

void tarea_display(void *p)
{
 80014a0:	b590      	push	{r4, r7, lr}
 80014a2:	b08d      	sub	sp, #52	; 0x34
 80014a4:	af00      	add	r7, sp, #0
 80014a6:	6078      	str	r0, [r7, #4]
	static int cont = 0;				//!< Variable contador para el promedio
	static float prom_x = 0;			//!<
	static float prom_y = 0;			//!<
	static float valorAntX = 0;			//!<
	static float valorAntY = 0;			//!<
	float prom_offset_x = 0;			//!<
 80014a8:	f04f 0300 	mov.w	r3, #0
 80014ac:	62fb      	str	r3, [r7, #44]	; 0x2c
	float prom_offset_y = 0;			//!<
 80014ae:	f04f 0300 	mov.w	r3, #0
 80014b2:	62bb      	str	r3, [r7, #40]	; 0x28
	char str_x[5];						//!<
	char str_y[5];						//!<
	char str1[6] = {0};				//!<
 80014b4:	f107 0310 	add.w	r3, r7, #16
 80014b8:	2200      	movs	r2, #0
 80014ba:	601a      	str	r2, [r3, #0]
 80014bc:	809a      	strh	r2, [r3, #4]
	char str2[6] = {0};				//!<
 80014be:	f107 0308 	add.w	r3, r7, #8
 80014c2:	2200      	movs	r2, #0
 80014c4:	601a      	str	r2, [r3, #0]
 80014c6:	809a      	strh	r2, [r3, #4]

	if(cont >= PROMEDIO){
 80014c8:	4b87      	ldr	r3, [pc, #540]	; (80016e8 <tarea_display+0x248>)
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	2b31      	cmp	r3, #49	; 0x31
 80014ce:	f340 81c9 	ble.w	8001864 <tarea_display+0x3c4>
		cont = 0;
 80014d2:	4b85      	ldr	r3, [pc, #532]	; (80016e8 <tarea_display+0x248>)
 80014d4:	2200      	movs	r2, #0
 80014d6:	601a      	str	r2, [r3, #0]
		prom_x /= PROMEDIO;
 80014d8:	4b84      	ldr	r3, [pc, #528]	; (80016ec <tarea_display+0x24c>)
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	4984      	ldr	r1, [pc, #528]	; (80016f0 <tarea_display+0x250>)
 80014de:	4618      	mov	r0, r3
 80014e0:	f7ff fce4 	bl	8000eac <__aeabi_fdiv>
 80014e4:	4603      	mov	r3, r0
 80014e6:	461a      	mov	r2, r3
 80014e8:	4b80      	ldr	r3, [pc, #512]	; (80016ec <tarea_display+0x24c>)
 80014ea:	601a      	str	r2, [r3, #0]
		prom_y /= PROMEDIO;
 80014ec:	4b81      	ldr	r3, [pc, #516]	; (80016f4 <tarea_display+0x254>)
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	497f      	ldr	r1, [pc, #508]	; (80016f0 <tarea_display+0x250>)
 80014f2:	4618      	mov	r0, r3
 80014f4:	f7ff fcda 	bl	8000eac <__aeabi_fdiv>
 80014f8:	4603      	mov	r3, r0
 80014fa:	461a      	mov	r2, r3
 80014fc:	4b7d      	ldr	r3, [pc, #500]	; (80016f4 <tarea_display+0x254>)
 80014fe:	601a      	str	r2, [r3, #0]

		//------------------------------------------------------------------------------------------------
		//--------------------------------------- Chequeo signo -----------------------------------------
		//------------------------------------------------------------------------------------------------
		if(offset_x != 0){
 8001500:	4b7d      	ldr	r3, [pc, #500]	; (80016f8 <tarea_display+0x258>)
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	f04f 0100 	mov.w	r1, #0
 8001508:	4618      	mov	r0, r3
 800150a:	f7ff fdaf 	bl	800106c <__aeabi_fcmpeq>
 800150e:	4603      	mov	r3, r0
 8001510:	2b00      	cmp	r3, #0
 8001512:	d113      	bne.n	800153c <tarea_display+0x9c>
			prom_x = fabs(prom_x);
 8001514:	4b75      	ldr	r3, [pc, #468]	; (80016ec <tarea_display+0x24c>)
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800151c:	4a73      	ldr	r2, [pc, #460]	; (80016ec <tarea_display+0x24c>)
 800151e:	6013      	str	r3, [r2, #0]

			if((prom_offset_x) < 0)
 8001520:	f04f 0100 	mov.w	r1, #0
 8001524:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001526:	f7ff fdab 	bl	8001080 <__aeabi_fcmplt>
 800152a:	4603      	mov	r3, r0
 800152c:	2b00      	cmp	r3, #0
 800152e:	d002      	beq.n	8001536 <tarea_display+0x96>
				str1[0] = 118; // v
 8001530:	2376      	movs	r3, #118	; 0x76
 8001532:	743b      	strb	r3, [r7, #16]
 8001534:	e017      	b.n	8001566 <tarea_display+0xc6>
			else
				str1[0] = 94; // ^
 8001536:	235e      	movs	r3, #94	; 0x5e
 8001538:	743b      	strb	r3, [r7, #16]
 800153a:	e014      	b.n	8001566 <tarea_display+0xc6>
		}
		else{
			if(prom_x < 0)
 800153c:	4b6b      	ldr	r3, [pc, #428]	; (80016ec <tarea_display+0x24c>)
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	f04f 0100 	mov.w	r1, #0
 8001544:	4618      	mov	r0, r3
 8001546:	f7ff fd9b 	bl	8001080 <__aeabi_fcmplt>
 800154a:	4603      	mov	r3, r0
 800154c:	2b00      	cmp	r3, #0
 800154e:	d002      	beq.n	8001556 <tarea_display+0xb6>
				str1[0] = 118; // v
 8001550:	2376      	movs	r3, #118	; 0x76
 8001552:	743b      	strb	r3, [r7, #16]
 8001554:	e001      	b.n	800155a <tarea_display+0xba>
			else
				str1[0] = 94; // ^
 8001556:	235e      	movs	r3, #94	; 0x5e
 8001558:	743b      	strb	r3, [r7, #16]
			prom_x = fabs(prom_x);
 800155a:	4b64      	ldr	r3, [pc, #400]	; (80016ec <tarea_display+0x24c>)
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001562:	4a62      	ldr	r2, [pc, #392]	; (80016ec <tarea_display+0x24c>)
 8001564:	6013      	str	r3, [r2, #0]
		}

		if(offset_y != 0){
 8001566:	4b65      	ldr	r3, [pc, #404]	; (80016fc <tarea_display+0x25c>)
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	f04f 0100 	mov.w	r1, #0
 800156e:	4618      	mov	r0, r3
 8001570:	f7ff fd7c 	bl	800106c <__aeabi_fcmpeq>
 8001574:	4603      	mov	r3, r0
 8001576:	2b00      	cmp	r3, #0
 8001578:	d113      	bne.n	80015a2 <tarea_display+0x102>
			prom_y = fabs(prom_y);
 800157a:	4b5e      	ldr	r3, [pc, #376]	; (80016f4 <tarea_display+0x254>)
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001582:	4a5c      	ldr	r2, [pc, #368]	; (80016f4 <tarea_display+0x254>)
 8001584:	6013      	str	r3, [r2, #0]

			if((prom_offset_y) < 0)
 8001586:	f04f 0100 	mov.w	r1, #0
 800158a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800158c:	f7ff fd78 	bl	8001080 <__aeabi_fcmplt>
 8001590:	4603      	mov	r3, r0
 8001592:	2b00      	cmp	r3, #0
 8001594:	d002      	beq.n	800159c <tarea_display+0xfc>
				str2[0] = 118; // v
 8001596:	2376      	movs	r3, #118	; 0x76
 8001598:	723b      	strb	r3, [r7, #8]
 800159a:	e017      	b.n	80015cc <tarea_display+0x12c>
			else
				str2[0] = 94; // ^
 800159c:	235e      	movs	r3, #94	; 0x5e
 800159e:	723b      	strb	r3, [r7, #8]
 80015a0:	e014      	b.n	80015cc <tarea_display+0x12c>
		}
		else{
			if(prom_y < 0)
 80015a2:	4b54      	ldr	r3, [pc, #336]	; (80016f4 <tarea_display+0x254>)
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	f04f 0100 	mov.w	r1, #0
 80015aa:	4618      	mov	r0, r3
 80015ac:	f7ff fd68 	bl	8001080 <__aeabi_fcmplt>
 80015b0:	4603      	mov	r3, r0
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d002      	beq.n	80015bc <tarea_display+0x11c>
				str2[0] = 118; // v
 80015b6:	2376      	movs	r3, #118	; 0x76
 80015b8:	723b      	strb	r3, [r7, #8]
 80015ba:	e001      	b.n	80015c0 <tarea_display+0x120>
			else
				str2[0] = 94; // ^
 80015bc:	235e      	movs	r3, #94	; 0x5e
 80015be:	723b      	strb	r3, [r7, #8]
			prom_x = fabs(prom_x);
 80015c0:	4b4a      	ldr	r3, [pc, #296]	; (80016ec <tarea_display+0x24c>)
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80015c8:	4a48      	ldr	r2, [pc, #288]	; (80016ec <tarea_display+0x24c>)
 80015ca:	6013      	str	r3, [r2, #0]
		}

		prom_offset_x = prom_x - offset_x;
 80015cc:	4b47      	ldr	r3, [pc, #284]	; (80016ec <tarea_display+0x24c>)
 80015ce:	681a      	ldr	r2, [r3, #0]
 80015d0:	4b49      	ldr	r3, [pc, #292]	; (80016f8 <tarea_display+0x258>)
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	4619      	mov	r1, r3
 80015d6:	4610      	mov	r0, r2
 80015d8:	f7ff faaa 	bl	8000b30 <__aeabi_fsub>
 80015dc:	4603      	mov	r3, r0
 80015de:	62fb      	str	r3, [r7, #44]	; 0x2c
		prom_offset_y = prom_y - offset_y;
 80015e0:	4b44      	ldr	r3, [pc, #272]	; (80016f4 <tarea_display+0x254>)
 80015e2:	681a      	ldr	r2, [r3, #0]
 80015e4:	4b45      	ldr	r3, [pc, #276]	; (80016fc <tarea_display+0x25c>)
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	4619      	mov	r1, r3
 80015ea:	4610      	mov	r0, r2
 80015ec:	f7ff faa0 	bl	8000b30 <__aeabi_fsub>
 80015f0:	4603      	mov	r3, r0
 80015f2:	62bb      	str	r3, [r7, #40]	; 0x28

		//------------------------------------------------------------------------------------------------
		//----------------------------------------------- Zero -------------------------------------------
		//------------------------------------------------------------------------------------------------
		if(f_zero == ON){
 80015f4:	4b42      	ldr	r3, [pc, #264]	; (8001700 <tarea_display+0x260>)
 80015f6:	781b      	ldrb	r3, [r3, #0]
 80015f8:	2b01      	cmp	r3, #1
 80015fa:	d10a      	bne.n	8001612 <tarea_display+0x172>
			offset_x = prom_x;
 80015fc:	4b3b      	ldr	r3, [pc, #236]	; (80016ec <tarea_display+0x24c>)
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	4a3d      	ldr	r2, [pc, #244]	; (80016f8 <tarea_display+0x258>)
 8001602:	6013      	str	r3, [r2, #0]
			offset_y = prom_y;
 8001604:	4b3b      	ldr	r3, [pc, #236]	; (80016f4 <tarea_display+0x254>)
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	4a3c      	ldr	r2, [pc, #240]	; (80016fc <tarea_display+0x25c>)
 800160a:	6013      	str	r3, [r2, #0]
			f_zero = OFF;
 800160c:	4b3c      	ldr	r3, [pc, #240]	; (8001700 <tarea_display+0x260>)
 800160e:	2200      	movs	r2, #0
 8001610:	701a      	strb	r2, [r3, #0]
		}

		//------------------------------------------------------------------------------------------------
		//------------------------------------------- THRESHOLD ------------------------------------------
		//------------------------------------------------------------------------------------------------
		if(fabs(prom_offset_x - valorAntX) < THRESHOLD )
 8001612:	4b3c      	ldr	r3, [pc, #240]	; (8001704 <tarea_display+0x264>)
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	4619      	mov	r1, r3
 8001618:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800161a:	f7ff fa89 	bl	8000b30 <__aeabi_fsub>
 800161e:	4603      	mov	r3, r0
 8001620:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001624:	4618      	mov	r0, r3
 8001626:	f7fe feff 	bl	8000428 <__aeabi_f2d>
 800162a:	a32d      	add	r3, pc, #180	; (adr r3, 80016e0 <tarea_display+0x240>)
 800162c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001630:	f7ff f9c4 	bl	80009bc <__aeabi_dcmplt>
 8001634:	4603      	mov	r3, r0
 8001636:	2b00      	cmp	r3, #0
 8001638:	d002      	beq.n	8001640 <tarea_display+0x1a0>
			prom_offset_x = valorAntX;
 800163a:	4b32      	ldr	r3, [pc, #200]	; (8001704 <tarea_display+0x264>)
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	62fb      	str	r3, [r7, #44]	; 0x2c
		if(fabs(prom_offset_x - valorAntY) < THRESHOLD )
 8001640:	4b31      	ldr	r3, [pc, #196]	; (8001708 <tarea_display+0x268>)
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	4619      	mov	r1, r3
 8001646:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001648:	f7ff fa72 	bl	8000b30 <__aeabi_fsub>
 800164c:	4603      	mov	r3, r0
 800164e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001652:	4618      	mov	r0, r3
 8001654:	f7fe fee8 	bl	8000428 <__aeabi_f2d>
 8001658:	a321      	add	r3, pc, #132	; (adr r3, 80016e0 <tarea_display+0x240>)
 800165a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800165e:	f7ff f9ad 	bl	80009bc <__aeabi_dcmplt>
 8001662:	4603      	mov	r3, r0
 8001664:	2b00      	cmp	r3, #0
 8001666:	d002      	beq.n	800166e <tarea_display+0x1ce>
			prom_offset_y = valorAntY;
 8001668:	4b27      	ldr	r3, [pc, #156]	; (8001708 <tarea_display+0x268>)
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	62bb      	str	r3, [r7, #40]	; 0x28

		//------------------------------------------------------------------------------------------------
		//-------------------------------------------- Valor Anterior ------------------------------------
		//------------------------------------------------------------------------------------------------
		valorAntX = prom_offset_x;
 800166e:	4a25      	ldr	r2, [pc, #148]	; (8001704 <tarea_display+0x264>)
 8001670:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001672:	6013      	str	r3, [r2, #0]
		valorAntY = prom_offset_y;
 8001674:	4a24      	ldr	r2, [pc, #144]	; (8001708 <tarea_display+0x268>)
 8001676:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001678:	6013      	str	r3, [r2, #0]

		//------------------------------------------------------------------------------------------------
		//---------------------------------------- Redondeo ----------------------------------------------
		//------------------------------------------------------------------------------------------------
		if(fabs(prom_offset_x) >= 10 ){
 800167a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800167c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001680:	4922      	ldr	r1, [pc, #136]	; (800170c <tarea_display+0x26c>)
 8001682:	4618      	mov	r0, r3
 8001684:	f7ff fd10 	bl	80010a8 <__aeabi_fcmpge>
 8001688:	4603      	mov	r3, r0
 800168a:	2b00      	cmp	r3, #0
 800168c:	d044      	beq.n	8001718 <tarea_display+0x278>
			sprintf(str_x,"%.2f", roundf(fabs(prom_offset_x) * 100)/100);
 800168e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001690:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001694:	491e      	ldr	r1, [pc, #120]	; (8001710 <tarea_display+0x270>)
 8001696:	4618      	mov	r0, r3
 8001698:	f7ff fb54 	bl	8000d44 <__aeabi_fmul>
 800169c:	4603      	mov	r3, r0
 800169e:	4618      	mov	r0, r3
 80016a0:	f005 fe30 	bl	8007304 <roundf>
 80016a4:	4603      	mov	r3, r0
 80016a6:	491a      	ldr	r1, [pc, #104]	; (8001710 <tarea_display+0x270>)
 80016a8:	4618      	mov	r0, r3
 80016aa:	f7ff fbff 	bl	8000eac <__aeabi_fdiv>
 80016ae:	4603      	mov	r3, r0
 80016b0:	4618      	mov	r0, r3
 80016b2:	f7fe feb9 	bl	8000428 <__aeabi_f2d>
 80016b6:	4603      	mov	r3, r0
 80016b8:	460c      	mov	r4, r1
 80016ba:	f107 0020 	add.w	r0, r7, #32
 80016be:	461a      	mov	r2, r3
 80016c0:	4623      	mov	r3, r4
 80016c2:	4914      	ldr	r1, [pc, #80]	; (8001714 <tarea_display+0x274>)
 80016c4:	f004 f890 	bl	80057e8 <siprintf>
			strcat(str1, str_x);
 80016c8:	f107 0220 	add.w	r2, r7, #32
 80016cc:	f107 0310 	add.w	r3, r7, #16
 80016d0:	4611      	mov	r1, r2
 80016d2:	4618      	mov	r0, r3
 80016d4:	f004 f8a8 	bl	8005828 <strcat>
 80016d8:	e043      	b.n	8001762 <tarea_display+0x2c2>
 80016da:	bf00      	nop
 80016dc:	f3af 8000 	nop.w
 80016e0:	0a3d70a4 	.word	0x0a3d70a4
 80016e4:	3fc0a3d7 	.word	0x3fc0a3d7
 80016e8:	200002ac 	.word	0x200002ac
 80016ec:	200002b0 	.word	0x200002b0
 80016f0:	42480000 	.word	0x42480000
 80016f4:	200002b4 	.word	0x200002b4
 80016f8:	2000029c 	.word	0x2000029c
 80016fc:	200002a0 	.word	0x200002a0
 8001700:	200002a6 	.word	0x200002a6
 8001704:	200002b8 	.word	0x200002b8
 8001708:	200002bc 	.word	0x200002bc
 800170c:	41200000 	.word	0x41200000
 8001710:	42c80000 	.word	0x42c80000
 8001714:	08007728 	.word	0x08007728
		}
		else{
			sprintf(str_x,"0%.2f", roundf(fabs(prom_offset_x) * 100)/100);
 8001718:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800171a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800171e:	496d      	ldr	r1, [pc, #436]	; (80018d4 <tarea_display+0x434>)
 8001720:	4618      	mov	r0, r3
 8001722:	f7ff fb0f 	bl	8000d44 <__aeabi_fmul>
 8001726:	4603      	mov	r3, r0
 8001728:	4618      	mov	r0, r3
 800172a:	f005 fdeb 	bl	8007304 <roundf>
 800172e:	4603      	mov	r3, r0
 8001730:	4968      	ldr	r1, [pc, #416]	; (80018d4 <tarea_display+0x434>)
 8001732:	4618      	mov	r0, r3
 8001734:	f7ff fbba 	bl	8000eac <__aeabi_fdiv>
 8001738:	4603      	mov	r3, r0
 800173a:	4618      	mov	r0, r3
 800173c:	f7fe fe74 	bl	8000428 <__aeabi_f2d>
 8001740:	4603      	mov	r3, r0
 8001742:	460c      	mov	r4, r1
 8001744:	f107 0020 	add.w	r0, r7, #32
 8001748:	461a      	mov	r2, r3
 800174a:	4623      	mov	r3, r4
 800174c:	4962      	ldr	r1, [pc, #392]	; (80018d8 <tarea_display+0x438>)
 800174e:	f004 f84b 	bl	80057e8 <siprintf>
			strcat(str1, str_x);
 8001752:	f107 0220 	add.w	r2, r7, #32
 8001756:	f107 0310 	add.w	r3, r7, #16
 800175a:	4611      	mov	r1, r2
 800175c:	4618      	mov	r0, r3
 800175e:	f004 f863 	bl	8005828 <strcat>
		}
		if(prom_offset_y >= 10 ){
 8001762:	495e      	ldr	r1, [pc, #376]	; (80018dc <tarea_display+0x43c>)
 8001764:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001766:	f7ff fc9f 	bl	80010a8 <__aeabi_fcmpge>
 800176a:	4603      	mov	r3, r0
 800176c:	2b00      	cmp	r3, #0
 800176e:	d025      	beq.n	80017bc <tarea_display+0x31c>
			sprintf(str_y,"%.2f", roundf(fabs(prom_offset_y) * 100)/100);
 8001770:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001772:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001776:	4957      	ldr	r1, [pc, #348]	; (80018d4 <tarea_display+0x434>)
 8001778:	4618      	mov	r0, r3
 800177a:	f7ff fae3 	bl	8000d44 <__aeabi_fmul>
 800177e:	4603      	mov	r3, r0
 8001780:	4618      	mov	r0, r3
 8001782:	f005 fdbf 	bl	8007304 <roundf>
 8001786:	4603      	mov	r3, r0
 8001788:	4952      	ldr	r1, [pc, #328]	; (80018d4 <tarea_display+0x434>)
 800178a:	4618      	mov	r0, r3
 800178c:	f7ff fb8e 	bl	8000eac <__aeabi_fdiv>
 8001790:	4603      	mov	r3, r0
 8001792:	4618      	mov	r0, r3
 8001794:	f7fe fe48 	bl	8000428 <__aeabi_f2d>
 8001798:	4603      	mov	r3, r0
 800179a:	460c      	mov	r4, r1
 800179c:	f107 0018 	add.w	r0, r7, #24
 80017a0:	461a      	mov	r2, r3
 80017a2:	4623      	mov	r3, r4
 80017a4:	494e      	ldr	r1, [pc, #312]	; (80018e0 <tarea_display+0x440>)
 80017a6:	f004 f81f 	bl	80057e8 <siprintf>
			strcat(str2, str_y);
 80017aa:	f107 0218 	add.w	r2, r7, #24
 80017ae:	f107 0308 	add.w	r3, r7, #8
 80017b2:	4611      	mov	r1, r2
 80017b4:	4618      	mov	r0, r3
 80017b6:	f004 f837 	bl	8005828 <strcat>
 80017ba:	e024      	b.n	8001806 <tarea_display+0x366>
		}
		else{
			sprintf(str_y,"0%.2f", roundf(fabs(prom_offset_y) * 100)/100);
 80017bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80017be:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80017c2:	4944      	ldr	r1, [pc, #272]	; (80018d4 <tarea_display+0x434>)
 80017c4:	4618      	mov	r0, r3
 80017c6:	f7ff fabd 	bl	8000d44 <__aeabi_fmul>
 80017ca:	4603      	mov	r3, r0
 80017cc:	4618      	mov	r0, r3
 80017ce:	f005 fd99 	bl	8007304 <roundf>
 80017d2:	4603      	mov	r3, r0
 80017d4:	493f      	ldr	r1, [pc, #252]	; (80018d4 <tarea_display+0x434>)
 80017d6:	4618      	mov	r0, r3
 80017d8:	f7ff fb68 	bl	8000eac <__aeabi_fdiv>
 80017dc:	4603      	mov	r3, r0
 80017de:	4618      	mov	r0, r3
 80017e0:	f7fe fe22 	bl	8000428 <__aeabi_f2d>
 80017e4:	4603      	mov	r3, r0
 80017e6:	460c      	mov	r4, r1
 80017e8:	f107 0018 	add.w	r0, r7, #24
 80017ec:	461a      	mov	r2, r3
 80017ee:	4623      	mov	r3, r4
 80017f0:	4939      	ldr	r1, [pc, #228]	; (80018d8 <tarea_display+0x438>)
 80017f2:	f003 fff9 	bl	80057e8 <siprintf>
			strcat(str2, str_y);
 80017f6:	f107 0218 	add.w	r2, r7, #24
 80017fa:	f107 0308 	add.w	r3, r7, #8
 80017fe:	4611      	mov	r1, r2
 8001800:	4618      	mov	r0, r3
 8001802:	f004 f811 	bl	8005828 <strcat>


		//------------------------------------------------------------------------------------------------
		//-------------------------------------- MODO 1 o MODO 2 -----------------------------------------
		//------------------------------------------------------------------------------------------------
		if(fEjeY == OFF){	// Solo eje X
 8001806:	4b37      	ldr	r3, [pc, #220]	; (80018e4 <tarea_display+0x444>)
 8001808:	781b      	ldrb	r3, [r3, #0]
 800180a:	2b00      	cmp	r3, #0
 800180c:	d10b      	bne.n	8001826 <tarea_display+0x386>
			SSD1306_GotoXY (POS_GRADOS);
 800180e:	211e      	movs	r1, #30
 8001810:	200a      	movs	r0, #10
 8001812:	f000 feeb 	bl	80025ec <SSD1306_GotoXY>
			SSD1306_Puts(str1, &Font_16x26, 1);
 8001816:	f107 0310 	add.w	r3, r7, #16
 800181a:	2201      	movs	r2, #1
 800181c:	4932      	ldr	r1, [pc, #200]	; (80018e8 <tarea_display+0x448>)
 800181e:	4618      	mov	r0, r3
 8001820:	f000 ff7a 	bl	8002718 <SSD1306_Puts>
 8001824:	e015      	b.n	8001852 <tarea_display+0x3b2>
		}
		else{	// Solo eje Y
			SSD1306_GotoXY(POS_GRADOSX);
 8001826:	210f      	movs	r1, #15
 8001828:	200a      	movs	r0, #10
 800182a:	f000 fedf 	bl	80025ec <SSD1306_GotoXY>
			SSD1306_Puts(str1, &Font_11x18, 1);
 800182e:	f107 0310 	add.w	r3, r7, #16
 8001832:	2201      	movs	r2, #1
 8001834:	492d      	ldr	r1, [pc, #180]	; (80018ec <tarea_display+0x44c>)
 8001836:	4618      	mov	r0, r3
 8001838:	f000 ff6e 	bl	8002718 <SSD1306_Puts>
			SSD1306_GotoXY(POS_GRADOSY);
 800183c:	211e      	movs	r1, #30
 800183e:	200a      	movs	r0, #10
 8001840:	f000 fed4 	bl	80025ec <SSD1306_GotoXY>
			SSD1306_Puts(str2, &Font_11x18, 1);
 8001844:	f107 0308 	add.w	r3, r7, #8
 8001848:	2201      	movs	r2, #1
 800184a:	4928      	ldr	r1, [pc, #160]	; (80018ec <tarea_display+0x44c>)
 800184c:	4618      	mov	r0, r3
 800184e:	f000 ff63 	bl	8002718 <SSD1306_Puts>
		}

		prom_x = 0;
 8001852:	4b27      	ldr	r3, [pc, #156]	; (80018f0 <tarea_display+0x450>)
 8001854:	f04f 0200 	mov.w	r2, #0
 8001858:	601a      	str	r2, [r3, #0]
		prom_y = 0;
 800185a:	4b26      	ldr	r3, [pc, #152]	; (80018f4 <tarea_display+0x454>)
 800185c:	f04f 0200 	mov.w	r2, #0
 8001860:	601a      	str	r2, [r3, #0]
		prom_y += MPU6050.KalmanAngleY;
		cont++;
	}


}
 8001862:	e032      	b.n	80018ca <tarea_display+0x42a>
		prom_x += MPU6050.KalmanAngleX;
 8001864:	4b22      	ldr	r3, [pc, #136]	; (80018f0 <tarea_display+0x450>)
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	4618      	mov	r0, r3
 800186a:	f7fe fddd 	bl	8000428 <__aeabi_f2d>
 800186e:	4b22      	ldr	r3, [pc, #136]	; (80018f8 <tarea_display+0x458>)
 8001870:	f103 0448 	add.w	r4, r3, #72	; 0x48
 8001874:	e9d4 3400 	ldrd	r3, r4, [r4]
 8001878:	461a      	mov	r2, r3
 800187a:	4623      	mov	r3, r4
 800187c:	f7fe fc76 	bl	800016c <__adddf3>
 8001880:	4603      	mov	r3, r0
 8001882:	460c      	mov	r4, r1
 8001884:	4618      	mov	r0, r3
 8001886:	4621      	mov	r1, r4
 8001888:	f7ff f8fe 	bl	8000a88 <__aeabi_d2f>
 800188c:	4602      	mov	r2, r0
 800188e:	4b18      	ldr	r3, [pc, #96]	; (80018f0 <tarea_display+0x450>)
 8001890:	601a      	str	r2, [r3, #0]
		prom_y += MPU6050.KalmanAngleY;
 8001892:	4b18      	ldr	r3, [pc, #96]	; (80018f4 <tarea_display+0x454>)
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	4618      	mov	r0, r3
 8001898:	f7fe fdc6 	bl	8000428 <__aeabi_f2d>
 800189c:	4b16      	ldr	r3, [pc, #88]	; (80018f8 <tarea_display+0x458>)
 800189e:	f103 0450 	add.w	r4, r3, #80	; 0x50
 80018a2:	e9d4 3400 	ldrd	r3, r4, [r4]
 80018a6:	461a      	mov	r2, r3
 80018a8:	4623      	mov	r3, r4
 80018aa:	f7fe fc5f 	bl	800016c <__adddf3>
 80018ae:	4603      	mov	r3, r0
 80018b0:	460c      	mov	r4, r1
 80018b2:	4618      	mov	r0, r3
 80018b4:	4621      	mov	r1, r4
 80018b6:	f7ff f8e7 	bl	8000a88 <__aeabi_d2f>
 80018ba:	4602      	mov	r2, r0
 80018bc:	4b0d      	ldr	r3, [pc, #52]	; (80018f4 <tarea_display+0x454>)
 80018be:	601a      	str	r2, [r3, #0]
		cont++;
 80018c0:	4b0e      	ldr	r3, [pc, #56]	; (80018fc <tarea_display+0x45c>)
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	3301      	adds	r3, #1
 80018c6:	4a0d      	ldr	r2, [pc, #52]	; (80018fc <tarea_display+0x45c>)
 80018c8:	6013      	str	r3, [r2, #0]
}
 80018ca:	bf00      	nop
 80018cc:	3734      	adds	r7, #52	; 0x34
 80018ce:	46bd      	mov	sp, r7
 80018d0:	bd90      	pop	{r4, r7, pc}
 80018d2:	bf00      	nop
 80018d4:	42c80000 	.word	0x42c80000
 80018d8:	08007730 	.word	0x08007730
 80018dc:	41200000 	.word	0x41200000
 80018e0:	08007728 	.word	0x08007728
 80018e4:	200002a7 	.word	0x200002a7
 80018e8:	20000008 	.word	0x20000008
 80018ec:	20000000 	.word	0x20000000
 80018f0:	200002b0 	.word	0x200002b0
 80018f4:	200002b4 	.word	0x200002b4
 80018f8:	20000758 	.word	0x20000758
 80018fc:	200002ac 	.word	0x200002ac

08001900 <tarea_orienta>:

void tarea_orienta(void *p)
{
 8001900:	b580      	push	{r7, lr}
 8001902:	b082      	sub	sp, #8
 8001904:	af00      	add	r7, sp, #0
 8001906:	6078      	str	r0, [r7, #4]
	MPU6050_Read_All(&hi2c1, &MPU6050);
 8001908:	4903      	ldr	r1, [pc, #12]	; (8001918 <tarea_orienta+0x18>)
 800190a:	4804      	ldr	r0, [pc, #16]	; (800191c <tarea_orienta+0x1c>)
 800190c:	f000 f9b0 	bl	8001c70 <MPU6050_Read_All>
}
 8001910:	bf00      	nop
 8001912:	3708      	adds	r7, #8
 8001914:	46bd      	mov	sp, r7
 8001916:	bd80      	pop	{r7, pc}
 8001918:	20000758 	.word	0x20000758
 800191c:	20000700 	.word	0x20000700

08001920 <tarea_led_blinking>:
	HAL_IWDG_Refresh(&hiwdg);
#endif
}

void tarea_led_blinking(void *p)
{
 8001920:	b580      	push	{r7, lr}
 8001922:	b082      	sub	sp, #8
 8001924:	af00      	add	r7, sp, #0
 8001926:	6078      	str	r0, [r7, #4]
	HAL_GPIO_TogglePin(GPIOC, Led_Blink_Pin);
 8001928:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800192c:	4803      	ldr	r0, [pc, #12]	; (800193c <tarea_led_blinking+0x1c>)
 800192e:	f001 fc94 	bl	800325a <HAL_GPIO_TogglePin>
}
 8001932:	bf00      	nop
 8001934:	3708      	adds	r7, #8
 8001936:	46bd      	mov	sp, r7
 8001938:	bd80      	pop	{r7, pc}
 800193a:	bf00      	nop
 800193c:	40011000 	.word	0x40011000

08001940 <tarea_refresh>:


void tarea_refresh(void *p)
{
 8001940:	b580      	push	{r7, lr}
 8001942:	b082      	sub	sp, #8
 8001944:	af00      	add	r7, sp, #0
 8001946:	6078      	str	r0, [r7, #4]
	if(f_hold == OFF)
 8001948:	4b04      	ldr	r3, [pc, #16]	; (800195c <tarea_refresh+0x1c>)
 800194a:	781b      	ldrb	r3, [r3, #0]
 800194c:	2b00      	cmp	r3, #0
 800194e:	d101      	bne.n	8001954 <tarea_refresh+0x14>
		SSD1306_UpdateScreen();
 8001950:	f000 fd92 	bl	8002478 <SSD1306_UpdateScreen>
}
 8001954:	bf00      	nop
 8001956:	3708      	adds	r7, #8
 8001958:	46bd      	mov	sp, r7
 800195a:	bd80      	pop	{r7, pc}
 800195c:	200002a5 	.word	0x200002a5

08001960 <falla_sistema>:

void falla_sistema(void)
{
 8001960:	b580      	push	{r7, lr}
 8001962:	b082      	sub	sp, #8
 8001964:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001966:	b672      	cpsid	i
	__disable_irq();
	while (1)
	{
		for (uint32_t i = 0; i < 100000; i++);
 8001968:	2300      	movs	r3, #0
 800196a:	607b      	str	r3, [r7, #4]
 800196c:	e002      	b.n	8001974 <falla_sistema+0x14>
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	3301      	adds	r3, #1
 8001972:	607b      	str	r3, [r7, #4]
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	4a04      	ldr	r2, [pc, #16]	; (8001988 <falla_sistema+0x28>)
 8001978:	4293      	cmp	r3, r2
 800197a:	d9f8      	bls.n	800196e <falla_sistema+0xe>
		HAL_GPIO_TogglePin(GPIOC, Led_Blink_Pin);
 800197c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001980:	4802      	ldr	r0, [pc, #8]	; (800198c <falla_sistema+0x2c>)
 8001982:	f001 fc6a 	bl	800325a <HAL_GPIO_TogglePin>
		for (uint32_t i = 0; i < 100000; i++);
 8001986:	e7ef      	b.n	8001968 <falla_sistema+0x8>
 8001988:	0001869f 	.word	0x0001869f
 800198c:	40011000 	.word	0x40011000

08001990 <start_timer>:
	}
}

void start_timer(void)
{
 8001990:	b480      	push	{r7}
 8001992:	af00      	add	r7, sp, #0
	TIM2->CNT = 0;
 8001994:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001998:	2200      	movs	r2, #0
 800199a:	625a      	str	r2, [r3, #36]	; 0x24
	TIM2->CR1 |= TIM_CR1_CEN;
 800199c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80019a6:	f043 0301 	orr.w	r3, r3, #1
 80019aa:	6013      	str	r3, [r2, #0]
}
 80019ac:	bf00      	nop
 80019ae:	46bd      	mov	sp, r7
 80019b0:	bc80      	pop	{r7}
 80019b2:	4770      	bx	lr

080019b4 <stop_timer>:

uint32_t stop_timer(void)
{
 80019b4:	b480      	push	{r7}
 80019b6:	b083      	sub	sp, #12
 80019b8:	af00      	add	r7, sp, #0
	uint32_t ret = TIM2->CNT;
 80019ba:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80019be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019c0:	607b      	str	r3, [r7, #4]
	TIM2->CR1 &= ~TIM_CR1_CEN;
 80019c2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80019cc:	f023 0301 	bic.w	r3, r3, #1
 80019d0:	6013      	str	r3, [r2, #0]
	return ret;
 80019d2:	687b      	ldr	r3, [r7, #4]
}
 80019d4:	4618      	mov	r0, r3
 80019d6:	370c      	adds	r7, #12
 80019d8:	46bd      	mov	sp, r7
 80019da:	bc80      	pop	{r7}
 80019dc:	4770      	bx	lr
	...

080019e0 <MPU6050_Init>:
  * @brief MPU6050 Initialization Function
  * @param None
  * @retval None
  */
void MPU6050_Init(void)
{
 80019e0:	b580      	push	{r7, lr}
 80019e2:	b086      	sub	sp, #24
 80019e4:	af04      	add	r7, sp, #16
	uint8_t check, Data;

	// Check device WHO I AM
	HAL_I2C_Mem_Read(&hi2c1, MPU6050_ADDR, MPU6050_RA_WHO_AM_I, 1, &check, 1, TIMEOUT_I2C);
 80019e6:	230a      	movs	r3, #10
 80019e8:	9302      	str	r3, [sp, #8]
 80019ea:	2301      	movs	r3, #1
 80019ec:	9301      	str	r3, [sp, #4]
 80019ee:	1dfb      	adds	r3, r7, #7
 80019f0:	9300      	str	r3, [sp, #0]
 80019f2:	2301      	movs	r3, #1
 80019f4:	2275      	movs	r2, #117	; 0x75
 80019f6:	21d0      	movs	r1, #208	; 0xd0
 80019f8:	4820      	ldr	r0, [pc, #128]	; (8001a7c <MPU6050_Init+0x9c>)
 80019fa:	f001 ff67 	bl	80038cc <HAL_I2C_Mem_Read>

	if(check == MPU6050_ADDRESS_AD0_LOW){	// if the device is present
 80019fe:	79fb      	ldrb	r3, [r7, #7]
 8001a00:	2b68      	cmp	r3, #104	; 0x68
 8001a02:	d137      	bne.n	8001a74 <MPU6050_Init+0x94>
		// power management register 0X6B we should write all 0's to wake the sensor up
		Data = 0;
 8001a04:	2300      	movs	r3, #0
 8001a06:	71bb      	strb	r3, [r7, #6]
		HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, MPU6050_RA_PWR_MGMT_1, 1,&Data, 1, TIMEOUT_I2C);
 8001a08:	230a      	movs	r3, #10
 8001a0a:	9302      	str	r3, [sp, #8]
 8001a0c:	2301      	movs	r3, #1
 8001a0e:	9301      	str	r3, [sp, #4]
 8001a10:	1dbb      	adds	r3, r7, #6
 8001a12:	9300      	str	r3, [sp, #0]
 8001a14:	2301      	movs	r3, #1
 8001a16:	226b      	movs	r2, #107	; 0x6b
 8001a18:	21d0      	movs	r1, #208	; 0xd0
 8001a1a:	4818      	ldr	r0, [pc, #96]	; (8001a7c <MPU6050_Init+0x9c>)
 8001a1c:	f001 fe5c 	bl	80036d8 <HAL_I2C_Mem_Write>
		// Set DATA RATE of 1KHz by writing SMPLRT_DIV register
		Data = 0x07;
 8001a20:	2307      	movs	r3, #7
 8001a22:	71bb      	strb	r3, [r7, #6]
		HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, MPU6050_RA_SMPLRT_DIV, 1, &Data, 1, TIMEOUT_I2C);
 8001a24:	230a      	movs	r3, #10
 8001a26:	9302      	str	r3, [sp, #8]
 8001a28:	2301      	movs	r3, #1
 8001a2a:	9301      	str	r3, [sp, #4]
 8001a2c:	1dbb      	adds	r3, r7, #6
 8001a2e:	9300      	str	r3, [sp, #0]
 8001a30:	2301      	movs	r3, #1
 8001a32:	2219      	movs	r2, #25
 8001a34:	21d0      	movs	r1, #208	; 0xd0
 8001a36:	4811      	ldr	r0, [pc, #68]	; (8001a7c <MPU6050_Init+0x9c>)
 8001a38:	f001 fe4e 	bl	80036d8 <HAL_I2C_Mem_Write>
		// Set accelerometer configuration in MPU6050_RA_ACCEL_CONFIG
		// XA_ST=0, YA_ST=0, ZA_ST=0, FS_SEL=0 -> +/- 2g
		Data = 0x00;
 8001a3c:	2300      	movs	r3, #0
 8001a3e:	71bb      	strb	r3, [r7, #6]
		HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, MPU6050_RA_ACCEL_CONFIG, 1,&Data, 1, TIMEOUT_I2C);
 8001a40:	230a      	movs	r3, #10
 8001a42:	9302      	str	r3, [sp, #8]
 8001a44:	2301      	movs	r3, #1
 8001a46:	9301      	str	r3, [sp, #4]
 8001a48:	1dbb      	adds	r3, r7, #6
 8001a4a:	9300      	str	r3, [sp, #0]
 8001a4c:	2301      	movs	r3, #1
 8001a4e:	221c      	movs	r2, #28
 8001a50:	21d0      	movs	r1, #208	; 0xd0
 8001a52:	480a      	ldr	r0, [pc, #40]	; (8001a7c <MPU6050_Init+0x9c>)
 8001a54:	f001 fe40 	bl	80036d8 <HAL_I2C_Mem_Write>
		// Set Gyroscope configuration in MPU6050_RA_GYRO_CONFIG
		// XG_ST=0, YG_ST=0, ZG_ST=0, FS_SEL=0 -> +/- 250°/s
		Data = 0x00;
 8001a58:	2300      	movs	r3, #0
 8001a5a:	71bb      	strb	r3, [r7, #6]
		HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, MPU6050_RA_GYRO_CONFIG, 1,&Data, 1, TIMEOUT_I2C);
 8001a5c:	230a      	movs	r3, #10
 8001a5e:	9302      	str	r3, [sp, #8]
 8001a60:	2301      	movs	r3, #1
 8001a62:	9301      	str	r3, [sp, #4]
 8001a64:	1dbb      	adds	r3, r7, #6
 8001a66:	9300      	str	r3, [sp, #0]
 8001a68:	2301      	movs	r3, #1
 8001a6a:	221b      	movs	r2, #27
 8001a6c:	21d0      	movs	r1, #208	; 0xd0
 8001a6e:	4803      	ldr	r0, [pc, #12]	; (8001a7c <MPU6050_Init+0x9c>)
 8001a70:	f001 fe32 	bl	80036d8 <HAL_I2C_Mem_Write>
	}
}
 8001a74:	bf00      	nop
 8001a76:	3708      	adds	r7, #8
 8001a78:	46bd      	mov	sp, r7
 8001a7a:	bd80      	pop	{r7, pc}
 8001a7c:	20000700 	.word	0x20000700

08001a80 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001a80:	b580      	push	{r7, lr}
 8001a82:	b090      	sub	sp, #64	; 0x40
 8001a84:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001a86:	f107 0318 	add.w	r3, r7, #24
 8001a8a:	2228      	movs	r2, #40	; 0x28
 8001a8c:	2100      	movs	r1, #0
 8001a8e:	4618      	mov	r0, r3
 8001a90:	f003 fa52 	bl	8004f38 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001a94:	1d3b      	adds	r3, r7, #4
 8001a96:	2200      	movs	r2, #0
 8001a98:	601a      	str	r2, [r3, #0]
 8001a9a:	605a      	str	r2, [r3, #4]
 8001a9c:	609a      	str	r2, [r3, #8]
 8001a9e:	60da      	str	r2, [r3, #12]
 8001aa0:	611a      	str	r2, [r3, #16]

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8001aa2:	2309      	movs	r3, #9
 8001aa4:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001aa6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001aaa:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001aac:	2300      	movs	r3, #0
 8001aae:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001ab0:	2301      	movs	r3, #1
 8001ab2:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8001ab4:	2301      	movs	r3, #1
 8001ab6:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001ab8:	2302      	movs	r3, #2
 8001aba:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001abc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001ac0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL7;
 8001ac2:	f44f 13a0 	mov.w	r3, #1310720	; 0x140000
 8001ac6:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001ac8:	f107 0318 	add.w	r3, r7, #24
 8001acc:	4618      	mov	r0, r3
 8001ace:	f002 fe01 	bl	80046d4 <HAL_RCC_OscConfig>
 8001ad2:	4603      	mov	r3, r0
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d001      	beq.n	8001adc <SystemClock_Config+0x5c>
  {
    Error_Handler();
 8001ad8:	f000 f8c4 	bl	8001c64 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001adc:	230f      	movs	r3, #15
 8001ade:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001ae0:	2302      	movs	r3, #2
 8001ae2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001ae4:	2300      	movs	r3, #0
 8001ae6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001ae8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001aec:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001aee:	2300      	movs	r3, #0
 8001af0:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001af2:	1d3b      	adds	r3, r7, #4
 8001af4:	2102      	movs	r1, #2
 8001af6:	4618      	mov	r0, r3
 8001af8:	f003 f86c 	bl	8004bd4 <HAL_RCC_ClockConfig>
 8001afc:	4603      	mov	r3, r0
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d001      	beq.n	8001b06 <SystemClock_Config+0x86>
  {
    Error_Handler();
 8001b02:	f000 f8af 	bl	8001c64 <Error_Handler>
  }
}
 8001b06:	bf00      	nop
 8001b08:	3740      	adds	r7, #64	; 0x40
 8001b0a:	46bd      	mov	sp, r7
 8001b0c:	bd80      	pop	{r7, pc}
	...

08001b10 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001b10:	b580      	push	{r7, lr}
 8001b12:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001b14:	4b12      	ldr	r3, [pc, #72]	; (8001b60 <MX_I2C1_Init+0x50>)
 8001b16:	4a13      	ldr	r2, [pc, #76]	; (8001b64 <MX_I2C1_Init+0x54>)
 8001b18:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8001b1a:	4b11      	ldr	r3, [pc, #68]	; (8001b60 <MX_I2C1_Init+0x50>)
 8001b1c:	4a12      	ldr	r2, [pc, #72]	; (8001b68 <MX_I2C1_Init+0x58>)
 8001b1e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001b20:	4b0f      	ldr	r3, [pc, #60]	; (8001b60 <MX_I2C1_Init+0x50>)
 8001b22:	2200      	movs	r2, #0
 8001b24:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001b26:	4b0e      	ldr	r3, [pc, #56]	; (8001b60 <MX_I2C1_Init+0x50>)
 8001b28:	2200      	movs	r2, #0
 8001b2a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001b2c:	4b0c      	ldr	r3, [pc, #48]	; (8001b60 <MX_I2C1_Init+0x50>)
 8001b2e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001b32:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001b34:	4b0a      	ldr	r3, [pc, #40]	; (8001b60 <MX_I2C1_Init+0x50>)
 8001b36:	2200      	movs	r2, #0
 8001b38:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001b3a:	4b09      	ldr	r3, [pc, #36]	; (8001b60 <MX_I2C1_Init+0x50>)
 8001b3c:	2200      	movs	r2, #0
 8001b3e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001b40:	4b07      	ldr	r3, [pc, #28]	; (8001b60 <MX_I2C1_Init+0x50>)
 8001b42:	2200      	movs	r2, #0
 8001b44:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001b46:	4b06      	ldr	r3, [pc, #24]	; (8001b60 <MX_I2C1_Init+0x50>)
 8001b48:	2200      	movs	r2, #0
 8001b4a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001b4c:	4804      	ldr	r0, [pc, #16]	; (8001b60 <MX_I2C1_Init+0x50>)
 8001b4e:	f001 fb9d 	bl	800328c <HAL_I2C_Init>
 8001b52:	4603      	mov	r3, r0
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d001      	beq.n	8001b5c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001b58:	f000 f884 	bl	8001c64 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001b5c:	bf00      	nop
 8001b5e:	bd80      	pop	{r7, pc}
 8001b60:	20000700 	.word	0x20000700
 8001b64:	40005400 	.word	0x40005400
 8001b68:	00061a80 	.word	0x00061a80

08001b6c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001b6c:	b580      	push	{r7, lr}
 8001b6e:	b088      	sub	sp, #32
 8001b70:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b72:	f107 0310 	add.w	r3, r7, #16
 8001b76:	2200      	movs	r2, #0
 8001b78:	601a      	str	r2, [r3, #0]
 8001b7a:	605a      	str	r2, [r3, #4]
 8001b7c:	609a      	str	r2, [r3, #8]
 8001b7e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001b80:	4b35      	ldr	r3, [pc, #212]	; (8001c58 <MX_GPIO_Init+0xec>)
 8001b82:	699b      	ldr	r3, [r3, #24]
 8001b84:	4a34      	ldr	r2, [pc, #208]	; (8001c58 <MX_GPIO_Init+0xec>)
 8001b86:	f043 0310 	orr.w	r3, r3, #16
 8001b8a:	6193      	str	r3, [r2, #24]
 8001b8c:	4b32      	ldr	r3, [pc, #200]	; (8001c58 <MX_GPIO_Init+0xec>)
 8001b8e:	699b      	ldr	r3, [r3, #24]
 8001b90:	f003 0310 	and.w	r3, r3, #16
 8001b94:	60fb      	str	r3, [r7, #12]
 8001b96:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001b98:	4b2f      	ldr	r3, [pc, #188]	; (8001c58 <MX_GPIO_Init+0xec>)
 8001b9a:	699b      	ldr	r3, [r3, #24]
 8001b9c:	4a2e      	ldr	r2, [pc, #184]	; (8001c58 <MX_GPIO_Init+0xec>)
 8001b9e:	f043 0320 	orr.w	r3, r3, #32
 8001ba2:	6193      	str	r3, [r2, #24]
 8001ba4:	4b2c      	ldr	r3, [pc, #176]	; (8001c58 <MX_GPIO_Init+0xec>)
 8001ba6:	699b      	ldr	r3, [r3, #24]
 8001ba8:	f003 0320 	and.w	r3, r3, #32
 8001bac:	60bb      	str	r3, [r7, #8]
 8001bae:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001bb0:	4b29      	ldr	r3, [pc, #164]	; (8001c58 <MX_GPIO_Init+0xec>)
 8001bb2:	699b      	ldr	r3, [r3, #24]
 8001bb4:	4a28      	ldr	r2, [pc, #160]	; (8001c58 <MX_GPIO_Init+0xec>)
 8001bb6:	f043 0308 	orr.w	r3, r3, #8
 8001bba:	6193      	str	r3, [r2, #24]
 8001bbc:	4b26      	ldr	r3, [pc, #152]	; (8001c58 <MX_GPIO_Init+0xec>)
 8001bbe:	699b      	ldr	r3, [r3, #24]
 8001bc0:	f003 0308 	and.w	r3, r3, #8
 8001bc4:	607b      	str	r3, [r7, #4]
 8001bc6:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001bc8:	4b23      	ldr	r3, [pc, #140]	; (8001c58 <MX_GPIO_Init+0xec>)
 8001bca:	699b      	ldr	r3, [r3, #24]
 8001bcc:	4a22      	ldr	r2, [pc, #136]	; (8001c58 <MX_GPIO_Init+0xec>)
 8001bce:	f043 0304 	orr.w	r3, r3, #4
 8001bd2:	6193      	str	r3, [r2, #24]
 8001bd4:	4b20      	ldr	r3, [pc, #128]	; (8001c58 <MX_GPIO_Init+0xec>)
 8001bd6:	699b      	ldr	r3, [r3, #24]
 8001bd8:	f003 0304 	and.w	r3, r3, #4
 8001bdc:	603b      	str	r3, [r7, #0]
 8001bde:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Led_Blink_GPIO_Port, Led_Blink_Pin, GPIO_PIN_RESET);
 8001be0:	2200      	movs	r2, #0
 8001be2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001be6:	481d      	ldr	r0, [pc, #116]	; (8001c5c <MX_GPIO_Init+0xf0>)
 8001be8:	f001 fb1f 	bl	800322a <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(outputLed_GPIO_Port, outputLed_Pin, GPIO_PIN_RESET);
 8001bec:	2200      	movs	r2, #0
 8001bee:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001bf2:	481b      	ldr	r0, [pc, #108]	; (8001c60 <MX_GPIO_Init+0xf4>)
 8001bf4:	f001 fb19 	bl	800322a <HAL_GPIO_WritePin>

  /*Configure GPIO pin : Led_Blink_Pin */
  GPIO_InitStruct.Pin = Led_Blink_Pin;
 8001bf8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001bfc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001bfe:	2301      	movs	r3, #1
 8001c00:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c02:	2300      	movs	r3, #0
 8001c04:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c06:	2302      	movs	r3, #2
 8001c08:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Led_Blink_GPIO_Port, &GPIO_InitStruct);
 8001c0a:	f107 0310 	add.w	r3, r7, #16
 8001c0e:	4619      	mov	r1, r3
 8001c10:	4812      	ldr	r0, [pc, #72]	; (8001c5c <MX_GPIO_Init+0xf0>)
 8001c12:	f001 f999 	bl	8002f48 <HAL_GPIO_Init>

  /*Configure GPIO pins : inputHold_Pin inputZero_Pin inputMode_Pin */
  GPIO_InitStruct.Pin = inputHold_Pin|inputZero_Pin|inputMode_Pin;
 8001c16:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 8001c1a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001c1c:	2300      	movs	r3, #0
 8001c1e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001c20:	2302      	movs	r3, #2
 8001c22:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c24:	f107 0310 	add.w	r3, r7, #16
 8001c28:	4619      	mov	r1, r3
 8001c2a:	480d      	ldr	r0, [pc, #52]	; (8001c60 <MX_GPIO_Init+0xf4>)
 8001c2c:	f001 f98c 	bl	8002f48 <HAL_GPIO_Init>

  /*Configure GPIO pin : outputLed_Pin */
  GPIO_InitStruct.Pin = outputLed_Pin;
 8001c30:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001c34:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c36:	2301      	movs	r3, #1
 8001c38:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c3a:	2300      	movs	r3, #0
 8001c3c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c3e:	2302      	movs	r3, #2
 8001c40:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(outputLed_GPIO_Port, &GPIO_InitStruct);
 8001c42:	f107 0310 	add.w	r3, r7, #16
 8001c46:	4619      	mov	r1, r3
 8001c48:	4805      	ldr	r0, [pc, #20]	; (8001c60 <MX_GPIO_Init+0xf4>)
 8001c4a:	f001 f97d 	bl	8002f48 <HAL_GPIO_Init>

}
 8001c4e:	bf00      	nop
 8001c50:	3720      	adds	r7, #32
 8001c52:	46bd      	mov	sp, r7
 8001c54:	bd80      	pop	{r7, pc}
 8001c56:	bf00      	nop
 8001c58:	40021000 	.word	0x40021000
 8001c5c:	40011000 	.word	0x40011000
 8001c60:	40010c00 	.word	0x40010c00

08001c64 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001c64:	b480      	push	{r7}
 8001c66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001c68:	bf00      	nop
 8001c6a:	46bd      	mov	sp, r7
 8001c6c:	bc80      	pop	{r7}
 8001c6e:	4770      	bx	lr

08001c70 <MPU6050_Read_All>:

    temp = (int16_t) (Rec_Data[0] << 8 | Rec_Data[1]);
    DataStruct->Temperature = (float) ((int16_t) temp / (float) 340.0 + (float) 36.53);
}

void MPU6050_Read_All(I2C_HandleTypeDef *I2Cx, MPU6050_t *DataStruct) {
 8001c70:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001c74:	b094      	sub	sp, #80	; 0x50
 8001c76:	af04      	add	r7, sp, #16
 8001c78:	6078      	str	r0, [r7, #4]
 8001c7a:	6039      	str	r1, [r7, #0]
    uint8_t Rec_Data[14];
    int16_t temp;

    // Read 14 BYTES of data starting from ACCEL_XOUT_H register

    HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDR, ACCEL_XOUT_H_REG, 1, Rec_Data, 14, i2c_timeout);
 8001c7c:	2364      	movs	r3, #100	; 0x64
 8001c7e:	9302      	str	r3, [sp, #8]
 8001c80:	230e      	movs	r3, #14
 8001c82:	9301      	str	r3, [sp, #4]
 8001c84:	f107 0308 	add.w	r3, r7, #8
 8001c88:	9300      	str	r3, [sp, #0]
 8001c8a:	2301      	movs	r3, #1
 8001c8c:	223b      	movs	r2, #59	; 0x3b
 8001c8e:	21d0      	movs	r1, #208	; 0xd0
 8001c90:	6878      	ldr	r0, [r7, #4]
 8001c92:	f001 fe1b 	bl	80038cc <HAL_I2C_Mem_Read>

    DataStruct->Accel_X_RAW = (int16_t) (Rec_Data[0] << 8 | Rec_Data[1]);
 8001c96:	7a3b      	ldrb	r3, [r7, #8]
 8001c98:	021b      	lsls	r3, r3, #8
 8001c9a:	b21a      	sxth	r2, r3
 8001c9c:	7a7b      	ldrb	r3, [r7, #9]
 8001c9e:	b21b      	sxth	r3, r3
 8001ca0:	4313      	orrs	r3, r2
 8001ca2:	b21a      	sxth	r2, r3
 8001ca4:	683b      	ldr	r3, [r7, #0]
 8001ca6:	801a      	strh	r2, [r3, #0]
    DataStruct->Accel_Y_RAW = (int16_t) (Rec_Data[2] << 8 | Rec_Data[3]);
 8001ca8:	7abb      	ldrb	r3, [r7, #10]
 8001caa:	021b      	lsls	r3, r3, #8
 8001cac:	b21a      	sxth	r2, r3
 8001cae:	7afb      	ldrb	r3, [r7, #11]
 8001cb0:	b21b      	sxth	r3, r3
 8001cb2:	4313      	orrs	r3, r2
 8001cb4:	b21a      	sxth	r2, r3
 8001cb6:	683b      	ldr	r3, [r7, #0]
 8001cb8:	805a      	strh	r2, [r3, #2]
    DataStruct->Accel_Z_RAW = (int16_t) (Rec_Data[4] << 8 | Rec_Data[5]);
 8001cba:	7b3b      	ldrb	r3, [r7, #12]
 8001cbc:	021b      	lsls	r3, r3, #8
 8001cbe:	b21a      	sxth	r2, r3
 8001cc0:	7b7b      	ldrb	r3, [r7, #13]
 8001cc2:	b21b      	sxth	r3, r3
 8001cc4:	4313      	orrs	r3, r2
 8001cc6:	b21a      	sxth	r2, r3
 8001cc8:	683b      	ldr	r3, [r7, #0]
 8001cca:	809a      	strh	r2, [r3, #4]
    temp = (int16_t) (Rec_Data[6] << 8 | Rec_Data[7]);
 8001ccc:	7bbb      	ldrb	r3, [r7, #14]
 8001cce:	021b      	lsls	r3, r3, #8
 8001cd0:	b21a      	sxth	r2, r3
 8001cd2:	7bfb      	ldrb	r3, [r7, #15]
 8001cd4:	b21b      	sxth	r3, r3
 8001cd6:	4313      	orrs	r3, r2
 8001cd8:	86fb      	strh	r3, [r7, #54]	; 0x36
    DataStruct->Gyro_X_RAW = (int16_t) (Rec_Data[8] << 8 | Rec_Data[9]);
 8001cda:	7c3b      	ldrb	r3, [r7, #16]
 8001cdc:	021b      	lsls	r3, r3, #8
 8001cde:	b21a      	sxth	r2, r3
 8001ce0:	7c7b      	ldrb	r3, [r7, #17]
 8001ce2:	b21b      	sxth	r3, r3
 8001ce4:	4313      	orrs	r3, r2
 8001ce6:	b21a      	sxth	r2, r3
 8001ce8:	683b      	ldr	r3, [r7, #0]
 8001cea:	841a      	strh	r2, [r3, #32]
    DataStruct->Gyro_Y_RAW = (int16_t) (Rec_Data[10] << 8 | Rec_Data[11]);
 8001cec:	7cbb      	ldrb	r3, [r7, #18]
 8001cee:	021b      	lsls	r3, r3, #8
 8001cf0:	b21a      	sxth	r2, r3
 8001cf2:	7cfb      	ldrb	r3, [r7, #19]
 8001cf4:	b21b      	sxth	r3, r3
 8001cf6:	4313      	orrs	r3, r2
 8001cf8:	b21a      	sxth	r2, r3
 8001cfa:	683b      	ldr	r3, [r7, #0]
 8001cfc:	845a      	strh	r2, [r3, #34]	; 0x22
    DataStruct->Gyro_Z_RAW = (int16_t) (Rec_Data[12] << 8 | Rec_Data[13]);
 8001cfe:	7d3b      	ldrb	r3, [r7, #20]
 8001d00:	021b      	lsls	r3, r3, #8
 8001d02:	b21a      	sxth	r2, r3
 8001d04:	7d7b      	ldrb	r3, [r7, #21]
 8001d06:	b21b      	sxth	r3, r3
 8001d08:	4313      	orrs	r3, r2
 8001d0a:	b21a      	sxth	r2, r3
 8001d0c:	683b      	ldr	r3, [r7, #0]
 8001d0e:	849a      	strh	r2, [r3, #36]	; 0x24

    DataStruct->Ax = DataStruct->Accel_X_RAW / 16384.0;
 8001d10:	683b      	ldr	r3, [r7, #0]
 8001d12:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001d16:	4618      	mov	r0, r3
 8001d18:	f7fe fb74 	bl	8000404 <__aeabi_i2d>
 8001d1c:	f04f 0200 	mov.w	r2, #0
 8001d20:	4bb7      	ldr	r3, [pc, #732]	; (8002000 <MPU6050_Read_All+0x390>)
 8001d22:	f7fe fd03 	bl	800072c <__aeabi_ddiv>
 8001d26:	4602      	mov	r2, r0
 8001d28:	460b      	mov	r3, r1
 8001d2a:	6839      	ldr	r1, [r7, #0]
 8001d2c:	e9c1 2302 	strd	r2, r3, [r1, #8]
    DataStruct->Ay = DataStruct->Accel_Y_RAW / 16384.0;
 8001d30:	683b      	ldr	r3, [r7, #0]
 8001d32:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001d36:	4618      	mov	r0, r3
 8001d38:	f7fe fb64 	bl	8000404 <__aeabi_i2d>
 8001d3c:	f04f 0200 	mov.w	r2, #0
 8001d40:	4baf      	ldr	r3, [pc, #700]	; (8002000 <MPU6050_Read_All+0x390>)
 8001d42:	f7fe fcf3 	bl	800072c <__aeabi_ddiv>
 8001d46:	4602      	mov	r2, r0
 8001d48:	460b      	mov	r3, r1
 8001d4a:	6839      	ldr	r1, [r7, #0]
 8001d4c:	e9c1 2304 	strd	r2, r3, [r1, #16]
    DataStruct->Az = DataStruct->Accel_Z_RAW / Accel_Z_corrector;
 8001d50:	683b      	ldr	r3, [r7, #0]
 8001d52:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001d56:	4618      	mov	r0, r3
 8001d58:	f7fe fb54 	bl	8000404 <__aeabi_i2d>
 8001d5c:	a3a2      	add	r3, pc, #648	; (adr r3, 8001fe8 <MPU6050_Read_All+0x378>)
 8001d5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d62:	f7fe fce3 	bl	800072c <__aeabi_ddiv>
 8001d66:	4602      	mov	r2, r0
 8001d68:	460b      	mov	r3, r1
 8001d6a:	6839      	ldr	r1, [r7, #0]
 8001d6c:	e9c1 2306 	strd	r2, r3, [r1, #24]
    DataStruct->Temperature = (float) ((int16_t) temp / (float) 340.0 + (float) 36.53);
 8001d70:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 8001d74:	4618      	mov	r0, r3
 8001d76:	f7fe ff91 	bl	8000c9c <__aeabi_i2f>
 8001d7a:	4603      	mov	r3, r0
 8001d7c:	49a1      	ldr	r1, [pc, #644]	; (8002004 <MPU6050_Read_All+0x394>)
 8001d7e:	4618      	mov	r0, r3
 8001d80:	f7ff f894 	bl	8000eac <__aeabi_fdiv>
 8001d84:	4603      	mov	r3, r0
 8001d86:	49a0      	ldr	r1, [pc, #640]	; (8002008 <MPU6050_Read_All+0x398>)
 8001d88:	4618      	mov	r0, r3
 8001d8a:	f7fe fed3 	bl	8000b34 <__addsf3>
 8001d8e:	4603      	mov	r3, r0
 8001d90:	461a      	mov	r2, r3
 8001d92:	683b      	ldr	r3, [r7, #0]
 8001d94:	641a      	str	r2, [r3, #64]	; 0x40
    DataStruct->Gx = DataStruct->Gyro_X_RAW / 131.0;
 8001d96:	683b      	ldr	r3, [r7, #0]
 8001d98:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 8001d9c:	4618      	mov	r0, r3
 8001d9e:	f7fe fb31 	bl	8000404 <__aeabi_i2d>
 8001da2:	a393      	add	r3, pc, #588	; (adr r3, 8001ff0 <MPU6050_Read_All+0x380>)
 8001da4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001da8:	f7fe fcc0 	bl	800072c <__aeabi_ddiv>
 8001dac:	4602      	mov	r2, r0
 8001dae:	460b      	mov	r3, r1
 8001db0:	6839      	ldr	r1, [r7, #0]
 8001db2:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
    DataStruct->Gy = DataStruct->Gyro_Y_RAW / 131.0;
 8001db6:	683b      	ldr	r3, [r7, #0]
 8001db8:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	; 0x22
 8001dbc:	4618      	mov	r0, r3
 8001dbe:	f7fe fb21 	bl	8000404 <__aeabi_i2d>
 8001dc2:	a38b      	add	r3, pc, #556	; (adr r3, 8001ff0 <MPU6050_Read_All+0x380>)
 8001dc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001dc8:	f7fe fcb0 	bl	800072c <__aeabi_ddiv>
 8001dcc:	4602      	mov	r2, r0
 8001dce:	460b      	mov	r3, r1
 8001dd0:	6839      	ldr	r1, [r7, #0]
 8001dd2:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
    DataStruct->Gz = DataStruct->Gyro_Z_RAW / 131.0;
 8001dd6:	683b      	ldr	r3, [r7, #0]
 8001dd8:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	; 0x24
 8001ddc:	4618      	mov	r0, r3
 8001dde:	f7fe fb11 	bl	8000404 <__aeabi_i2d>
 8001de2:	a383      	add	r3, pc, #524	; (adr r3, 8001ff0 <MPU6050_Read_All+0x380>)
 8001de4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001de8:	f7fe fca0 	bl	800072c <__aeabi_ddiv>
 8001dec:	4602      	mov	r2, r0
 8001dee:	460b      	mov	r3, r1
 8001df0:	6839      	ldr	r1, [r7, #0]
 8001df2:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38

    // Kalman angle solve
    double dt = (double) (HAL_GetTick() - timer) / 1000;
 8001df6:	f000 ffb9 	bl	8002d6c <HAL_GetTick>
 8001dfa:	4602      	mov	r2, r0
 8001dfc:	4b83      	ldr	r3, [pc, #524]	; (800200c <MPU6050_Read_All+0x39c>)
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	1ad3      	subs	r3, r2, r3
 8001e02:	4618      	mov	r0, r3
 8001e04:	f7fe faee 	bl	80003e4 <__aeabi_ui2d>
 8001e08:	f04f 0200 	mov.w	r2, #0
 8001e0c:	4b80      	ldr	r3, [pc, #512]	; (8002010 <MPU6050_Read_All+0x3a0>)
 8001e0e:	f7fe fc8d 	bl	800072c <__aeabi_ddiv>
 8001e12:	4602      	mov	r2, r0
 8001e14:	460b      	mov	r3, r1
 8001e16:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
    timer = HAL_GetTick();
 8001e1a:	f000 ffa7 	bl	8002d6c <HAL_GetTick>
 8001e1e:	4602      	mov	r2, r0
 8001e20:	4b7a      	ldr	r3, [pc, #488]	; (800200c <MPU6050_Read_All+0x39c>)
 8001e22:	601a      	str	r2, [r3, #0]
    double roll;
    double roll_sqrt = sqrt(
            DataStruct->Accel_X_RAW * DataStruct->Accel_X_RAW + DataStruct->Accel_Z_RAW * DataStruct->Accel_Z_RAW);
 8001e24:	683b      	ldr	r3, [r7, #0]
 8001e26:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001e2a:	461a      	mov	r2, r3
 8001e2c:	683b      	ldr	r3, [r7, #0]
 8001e2e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001e32:	fb03 f202 	mul.w	r2, r3, r2
 8001e36:	683b      	ldr	r3, [r7, #0]
 8001e38:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001e3c:	4619      	mov	r1, r3
 8001e3e:	683b      	ldr	r3, [r7, #0]
 8001e40:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001e44:	fb03 f301 	mul.w	r3, r3, r1
 8001e48:	4413      	add	r3, r2
    double roll_sqrt = sqrt(
 8001e4a:	4618      	mov	r0, r3
 8001e4c:	f7fe fada 	bl	8000404 <__aeabi_i2d>
 8001e50:	4602      	mov	r2, r0
 8001e52:	460b      	mov	r3, r1
 8001e54:	4610      	mov	r0, r2
 8001e56:	4619      	mov	r1, r3
 8001e58:	f005 fa7a 	bl	8007350 <sqrt>
 8001e5c:	e9c7 0108 	strd	r0, r1, [r7, #32]
    if (roll_sqrt != 0.0) {
 8001e60:	f04f 0200 	mov.w	r2, #0
 8001e64:	f04f 0300 	mov.w	r3, #0
 8001e68:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001e6c:	f7fe fd9c 	bl	80009a8 <__aeabi_dcmpeq>
 8001e70:	4603      	mov	r3, r0
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d119      	bne.n	8001eaa <MPU6050_Read_All+0x23a>
        roll = atan(DataStruct->Accel_Y_RAW / roll_sqrt) * RAD_TO_DEG;
 8001e76:	683b      	ldr	r3, [r7, #0]
 8001e78:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001e7c:	4618      	mov	r0, r3
 8001e7e:	f7fe fac1 	bl	8000404 <__aeabi_i2d>
 8001e82:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001e86:	f7fe fc51 	bl	800072c <__aeabi_ddiv>
 8001e8a:	4602      	mov	r2, r0
 8001e8c:	460b      	mov	r3, r1
 8001e8e:	4610      	mov	r0, r2
 8001e90:	4619      	mov	r1, r3
 8001e92:	f005 f8a9 	bl	8006fe8 <atan>
 8001e96:	a358      	add	r3, pc, #352	; (adr r3, 8001ff8 <MPU6050_Read_All+0x388>)
 8001e98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e9c:	f7fe fb1c 	bl	80004d8 <__aeabi_dmul>
 8001ea0:	4602      	mov	r2, r0
 8001ea2:	460b      	mov	r3, r1
 8001ea4:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
 8001ea8:	e005      	b.n	8001eb6 <MPU6050_Read_All+0x246>
    } else {
        roll = 0.0;
 8001eaa:	f04f 0200 	mov.w	r2, #0
 8001eae:	f04f 0300 	mov.w	r3, #0
 8001eb2:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
    }
    double pitch = atan2(-DataStruct->Accel_X_RAW, DataStruct->Accel_Z_RAW) * RAD_TO_DEG;
 8001eb6:	683b      	ldr	r3, [r7, #0]
 8001eb8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001ebc:	425b      	negs	r3, r3
 8001ebe:	4618      	mov	r0, r3
 8001ec0:	f7fe faa0 	bl	8000404 <__aeabi_i2d>
 8001ec4:	4682      	mov	sl, r0
 8001ec6:	468b      	mov	fp, r1
 8001ec8:	683b      	ldr	r3, [r7, #0]
 8001eca:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001ece:	4618      	mov	r0, r3
 8001ed0:	f7fe fa98 	bl	8000404 <__aeabi_i2d>
 8001ed4:	4602      	mov	r2, r0
 8001ed6:	460b      	mov	r3, r1
 8001ed8:	4650      	mov	r0, sl
 8001eda:	4659      	mov	r1, fp
 8001edc:	f005 fa36 	bl	800734c <atan2>
 8001ee0:	a345      	add	r3, pc, #276	; (adr r3, 8001ff8 <MPU6050_Read_All+0x388>)
 8001ee2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ee6:	f7fe faf7 	bl	80004d8 <__aeabi_dmul>
 8001eea:	4602      	mov	r2, r0
 8001eec:	460b      	mov	r3, r1
 8001eee:	e9c7 2306 	strd	r2, r3, [r7, #24]
    if ((pitch < -90 && DataStruct->KalmanAngleY > 90) || (pitch > 90 && DataStruct->KalmanAngleY < -90)) {
 8001ef2:	f04f 0200 	mov.w	r2, #0
 8001ef6:	4b47      	ldr	r3, [pc, #284]	; (8002014 <MPU6050_Read_All+0x3a4>)
 8001ef8:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001efc:	f7fe fd5e 	bl	80009bc <__aeabi_dcmplt>
 8001f00:	4603      	mov	r3, r0
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d00a      	beq.n	8001f1c <MPU6050_Read_All+0x2ac>
 8001f06:	683b      	ldr	r3, [r7, #0]
 8001f08:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 8001f0c:	f04f 0200 	mov.w	r2, #0
 8001f10:	4b41      	ldr	r3, [pc, #260]	; (8002018 <MPU6050_Read_All+0x3a8>)
 8001f12:	f7fe fd71 	bl	80009f8 <__aeabi_dcmpgt>
 8001f16:	4603      	mov	r3, r0
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d114      	bne.n	8001f46 <MPU6050_Read_All+0x2d6>
 8001f1c:	f04f 0200 	mov.w	r2, #0
 8001f20:	4b3d      	ldr	r3, [pc, #244]	; (8002018 <MPU6050_Read_All+0x3a8>)
 8001f22:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001f26:	f7fe fd67 	bl	80009f8 <__aeabi_dcmpgt>
 8001f2a:	4603      	mov	r3, r0
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d015      	beq.n	8001f5c <MPU6050_Read_All+0x2ec>
 8001f30:	683b      	ldr	r3, [r7, #0]
 8001f32:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 8001f36:	f04f 0200 	mov.w	r2, #0
 8001f3a:	4b36      	ldr	r3, [pc, #216]	; (8002014 <MPU6050_Read_All+0x3a4>)
 8001f3c:	f7fe fd3e 	bl	80009bc <__aeabi_dcmplt>
 8001f40:	4603      	mov	r3, r0
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d00a      	beq.n	8001f5c <MPU6050_Read_All+0x2ec>
        KalmanY.angle = pitch;
 8001f46:	4935      	ldr	r1, [pc, #212]	; (800201c <MPU6050_Read_All+0x3ac>)
 8001f48:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001f4c:	e9c1 2306 	strd	r2, r3, [r1, #24]
        DataStruct->KalmanAngleY = pitch;
 8001f50:	6839      	ldr	r1, [r7, #0]
 8001f52:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001f56:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
 8001f5a:	e012      	b.n	8001f82 <MPU6050_Read_All+0x312>
    } else {
        DataStruct->KalmanAngleY = Kalman_getAngle(&KalmanY, pitch, DataStruct->Gy, dt);
 8001f5c:	683b      	ldr	r3, [r7, #0]
 8001f5e:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 8001f62:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8001f66:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8001f6a:	e9cd 2300 	strd	r2, r3, [sp]
 8001f6e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001f72:	482a      	ldr	r0, [pc, #168]	; (800201c <MPU6050_Read_All+0x3ac>)
 8001f74:	f000 f856 	bl	8002024 <Kalman_getAngle>
 8001f78:	4602      	mov	r2, r0
 8001f7a:	460b      	mov	r3, r1
 8001f7c:	6839      	ldr	r1, [r7, #0]
 8001f7e:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
    }
    if (fabs(DataStruct->KalmanAngleY) > 90)
 8001f82:	683b      	ldr	r3, [r7, #0]
 8001f84:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	; 0x50
 8001f88:	4690      	mov	r8, r2
 8001f8a:	f023 4900 	bic.w	r9, r3, #2147483648	; 0x80000000
 8001f8e:	f04f 0200 	mov.w	r2, #0
 8001f92:	4b21      	ldr	r3, [pc, #132]	; (8002018 <MPU6050_Read_All+0x3a8>)
 8001f94:	4640      	mov	r0, r8
 8001f96:	4649      	mov	r1, r9
 8001f98:	f7fe fd2e 	bl	80009f8 <__aeabi_dcmpgt>
 8001f9c:	4603      	mov	r3, r0
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d008      	beq.n	8001fb4 <MPU6050_Read_All+0x344>
        DataStruct->Gx = -DataStruct->Gx;
 8001fa2:	683b      	ldr	r3, [r7, #0]
 8001fa4:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 8001fa8:	4614      	mov	r4, r2
 8001faa:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 8001fae:	683b      	ldr	r3, [r7, #0]
 8001fb0:	e9c3 450a 	strd	r4, r5, [r3, #40]	; 0x28
    DataStruct->KalmanAngleX = Kalman_getAngle(&KalmanX, roll, DataStruct->Gy, dt);
 8001fb4:	683b      	ldr	r3, [r7, #0]
 8001fb6:	f103 0430 	add.w	r4, r3, #48	; 0x30
 8001fba:	e9d4 3400 	ldrd	r3, r4, [r4]
 8001fbe:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 8001fc2:	e9cd 1202 	strd	r1, r2, [sp, #8]
 8001fc6:	e9cd 3400 	strd	r3, r4, [sp]
 8001fca:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8001fce:	4814      	ldr	r0, [pc, #80]	; (8002020 <MPU6050_Read_All+0x3b0>)
 8001fd0:	f000 f828 	bl	8002024 <Kalman_getAngle>
 8001fd4:	4603      	mov	r3, r0
 8001fd6:	460c      	mov	r4, r1
 8001fd8:	683a      	ldr	r2, [r7, #0]
 8001fda:	e9c2 3412 	strd	r3, r4, [r2, #72]	; 0x48

}
 8001fde:	bf00      	nop
 8001fe0:	3740      	adds	r7, #64	; 0x40
 8001fe2:	46bd      	mov	sp, r7
 8001fe4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001fe8:	00000000 	.word	0x00000000
 8001fec:	40cc2900 	.word	0x40cc2900
 8001ff0:	00000000 	.word	0x00000000
 8001ff4:	40606000 	.word	0x40606000
 8001ff8:	1a63c1f8 	.word	0x1a63c1f8
 8001ffc:	404ca5dc 	.word	0x404ca5dc
 8002000:	40d00000 	.word	0x40d00000
 8002004:	43aa0000 	.word	0x43aa0000
 8002008:	42121eb8 	.word	0x42121eb8
 800200c:	200008b4 	.word	0x200008b4
 8002010:	408f4000 	.word	0x408f4000
 8002014:	c0568000 	.word	0xc0568000
 8002018:	40568000 	.word	0x40568000
 800201c:	20000058 	.word	0x20000058
 8002020:	20000010 	.word	0x20000010

08002024 <Kalman_getAngle>:

double Kalman_getAngle(Kalman_t *Kalman, double newAngle, double newRate, double dt) {
 8002024:	b5b0      	push	{r4, r5, r7, lr}
 8002026:	b092      	sub	sp, #72	; 0x48
 8002028:	af00      	add	r7, sp, #0
 800202a:	60f8      	str	r0, [r7, #12]
 800202c:	e9c7 2300 	strd	r2, r3, [r7]
    double rate = newRate - Kalman->bias;
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	f103 0420 	add.w	r4, r3, #32
 8002036:	e9d4 3400 	ldrd	r3, r4, [r4]
 800203a:	461a      	mov	r2, r3
 800203c:	4623      	mov	r3, r4
 800203e:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8002042:	f7fe f891 	bl	8000168 <__aeabi_dsub>
 8002046:	4603      	mov	r3, r0
 8002048:	460c      	mov	r4, r1
 800204a:	e9c7 3410 	strd	r3, r4, [r7, #64]	; 0x40
    Kalman->angle += dt * rate;
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 8002054:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002058:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 800205c:	f7fe fa3c 	bl	80004d8 <__aeabi_dmul>
 8002060:	4602      	mov	r2, r0
 8002062:	460b      	mov	r3, r1
 8002064:	4620      	mov	r0, r4
 8002066:	4629      	mov	r1, r5
 8002068:	f7fe f880 	bl	800016c <__adddf3>
 800206c:	4603      	mov	r3, r0
 800206e:	460c      	mov	r4, r1
 8002070:	68fa      	ldr	r2, [r7, #12]
 8002072:	e9c2 3406 	strd	r3, r4, [r2, #24]

    Kalman->P[0][0] += dt * (dt * Kalman->P[1][1] - Kalman->P[0][1] - Kalman->P[1][0] + Kalman->Q_angle);
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	e9d3 450a 	ldrd	r4, r5, [r3, #40]	; 0x28
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 8002082:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8002086:	f7fe fa27 	bl	80004d8 <__aeabi_dmul>
 800208a:	4602      	mov	r2, r0
 800208c:	460b      	mov	r3, r1
 800208e:	4610      	mov	r0, r2
 8002090:	4619      	mov	r1, r3
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 8002098:	f7fe f866 	bl	8000168 <__aeabi_dsub>
 800209c:	4602      	mov	r2, r0
 800209e:	460b      	mov	r3, r1
 80020a0:	4610      	mov	r0, r2
 80020a2:	4619      	mov	r1, r3
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 80020aa:	f7fe f85d 	bl	8000168 <__aeabi_dsub>
 80020ae:	4602      	mov	r2, r0
 80020b0:	460b      	mov	r3, r1
 80020b2:	4610      	mov	r0, r2
 80020b4:	4619      	mov	r1, r3
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020bc:	f7fe f856 	bl	800016c <__adddf3>
 80020c0:	4602      	mov	r2, r0
 80020c2:	460b      	mov	r3, r1
 80020c4:	4610      	mov	r0, r2
 80020c6:	4619      	mov	r1, r3
 80020c8:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 80020cc:	f7fe fa04 	bl	80004d8 <__aeabi_dmul>
 80020d0:	4602      	mov	r2, r0
 80020d2:	460b      	mov	r3, r1
 80020d4:	4620      	mov	r0, r4
 80020d6:	4629      	mov	r1, r5
 80020d8:	f7fe f848 	bl	800016c <__adddf3>
 80020dc:	4603      	mov	r3, r0
 80020de:	460c      	mov	r4, r1
 80020e0:	68fa      	ldr	r2, [r7, #12]
 80020e2:	e9c2 340a 	strd	r3, r4, [r2, #40]	; 0x28
    Kalman->P[0][1] -= dt * Kalman->P[1][1];
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	e9d3 450c 	ldrd	r4, r5, [r3, #48]	; 0x30
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 80020f2:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 80020f6:	f7fe f9ef 	bl	80004d8 <__aeabi_dmul>
 80020fa:	4602      	mov	r2, r0
 80020fc:	460b      	mov	r3, r1
 80020fe:	4620      	mov	r0, r4
 8002100:	4629      	mov	r1, r5
 8002102:	f7fe f831 	bl	8000168 <__aeabi_dsub>
 8002106:	4603      	mov	r3, r0
 8002108:	460c      	mov	r4, r1
 800210a:	68fa      	ldr	r2, [r7, #12]
 800210c:	e9c2 340c 	strd	r3, r4, [r2, #48]	; 0x30
    Kalman->P[1][0] -= dt * Kalman->P[1][1];
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	e9d3 450e 	ldrd	r4, r5, [r3, #56]	; 0x38
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 800211c:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8002120:	f7fe f9da 	bl	80004d8 <__aeabi_dmul>
 8002124:	4602      	mov	r2, r0
 8002126:	460b      	mov	r3, r1
 8002128:	4620      	mov	r0, r4
 800212a:	4629      	mov	r1, r5
 800212c:	f7fe f81c 	bl	8000168 <__aeabi_dsub>
 8002130:	4603      	mov	r3, r0
 8002132:	460c      	mov	r4, r1
 8002134:	68fa      	ldr	r2, [r7, #12]
 8002136:	e9c2 340e 	strd	r3, r4, [r2, #56]	; 0x38
    Kalman->P[1][1] += Kalman->Q_bias * dt;
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	e9d3 4510 	ldrd	r4, r5, [r3, #64]	; 0x40
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8002146:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 800214a:	f7fe f9c5 	bl	80004d8 <__aeabi_dmul>
 800214e:	4602      	mov	r2, r0
 8002150:	460b      	mov	r3, r1
 8002152:	4620      	mov	r0, r4
 8002154:	4629      	mov	r1, r5
 8002156:	f7fe f809 	bl	800016c <__adddf3>
 800215a:	4603      	mov	r3, r0
 800215c:	460c      	mov	r4, r1
 800215e:	68fa      	ldr	r2, [r7, #12]
 8002160:	e9c2 3410 	strd	r3, r4, [r2, #64]	; 0x40

    double S = Kalman->P[0][0] + Kalman->R_measure;
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	f103 0410 	add.w	r4, r3, #16
 8002170:	e9d4 3400 	ldrd	r3, r4, [r4]
 8002174:	461a      	mov	r2, r3
 8002176:	4623      	mov	r3, r4
 8002178:	f7fd fff8 	bl	800016c <__adddf3>
 800217c:	4603      	mov	r3, r0
 800217e:	460c      	mov	r4, r1
 8002180:	e9c7 340e 	strd	r3, r4, [r7, #56]	; 0x38
    double K[2];
    K[0] = Kalman->P[0][0] / S;
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 800218a:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800218e:	f7fe facd 	bl	800072c <__aeabi_ddiv>
 8002192:	4603      	mov	r3, r0
 8002194:	460c      	mov	r4, r1
 8002196:	e9c7 3404 	strd	r3, r4, [r7, #16]
    K[1] = Kalman->P[1][0] / S;
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 80021a0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80021a4:	f7fe fac2 	bl	800072c <__aeabi_ddiv>
 80021a8:	4603      	mov	r3, r0
 80021aa:	460c      	mov	r4, r1
 80021ac:	e9c7 3406 	strd	r3, r4, [r7, #24]

    double y = newAngle - Kalman->angle;
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	f103 0418 	add.w	r4, r3, #24
 80021b6:	e9d4 3400 	ldrd	r3, r4, [r4]
 80021ba:	461a      	mov	r2, r3
 80021bc:	4623      	mov	r3, r4
 80021be:	e9d7 0100 	ldrd	r0, r1, [r7]
 80021c2:	f7fd ffd1 	bl	8000168 <__aeabi_dsub>
 80021c6:	4603      	mov	r3, r0
 80021c8:	460c      	mov	r4, r1
 80021ca:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30
    Kalman->angle += K[0] * y;
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 80021d4:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80021d8:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80021dc:	f7fe f97c 	bl	80004d8 <__aeabi_dmul>
 80021e0:	4602      	mov	r2, r0
 80021e2:	460b      	mov	r3, r1
 80021e4:	4620      	mov	r0, r4
 80021e6:	4629      	mov	r1, r5
 80021e8:	f7fd ffc0 	bl	800016c <__adddf3>
 80021ec:	4603      	mov	r3, r0
 80021ee:	460c      	mov	r4, r1
 80021f0:	68fa      	ldr	r2, [r7, #12]
 80021f2:	e9c2 3406 	strd	r3, r4, [r2, #24]
    Kalman->bias += K[1] * y;
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	e9d3 4508 	ldrd	r4, r5, [r3, #32]
 80021fc:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002200:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8002204:	f7fe f968 	bl	80004d8 <__aeabi_dmul>
 8002208:	4602      	mov	r2, r0
 800220a:	460b      	mov	r3, r1
 800220c:	4620      	mov	r0, r4
 800220e:	4629      	mov	r1, r5
 8002210:	f7fd ffac 	bl	800016c <__adddf3>
 8002214:	4603      	mov	r3, r0
 8002216:	460c      	mov	r4, r1
 8002218:	68fa      	ldr	r2, [r7, #12]
 800221a:	e9c2 3408 	strd	r3, r4, [r2, #32]

    double P00_temp = Kalman->P[0][0];
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	f103 0428 	add.w	r4, r3, #40	; 0x28
 8002224:	e9d4 3400 	ldrd	r3, r4, [r4]
 8002228:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
    double P01_temp = Kalman->P[0][1];
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	f103 0430 	add.w	r4, r3, #48	; 0x30
 8002232:	e9d4 3400 	ldrd	r3, r4, [r4]
 8002236:	e9c7 3408 	strd	r3, r4, [r7, #32]

    Kalman->P[0][0] -= K[0] * P00_temp;
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	e9d3 450a 	ldrd	r4, r5, [r3, #40]	; 0x28
 8002240:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002244:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002248:	f7fe f946 	bl	80004d8 <__aeabi_dmul>
 800224c:	4602      	mov	r2, r0
 800224e:	460b      	mov	r3, r1
 8002250:	4620      	mov	r0, r4
 8002252:	4629      	mov	r1, r5
 8002254:	f7fd ff88 	bl	8000168 <__aeabi_dsub>
 8002258:	4603      	mov	r3, r0
 800225a:	460c      	mov	r4, r1
 800225c:	68fa      	ldr	r2, [r7, #12]
 800225e:	e9c2 340a 	strd	r3, r4, [r2, #40]	; 0x28
    Kalman->P[0][1] -= K[0] * P01_temp;
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	e9d3 450c 	ldrd	r4, r5, [r3, #48]	; 0x30
 8002268:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800226c:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002270:	f7fe f932 	bl	80004d8 <__aeabi_dmul>
 8002274:	4602      	mov	r2, r0
 8002276:	460b      	mov	r3, r1
 8002278:	4620      	mov	r0, r4
 800227a:	4629      	mov	r1, r5
 800227c:	f7fd ff74 	bl	8000168 <__aeabi_dsub>
 8002280:	4603      	mov	r3, r0
 8002282:	460c      	mov	r4, r1
 8002284:	68fa      	ldr	r2, [r7, #12]
 8002286:	e9c2 340c 	strd	r3, r4, [r2, #48]	; 0x30
    Kalman->P[1][0] -= K[1] * P00_temp;
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	e9d3 450e 	ldrd	r4, r5, [r3, #56]	; 0x38
 8002290:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002294:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002298:	f7fe f91e 	bl	80004d8 <__aeabi_dmul>
 800229c:	4602      	mov	r2, r0
 800229e:	460b      	mov	r3, r1
 80022a0:	4620      	mov	r0, r4
 80022a2:	4629      	mov	r1, r5
 80022a4:	f7fd ff60 	bl	8000168 <__aeabi_dsub>
 80022a8:	4603      	mov	r3, r0
 80022aa:	460c      	mov	r4, r1
 80022ac:	68fa      	ldr	r2, [r7, #12]
 80022ae:	e9c2 340e 	strd	r3, r4, [r2, #56]	; 0x38
    Kalman->P[1][1] -= K[1] * P01_temp;
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	e9d3 4510 	ldrd	r4, r5, [r3, #64]	; 0x40
 80022b8:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80022bc:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80022c0:	f7fe f90a 	bl	80004d8 <__aeabi_dmul>
 80022c4:	4602      	mov	r2, r0
 80022c6:	460b      	mov	r3, r1
 80022c8:	4620      	mov	r0, r4
 80022ca:	4629      	mov	r1, r5
 80022cc:	f7fd ff4c 	bl	8000168 <__aeabi_dsub>
 80022d0:	4603      	mov	r3, r0
 80022d2:	460c      	mov	r4, r1
 80022d4:	68fa      	ldr	r2, [r7, #12]
 80022d6:	e9c2 3410 	strd	r3, r4, [r2, #64]	; 0x40

    return Kalman->angle;
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	f103 0418 	add.w	r4, r3, #24
 80022e0:	e9d4 3400 	ldrd	r3, r4, [r4]
};
 80022e4:	4618      	mov	r0, r3
 80022e6:	4621      	mov	r1, r4
 80022e8:	3748      	adds	r7, #72	; 0x48
 80022ea:	46bd      	mov	sp, r7
 80022ec:	bdb0      	pop	{r4, r5, r7, pc}
	...

080022f0 <SSD1306_Init>:





uint8_t SSD1306_Init(void) {
 80022f0:	b580      	push	{r7, lr}
 80022f2:	b082      	sub	sp, #8
 80022f4:	af00      	add	r7, sp, #0

	/* Init I2C */
	ssd1306_I2C_Init();
 80022f6:	f000 fa35 	bl	8002764 <ssd1306_I2C_Init>
	
	/* Check if LCD connected to I2C */
	if (HAL_I2C_IsDeviceReady(&hi2c1, SSD1306_I2C_ADDR, 1, 20000) != HAL_OK) {
 80022fa:	f644 6320 	movw	r3, #20000	; 0x4e20
 80022fe:	2201      	movs	r2, #1
 8002300:	2178      	movs	r1, #120	; 0x78
 8002302:	485b      	ldr	r0, [pc, #364]	; (8002470 <SSD1306_Init+0x180>)
 8002304:	f001 fd18 	bl	8003d38 <HAL_I2C_IsDeviceReady>
 8002308:	4603      	mov	r3, r0
 800230a:	2b00      	cmp	r3, #0
 800230c:	d001      	beq.n	8002312 <SSD1306_Init+0x22>
		/* Return false */
		return 0;
 800230e:	2300      	movs	r3, #0
 8002310:	e0a9      	b.n	8002466 <SSD1306_Init+0x176>
	}
	
	/* A little delay */
	uint32_t p = 2500;
 8002312:	f640 13c4 	movw	r3, #2500	; 0x9c4
 8002316:	607b      	str	r3, [r7, #4]
	while(p>0)
 8002318:	e002      	b.n	8002320 <SSD1306_Init+0x30>
		p--;
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	3b01      	subs	r3, #1
 800231e:	607b      	str	r3, [r7, #4]
	while(p>0)
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	2b00      	cmp	r3, #0
 8002324:	d1f9      	bne.n	800231a <SSD1306_Init+0x2a>
	
	/* Init LCD */
	SSD1306_WRITECOMMAND(0xAE); //display off
 8002326:	22ae      	movs	r2, #174	; 0xae
 8002328:	2100      	movs	r1, #0
 800232a:	2078      	movs	r0, #120	; 0x78
 800232c:	f000 fa76 	bl	800281c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //Set Memory Addressing Mode   
 8002330:	2220      	movs	r2, #32
 8002332:	2100      	movs	r1, #0
 8002334:	2078      	movs	r0, #120	; 0x78
 8002336:	f000 fa71 	bl	800281c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 800233a:	2210      	movs	r2, #16
 800233c:	2100      	movs	r1, #0
 800233e:	2078      	movs	r0, #120	; 0x78
 8002340:	f000 fa6c 	bl	800281c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8002344:	22b0      	movs	r2, #176	; 0xb0
 8002346:	2100      	movs	r1, #0
 8002348:	2078      	movs	r0, #120	; 0x78
 800234a:	f000 fa67 	bl	800281c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xC8); //Set COM Output Scan Direction
 800234e:	22c8      	movs	r2, #200	; 0xc8
 8002350:	2100      	movs	r1, #0
 8002352:	2078      	movs	r0, #120	; 0x78
 8002354:	f000 fa62 	bl	800281c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //---set low column address
 8002358:	2200      	movs	r2, #0
 800235a:	2100      	movs	r1, #0
 800235c:	2078      	movs	r0, #120	; 0x78
 800235e:	f000 fa5d 	bl	800281c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //---set high column address
 8002362:	2210      	movs	r2, #16
 8002364:	2100      	movs	r1, #0
 8002366:	2078      	movs	r0, #120	; 0x78
 8002368:	f000 fa58 	bl	800281c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x40); //--set start line address
 800236c:	2240      	movs	r2, #64	; 0x40
 800236e:	2100      	movs	r1, #0
 8002370:	2078      	movs	r0, #120	; 0x78
 8002372:	f000 fa53 	bl	800281c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x81); //--set contrast control register
 8002376:	2281      	movs	r2, #129	; 0x81
 8002378:	2100      	movs	r1, #0
 800237a:	2078      	movs	r0, #120	; 0x78
 800237c:	f000 fa4e 	bl	800281c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xFF);
 8002380:	22ff      	movs	r2, #255	; 0xff
 8002382:	2100      	movs	r1, #0
 8002384:	2078      	movs	r0, #120	; 0x78
 8002386:	f000 fa49 	bl	800281c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA1); //--set segment re-map 0 to 127
 800238a:	22a1      	movs	r2, #161	; 0xa1
 800238c:	2100      	movs	r1, #0
 800238e:	2078      	movs	r0, #120	; 0x78
 8002390:	f000 fa44 	bl	800281c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA6); //--set normal display
 8002394:	22a6      	movs	r2, #166	; 0xa6
 8002396:	2100      	movs	r1, #0
 8002398:	2078      	movs	r0, #120	; 0x78
 800239a:	f000 fa3f 	bl	800281c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA8); //--set multiplex ratio(1 to 64)
 800239e:	22a8      	movs	r2, #168	; 0xa8
 80023a0:	2100      	movs	r1, #0
 80023a2:	2078      	movs	r0, #120	; 0x78
 80023a4:	f000 fa3a 	bl	800281c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x3F); //
 80023a8:	223f      	movs	r2, #63	; 0x3f
 80023aa:	2100      	movs	r1, #0
 80023ac:	2078      	movs	r0, #120	; 0x78
 80023ae:	f000 fa35 	bl	800281c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 80023b2:	22a4      	movs	r2, #164	; 0xa4
 80023b4:	2100      	movs	r1, #0
 80023b6:	2078      	movs	r0, #120	; 0x78
 80023b8:	f000 fa30 	bl	800281c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD3); //-set display offset
 80023bc:	22d3      	movs	r2, #211	; 0xd3
 80023be:	2100      	movs	r1, #0
 80023c0:	2078      	movs	r0, #120	; 0x78
 80023c2:	f000 fa2b 	bl	800281c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //-not offset
 80023c6:	2200      	movs	r2, #0
 80023c8:	2100      	movs	r1, #0
 80023ca:	2078      	movs	r0, #120	; 0x78
 80023cc:	f000 fa26 	bl	800281c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
 80023d0:	22d5      	movs	r2, #213	; 0xd5
 80023d2:	2100      	movs	r1, #0
 80023d4:	2078      	movs	r0, #120	; 0x78
 80023d6:	f000 fa21 	bl	800281c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xF0); //--set divide ratio
 80023da:	22f0      	movs	r2, #240	; 0xf0
 80023dc:	2100      	movs	r1, #0
 80023de:	2078      	movs	r0, #120	; 0x78
 80023e0:	f000 fa1c 	bl	800281c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD9); //--set pre-charge period
 80023e4:	22d9      	movs	r2, #217	; 0xd9
 80023e6:	2100      	movs	r1, #0
 80023e8:	2078      	movs	r0, #120	; 0x78
 80023ea:	f000 fa17 	bl	800281c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x22); //
 80023ee:	2222      	movs	r2, #34	; 0x22
 80023f0:	2100      	movs	r1, #0
 80023f2:	2078      	movs	r0, #120	; 0x78
 80023f4:	f000 fa12 	bl	800281c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDA); //--set com pins hardware configuration
 80023f8:	22da      	movs	r2, #218	; 0xda
 80023fa:	2100      	movs	r1, #0
 80023fc:	2078      	movs	r0, #120	; 0x78
 80023fe:	f000 fa0d 	bl	800281c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x12);
 8002402:	2212      	movs	r2, #18
 8002404:	2100      	movs	r1, #0
 8002406:	2078      	movs	r0, #120	; 0x78
 8002408:	f000 fa08 	bl	800281c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDB); //--set vcomh
 800240c:	22db      	movs	r2, #219	; 0xdb
 800240e:	2100      	movs	r1, #0
 8002410:	2078      	movs	r0, #120	; 0x78
 8002412:	f000 fa03 	bl	800281c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //0x20,0.77xVcc
 8002416:	2220      	movs	r2, #32
 8002418:	2100      	movs	r1, #0
 800241a:	2078      	movs	r0, #120	; 0x78
 800241c:	f000 f9fe 	bl	800281c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x8D); //--set DC-DC enable
 8002420:	228d      	movs	r2, #141	; 0x8d
 8002422:	2100      	movs	r1, #0
 8002424:	2078      	movs	r0, #120	; 0x78
 8002426:	f000 f9f9 	bl	800281c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x14); //
 800242a:	2214      	movs	r2, #20
 800242c:	2100      	movs	r1, #0
 800242e:	2078      	movs	r0, #120	; 0x78
 8002430:	f000 f9f4 	bl	800281c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xAF); //--turn on SSD1306 panel
 8002434:	22af      	movs	r2, #175	; 0xaf
 8002436:	2100      	movs	r1, #0
 8002438:	2078      	movs	r0, #120	; 0x78
 800243a:	f000 f9ef 	bl	800281c <ssd1306_I2C_Write>
	

	SSD1306_WRITECOMMAND(SSD1306_DEACTIVATE_SCROLL);
 800243e:	222e      	movs	r2, #46	; 0x2e
 8002440:	2100      	movs	r1, #0
 8002442:	2078      	movs	r0, #120	; 0x78
 8002444:	f000 f9ea 	bl	800281c <ssd1306_I2C_Write>

	/* Clear screen */
	SSD1306_Fill(SSD1306_COLOR_BLACK);
 8002448:	2000      	movs	r0, #0
 800244a:	f000 f84d 	bl	80024e8 <SSD1306_Fill>
	
	/* Update screen */
	SSD1306_UpdateScreen();
 800244e:	f000 f813 	bl	8002478 <SSD1306_UpdateScreen>
	
	/* Set default values */
	SSD1306.CurrentX = 0;
 8002452:	4b08      	ldr	r3, [pc, #32]	; (8002474 <SSD1306_Init+0x184>)
 8002454:	2200      	movs	r2, #0
 8002456:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 8002458:	4b06      	ldr	r3, [pc, #24]	; (8002474 <SSD1306_Init+0x184>)
 800245a:	2200      	movs	r2, #0
 800245c:	805a      	strh	r2, [r3, #2]
	
	/* Initialized OK */
	SSD1306.Initialized = 1;
 800245e:	4b05      	ldr	r3, [pc, #20]	; (8002474 <SSD1306_Init+0x184>)
 8002460:	2201      	movs	r2, #1
 8002462:	715a      	strb	r2, [r3, #5]
	
	/* Return OK */
	return 1;
 8002464:	2301      	movs	r3, #1
}
 8002466:	4618      	mov	r0, r3
 8002468:	3708      	adds	r7, #8
 800246a:	46bd      	mov	sp, r7
 800246c:	bd80      	pop	{r7, pc}
 800246e:	bf00      	nop
 8002470:	20000700 	.word	0x20000700
 8002474:	200006d0 	.word	0x200006d0

08002478 <SSD1306_UpdateScreen>:

void SSD1306_UpdateScreen(void) {
 8002478:	b580      	push	{r7, lr}
 800247a:	af00      	add	r7, sp, #0
//	}

	// Codigo optimizado
	static uint8_t m = 0;
	
	SSD1306_WRITECOMMAND(0xB0 + m);
 800247c:	4b18      	ldr	r3, [pc, #96]	; (80024e0 <SSD1306_UpdateScreen+0x68>)
 800247e:	781b      	ldrb	r3, [r3, #0]
 8002480:	3b50      	subs	r3, #80	; 0x50
 8002482:	b2db      	uxtb	r3, r3
 8002484:	461a      	mov	r2, r3
 8002486:	2100      	movs	r1, #0
 8002488:	2078      	movs	r0, #120	; 0x78
 800248a:	f000 f9c7 	bl	800281c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00);
 800248e:	2200      	movs	r2, #0
 8002490:	2100      	movs	r1, #0
 8002492:	2078      	movs	r0, #120	; 0x78
 8002494:	f000 f9c2 	bl	800281c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10);
 8002498:	2210      	movs	r2, #16
 800249a:	2100      	movs	r1, #0
 800249c:	2078      	movs	r0, #120	; 0x78
 800249e:	f000 f9bd 	bl	800281c <ssd1306_I2C_Write>

	/* Write multi data */
	ssd1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40, &SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 80024a2:	4b0f      	ldr	r3, [pc, #60]	; (80024e0 <SSD1306_UpdateScreen+0x68>)
 80024a4:	781b      	ldrb	r3, [r3, #0]
 80024a6:	461a      	mov	r2, r3
 80024a8:	4613      	mov	r3, r2
 80024aa:	019b      	lsls	r3, r3, #6
 80024ac:	4413      	add	r3, r2
 80024ae:	005b      	lsls	r3, r3, #1
 80024b0:	461a      	mov	r2, r3
 80024b2:	4b0c      	ldr	r3, [pc, #48]	; (80024e4 <SSD1306_UpdateScreen+0x6c>)
 80024b4:	441a      	add	r2, r3
 80024b6:	2382      	movs	r3, #130	; 0x82
 80024b8:	2140      	movs	r1, #64	; 0x40
 80024ba:	2078      	movs	r0, #120	; 0x78
 80024bc:	f000 f966 	bl	800278c <ssd1306_I2C_WriteMulti>

	m++;
 80024c0:	4b07      	ldr	r3, [pc, #28]	; (80024e0 <SSD1306_UpdateScreen+0x68>)
 80024c2:	781b      	ldrb	r3, [r3, #0]
 80024c4:	3301      	adds	r3, #1
 80024c6:	b2da      	uxtb	r2, r3
 80024c8:	4b05      	ldr	r3, [pc, #20]	; (80024e0 <SSD1306_UpdateScreen+0x68>)
 80024ca:	701a      	strb	r2, [r3, #0]
	m %= 8;
 80024cc:	4b04      	ldr	r3, [pc, #16]	; (80024e0 <SSD1306_UpdateScreen+0x68>)
 80024ce:	781b      	ldrb	r3, [r3, #0]
 80024d0:	f003 0307 	and.w	r3, r3, #7
 80024d4:	b2da      	uxtb	r2, r3
 80024d6:	4b02      	ldr	r3, [pc, #8]	; (80024e0 <SSD1306_UpdateScreen+0x68>)
 80024d8:	701a      	strb	r2, [r3, #0]
}
 80024da:	bf00      	nop
 80024dc:	bd80      	pop	{r7, pc}
 80024de:	bf00      	nop
 80024e0:	200006d6 	.word	0x200006d6
 80024e4:	200002c0 	.word	0x200002c0

080024e8 <SSD1306_Fill>:
	for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
		SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
	}
}

void SSD1306_Fill(SSD1306_COLOR_t color) {
 80024e8:	b580      	push	{r7, lr}
 80024ea:	b082      	sub	sp, #8
 80024ec:	af00      	add	r7, sp, #0
 80024ee:	4603      	mov	r3, r0
 80024f0:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 80024f2:	79fb      	ldrb	r3, [r7, #7]
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d101      	bne.n	80024fc <SSD1306_Fill+0x14>
 80024f8:	2300      	movs	r3, #0
 80024fa:	e000      	b.n	80024fe <SSD1306_Fill+0x16>
 80024fc:	23ff      	movs	r3, #255	; 0xff
 80024fe:	f44f 6282 	mov.w	r2, #1040	; 0x410
 8002502:	4619      	mov	r1, r3
 8002504:	4803      	ldr	r0, [pc, #12]	; (8002514 <SSD1306_Fill+0x2c>)
 8002506:	f002 fd17 	bl	8004f38 <memset>
}
 800250a:	bf00      	nop
 800250c:	3708      	adds	r7, #8
 800250e:	46bd      	mov	sp, r7
 8002510:	bd80      	pop	{r7, pc}
 8002512:	bf00      	nop
 8002514:	200002c0 	.word	0x200002c0

08002518 <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
 8002518:	b490      	push	{r4, r7}
 800251a:	b082      	sub	sp, #8
 800251c:	af00      	add	r7, sp, #0
 800251e:	4603      	mov	r3, r0
 8002520:	80fb      	strh	r3, [r7, #6]
 8002522:	460b      	mov	r3, r1
 8002524:	80bb      	strh	r3, [r7, #4]
 8002526:	4613      	mov	r3, r2
 8002528:	70fb      	strb	r3, [r7, #3]
	if (
 800252a:	88fb      	ldrh	r3, [r7, #6]
 800252c:	2b81      	cmp	r3, #129	; 0x81
 800252e:	d854      	bhi.n	80025da <SSD1306_DrawPixel+0xc2>
		x >= SSD1306_WIDTH ||
 8002530:	88bb      	ldrh	r3, [r7, #4]
 8002532:	2b3f      	cmp	r3, #63	; 0x3f
 8002534:	d851      	bhi.n	80025da <SSD1306_DrawPixel+0xc2>
		/* Error */
		return;
	}
	
	/* Check if pixels are inverted */
	if (SSD1306.Inverted) {
 8002536:	4b2b      	ldr	r3, [pc, #172]	; (80025e4 <SSD1306_DrawPixel+0xcc>)
 8002538:	791b      	ldrb	r3, [r3, #4]
 800253a:	2b00      	cmp	r3, #0
 800253c:	d006      	beq.n	800254c <SSD1306_DrawPixel+0x34>
		color = (SSD1306_COLOR_t)!color;
 800253e:	78fb      	ldrb	r3, [r7, #3]
 8002540:	2b00      	cmp	r3, #0
 8002542:	bf0c      	ite	eq
 8002544:	2301      	moveq	r3, #1
 8002546:	2300      	movne	r3, #0
 8002548:	b2db      	uxtb	r3, r3
 800254a:	70fb      	strb	r3, [r7, #3]
	}
	
	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
 800254c:	78fb      	ldrb	r3, [r7, #3]
 800254e:	2b01      	cmp	r3, #1
 8002550:	d120      	bne.n	8002594 <SSD1306_DrawPixel+0x7c>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8002552:	88fa      	ldrh	r2, [r7, #6]
 8002554:	88bb      	ldrh	r3, [r7, #4]
 8002556:	08db      	lsrs	r3, r3, #3
 8002558:	b298      	uxth	r0, r3
 800255a:	4601      	mov	r1, r0
 800255c:	460b      	mov	r3, r1
 800255e:	019b      	lsls	r3, r3, #6
 8002560:	440b      	add	r3, r1
 8002562:	005b      	lsls	r3, r3, #1
 8002564:	4413      	add	r3, r2
 8002566:	4a20      	ldr	r2, [pc, #128]	; (80025e8 <SSD1306_DrawPixel+0xd0>)
 8002568:	5cd3      	ldrb	r3, [r2, r3]
 800256a:	b25a      	sxtb	r2, r3
 800256c:	88bb      	ldrh	r3, [r7, #4]
 800256e:	f003 0307 	and.w	r3, r3, #7
 8002572:	2101      	movs	r1, #1
 8002574:	fa01 f303 	lsl.w	r3, r1, r3
 8002578:	b25b      	sxtb	r3, r3
 800257a:	4313      	orrs	r3, r2
 800257c:	b25c      	sxtb	r4, r3
 800257e:	88fa      	ldrh	r2, [r7, #6]
 8002580:	4601      	mov	r1, r0
 8002582:	460b      	mov	r3, r1
 8002584:	019b      	lsls	r3, r3, #6
 8002586:	440b      	add	r3, r1
 8002588:	005b      	lsls	r3, r3, #1
 800258a:	4413      	add	r3, r2
 800258c:	b2e1      	uxtb	r1, r4
 800258e:	4a16      	ldr	r2, [pc, #88]	; (80025e8 <SSD1306_DrawPixel+0xd0>)
 8002590:	54d1      	strb	r1, [r2, r3]
 8002592:	e023      	b.n	80025dc <SSD1306_DrawPixel+0xc4>
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8002594:	88fa      	ldrh	r2, [r7, #6]
 8002596:	88bb      	ldrh	r3, [r7, #4]
 8002598:	08db      	lsrs	r3, r3, #3
 800259a:	b298      	uxth	r0, r3
 800259c:	4601      	mov	r1, r0
 800259e:	460b      	mov	r3, r1
 80025a0:	019b      	lsls	r3, r3, #6
 80025a2:	440b      	add	r3, r1
 80025a4:	005b      	lsls	r3, r3, #1
 80025a6:	4413      	add	r3, r2
 80025a8:	4a0f      	ldr	r2, [pc, #60]	; (80025e8 <SSD1306_DrawPixel+0xd0>)
 80025aa:	5cd3      	ldrb	r3, [r2, r3]
 80025ac:	b25a      	sxtb	r2, r3
 80025ae:	88bb      	ldrh	r3, [r7, #4]
 80025b0:	f003 0307 	and.w	r3, r3, #7
 80025b4:	2101      	movs	r1, #1
 80025b6:	fa01 f303 	lsl.w	r3, r1, r3
 80025ba:	b25b      	sxtb	r3, r3
 80025bc:	43db      	mvns	r3, r3
 80025be:	b25b      	sxtb	r3, r3
 80025c0:	4013      	ands	r3, r2
 80025c2:	b25c      	sxtb	r4, r3
 80025c4:	88fa      	ldrh	r2, [r7, #6]
 80025c6:	4601      	mov	r1, r0
 80025c8:	460b      	mov	r3, r1
 80025ca:	019b      	lsls	r3, r3, #6
 80025cc:	440b      	add	r3, r1
 80025ce:	005b      	lsls	r3, r3, #1
 80025d0:	4413      	add	r3, r2
 80025d2:	b2e1      	uxtb	r1, r4
 80025d4:	4a04      	ldr	r2, [pc, #16]	; (80025e8 <SSD1306_DrawPixel+0xd0>)
 80025d6:	54d1      	strb	r1, [r2, r3]
 80025d8:	e000      	b.n	80025dc <SSD1306_DrawPixel+0xc4>
		return;
 80025da:	bf00      	nop
	}
}
 80025dc:	3708      	adds	r7, #8
 80025de:	46bd      	mov	sp, r7
 80025e0:	bc90      	pop	{r4, r7}
 80025e2:	4770      	bx	lr
 80025e4:	200006d0 	.word	0x200006d0
 80025e8:	200002c0 	.word	0x200002c0

080025ec <SSD1306_GotoXY>:

void SSD1306_GotoXY(uint16_t x, uint16_t y) {
 80025ec:	b480      	push	{r7}
 80025ee:	b083      	sub	sp, #12
 80025f0:	af00      	add	r7, sp, #0
 80025f2:	4603      	mov	r3, r0
 80025f4:	460a      	mov	r2, r1
 80025f6:	80fb      	strh	r3, [r7, #6]
 80025f8:	4613      	mov	r3, r2
 80025fa:	80bb      	strh	r3, [r7, #4]
	/* Set write pointers */
	SSD1306.CurrentX = x;
 80025fc:	4a05      	ldr	r2, [pc, #20]	; (8002614 <SSD1306_GotoXY+0x28>)
 80025fe:	88fb      	ldrh	r3, [r7, #6]
 8002600:	8013      	strh	r3, [r2, #0]
	SSD1306.CurrentY = y;
 8002602:	4a04      	ldr	r2, [pc, #16]	; (8002614 <SSD1306_GotoXY+0x28>)
 8002604:	88bb      	ldrh	r3, [r7, #4]
 8002606:	8053      	strh	r3, [r2, #2]
}
 8002608:	bf00      	nop
 800260a:	370c      	adds	r7, #12
 800260c:	46bd      	mov	sp, r7
 800260e:	bc80      	pop	{r7}
 8002610:	4770      	bx	lr
 8002612:	bf00      	nop
 8002614:	200006d0 	.word	0x200006d0

08002618 <SSD1306_Putc>:

char SSD1306_Putc(char ch, FontDef_t* Font, SSD1306_COLOR_t color) {
 8002618:	b580      	push	{r7, lr}
 800261a:	b086      	sub	sp, #24
 800261c:	af00      	add	r7, sp, #0
 800261e:	4603      	mov	r3, r0
 8002620:	6039      	str	r1, [r7, #0]
 8002622:	71fb      	strb	r3, [r7, #7]
 8002624:	4613      	mov	r3, r2
 8002626:	71bb      	strb	r3, [r7, #6]
	uint32_t i, b, j;
	
	/* Check available space in LCD */
	if (
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8002628:	4b3a      	ldr	r3, [pc, #232]	; (8002714 <SSD1306_Putc+0xfc>)
 800262a:	881b      	ldrh	r3, [r3, #0]
 800262c:	461a      	mov	r2, r3
 800262e:	683b      	ldr	r3, [r7, #0]
 8002630:	781b      	ldrb	r3, [r3, #0]
 8002632:	4413      	add	r3, r2
	if (
 8002634:	2b81      	cmp	r3, #129	; 0x81
 8002636:	dc07      	bgt.n	8002648 <SSD1306_Putc+0x30>
		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font->FontHeight)
 8002638:	4b36      	ldr	r3, [pc, #216]	; (8002714 <SSD1306_Putc+0xfc>)
 800263a:	885b      	ldrh	r3, [r3, #2]
 800263c:	461a      	mov	r2, r3
 800263e:	683b      	ldr	r3, [r7, #0]
 8002640:	785b      	ldrb	r3, [r3, #1]
 8002642:	4413      	add	r3, r2
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8002644:	2b3f      	cmp	r3, #63	; 0x3f
 8002646:	dd01      	ble.n	800264c <SSD1306_Putc+0x34>
	) {
		/* Error */
		return 0;
 8002648:	2300      	movs	r3, #0
 800264a:	e05e      	b.n	800270a <SSD1306_Putc+0xf2>
	}
	
	/* Go through font */
	for (i = 0; i < Font->FontHeight; i++) {
 800264c:	2300      	movs	r3, #0
 800264e:	617b      	str	r3, [r7, #20]
 8002650:	e04b      	b.n	80026ea <SSD1306_Putc+0xd2>
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 8002652:	683b      	ldr	r3, [r7, #0]
 8002654:	685a      	ldr	r2, [r3, #4]
 8002656:	79fb      	ldrb	r3, [r7, #7]
 8002658:	3b20      	subs	r3, #32
 800265a:	6839      	ldr	r1, [r7, #0]
 800265c:	7849      	ldrb	r1, [r1, #1]
 800265e:	fb01 f303 	mul.w	r3, r1, r3
 8002662:	4619      	mov	r1, r3
 8002664:	697b      	ldr	r3, [r7, #20]
 8002666:	440b      	add	r3, r1
 8002668:	005b      	lsls	r3, r3, #1
 800266a:	4413      	add	r3, r2
 800266c:	881b      	ldrh	r3, [r3, #0]
 800266e:	60fb      	str	r3, [r7, #12]
		for (j = 0; j < Font->FontWidth; j++) {
 8002670:	2300      	movs	r3, #0
 8002672:	613b      	str	r3, [r7, #16]
 8002674:	e030      	b.n	80026d8 <SSD1306_Putc+0xc0>
			if ((b << j) & 0x8000) {
 8002676:	68fa      	ldr	r2, [r7, #12]
 8002678:	693b      	ldr	r3, [r7, #16]
 800267a:	fa02 f303 	lsl.w	r3, r2, r3
 800267e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002682:	2b00      	cmp	r3, #0
 8002684:	d010      	beq.n	80026a8 <SSD1306_Putc+0x90>
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
 8002686:	4b23      	ldr	r3, [pc, #140]	; (8002714 <SSD1306_Putc+0xfc>)
 8002688:	881a      	ldrh	r2, [r3, #0]
 800268a:	693b      	ldr	r3, [r7, #16]
 800268c:	b29b      	uxth	r3, r3
 800268e:	4413      	add	r3, r2
 8002690:	b298      	uxth	r0, r3
 8002692:	4b20      	ldr	r3, [pc, #128]	; (8002714 <SSD1306_Putc+0xfc>)
 8002694:	885a      	ldrh	r2, [r3, #2]
 8002696:	697b      	ldr	r3, [r7, #20]
 8002698:	b29b      	uxth	r3, r3
 800269a:	4413      	add	r3, r2
 800269c:	b29b      	uxth	r3, r3
 800269e:	79ba      	ldrb	r2, [r7, #6]
 80026a0:	4619      	mov	r1, r3
 80026a2:	f7ff ff39 	bl	8002518 <SSD1306_DrawPixel>
 80026a6:	e014      	b.n	80026d2 <SSD1306_Putc+0xba>
			} else {
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 80026a8:	4b1a      	ldr	r3, [pc, #104]	; (8002714 <SSD1306_Putc+0xfc>)
 80026aa:	881a      	ldrh	r2, [r3, #0]
 80026ac:	693b      	ldr	r3, [r7, #16]
 80026ae:	b29b      	uxth	r3, r3
 80026b0:	4413      	add	r3, r2
 80026b2:	b298      	uxth	r0, r3
 80026b4:	4b17      	ldr	r3, [pc, #92]	; (8002714 <SSD1306_Putc+0xfc>)
 80026b6:	885a      	ldrh	r2, [r3, #2]
 80026b8:	697b      	ldr	r3, [r7, #20]
 80026ba:	b29b      	uxth	r3, r3
 80026bc:	4413      	add	r3, r2
 80026be:	b299      	uxth	r1, r3
 80026c0:	79bb      	ldrb	r3, [r7, #6]
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	bf0c      	ite	eq
 80026c6:	2301      	moveq	r3, #1
 80026c8:	2300      	movne	r3, #0
 80026ca:	b2db      	uxtb	r3, r3
 80026cc:	461a      	mov	r2, r3
 80026ce:	f7ff ff23 	bl	8002518 <SSD1306_DrawPixel>
		for (j = 0; j < Font->FontWidth; j++) {
 80026d2:	693b      	ldr	r3, [r7, #16]
 80026d4:	3301      	adds	r3, #1
 80026d6:	613b      	str	r3, [r7, #16]
 80026d8:	683b      	ldr	r3, [r7, #0]
 80026da:	781b      	ldrb	r3, [r3, #0]
 80026dc:	461a      	mov	r2, r3
 80026de:	693b      	ldr	r3, [r7, #16]
 80026e0:	4293      	cmp	r3, r2
 80026e2:	d3c8      	bcc.n	8002676 <SSD1306_Putc+0x5e>
	for (i = 0; i < Font->FontHeight; i++) {
 80026e4:	697b      	ldr	r3, [r7, #20]
 80026e6:	3301      	adds	r3, #1
 80026e8:	617b      	str	r3, [r7, #20]
 80026ea:	683b      	ldr	r3, [r7, #0]
 80026ec:	785b      	ldrb	r3, [r3, #1]
 80026ee:	461a      	mov	r2, r3
 80026f0:	697b      	ldr	r3, [r7, #20]
 80026f2:	4293      	cmp	r3, r2
 80026f4:	d3ad      	bcc.n	8002652 <SSD1306_Putc+0x3a>
			}
		}
	}
	
	/* Increase pointer */
	SSD1306.CurrentX += Font->FontWidth;
 80026f6:	4b07      	ldr	r3, [pc, #28]	; (8002714 <SSD1306_Putc+0xfc>)
 80026f8:	881a      	ldrh	r2, [r3, #0]
 80026fa:	683b      	ldr	r3, [r7, #0]
 80026fc:	781b      	ldrb	r3, [r3, #0]
 80026fe:	b29b      	uxth	r3, r3
 8002700:	4413      	add	r3, r2
 8002702:	b29a      	uxth	r2, r3
 8002704:	4b03      	ldr	r3, [pc, #12]	; (8002714 <SSD1306_Putc+0xfc>)
 8002706:	801a      	strh	r2, [r3, #0]
	
	/* Return character written */
	return ch;
 8002708:	79fb      	ldrb	r3, [r7, #7]
}
 800270a:	4618      	mov	r0, r3
 800270c:	3718      	adds	r7, #24
 800270e:	46bd      	mov	sp, r7
 8002710:	bd80      	pop	{r7, pc}
 8002712:	bf00      	nop
 8002714:	200006d0 	.word	0x200006d0

08002718 <SSD1306_Puts>:

char SSD1306_Puts(char* str, FontDef_t* Font, SSD1306_COLOR_t color) {
 8002718:	b580      	push	{r7, lr}
 800271a:	b084      	sub	sp, #16
 800271c:	af00      	add	r7, sp, #0
 800271e:	60f8      	str	r0, [r7, #12]
 8002720:	60b9      	str	r1, [r7, #8]
 8002722:	4613      	mov	r3, r2
 8002724:	71fb      	strb	r3, [r7, #7]
	/* Write characters */
	while (*str) {
 8002726:	e012      	b.n	800274e <SSD1306_Puts+0x36>
		/* Write character by character */
		if (SSD1306_Putc(*str, Font, color) != *str) {
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	781b      	ldrb	r3, [r3, #0]
 800272c:	79fa      	ldrb	r2, [r7, #7]
 800272e:	68b9      	ldr	r1, [r7, #8]
 8002730:	4618      	mov	r0, r3
 8002732:	f7ff ff71 	bl	8002618 <SSD1306_Putc>
 8002736:	4603      	mov	r3, r0
 8002738:	461a      	mov	r2, r3
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	781b      	ldrb	r3, [r3, #0]
 800273e:	429a      	cmp	r2, r3
 8002740:	d002      	beq.n	8002748 <SSD1306_Puts+0x30>
			/* Return error */
			return *str;
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	781b      	ldrb	r3, [r3, #0]
 8002746:	e008      	b.n	800275a <SSD1306_Puts+0x42>
		}
		
		/* Increase string pointer */
		str++;
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	3301      	adds	r3, #1
 800274c:	60fb      	str	r3, [r7, #12]
	while (*str) {
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	781b      	ldrb	r3, [r3, #0]
 8002752:	2b00      	cmp	r3, #0
 8002754:	d1e8      	bne.n	8002728 <SSD1306_Puts+0x10>
	}
	
	/* Everything OK, zero should be returned */
	return *str;
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	781b      	ldrb	r3, [r3, #0]
}
 800275a:	4618      	mov	r0, r3
 800275c:	3710      	adds	r7, #16
 800275e:	46bd      	mov	sp, r7
 8002760:	bd80      	pop	{r7, pc}
	...

08002764 <ssd1306_I2C_Init>:
//  _| |_ / /_| |____ 
// |_____|____|\_____|
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////

void ssd1306_I2C_Init() {
 8002764:	b480      	push	{r7}
 8002766:	b083      	sub	sp, #12
 8002768:	af00      	add	r7, sp, #0
	//MX_I2C1_Init();
	uint32_t p = 250000;
 800276a:	4b07      	ldr	r3, [pc, #28]	; (8002788 <ssd1306_I2C_Init+0x24>)
 800276c:	607b      	str	r3, [r7, #4]
	while(p>0)
 800276e:	e002      	b.n	8002776 <ssd1306_I2C_Init+0x12>
		p--;
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	3b01      	subs	r3, #1
 8002774:	607b      	str	r3, [r7, #4]
	while(p>0)
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	2b00      	cmp	r3, #0
 800277a:	d1f9      	bne.n	8002770 <ssd1306_I2C_Init+0xc>
	//HAL_I2C_DeInit(&hi2c1);
	//p = 250000;
	//while(p>0)
	//	p--;
	//MX_I2C1_Init();
}
 800277c:	bf00      	nop
 800277e:	370c      	adds	r7, #12
 8002780:	46bd      	mov	sp, r7
 8002782:	bc80      	pop	{r7}
 8002784:	4770      	bx	lr
 8002786:	bf00      	nop
 8002788:	0003d090 	.word	0x0003d090

0800278c <ssd1306_I2C_WriteMulti>:

void ssd1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 800278c:	b590      	push	{r4, r7, lr}
 800278e:	b0c7      	sub	sp, #284	; 0x11c
 8002790:	af02      	add	r7, sp, #8
 8002792:	4604      	mov	r4, r0
 8002794:	4608      	mov	r0, r1
 8002796:	4639      	mov	r1, r7
 8002798:	600a      	str	r2, [r1, #0]
 800279a:	4619      	mov	r1, r3
 800279c:	1dfb      	adds	r3, r7, #7
 800279e:	4622      	mov	r2, r4
 80027a0:	701a      	strb	r2, [r3, #0]
 80027a2:	1dbb      	adds	r3, r7, #6
 80027a4:	4602      	mov	r2, r0
 80027a6:	701a      	strb	r2, [r3, #0]
 80027a8:	1d3b      	adds	r3, r7, #4
 80027aa:	460a      	mov	r2, r1
 80027ac:	801a      	strh	r2, [r3, #0]
uint8_t dt[256];
dt[0] = reg;
 80027ae:	f107 030c 	add.w	r3, r7, #12
 80027b2:	1dba      	adds	r2, r7, #6
 80027b4:	7812      	ldrb	r2, [r2, #0]
 80027b6:	701a      	strb	r2, [r3, #0]
uint8_t i;
for(i = 0; i < count; i++)
 80027b8:	2300      	movs	r3, #0
 80027ba:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 80027be:	e010      	b.n	80027e2 <ssd1306_I2C_WriteMulti+0x56>
dt[i+1] = data[i];
 80027c0:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 80027c4:	463a      	mov	r2, r7
 80027c6:	6812      	ldr	r2, [r2, #0]
 80027c8:	441a      	add	r2, r3
 80027ca:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 80027ce:	3301      	adds	r3, #1
 80027d0:	7811      	ldrb	r1, [r2, #0]
 80027d2:	f107 020c 	add.w	r2, r7, #12
 80027d6:	54d1      	strb	r1, [r2, r3]
for(i = 0; i < count; i++)
 80027d8:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 80027dc:	3301      	adds	r3, #1
 80027de:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 80027e2:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 80027e6:	b29b      	uxth	r3, r3
 80027e8:	1d3a      	adds	r2, r7, #4
 80027ea:	8812      	ldrh	r2, [r2, #0]
 80027ec:	429a      	cmp	r2, r3
 80027ee:	d8e7      	bhi.n	80027c0 <ssd1306_I2C_WriteMulti+0x34>
HAL_I2C_Master_Transmit(&hi2c1, address, dt, count+1, 10);
 80027f0:	1dfb      	adds	r3, r7, #7
 80027f2:	781b      	ldrb	r3, [r3, #0]
 80027f4:	b299      	uxth	r1, r3
 80027f6:	1d3b      	adds	r3, r7, #4
 80027f8:	881b      	ldrh	r3, [r3, #0]
 80027fa:	3301      	adds	r3, #1
 80027fc:	b298      	uxth	r0, r3
 80027fe:	f107 020c 	add.w	r2, r7, #12
 8002802:	230a      	movs	r3, #10
 8002804:	9300      	str	r3, [sp, #0]
 8002806:	4603      	mov	r3, r0
 8002808:	4803      	ldr	r0, [pc, #12]	; (8002818 <ssd1306_I2C_WriteMulti+0x8c>)
 800280a:	f000 fe67 	bl	80034dc <HAL_I2C_Master_Transmit>
}
 800280e:	bf00      	nop
 8002810:	f507 778a 	add.w	r7, r7, #276	; 0x114
 8002814:	46bd      	mov	sp, r7
 8002816:	bd90      	pop	{r4, r7, pc}
 8002818:	20000700 	.word	0x20000700

0800281c <ssd1306_I2C_Write>:


void ssd1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data) {
 800281c:	b580      	push	{r7, lr}
 800281e:	b086      	sub	sp, #24
 8002820:	af02      	add	r7, sp, #8
 8002822:	4603      	mov	r3, r0
 8002824:	71fb      	strb	r3, [r7, #7]
 8002826:	460b      	mov	r3, r1
 8002828:	71bb      	strb	r3, [r7, #6]
 800282a:	4613      	mov	r3, r2
 800282c:	717b      	strb	r3, [r7, #5]
	uint8_t dt[2];
	dt[0] = reg;
 800282e:	79bb      	ldrb	r3, [r7, #6]
 8002830:	733b      	strb	r3, [r7, #12]
	dt[1] = data;
 8002832:	797b      	ldrb	r3, [r7, #5]
 8002834:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1, address, dt, 2, 10);
 8002836:	79fb      	ldrb	r3, [r7, #7]
 8002838:	b299      	uxth	r1, r3
 800283a:	f107 020c 	add.w	r2, r7, #12
 800283e:	230a      	movs	r3, #10
 8002840:	9300      	str	r3, [sp, #0]
 8002842:	2302      	movs	r3, #2
 8002844:	4803      	ldr	r0, [pc, #12]	; (8002854 <ssd1306_I2C_Write+0x38>)
 8002846:	f000 fe49 	bl	80034dc <HAL_I2C_Master_Transmit>
}
 800284a:	bf00      	nop
 800284c:	3710      	adds	r7, #16
 800284e:	46bd      	mov	sp, r7
 8002850:	bd80      	pop	{r7, pc}
 8002852:	bf00      	nop
 8002854:	20000700 	.word	0x20000700

08002858 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002858:	b480      	push	{r7}
 800285a:	b085      	sub	sp, #20
 800285c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800285e:	4b15      	ldr	r3, [pc, #84]	; (80028b4 <HAL_MspInit+0x5c>)
 8002860:	699b      	ldr	r3, [r3, #24]
 8002862:	4a14      	ldr	r2, [pc, #80]	; (80028b4 <HAL_MspInit+0x5c>)
 8002864:	f043 0301 	orr.w	r3, r3, #1
 8002868:	6193      	str	r3, [r2, #24]
 800286a:	4b12      	ldr	r3, [pc, #72]	; (80028b4 <HAL_MspInit+0x5c>)
 800286c:	699b      	ldr	r3, [r3, #24]
 800286e:	f003 0301 	and.w	r3, r3, #1
 8002872:	60bb      	str	r3, [r7, #8]
 8002874:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002876:	4b0f      	ldr	r3, [pc, #60]	; (80028b4 <HAL_MspInit+0x5c>)
 8002878:	69db      	ldr	r3, [r3, #28]
 800287a:	4a0e      	ldr	r2, [pc, #56]	; (80028b4 <HAL_MspInit+0x5c>)
 800287c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002880:	61d3      	str	r3, [r2, #28]
 8002882:	4b0c      	ldr	r3, [pc, #48]	; (80028b4 <HAL_MspInit+0x5c>)
 8002884:	69db      	ldr	r3, [r3, #28]
 8002886:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800288a:	607b      	str	r3, [r7, #4]
 800288c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800288e:	4b0a      	ldr	r3, [pc, #40]	; (80028b8 <HAL_MspInit+0x60>)
 8002890:	685b      	ldr	r3, [r3, #4]
 8002892:	60fb      	str	r3, [r7, #12]
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800289a:	60fb      	str	r3, [r7, #12]
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80028a2:	60fb      	str	r3, [r7, #12]
 80028a4:	4a04      	ldr	r2, [pc, #16]	; (80028b8 <HAL_MspInit+0x60>)
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80028aa:	bf00      	nop
 80028ac:	3714      	adds	r7, #20
 80028ae:	46bd      	mov	sp, r7
 80028b0:	bc80      	pop	{r7}
 80028b2:	4770      	bx	lr
 80028b4:	40021000 	.word	0x40021000
 80028b8:	40010000 	.word	0x40010000

080028bc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80028bc:	b580      	push	{r7, lr}
 80028be:	b088      	sub	sp, #32
 80028c0:	af00      	add	r7, sp, #0
 80028c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80028c4:	f107 0310 	add.w	r3, r7, #16
 80028c8:	2200      	movs	r2, #0
 80028ca:	601a      	str	r2, [r3, #0]
 80028cc:	605a      	str	r2, [r3, #4]
 80028ce:	609a      	str	r2, [r3, #8]
 80028d0:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	4a15      	ldr	r2, [pc, #84]	; (800292c <HAL_I2C_MspInit+0x70>)
 80028d8:	4293      	cmp	r3, r2
 80028da:	d123      	bne.n	8002924 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80028dc:	4b14      	ldr	r3, [pc, #80]	; (8002930 <HAL_I2C_MspInit+0x74>)
 80028de:	699b      	ldr	r3, [r3, #24]
 80028e0:	4a13      	ldr	r2, [pc, #76]	; (8002930 <HAL_I2C_MspInit+0x74>)
 80028e2:	f043 0308 	orr.w	r3, r3, #8
 80028e6:	6193      	str	r3, [r2, #24]
 80028e8:	4b11      	ldr	r3, [pc, #68]	; (8002930 <HAL_I2C_MspInit+0x74>)
 80028ea:	699b      	ldr	r3, [r3, #24]
 80028ec:	f003 0308 	and.w	r3, r3, #8
 80028f0:	60fb      	str	r3, [r7, #12]
 80028f2:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80028f4:	23c0      	movs	r3, #192	; 0xc0
 80028f6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80028f8:	2312      	movs	r3, #18
 80028fa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80028fc:	2303      	movs	r3, #3
 80028fe:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002900:	f107 0310 	add.w	r3, r7, #16
 8002904:	4619      	mov	r1, r3
 8002906:	480b      	ldr	r0, [pc, #44]	; (8002934 <HAL_I2C_MspInit+0x78>)
 8002908:	f000 fb1e 	bl	8002f48 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800290c:	4b08      	ldr	r3, [pc, #32]	; (8002930 <HAL_I2C_MspInit+0x74>)
 800290e:	69db      	ldr	r3, [r3, #28]
 8002910:	4a07      	ldr	r2, [pc, #28]	; (8002930 <HAL_I2C_MspInit+0x74>)
 8002912:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002916:	61d3      	str	r3, [r2, #28]
 8002918:	4b05      	ldr	r3, [pc, #20]	; (8002930 <HAL_I2C_MspInit+0x74>)
 800291a:	69db      	ldr	r3, [r3, #28]
 800291c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002920:	60bb      	str	r3, [r7, #8]
 8002922:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002924:	bf00      	nop
 8002926:	3720      	adds	r7, #32
 8002928:	46bd      	mov	sp, r7
 800292a:	bd80      	pop	{r7, pc}
 800292c:	40005400 	.word	0x40005400
 8002930:	40021000 	.word	0x40021000
 8002934:	40010c00 	.word	0x40010c00

08002938 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002938:	b480      	push	{r7}
 800293a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800293c:	bf00      	nop
 800293e:	46bd      	mov	sp, r7
 8002940:	bc80      	pop	{r7}
 8002942:	4770      	bx	lr

08002944 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002944:	b480      	push	{r7}
 8002946:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002948:	e7fe      	b.n	8002948 <HardFault_Handler+0x4>

0800294a <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800294a:	b480      	push	{r7}
 800294c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800294e:	e7fe      	b.n	800294e <MemManage_Handler+0x4>

08002950 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002950:	b480      	push	{r7}
 8002952:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002954:	e7fe      	b.n	8002954 <BusFault_Handler+0x4>

08002956 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002956:	b480      	push	{r7}
 8002958:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800295a:	e7fe      	b.n	800295a <UsageFault_Handler+0x4>

0800295c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800295c:	b480      	push	{r7}
 800295e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002960:	bf00      	nop
 8002962:	46bd      	mov	sp, r7
 8002964:	bc80      	pop	{r7}
 8002966:	4770      	bx	lr

08002968 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002968:	b480      	push	{r7}
 800296a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800296c:	bf00      	nop
 800296e:	46bd      	mov	sp, r7
 8002970:	bc80      	pop	{r7}
 8002972:	4770      	bx	lr

08002974 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002974:	b480      	push	{r7}
 8002976:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002978:	bf00      	nop
 800297a:	46bd      	mov	sp, r7
 800297c:	bc80      	pop	{r7}
 800297e:	4770      	bx	lr

08002980 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002980:	b580      	push	{r7, lr}
 8002982:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002984:	f000 f9e0 	bl	8002d48 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  	  if(ticks) ticks--;
 8002988:	4b05      	ldr	r3, [pc, #20]	; (80029a0 <SysTick_Handler+0x20>)
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	2b00      	cmp	r3, #0
 800298e:	d004      	beq.n	800299a <SysTick_Handler+0x1a>
 8002990:	4b03      	ldr	r3, [pc, #12]	; (80029a0 <SysTick_Handler+0x20>)
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	3b01      	subs	r3, #1
 8002996:	4a02      	ldr	r2, [pc, #8]	; (80029a0 <SysTick_Handler+0x20>)
 8002998:	6013      	str	r3, [r2, #0]
  /* USER CODE END SysTick_IRQn 1 */
}
 800299a:	bf00      	nop
 800299c:	bd80      	pop	{r7, pc}
 800299e:	bf00      	nop
 80029a0:	200007b0 	.word	0x200007b0

080029a4 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 80029a4:	b580      	push	{r7, lr}
 80029a6:	b084      	sub	sp, #16
 80029a8:	af00      	add	r7, sp, #0
 80029aa:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80029ac:	4b11      	ldr	r3, [pc, #68]	; (80029f4 <_sbrk+0x50>)
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d102      	bne.n	80029ba <_sbrk+0x16>
		heap_end = &end;
 80029b4:	4b0f      	ldr	r3, [pc, #60]	; (80029f4 <_sbrk+0x50>)
 80029b6:	4a10      	ldr	r2, [pc, #64]	; (80029f8 <_sbrk+0x54>)
 80029b8:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 80029ba:	4b0e      	ldr	r3, [pc, #56]	; (80029f4 <_sbrk+0x50>)
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 80029c0:	4b0c      	ldr	r3, [pc, #48]	; (80029f4 <_sbrk+0x50>)
 80029c2:	681a      	ldr	r2, [r3, #0]
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	4413      	add	r3, r2
 80029c8:	466a      	mov	r2, sp
 80029ca:	4293      	cmp	r3, r2
 80029cc:	d907      	bls.n	80029de <_sbrk+0x3a>
	{
		errno = ENOMEM;
 80029ce:	f002 fa89 	bl	8004ee4 <__errno>
 80029d2:	4602      	mov	r2, r0
 80029d4:	230c      	movs	r3, #12
 80029d6:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 80029d8:	f04f 33ff 	mov.w	r3, #4294967295
 80029dc:	e006      	b.n	80029ec <_sbrk+0x48>
	}

	heap_end += incr;
 80029de:	4b05      	ldr	r3, [pc, #20]	; (80029f4 <_sbrk+0x50>)
 80029e0:	681a      	ldr	r2, [r3, #0]
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	4413      	add	r3, r2
 80029e6:	4a03      	ldr	r2, [pc, #12]	; (80029f4 <_sbrk+0x50>)
 80029e8:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 80029ea:	68fb      	ldr	r3, [r7, #12]
}
 80029ec:	4618      	mov	r0, r3
 80029ee:	3710      	adds	r7, #16
 80029f0:	46bd      	mov	sp, r7
 80029f2:	bd80      	pop	{r7, pc}
 80029f4:	200006d8 	.word	0x200006d8
 80029f8:	200008c0 	.word	0x200008c0

080029fc <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80029fc:	b480      	push	{r7}
 80029fe:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8002a00:	4b15      	ldr	r3, [pc, #84]	; (8002a58 <SystemInit+0x5c>)
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	4a14      	ldr	r2, [pc, #80]	; (8002a58 <SystemInit+0x5c>)
 8002a06:	f043 0301 	orr.w	r3, r3, #1
 8002a0a:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8002a0c:	4b12      	ldr	r3, [pc, #72]	; (8002a58 <SystemInit+0x5c>)
 8002a0e:	685a      	ldr	r2, [r3, #4]
 8002a10:	4911      	ldr	r1, [pc, #68]	; (8002a58 <SystemInit+0x5c>)
 8002a12:	4b12      	ldr	r3, [pc, #72]	; (8002a5c <SystemInit+0x60>)
 8002a14:	4013      	ands	r3, r2
 8002a16:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8002a18:	4b0f      	ldr	r3, [pc, #60]	; (8002a58 <SystemInit+0x5c>)
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	4a0e      	ldr	r2, [pc, #56]	; (8002a58 <SystemInit+0x5c>)
 8002a1e:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8002a22:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002a26:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8002a28:	4b0b      	ldr	r3, [pc, #44]	; (8002a58 <SystemInit+0x5c>)
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	4a0a      	ldr	r2, [pc, #40]	; (8002a58 <SystemInit+0x5c>)
 8002a2e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002a32:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8002a34:	4b08      	ldr	r3, [pc, #32]	; (8002a58 <SystemInit+0x5c>)
 8002a36:	685b      	ldr	r3, [r3, #4]
 8002a38:	4a07      	ldr	r2, [pc, #28]	; (8002a58 <SystemInit+0x5c>)
 8002a3a:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8002a3e:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8002a40:	4b05      	ldr	r3, [pc, #20]	; (8002a58 <SystemInit+0x5c>)
 8002a42:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8002a46:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8002a48:	4b05      	ldr	r3, [pc, #20]	; (8002a60 <SystemInit+0x64>)
 8002a4a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002a4e:	609a      	str	r2, [r3, #8]
#endif 
}
 8002a50:	bf00      	nop
 8002a52:	46bd      	mov	sp, r7
 8002a54:	bc80      	pop	{r7}
 8002a56:	4770      	bx	lr
 8002a58:	40021000 	.word	0x40021000
 8002a5c:	f8ff0000 	.word	0xf8ff0000
 8002a60:	e000ed00 	.word	0xe000ed00

08002a64 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8002a64:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8002a66:	e003      	b.n	8002a70 <LoopCopyDataInit>

08002a68 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8002a68:	4b0b      	ldr	r3, [pc, #44]	; (8002a98 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8002a6a:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8002a6c:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8002a6e:	3104      	adds	r1, #4

08002a70 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8002a70:	480a      	ldr	r0, [pc, #40]	; (8002a9c <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8002a72:	4b0b      	ldr	r3, [pc, #44]	; (8002aa0 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8002a74:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8002a76:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8002a78:	d3f6      	bcc.n	8002a68 <CopyDataInit>
  ldr r2, =_sbss
 8002a7a:	4a0a      	ldr	r2, [pc, #40]	; (8002aa4 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8002a7c:	e002      	b.n	8002a84 <LoopFillZerobss>

08002a7e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8002a7e:	2300      	movs	r3, #0
  str r3, [r2], #4
 8002a80:	f842 3b04 	str.w	r3, [r2], #4

08002a84 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8002a84:	4b08      	ldr	r3, [pc, #32]	; (8002aa8 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8002a86:	429a      	cmp	r2, r3
  bcc FillZerobss
 8002a88:	d3f9      	bcc.n	8002a7e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002a8a:	f7ff ffb7 	bl	80029fc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002a8e:	f002 fa2f 	bl	8004ef0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002a92:	f7fe fb1d 	bl	80010d0 <main>
  bx lr
 8002a96:	4770      	bx	lr
  ldr r3, =_sidata
 8002a98:	08009ab8 	.word	0x08009ab8
  ldr r0, =_sdata
 8002a9c:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8002aa0:	20000280 	.word	0x20000280
  ldr r2, =_sbss
 8002aa4:	20000280 	.word	0x20000280
  ldr r3, = _ebss
 8002aa8:	200008c0 	.word	0x200008c0

08002aac <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002aac:	e7fe      	b.n	8002aac <ADC1_2_IRQHandler>
	...

08002ab0 <inicializar_despachador>:
static TaskStat *lista_tareas;

void inicializar_despachador(TaskStat *lista, uint32_t len,
		void (*start_timer)(void), uint32_t (*stop_timer)(void),
		void (*falla_sistema)(void))
{
 8002ab0:	b580      	push	{r7, lr}
 8002ab2:	b086      	sub	sp, #24
 8002ab4:	af00      	add	r7, sp, #0
 8002ab6:	60f8      	str	r0, [r7, #12]
 8002ab8:	60b9      	str	r1, [r7, #8]
 8002aba:	607a      	str	r2, [r7, #4]
 8002abc:	603b      	str	r3, [r7, #0]
	uint32_t i;
	monitor_start = start_timer;
 8002abe:	4a14      	ldr	r2, [pc, #80]	; (8002b10 <inicializar_despachador+0x60>)
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	6013      	str	r3, [r2, #0]
	monitor_stop = stop_timer;
 8002ac4:	4a13      	ldr	r2, [pc, #76]	; (8002b14 <inicializar_despachador+0x64>)
 8002ac6:	683b      	ldr	r3, [r7, #0]
 8002ac8:	6013      	str	r3, [r2, #0]
	fallar_sistema = falla_sistema;
 8002aca:	4a13      	ldr	r2, [pc, #76]	; (8002b18 <inicializar_despachador+0x68>)
 8002acc:	6a3b      	ldr	r3, [r7, #32]
 8002ace:	6013      	str	r3, [r2, #0]
	tareas_a_despachar = 0;
 8002ad0:	4b12      	ldr	r3, [pc, #72]	; (8002b1c <inicializar_despachador+0x6c>)
 8002ad2:	2200      	movs	r2, #0
 8002ad4:	601a      	str	r2, [r3, #0]
	max_len_lista_tareas = len;
 8002ad6:	4a12      	ldr	r2, [pc, #72]	; (8002b20 <inicializar_despachador+0x70>)
 8002ad8:	68bb      	ldr	r3, [r7, #8]
 8002ada:	6013      	str	r3, [r2, #0]
	lista_tareas = lista;
 8002adc:	4a11      	ldr	r2, [pc, #68]	; (8002b24 <inicializar_despachador+0x74>)
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	6013      	str	r3, [r2, #0]
	for (i = 0; i < len; i++)
 8002ae2:	2300      	movs	r3, #0
 8002ae4:	617b      	str	r3, [r7, #20]
 8002ae6:	e00b      	b.n	8002b00 <inicializar_despachador+0x50>
		memset(&lista[i], 0, sizeof(TaskStat));
 8002ae8:	697b      	ldr	r3, [r7, #20]
 8002aea:	015b      	lsls	r3, r3, #5
 8002aec:	68fa      	ldr	r2, [r7, #12]
 8002aee:	4413      	add	r3, r2
 8002af0:	2220      	movs	r2, #32
 8002af2:	2100      	movs	r1, #0
 8002af4:	4618      	mov	r0, r3
 8002af6:	f002 fa1f 	bl	8004f38 <memset>
	for (i = 0; i < len; i++)
 8002afa:	697b      	ldr	r3, [r7, #20]
 8002afc:	3301      	adds	r3, #1
 8002afe:	617b      	str	r3, [r7, #20]
 8002b00:	697a      	ldr	r2, [r7, #20]
 8002b02:	68bb      	ldr	r3, [r7, #8]
 8002b04:	429a      	cmp	r2, r3
 8002b06:	d3ef      	bcc.n	8002ae8 <inicializar_despachador+0x38>
}
 8002b08:	bf00      	nop
 8002b0a:	3718      	adds	r7, #24
 8002b0c:	46bd      	mov	sp, r7
 8002b0e:	bd80      	pop	{r7, pc}
 8002b10:	200006e0 	.word	0x200006e0
 8002b14:	200006e4 	.word	0x200006e4
 8002b18:	200006dc 	.word	0x200006dc
 8002b1c:	200006ec 	.word	0x200006ec
 8002b20:	200006e8 	.word	0x200006e8
 8002b24:	200006f0 	.word	0x200006f0

08002b28 <agregar_tarea>:

int agregar_tarea(TaskStat *lista, void (*tarea)(void *p), void *param,
		int offset, int periodo, int bcet, int wcet)
{
 8002b28:	b480      	push	{r7}
 8002b2a:	b085      	sub	sp, #20
 8002b2c:	af00      	add	r7, sp, #0
 8002b2e:	60f8      	str	r0, [r7, #12]
 8002b30:	60b9      	str	r1, [r7, #8]
 8002b32:	607a      	str	r2, [r7, #4]
 8002b34:	603b      	str	r3, [r7, #0]
	// Chequeos
	if ((periodo == 0) || (tarea == NULL)
 8002b36:	69bb      	ldr	r3, [r7, #24]
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d008      	beq.n	8002b4e <agregar_tarea+0x26>
 8002b3c:	68bb      	ldr	r3, [r7, #8]
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d005      	beq.n	8002b4e <agregar_tarea+0x26>
			|| tareas_a_despachar == max_len_lista_tareas)
 8002b42:	4b22      	ldr	r3, [pc, #136]	; (8002bcc <agregar_tarea+0xa4>)
 8002b44:	681a      	ldr	r2, [r3, #0]
 8002b46:	4b22      	ldr	r3, [pc, #136]	; (8002bd0 <agregar_tarea+0xa8>)
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	429a      	cmp	r2, r3
 8002b4c:	d102      	bne.n	8002b54 <agregar_tarea+0x2c>
		return -1;
 8002b4e:	f04f 33ff 	mov.w	r3, #4294967295
 8002b52:	e036      	b.n	8002bc2 <agregar_tarea+0x9a>

	//Punteros de la tarea.
	lista[tareas_a_despachar].task = tarea;
 8002b54:	4b1d      	ldr	r3, [pc, #116]	; (8002bcc <agregar_tarea+0xa4>)
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	015b      	lsls	r3, r3, #5
 8002b5a:	68fa      	ldr	r2, [r7, #12]
 8002b5c:	4413      	add	r3, r2
 8002b5e:	68ba      	ldr	r2, [r7, #8]
 8002b60:	619a      	str	r2, [r3, #24]
	lista[tareas_a_despachar].param = param;
 8002b62:	4b1a      	ldr	r3, [pc, #104]	; (8002bcc <agregar_tarea+0xa4>)
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	015b      	lsls	r3, r3, #5
 8002b68:	68fa      	ldr	r2, [r7, #12]
 8002b6a:	4413      	add	r3, r2
 8002b6c:	687a      	ldr	r2, [r7, #4]
 8002b6e:	61da      	str	r2, [r3, #28]

	//Periodo y offset
	lista[tareas_a_despachar].period = periodo;
 8002b70:	4b16      	ldr	r3, [pc, #88]	; (8002bcc <agregar_tarea+0xa4>)
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	015b      	lsls	r3, r3, #5
 8002b76:	68fa      	ldr	r2, [r7, #12]
 8002b78:	4413      	add	r3, r2
 8002b7a:	69ba      	ldr	r2, [r7, #24]
 8002b7c:	615a      	str	r2, [r3, #20]
	lista[tareas_a_despachar].offset = offset;
 8002b7e:	4b13      	ldr	r3, [pc, #76]	; (8002bcc <agregar_tarea+0xa4>)
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	015b      	lsls	r3, r3, #5
 8002b84:	68fa      	ldr	r2, [r7, #12]
 8002b86:	4413      	add	r3, r2
 8002b88:	683a      	ldr	r2, [r7, #0]
 8002b8a:	611a      	str	r2, [r3, #16]

	//Cargo los tiempos.
	lista[tareas_a_despachar].et = 0;
 8002b8c:	4b0f      	ldr	r3, [pc, #60]	; (8002bcc <agregar_tarea+0xa4>)
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	015b      	lsls	r3, r3, #5
 8002b92:	68fa      	ldr	r2, [r7, #12]
 8002b94:	4413      	add	r3, r2
 8002b96:	2200      	movs	r2, #0
 8002b98:	609a      	str	r2, [r3, #8]
	lista[tareas_a_despachar].bcet = bcet;
 8002b9a:	4b0c      	ldr	r3, [pc, #48]	; (8002bcc <agregar_tarea+0xa4>)
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	015b      	lsls	r3, r3, #5
 8002ba0:	68fa      	ldr	r2, [r7, #12]
 8002ba2:	4413      	add	r3, r2
 8002ba4:	69fa      	ldr	r2, [r7, #28]
 8002ba6:	601a      	str	r2, [r3, #0]
	lista[tareas_a_despachar].wcet = wcet;
 8002ba8:	4b08      	ldr	r3, [pc, #32]	; (8002bcc <agregar_tarea+0xa4>)
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	015b      	lsls	r3, r3, #5
 8002bae:	68fa      	ldr	r2, [r7, #12]
 8002bb0:	4413      	add	r3, r2
 8002bb2:	6a3a      	ldr	r2, [r7, #32]
 8002bb4:	605a      	str	r2, [r3, #4]
	tareas_a_despachar++;
 8002bb6:	4b05      	ldr	r3, [pc, #20]	; (8002bcc <agregar_tarea+0xa4>)
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	3301      	adds	r3, #1
 8002bbc:	4a03      	ldr	r2, [pc, #12]	; (8002bcc <agregar_tarea+0xa4>)
 8002bbe:	6013      	str	r3, [r2, #0]
	return 0;
 8002bc0:	2300      	movs	r3, #0
}
 8002bc2:	4618      	mov	r0, r3
 8002bc4:	3714      	adds	r7, #20
 8002bc6:	46bd      	mov	sp, r7
 8002bc8:	bc80      	pop	{r7}
 8002bca:	4770      	bx	lr
 8002bcc:	200006ec 	.word	0x200006ec
 8002bd0:	200006e8 	.word	0x200006e8

08002bd4 <despachar_tarea>:

int despachar_tarea(TaskStat *estado)
{
 8002bd4:	b580      	push	{r7, lr}
 8002bd6:	b084      	sub	sp, #16
 8002bd8:	af00      	add	r7, sp, #0
 8002bda:	6078      	str	r0, [r7, #4]
	int ret = 0;
 8002bdc:	2300      	movs	r3, #0
 8002bde:	60fb      	str	r3, [r7, #12]
	int valor_us;
	if (!estado->offset)
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	691b      	ldr	r3, [r3, #16]
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d12d      	bne.n	8002c44 <despachar_tarea+0x70>
	{
		estado->offset = estado->period - 1;
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	695b      	ldr	r3, [r3, #20]
 8002bec:	1e5a      	subs	r2, r3, #1
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	611a      	str	r2, [r3, #16]
		monitor_start();
 8002bf2:	4b19      	ldr	r3, [pc, #100]	; (8002c58 <despachar_tarea+0x84>)
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	4798      	blx	r3
		estado->task(estado->param);
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	699b      	ldr	r3, [r3, #24]
 8002bfc:	687a      	ldr	r2, [r7, #4]
 8002bfe:	69d2      	ldr	r2, [r2, #28]
 8002c00:	4610      	mov	r0, r2
 8002c02:	4798      	blx	r3
		valor_us = monitor_stop();
 8002c04:	4b15      	ldr	r3, [pc, #84]	; (8002c5c <despachar_tarea+0x88>)
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	4798      	blx	r3
 8002c0a:	4603      	mov	r3, r0
 8002c0c:	60bb      	str	r3, [r7, #8]
		estado->et = valor_us;
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	68ba      	ldr	r2, [r7, #8]
 8002c12:	609a      	str	r2, [r3, #8]
		if (valor_us < estado->bcet || valor_us > estado->wcet)
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	68ba      	ldr	r2, [r7, #8]
 8002c1a:	429a      	cmp	r2, r3
 8002c1c:	db04      	blt.n	8002c28 <despachar_tarea+0x54>
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	685b      	ldr	r3, [r3, #4]
 8002c22:	68ba      	ldr	r2, [r7, #8]
 8002c24:	429a      	cmp	r2, r3
 8002c26:	dd02      	ble.n	8002c2e <despachar_tarea+0x5a>
			ret--;
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	3b01      	subs	r3, #1
 8002c2c:	60fb      	str	r3, [r7, #12]
		if (estado->et_wcet < estado->et)
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	68da      	ldr	r2, [r3, #12]
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	689b      	ldr	r3, [r3, #8]
 8002c36:	429a      	cmp	r2, r3
 8002c38:	da09      	bge.n	8002c4e <despachar_tarea+0x7a>
			estado->et_wcet = estado->et;
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	689a      	ldr	r2, [r3, #8]
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	60da      	str	r2, [r3, #12]
 8002c42:	e004      	b.n	8002c4e <despachar_tarea+0x7a>
	}
	else
	{
		estado->offset--;
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	691b      	ldr	r3, [r3, #16]
 8002c48:	1e5a      	subs	r2, r3, #1
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	611a      	str	r2, [r3, #16]
	}
	return ret;
 8002c4e:	68fb      	ldr	r3, [r7, #12]
}
 8002c50:	4618      	mov	r0, r3
 8002c52:	3710      	adds	r7, #16
 8002c54:	46bd      	mov	sp, r7
 8002c56:	bd80      	pop	{r7, pc}
 8002c58:	200006e0 	.word	0x200006e0
 8002c5c:	200006e4 	.word	0x200006e4

08002c60 <despachar_tareas>:

void despachar_tareas(void)
{
 8002c60:	b580      	push	{r7, lr}
 8002c62:	b082      	sub	sp, #8
 8002c64:	af00      	add	r7, sp, #0
	uint32_t i;
	int fallar = 0;
 8002c66:	2300      	movs	r3, #0
 8002c68:	603b      	str	r3, [r7, #0]
	for (i = 0; i < tareas_a_despachar; i++)
 8002c6a:	2300      	movs	r3, #0
 8002c6c:	607b      	str	r3, [r7, #4]
 8002c6e:	e00e      	b.n	8002c8e <despachar_tareas+0x2e>
	{
		fallar = despachar_tarea(&lista_tareas[i]);
 8002c70:	4b0f      	ldr	r3, [pc, #60]	; (8002cb0 <despachar_tareas+0x50>)
 8002c72:	681a      	ldr	r2, [r3, #0]
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	015b      	lsls	r3, r3, #5
 8002c78:	4413      	add	r3, r2
 8002c7a:	4618      	mov	r0, r3
 8002c7c:	f7ff ffaa 	bl	8002bd4 <despachar_tarea>
 8002c80:	6038      	str	r0, [r7, #0]
		if (fallar)
 8002c82:	683b      	ldr	r3, [r7, #0]
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d108      	bne.n	8002c9a <despachar_tareas+0x3a>
	for (i = 0; i < tareas_a_despachar; i++)
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	3301      	adds	r3, #1
 8002c8c:	607b      	str	r3, [r7, #4]
 8002c8e:	4b09      	ldr	r3, [pc, #36]	; (8002cb4 <despachar_tareas+0x54>)
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	687a      	ldr	r2, [r7, #4]
 8002c94:	429a      	cmp	r2, r3
 8002c96:	d3eb      	bcc.n	8002c70 <despachar_tareas+0x10>
 8002c98:	e000      	b.n	8002c9c <despachar_tareas+0x3c>
		{
			break;
 8002c9a:	bf00      	nop
		}
	}
	if (fallar)
 8002c9c:	683b      	ldr	r3, [r7, #0]
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d002      	beq.n	8002ca8 <despachar_tareas+0x48>
	{
		fallar_sistema();
 8002ca2:	4b05      	ldr	r3, [pc, #20]	; (8002cb8 <despachar_tareas+0x58>)
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	4798      	blx	r3
	}
}
 8002ca8:	bf00      	nop
 8002caa:	3708      	adds	r7, #8
 8002cac:	46bd      	mov	sp, r7
 8002cae:	bd80      	pop	{r7, pc}
 8002cb0:	200006f0 	.word	0x200006f0
 8002cb4:	200006ec 	.word	0x200006ec
 8002cb8:	200006dc 	.word	0x200006dc

08002cbc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002cbc:	b580      	push	{r7, lr}
 8002cbe:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002cc0:	4b08      	ldr	r3, [pc, #32]	; (8002ce4 <HAL_Init+0x28>)
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	4a07      	ldr	r2, [pc, #28]	; (8002ce4 <HAL_Init+0x28>)
 8002cc6:	f043 0310 	orr.w	r3, r3, #16
 8002cca:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002ccc:	2003      	movs	r0, #3
 8002cce:	f000 f907 	bl	8002ee0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002cd2:	2000      	movs	r0, #0
 8002cd4:	f000 f808 	bl	8002ce8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002cd8:	f7ff fdbe 	bl	8002858 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002cdc:	2300      	movs	r3, #0
}
 8002cde:	4618      	mov	r0, r3
 8002ce0:	bd80      	pop	{r7, pc}
 8002ce2:	bf00      	nop
 8002ce4:	40022000 	.word	0x40022000

08002ce8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002ce8:	b580      	push	{r7, lr}
 8002cea:	b082      	sub	sp, #8
 8002cec:	af00      	add	r7, sp, #0
 8002cee:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002cf0:	4b12      	ldr	r3, [pc, #72]	; (8002d3c <HAL_InitTick+0x54>)
 8002cf2:	681a      	ldr	r2, [r3, #0]
 8002cf4:	4b12      	ldr	r3, [pc, #72]	; (8002d40 <HAL_InitTick+0x58>)
 8002cf6:	781b      	ldrb	r3, [r3, #0]
 8002cf8:	4619      	mov	r1, r3
 8002cfa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002cfe:	fbb3 f3f1 	udiv	r3, r3, r1
 8002d02:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d06:	4618      	mov	r0, r3
 8002d08:	f000 f911 	bl	8002f2e <HAL_SYSTICK_Config>
 8002d0c:	4603      	mov	r3, r0
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d001      	beq.n	8002d16 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002d12:	2301      	movs	r3, #1
 8002d14:	e00e      	b.n	8002d34 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	2b0f      	cmp	r3, #15
 8002d1a:	d80a      	bhi.n	8002d32 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002d1c:	2200      	movs	r2, #0
 8002d1e:	6879      	ldr	r1, [r7, #4]
 8002d20:	f04f 30ff 	mov.w	r0, #4294967295
 8002d24:	f000 f8e7 	bl	8002ef6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002d28:	4a06      	ldr	r2, [pc, #24]	; (8002d44 <HAL_InitTick+0x5c>)
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002d2e:	2300      	movs	r3, #0
 8002d30:	e000      	b.n	8002d34 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002d32:	2301      	movs	r3, #1
}
 8002d34:	4618      	mov	r0, r3
 8002d36:	3708      	adds	r7, #8
 8002d38:	46bd      	mov	sp, r7
 8002d3a:	bd80      	pop	{r7, pc}
 8002d3c:	200000a0 	.word	0x200000a0
 8002d40:	200000a8 	.word	0x200000a8
 8002d44:	200000a4 	.word	0x200000a4

08002d48 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002d48:	b480      	push	{r7}
 8002d4a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002d4c:	4b05      	ldr	r3, [pc, #20]	; (8002d64 <HAL_IncTick+0x1c>)
 8002d4e:	781b      	ldrb	r3, [r3, #0]
 8002d50:	461a      	mov	r2, r3
 8002d52:	4b05      	ldr	r3, [pc, #20]	; (8002d68 <HAL_IncTick+0x20>)
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	4413      	add	r3, r2
 8002d58:	4a03      	ldr	r2, [pc, #12]	; (8002d68 <HAL_IncTick+0x20>)
 8002d5a:	6013      	str	r3, [r2, #0]
}
 8002d5c:	bf00      	nop
 8002d5e:	46bd      	mov	sp, r7
 8002d60:	bc80      	pop	{r7}
 8002d62:	4770      	bx	lr
 8002d64:	200000a8 	.word	0x200000a8
 8002d68:	200008b8 	.word	0x200008b8

08002d6c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002d6c:	b480      	push	{r7}
 8002d6e:	af00      	add	r7, sp, #0
  return uwTick;
 8002d70:	4b02      	ldr	r3, [pc, #8]	; (8002d7c <HAL_GetTick+0x10>)
 8002d72:	681b      	ldr	r3, [r3, #0]
}
 8002d74:	4618      	mov	r0, r3
 8002d76:	46bd      	mov	sp, r7
 8002d78:	bc80      	pop	{r7}
 8002d7a:	4770      	bx	lr
 8002d7c:	200008b8 	.word	0x200008b8

08002d80 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002d80:	b480      	push	{r7}
 8002d82:	b085      	sub	sp, #20
 8002d84:	af00      	add	r7, sp, #0
 8002d86:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	f003 0307 	and.w	r3, r3, #7
 8002d8e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002d90:	4b0c      	ldr	r3, [pc, #48]	; (8002dc4 <__NVIC_SetPriorityGrouping+0x44>)
 8002d92:	68db      	ldr	r3, [r3, #12]
 8002d94:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002d96:	68ba      	ldr	r2, [r7, #8]
 8002d98:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002d9c:	4013      	ands	r3, r2
 8002d9e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002da4:	68bb      	ldr	r3, [r7, #8]
 8002da6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002da8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002dac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002db0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002db2:	4a04      	ldr	r2, [pc, #16]	; (8002dc4 <__NVIC_SetPriorityGrouping+0x44>)
 8002db4:	68bb      	ldr	r3, [r7, #8]
 8002db6:	60d3      	str	r3, [r2, #12]
}
 8002db8:	bf00      	nop
 8002dba:	3714      	adds	r7, #20
 8002dbc:	46bd      	mov	sp, r7
 8002dbe:	bc80      	pop	{r7}
 8002dc0:	4770      	bx	lr
 8002dc2:	bf00      	nop
 8002dc4:	e000ed00 	.word	0xe000ed00

08002dc8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002dc8:	b480      	push	{r7}
 8002dca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002dcc:	4b04      	ldr	r3, [pc, #16]	; (8002de0 <__NVIC_GetPriorityGrouping+0x18>)
 8002dce:	68db      	ldr	r3, [r3, #12]
 8002dd0:	0a1b      	lsrs	r3, r3, #8
 8002dd2:	f003 0307 	and.w	r3, r3, #7
}
 8002dd6:	4618      	mov	r0, r3
 8002dd8:	46bd      	mov	sp, r7
 8002dda:	bc80      	pop	{r7}
 8002ddc:	4770      	bx	lr
 8002dde:	bf00      	nop
 8002de0:	e000ed00 	.word	0xe000ed00

08002de4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002de4:	b480      	push	{r7}
 8002de6:	b083      	sub	sp, #12
 8002de8:	af00      	add	r7, sp, #0
 8002dea:	4603      	mov	r3, r0
 8002dec:	6039      	str	r1, [r7, #0]
 8002dee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002df0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	db0a      	blt.n	8002e0e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002df8:	683b      	ldr	r3, [r7, #0]
 8002dfa:	b2da      	uxtb	r2, r3
 8002dfc:	490c      	ldr	r1, [pc, #48]	; (8002e30 <__NVIC_SetPriority+0x4c>)
 8002dfe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e02:	0112      	lsls	r2, r2, #4
 8002e04:	b2d2      	uxtb	r2, r2
 8002e06:	440b      	add	r3, r1
 8002e08:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002e0c:	e00a      	b.n	8002e24 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002e0e:	683b      	ldr	r3, [r7, #0]
 8002e10:	b2da      	uxtb	r2, r3
 8002e12:	4908      	ldr	r1, [pc, #32]	; (8002e34 <__NVIC_SetPriority+0x50>)
 8002e14:	79fb      	ldrb	r3, [r7, #7]
 8002e16:	f003 030f 	and.w	r3, r3, #15
 8002e1a:	3b04      	subs	r3, #4
 8002e1c:	0112      	lsls	r2, r2, #4
 8002e1e:	b2d2      	uxtb	r2, r2
 8002e20:	440b      	add	r3, r1
 8002e22:	761a      	strb	r2, [r3, #24]
}
 8002e24:	bf00      	nop
 8002e26:	370c      	adds	r7, #12
 8002e28:	46bd      	mov	sp, r7
 8002e2a:	bc80      	pop	{r7}
 8002e2c:	4770      	bx	lr
 8002e2e:	bf00      	nop
 8002e30:	e000e100 	.word	0xe000e100
 8002e34:	e000ed00 	.word	0xe000ed00

08002e38 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002e38:	b480      	push	{r7}
 8002e3a:	b089      	sub	sp, #36	; 0x24
 8002e3c:	af00      	add	r7, sp, #0
 8002e3e:	60f8      	str	r0, [r7, #12]
 8002e40:	60b9      	str	r1, [r7, #8]
 8002e42:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	f003 0307 	and.w	r3, r3, #7
 8002e4a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002e4c:	69fb      	ldr	r3, [r7, #28]
 8002e4e:	f1c3 0307 	rsb	r3, r3, #7
 8002e52:	2b04      	cmp	r3, #4
 8002e54:	bf28      	it	cs
 8002e56:	2304      	movcs	r3, #4
 8002e58:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002e5a:	69fb      	ldr	r3, [r7, #28]
 8002e5c:	3304      	adds	r3, #4
 8002e5e:	2b06      	cmp	r3, #6
 8002e60:	d902      	bls.n	8002e68 <NVIC_EncodePriority+0x30>
 8002e62:	69fb      	ldr	r3, [r7, #28]
 8002e64:	3b03      	subs	r3, #3
 8002e66:	e000      	b.n	8002e6a <NVIC_EncodePriority+0x32>
 8002e68:	2300      	movs	r3, #0
 8002e6a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002e6c:	f04f 32ff 	mov.w	r2, #4294967295
 8002e70:	69bb      	ldr	r3, [r7, #24]
 8002e72:	fa02 f303 	lsl.w	r3, r2, r3
 8002e76:	43da      	mvns	r2, r3
 8002e78:	68bb      	ldr	r3, [r7, #8]
 8002e7a:	401a      	ands	r2, r3
 8002e7c:	697b      	ldr	r3, [r7, #20]
 8002e7e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002e80:	f04f 31ff 	mov.w	r1, #4294967295
 8002e84:	697b      	ldr	r3, [r7, #20]
 8002e86:	fa01 f303 	lsl.w	r3, r1, r3
 8002e8a:	43d9      	mvns	r1, r3
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002e90:	4313      	orrs	r3, r2
         );
}
 8002e92:	4618      	mov	r0, r3
 8002e94:	3724      	adds	r7, #36	; 0x24
 8002e96:	46bd      	mov	sp, r7
 8002e98:	bc80      	pop	{r7}
 8002e9a:	4770      	bx	lr

08002e9c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002e9c:	b580      	push	{r7, lr}
 8002e9e:	b082      	sub	sp, #8
 8002ea0:	af00      	add	r7, sp, #0
 8002ea2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	3b01      	subs	r3, #1
 8002ea8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002eac:	d301      	bcc.n	8002eb2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002eae:	2301      	movs	r3, #1
 8002eb0:	e00f      	b.n	8002ed2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002eb2:	4a0a      	ldr	r2, [pc, #40]	; (8002edc <SysTick_Config+0x40>)
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	3b01      	subs	r3, #1
 8002eb8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002eba:	210f      	movs	r1, #15
 8002ebc:	f04f 30ff 	mov.w	r0, #4294967295
 8002ec0:	f7ff ff90 	bl	8002de4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002ec4:	4b05      	ldr	r3, [pc, #20]	; (8002edc <SysTick_Config+0x40>)
 8002ec6:	2200      	movs	r2, #0
 8002ec8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002eca:	4b04      	ldr	r3, [pc, #16]	; (8002edc <SysTick_Config+0x40>)
 8002ecc:	2207      	movs	r2, #7
 8002ece:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002ed0:	2300      	movs	r3, #0
}
 8002ed2:	4618      	mov	r0, r3
 8002ed4:	3708      	adds	r7, #8
 8002ed6:	46bd      	mov	sp, r7
 8002ed8:	bd80      	pop	{r7, pc}
 8002eda:	bf00      	nop
 8002edc:	e000e010 	.word	0xe000e010

08002ee0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002ee0:	b580      	push	{r7, lr}
 8002ee2:	b082      	sub	sp, #8
 8002ee4:	af00      	add	r7, sp, #0
 8002ee6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002ee8:	6878      	ldr	r0, [r7, #4]
 8002eea:	f7ff ff49 	bl	8002d80 <__NVIC_SetPriorityGrouping>
}
 8002eee:	bf00      	nop
 8002ef0:	3708      	adds	r7, #8
 8002ef2:	46bd      	mov	sp, r7
 8002ef4:	bd80      	pop	{r7, pc}

08002ef6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002ef6:	b580      	push	{r7, lr}
 8002ef8:	b086      	sub	sp, #24
 8002efa:	af00      	add	r7, sp, #0
 8002efc:	4603      	mov	r3, r0
 8002efe:	60b9      	str	r1, [r7, #8]
 8002f00:	607a      	str	r2, [r7, #4]
 8002f02:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002f04:	2300      	movs	r3, #0
 8002f06:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002f08:	f7ff ff5e 	bl	8002dc8 <__NVIC_GetPriorityGrouping>
 8002f0c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002f0e:	687a      	ldr	r2, [r7, #4]
 8002f10:	68b9      	ldr	r1, [r7, #8]
 8002f12:	6978      	ldr	r0, [r7, #20]
 8002f14:	f7ff ff90 	bl	8002e38 <NVIC_EncodePriority>
 8002f18:	4602      	mov	r2, r0
 8002f1a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002f1e:	4611      	mov	r1, r2
 8002f20:	4618      	mov	r0, r3
 8002f22:	f7ff ff5f 	bl	8002de4 <__NVIC_SetPriority>
}
 8002f26:	bf00      	nop
 8002f28:	3718      	adds	r7, #24
 8002f2a:	46bd      	mov	sp, r7
 8002f2c:	bd80      	pop	{r7, pc}

08002f2e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002f2e:	b580      	push	{r7, lr}
 8002f30:	b082      	sub	sp, #8
 8002f32:	af00      	add	r7, sp, #0
 8002f34:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002f36:	6878      	ldr	r0, [r7, #4]
 8002f38:	f7ff ffb0 	bl	8002e9c <SysTick_Config>
 8002f3c:	4603      	mov	r3, r0
}
 8002f3e:	4618      	mov	r0, r3
 8002f40:	3708      	adds	r7, #8
 8002f42:	46bd      	mov	sp, r7
 8002f44:	bd80      	pop	{r7, pc}
	...

08002f48 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002f48:	b480      	push	{r7}
 8002f4a:	b08b      	sub	sp, #44	; 0x2c
 8002f4c:	af00      	add	r7, sp, #0
 8002f4e:	6078      	str	r0, [r7, #4]
 8002f50:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002f52:	2300      	movs	r3, #0
 8002f54:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002f56:	2300      	movs	r3, #0
 8002f58:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002f5a:	e127      	b.n	80031ac <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002f5c:	2201      	movs	r2, #1
 8002f5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f60:	fa02 f303 	lsl.w	r3, r2, r3
 8002f64:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002f66:	683b      	ldr	r3, [r7, #0]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	69fa      	ldr	r2, [r7, #28]
 8002f6c:	4013      	ands	r3, r2
 8002f6e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002f70:	69ba      	ldr	r2, [r7, #24]
 8002f72:	69fb      	ldr	r3, [r7, #28]
 8002f74:	429a      	cmp	r2, r3
 8002f76:	f040 8116 	bne.w	80031a6 <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002f7a:	683b      	ldr	r3, [r7, #0]
 8002f7c:	685b      	ldr	r3, [r3, #4]
 8002f7e:	2b12      	cmp	r3, #18
 8002f80:	d034      	beq.n	8002fec <HAL_GPIO_Init+0xa4>
 8002f82:	2b12      	cmp	r3, #18
 8002f84:	d80d      	bhi.n	8002fa2 <HAL_GPIO_Init+0x5a>
 8002f86:	2b02      	cmp	r3, #2
 8002f88:	d02b      	beq.n	8002fe2 <HAL_GPIO_Init+0x9a>
 8002f8a:	2b02      	cmp	r3, #2
 8002f8c:	d804      	bhi.n	8002f98 <HAL_GPIO_Init+0x50>
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d031      	beq.n	8002ff6 <HAL_GPIO_Init+0xae>
 8002f92:	2b01      	cmp	r3, #1
 8002f94:	d01c      	beq.n	8002fd0 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002f96:	e048      	b.n	800302a <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8002f98:	2b03      	cmp	r3, #3
 8002f9a:	d043      	beq.n	8003024 <HAL_GPIO_Init+0xdc>
 8002f9c:	2b11      	cmp	r3, #17
 8002f9e:	d01b      	beq.n	8002fd8 <HAL_GPIO_Init+0x90>
          break;
 8002fa0:	e043      	b.n	800302a <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8002fa2:	4a89      	ldr	r2, [pc, #548]	; (80031c8 <HAL_GPIO_Init+0x280>)
 8002fa4:	4293      	cmp	r3, r2
 8002fa6:	d026      	beq.n	8002ff6 <HAL_GPIO_Init+0xae>
 8002fa8:	4a87      	ldr	r2, [pc, #540]	; (80031c8 <HAL_GPIO_Init+0x280>)
 8002faa:	4293      	cmp	r3, r2
 8002fac:	d806      	bhi.n	8002fbc <HAL_GPIO_Init+0x74>
 8002fae:	4a87      	ldr	r2, [pc, #540]	; (80031cc <HAL_GPIO_Init+0x284>)
 8002fb0:	4293      	cmp	r3, r2
 8002fb2:	d020      	beq.n	8002ff6 <HAL_GPIO_Init+0xae>
 8002fb4:	4a86      	ldr	r2, [pc, #536]	; (80031d0 <HAL_GPIO_Init+0x288>)
 8002fb6:	4293      	cmp	r3, r2
 8002fb8:	d01d      	beq.n	8002ff6 <HAL_GPIO_Init+0xae>
          break;
 8002fba:	e036      	b.n	800302a <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8002fbc:	4a85      	ldr	r2, [pc, #532]	; (80031d4 <HAL_GPIO_Init+0x28c>)
 8002fbe:	4293      	cmp	r3, r2
 8002fc0:	d019      	beq.n	8002ff6 <HAL_GPIO_Init+0xae>
 8002fc2:	4a85      	ldr	r2, [pc, #532]	; (80031d8 <HAL_GPIO_Init+0x290>)
 8002fc4:	4293      	cmp	r3, r2
 8002fc6:	d016      	beq.n	8002ff6 <HAL_GPIO_Init+0xae>
 8002fc8:	4a84      	ldr	r2, [pc, #528]	; (80031dc <HAL_GPIO_Init+0x294>)
 8002fca:	4293      	cmp	r3, r2
 8002fcc:	d013      	beq.n	8002ff6 <HAL_GPIO_Init+0xae>
          break;
 8002fce:	e02c      	b.n	800302a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002fd0:	683b      	ldr	r3, [r7, #0]
 8002fd2:	68db      	ldr	r3, [r3, #12]
 8002fd4:	623b      	str	r3, [r7, #32]
          break;
 8002fd6:	e028      	b.n	800302a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002fd8:	683b      	ldr	r3, [r7, #0]
 8002fda:	68db      	ldr	r3, [r3, #12]
 8002fdc:	3304      	adds	r3, #4
 8002fde:	623b      	str	r3, [r7, #32]
          break;
 8002fe0:	e023      	b.n	800302a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002fe2:	683b      	ldr	r3, [r7, #0]
 8002fe4:	68db      	ldr	r3, [r3, #12]
 8002fe6:	3308      	adds	r3, #8
 8002fe8:	623b      	str	r3, [r7, #32]
          break;
 8002fea:	e01e      	b.n	800302a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002fec:	683b      	ldr	r3, [r7, #0]
 8002fee:	68db      	ldr	r3, [r3, #12]
 8002ff0:	330c      	adds	r3, #12
 8002ff2:	623b      	str	r3, [r7, #32]
          break;
 8002ff4:	e019      	b.n	800302a <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002ff6:	683b      	ldr	r3, [r7, #0]
 8002ff8:	689b      	ldr	r3, [r3, #8]
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d102      	bne.n	8003004 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002ffe:	2304      	movs	r3, #4
 8003000:	623b      	str	r3, [r7, #32]
          break;
 8003002:	e012      	b.n	800302a <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8003004:	683b      	ldr	r3, [r7, #0]
 8003006:	689b      	ldr	r3, [r3, #8]
 8003008:	2b01      	cmp	r3, #1
 800300a:	d105      	bne.n	8003018 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800300c:	2308      	movs	r3, #8
 800300e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	69fa      	ldr	r2, [r7, #28]
 8003014:	611a      	str	r2, [r3, #16]
          break;
 8003016:	e008      	b.n	800302a <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003018:	2308      	movs	r3, #8
 800301a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	69fa      	ldr	r2, [r7, #28]
 8003020:	615a      	str	r2, [r3, #20]
          break;
 8003022:	e002      	b.n	800302a <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8003024:	2300      	movs	r3, #0
 8003026:	623b      	str	r3, [r7, #32]
          break;
 8003028:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800302a:	69bb      	ldr	r3, [r7, #24]
 800302c:	2bff      	cmp	r3, #255	; 0xff
 800302e:	d801      	bhi.n	8003034 <HAL_GPIO_Init+0xec>
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	e001      	b.n	8003038 <HAL_GPIO_Init+0xf0>
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	3304      	adds	r3, #4
 8003038:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800303a:	69bb      	ldr	r3, [r7, #24]
 800303c:	2bff      	cmp	r3, #255	; 0xff
 800303e:	d802      	bhi.n	8003046 <HAL_GPIO_Init+0xfe>
 8003040:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003042:	009b      	lsls	r3, r3, #2
 8003044:	e002      	b.n	800304c <HAL_GPIO_Init+0x104>
 8003046:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003048:	3b08      	subs	r3, #8
 800304a:	009b      	lsls	r3, r3, #2
 800304c:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800304e:	697b      	ldr	r3, [r7, #20]
 8003050:	681a      	ldr	r2, [r3, #0]
 8003052:	210f      	movs	r1, #15
 8003054:	693b      	ldr	r3, [r7, #16]
 8003056:	fa01 f303 	lsl.w	r3, r1, r3
 800305a:	43db      	mvns	r3, r3
 800305c:	401a      	ands	r2, r3
 800305e:	6a39      	ldr	r1, [r7, #32]
 8003060:	693b      	ldr	r3, [r7, #16]
 8003062:	fa01 f303 	lsl.w	r3, r1, r3
 8003066:	431a      	orrs	r2, r3
 8003068:	697b      	ldr	r3, [r7, #20]
 800306a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800306c:	683b      	ldr	r3, [r7, #0]
 800306e:	685b      	ldr	r3, [r3, #4]
 8003070:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003074:	2b00      	cmp	r3, #0
 8003076:	f000 8096 	beq.w	80031a6 <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800307a:	4b59      	ldr	r3, [pc, #356]	; (80031e0 <HAL_GPIO_Init+0x298>)
 800307c:	699b      	ldr	r3, [r3, #24]
 800307e:	4a58      	ldr	r2, [pc, #352]	; (80031e0 <HAL_GPIO_Init+0x298>)
 8003080:	f043 0301 	orr.w	r3, r3, #1
 8003084:	6193      	str	r3, [r2, #24]
 8003086:	4b56      	ldr	r3, [pc, #344]	; (80031e0 <HAL_GPIO_Init+0x298>)
 8003088:	699b      	ldr	r3, [r3, #24]
 800308a:	f003 0301 	and.w	r3, r3, #1
 800308e:	60bb      	str	r3, [r7, #8]
 8003090:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8003092:	4a54      	ldr	r2, [pc, #336]	; (80031e4 <HAL_GPIO_Init+0x29c>)
 8003094:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003096:	089b      	lsrs	r3, r3, #2
 8003098:	3302      	adds	r3, #2
 800309a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800309e:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80030a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030a2:	f003 0303 	and.w	r3, r3, #3
 80030a6:	009b      	lsls	r3, r3, #2
 80030a8:	220f      	movs	r2, #15
 80030aa:	fa02 f303 	lsl.w	r3, r2, r3
 80030ae:	43db      	mvns	r3, r3
 80030b0:	68fa      	ldr	r2, [r7, #12]
 80030b2:	4013      	ands	r3, r2
 80030b4:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	4a4b      	ldr	r2, [pc, #300]	; (80031e8 <HAL_GPIO_Init+0x2a0>)
 80030ba:	4293      	cmp	r3, r2
 80030bc:	d013      	beq.n	80030e6 <HAL_GPIO_Init+0x19e>
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	4a4a      	ldr	r2, [pc, #296]	; (80031ec <HAL_GPIO_Init+0x2a4>)
 80030c2:	4293      	cmp	r3, r2
 80030c4:	d00d      	beq.n	80030e2 <HAL_GPIO_Init+0x19a>
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	4a49      	ldr	r2, [pc, #292]	; (80031f0 <HAL_GPIO_Init+0x2a8>)
 80030ca:	4293      	cmp	r3, r2
 80030cc:	d007      	beq.n	80030de <HAL_GPIO_Init+0x196>
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	4a48      	ldr	r2, [pc, #288]	; (80031f4 <HAL_GPIO_Init+0x2ac>)
 80030d2:	4293      	cmp	r3, r2
 80030d4:	d101      	bne.n	80030da <HAL_GPIO_Init+0x192>
 80030d6:	2303      	movs	r3, #3
 80030d8:	e006      	b.n	80030e8 <HAL_GPIO_Init+0x1a0>
 80030da:	2304      	movs	r3, #4
 80030dc:	e004      	b.n	80030e8 <HAL_GPIO_Init+0x1a0>
 80030de:	2302      	movs	r3, #2
 80030e0:	e002      	b.n	80030e8 <HAL_GPIO_Init+0x1a0>
 80030e2:	2301      	movs	r3, #1
 80030e4:	e000      	b.n	80030e8 <HAL_GPIO_Init+0x1a0>
 80030e6:	2300      	movs	r3, #0
 80030e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80030ea:	f002 0203 	and.w	r2, r2, #3
 80030ee:	0092      	lsls	r2, r2, #2
 80030f0:	4093      	lsls	r3, r2
 80030f2:	68fa      	ldr	r2, [r7, #12]
 80030f4:	4313      	orrs	r3, r2
 80030f6:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80030f8:	493a      	ldr	r1, [pc, #232]	; (80031e4 <HAL_GPIO_Init+0x29c>)
 80030fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030fc:	089b      	lsrs	r3, r3, #2
 80030fe:	3302      	adds	r3, #2
 8003100:	68fa      	ldr	r2, [r7, #12]
 8003102:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003106:	683b      	ldr	r3, [r7, #0]
 8003108:	685b      	ldr	r3, [r3, #4]
 800310a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800310e:	2b00      	cmp	r3, #0
 8003110:	d006      	beq.n	8003120 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8003112:	4b39      	ldr	r3, [pc, #228]	; (80031f8 <HAL_GPIO_Init+0x2b0>)
 8003114:	681a      	ldr	r2, [r3, #0]
 8003116:	4938      	ldr	r1, [pc, #224]	; (80031f8 <HAL_GPIO_Init+0x2b0>)
 8003118:	69bb      	ldr	r3, [r7, #24]
 800311a:	4313      	orrs	r3, r2
 800311c:	600b      	str	r3, [r1, #0]
 800311e:	e006      	b.n	800312e <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8003120:	4b35      	ldr	r3, [pc, #212]	; (80031f8 <HAL_GPIO_Init+0x2b0>)
 8003122:	681a      	ldr	r2, [r3, #0]
 8003124:	69bb      	ldr	r3, [r7, #24]
 8003126:	43db      	mvns	r3, r3
 8003128:	4933      	ldr	r1, [pc, #204]	; (80031f8 <HAL_GPIO_Init+0x2b0>)
 800312a:	4013      	ands	r3, r2
 800312c:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800312e:	683b      	ldr	r3, [r7, #0]
 8003130:	685b      	ldr	r3, [r3, #4]
 8003132:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003136:	2b00      	cmp	r3, #0
 8003138:	d006      	beq.n	8003148 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800313a:	4b2f      	ldr	r3, [pc, #188]	; (80031f8 <HAL_GPIO_Init+0x2b0>)
 800313c:	685a      	ldr	r2, [r3, #4]
 800313e:	492e      	ldr	r1, [pc, #184]	; (80031f8 <HAL_GPIO_Init+0x2b0>)
 8003140:	69bb      	ldr	r3, [r7, #24]
 8003142:	4313      	orrs	r3, r2
 8003144:	604b      	str	r3, [r1, #4]
 8003146:	e006      	b.n	8003156 <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8003148:	4b2b      	ldr	r3, [pc, #172]	; (80031f8 <HAL_GPIO_Init+0x2b0>)
 800314a:	685a      	ldr	r2, [r3, #4]
 800314c:	69bb      	ldr	r3, [r7, #24]
 800314e:	43db      	mvns	r3, r3
 8003150:	4929      	ldr	r1, [pc, #164]	; (80031f8 <HAL_GPIO_Init+0x2b0>)
 8003152:	4013      	ands	r3, r2
 8003154:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003156:	683b      	ldr	r3, [r7, #0]
 8003158:	685b      	ldr	r3, [r3, #4]
 800315a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800315e:	2b00      	cmp	r3, #0
 8003160:	d006      	beq.n	8003170 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8003162:	4b25      	ldr	r3, [pc, #148]	; (80031f8 <HAL_GPIO_Init+0x2b0>)
 8003164:	689a      	ldr	r2, [r3, #8]
 8003166:	4924      	ldr	r1, [pc, #144]	; (80031f8 <HAL_GPIO_Init+0x2b0>)
 8003168:	69bb      	ldr	r3, [r7, #24]
 800316a:	4313      	orrs	r3, r2
 800316c:	608b      	str	r3, [r1, #8]
 800316e:	e006      	b.n	800317e <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8003170:	4b21      	ldr	r3, [pc, #132]	; (80031f8 <HAL_GPIO_Init+0x2b0>)
 8003172:	689a      	ldr	r2, [r3, #8]
 8003174:	69bb      	ldr	r3, [r7, #24]
 8003176:	43db      	mvns	r3, r3
 8003178:	491f      	ldr	r1, [pc, #124]	; (80031f8 <HAL_GPIO_Init+0x2b0>)
 800317a:	4013      	ands	r3, r2
 800317c:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800317e:	683b      	ldr	r3, [r7, #0]
 8003180:	685b      	ldr	r3, [r3, #4]
 8003182:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003186:	2b00      	cmp	r3, #0
 8003188:	d006      	beq.n	8003198 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800318a:	4b1b      	ldr	r3, [pc, #108]	; (80031f8 <HAL_GPIO_Init+0x2b0>)
 800318c:	68da      	ldr	r2, [r3, #12]
 800318e:	491a      	ldr	r1, [pc, #104]	; (80031f8 <HAL_GPIO_Init+0x2b0>)
 8003190:	69bb      	ldr	r3, [r7, #24]
 8003192:	4313      	orrs	r3, r2
 8003194:	60cb      	str	r3, [r1, #12]
 8003196:	e006      	b.n	80031a6 <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8003198:	4b17      	ldr	r3, [pc, #92]	; (80031f8 <HAL_GPIO_Init+0x2b0>)
 800319a:	68da      	ldr	r2, [r3, #12]
 800319c:	69bb      	ldr	r3, [r7, #24]
 800319e:	43db      	mvns	r3, r3
 80031a0:	4915      	ldr	r1, [pc, #84]	; (80031f8 <HAL_GPIO_Init+0x2b0>)
 80031a2:	4013      	ands	r3, r2
 80031a4:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80031a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031a8:	3301      	adds	r3, #1
 80031aa:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80031ac:	683b      	ldr	r3, [r7, #0]
 80031ae:	681a      	ldr	r2, [r3, #0]
 80031b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031b2:	fa22 f303 	lsr.w	r3, r2, r3
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	f47f aed0 	bne.w	8002f5c <HAL_GPIO_Init+0x14>
  }
}
 80031bc:	bf00      	nop
 80031be:	372c      	adds	r7, #44	; 0x2c
 80031c0:	46bd      	mov	sp, r7
 80031c2:	bc80      	pop	{r7}
 80031c4:	4770      	bx	lr
 80031c6:	bf00      	nop
 80031c8:	10210000 	.word	0x10210000
 80031cc:	10110000 	.word	0x10110000
 80031d0:	10120000 	.word	0x10120000
 80031d4:	10310000 	.word	0x10310000
 80031d8:	10320000 	.word	0x10320000
 80031dc:	10220000 	.word	0x10220000
 80031e0:	40021000 	.word	0x40021000
 80031e4:	40010000 	.word	0x40010000
 80031e8:	40010800 	.word	0x40010800
 80031ec:	40010c00 	.word	0x40010c00
 80031f0:	40011000 	.word	0x40011000
 80031f4:	40011400 	.word	0x40011400
 80031f8:	40010400 	.word	0x40010400

080031fc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80031fc:	b480      	push	{r7}
 80031fe:	b085      	sub	sp, #20
 8003200:	af00      	add	r7, sp, #0
 8003202:	6078      	str	r0, [r7, #4]
 8003204:	460b      	mov	r3, r1
 8003206:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	689a      	ldr	r2, [r3, #8]
 800320c:	887b      	ldrh	r3, [r7, #2]
 800320e:	4013      	ands	r3, r2
 8003210:	2b00      	cmp	r3, #0
 8003212:	d002      	beq.n	800321a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003214:	2301      	movs	r3, #1
 8003216:	73fb      	strb	r3, [r7, #15]
 8003218:	e001      	b.n	800321e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800321a:	2300      	movs	r3, #0
 800321c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800321e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003220:	4618      	mov	r0, r3
 8003222:	3714      	adds	r7, #20
 8003224:	46bd      	mov	sp, r7
 8003226:	bc80      	pop	{r7}
 8003228:	4770      	bx	lr

0800322a <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800322a:	b480      	push	{r7}
 800322c:	b083      	sub	sp, #12
 800322e:	af00      	add	r7, sp, #0
 8003230:	6078      	str	r0, [r7, #4]
 8003232:	460b      	mov	r3, r1
 8003234:	807b      	strh	r3, [r7, #2]
 8003236:	4613      	mov	r3, r2
 8003238:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800323a:	787b      	ldrb	r3, [r7, #1]
 800323c:	2b00      	cmp	r3, #0
 800323e:	d003      	beq.n	8003248 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003240:	887a      	ldrh	r2, [r7, #2]
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8003246:	e003      	b.n	8003250 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003248:	887b      	ldrh	r3, [r7, #2]
 800324a:	041a      	lsls	r2, r3, #16
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	611a      	str	r2, [r3, #16]
}
 8003250:	bf00      	nop
 8003252:	370c      	adds	r7, #12
 8003254:	46bd      	mov	sp, r7
 8003256:	bc80      	pop	{r7}
 8003258:	4770      	bx	lr

0800325a <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800325a:	b480      	push	{r7}
 800325c:	b083      	sub	sp, #12
 800325e:	af00      	add	r7, sp, #0
 8003260:	6078      	str	r0, [r7, #4]
 8003262:	460b      	mov	r3, r1
 8003264:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != 0x00u)
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	68da      	ldr	r2, [r3, #12]
 800326a:	887b      	ldrh	r3, [r7, #2]
 800326c:	4013      	ands	r3, r2
 800326e:	2b00      	cmp	r3, #0
 8003270:	d003      	beq.n	800327a <HAL_GPIO_TogglePin+0x20>
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003272:	887a      	ldrh	r2, [r7, #2]
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	615a      	str	r2, [r3, #20]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
}
 8003278:	e002      	b.n	8003280 <HAL_GPIO_TogglePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800327a:	887a      	ldrh	r2, [r7, #2]
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	611a      	str	r2, [r3, #16]
}
 8003280:	bf00      	nop
 8003282:	370c      	adds	r7, #12
 8003284:	46bd      	mov	sp, r7
 8003286:	bc80      	pop	{r7}
 8003288:	4770      	bx	lr
	...

0800328c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800328c:	b580      	push	{r7, lr}
 800328e:	b084      	sub	sp, #16
 8003290:	af00      	add	r7, sp, #0
 8003292:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	2b00      	cmp	r3, #0
 8003298:	d101      	bne.n	800329e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800329a:	2301      	movs	r3, #1
 800329c:	e10f      	b.n	80034be <HAL_I2C_Init+0x232>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80032a4:	b2db      	uxtb	r3, r3
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d106      	bne.n	80032b8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	2200      	movs	r2, #0
 80032ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80032b2:	6878      	ldr	r0, [r7, #4]
 80032b4:	f7ff fb02 	bl	80028bc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	2224      	movs	r2, #36	; 0x24
 80032bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	681a      	ldr	r2, [r3, #0]
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	f022 0201 	bic.w	r2, r2, #1
 80032ce:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80032d0:	f001 fdd6 	bl	8004e80 <HAL_RCC_GetPCLK1Freq>
 80032d4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	685b      	ldr	r3, [r3, #4]
 80032da:	4a7b      	ldr	r2, [pc, #492]	; (80034c8 <HAL_I2C_Init+0x23c>)
 80032dc:	4293      	cmp	r3, r2
 80032de:	d807      	bhi.n	80032f0 <HAL_I2C_Init+0x64>
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	4a7a      	ldr	r2, [pc, #488]	; (80034cc <HAL_I2C_Init+0x240>)
 80032e4:	4293      	cmp	r3, r2
 80032e6:	bf94      	ite	ls
 80032e8:	2301      	movls	r3, #1
 80032ea:	2300      	movhi	r3, #0
 80032ec:	b2db      	uxtb	r3, r3
 80032ee:	e006      	b.n	80032fe <HAL_I2C_Init+0x72>
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	4a77      	ldr	r2, [pc, #476]	; (80034d0 <HAL_I2C_Init+0x244>)
 80032f4:	4293      	cmp	r3, r2
 80032f6:	bf94      	ite	ls
 80032f8:	2301      	movls	r3, #1
 80032fa:	2300      	movhi	r3, #0
 80032fc:	b2db      	uxtb	r3, r3
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d001      	beq.n	8003306 <HAL_I2C_Init+0x7a>
  {
    return HAL_ERROR;
 8003302:	2301      	movs	r3, #1
 8003304:	e0db      	b.n	80034be <HAL_I2C_Init+0x232>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	4a72      	ldr	r2, [pc, #456]	; (80034d4 <HAL_I2C_Init+0x248>)
 800330a:	fba2 2303 	umull	r2, r3, r2, r3
 800330e:	0c9b      	lsrs	r3, r3, #18
 8003310:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	685b      	ldr	r3, [r3, #4]
 8003318:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	68ba      	ldr	r2, [r7, #8]
 8003322:	430a      	orrs	r2, r1
 8003324:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	6a1b      	ldr	r3, [r3, #32]
 800332c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	685b      	ldr	r3, [r3, #4]
 8003334:	4a64      	ldr	r2, [pc, #400]	; (80034c8 <HAL_I2C_Init+0x23c>)
 8003336:	4293      	cmp	r3, r2
 8003338:	d802      	bhi.n	8003340 <HAL_I2C_Init+0xb4>
 800333a:	68bb      	ldr	r3, [r7, #8]
 800333c:	3301      	adds	r3, #1
 800333e:	e009      	b.n	8003354 <HAL_I2C_Init+0xc8>
 8003340:	68bb      	ldr	r3, [r7, #8]
 8003342:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003346:	fb02 f303 	mul.w	r3, r2, r3
 800334a:	4a63      	ldr	r2, [pc, #396]	; (80034d8 <HAL_I2C_Init+0x24c>)
 800334c:	fba2 2303 	umull	r2, r3, r2, r3
 8003350:	099b      	lsrs	r3, r3, #6
 8003352:	3301      	adds	r3, #1
 8003354:	687a      	ldr	r2, [r7, #4]
 8003356:	6812      	ldr	r2, [r2, #0]
 8003358:	430b      	orrs	r3, r1
 800335a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	69db      	ldr	r3, [r3, #28]
 8003362:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003366:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	685b      	ldr	r3, [r3, #4]
 800336e:	4956      	ldr	r1, [pc, #344]	; (80034c8 <HAL_I2C_Init+0x23c>)
 8003370:	428b      	cmp	r3, r1
 8003372:	d80d      	bhi.n	8003390 <HAL_I2C_Init+0x104>
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	1e59      	subs	r1, r3, #1
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	685b      	ldr	r3, [r3, #4]
 800337c:	005b      	lsls	r3, r3, #1
 800337e:	fbb1 f3f3 	udiv	r3, r1, r3
 8003382:	3301      	adds	r3, #1
 8003384:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003388:	2b04      	cmp	r3, #4
 800338a:	bf38      	it	cc
 800338c:	2304      	movcc	r3, #4
 800338e:	e04f      	b.n	8003430 <HAL_I2C_Init+0x1a4>
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	689b      	ldr	r3, [r3, #8]
 8003394:	2b00      	cmp	r3, #0
 8003396:	d111      	bne.n	80033bc <HAL_I2C_Init+0x130>
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	1e58      	subs	r0, r3, #1
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	6859      	ldr	r1, [r3, #4]
 80033a0:	460b      	mov	r3, r1
 80033a2:	005b      	lsls	r3, r3, #1
 80033a4:	440b      	add	r3, r1
 80033a6:	fbb0 f3f3 	udiv	r3, r0, r3
 80033aa:	3301      	adds	r3, #1
 80033ac:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	bf0c      	ite	eq
 80033b4:	2301      	moveq	r3, #1
 80033b6:	2300      	movne	r3, #0
 80033b8:	b2db      	uxtb	r3, r3
 80033ba:	e012      	b.n	80033e2 <HAL_I2C_Init+0x156>
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	1e58      	subs	r0, r3, #1
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	6859      	ldr	r1, [r3, #4]
 80033c4:	460b      	mov	r3, r1
 80033c6:	009b      	lsls	r3, r3, #2
 80033c8:	440b      	add	r3, r1
 80033ca:	0099      	lsls	r1, r3, #2
 80033cc:	440b      	add	r3, r1
 80033ce:	fbb0 f3f3 	udiv	r3, r0, r3
 80033d2:	3301      	adds	r3, #1
 80033d4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80033d8:	2b00      	cmp	r3, #0
 80033da:	bf0c      	ite	eq
 80033dc:	2301      	moveq	r3, #1
 80033de:	2300      	movne	r3, #0
 80033e0:	b2db      	uxtb	r3, r3
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d001      	beq.n	80033ea <HAL_I2C_Init+0x15e>
 80033e6:	2301      	movs	r3, #1
 80033e8:	e022      	b.n	8003430 <HAL_I2C_Init+0x1a4>
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	689b      	ldr	r3, [r3, #8]
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d10e      	bne.n	8003410 <HAL_I2C_Init+0x184>
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	1e58      	subs	r0, r3, #1
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	6859      	ldr	r1, [r3, #4]
 80033fa:	460b      	mov	r3, r1
 80033fc:	005b      	lsls	r3, r3, #1
 80033fe:	440b      	add	r3, r1
 8003400:	fbb0 f3f3 	udiv	r3, r0, r3
 8003404:	3301      	adds	r3, #1
 8003406:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800340a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800340e:	e00f      	b.n	8003430 <HAL_I2C_Init+0x1a4>
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	1e58      	subs	r0, r3, #1
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	6859      	ldr	r1, [r3, #4]
 8003418:	460b      	mov	r3, r1
 800341a:	009b      	lsls	r3, r3, #2
 800341c:	440b      	add	r3, r1
 800341e:	0099      	lsls	r1, r3, #2
 8003420:	440b      	add	r3, r1
 8003422:	fbb0 f3f3 	udiv	r3, r0, r3
 8003426:	3301      	adds	r3, #1
 8003428:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800342c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003430:	6879      	ldr	r1, [r7, #4]
 8003432:	6809      	ldr	r1, [r1, #0]
 8003434:	4313      	orrs	r3, r2
 8003436:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	69da      	ldr	r2, [r3, #28]
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	6a1b      	ldr	r3, [r3, #32]
 800344a:	431a      	orrs	r2, r3
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	430a      	orrs	r2, r1
 8003452:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	689b      	ldr	r3, [r3, #8]
 800345a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800345e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003462:	687a      	ldr	r2, [r7, #4]
 8003464:	6911      	ldr	r1, [r2, #16]
 8003466:	687a      	ldr	r2, [r7, #4]
 8003468:	68d2      	ldr	r2, [r2, #12]
 800346a:	4311      	orrs	r1, r2
 800346c:	687a      	ldr	r2, [r7, #4]
 800346e:	6812      	ldr	r2, [r2, #0]
 8003470:	430b      	orrs	r3, r1
 8003472:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	68db      	ldr	r3, [r3, #12]
 800347a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	695a      	ldr	r2, [r3, #20]
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	699b      	ldr	r3, [r3, #24]
 8003486:	431a      	orrs	r2, r3
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	430a      	orrs	r2, r1
 800348e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	681a      	ldr	r2, [r3, #0]
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	f042 0201 	orr.w	r2, r2, #1
 800349e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	2200      	movs	r2, #0
 80034a4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	2220      	movs	r2, #32
 80034aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	2200      	movs	r2, #0
 80034b2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	2200      	movs	r2, #0
 80034b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80034bc:	2300      	movs	r3, #0
}
 80034be:	4618      	mov	r0, r3
 80034c0:	3710      	adds	r7, #16
 80034c2:	46bd      	mov	sp, r7
 80034c4:	bd80      	pop	{r7, pc}
 80034c6:	bf00      	nop
 80034c8:	000186a0 	.word	0x000186a0
 80034cc:	001e847f 	.word	0x001e847f
 80034d0:	003d08ff 	.word	0x003d08ff
 80034d4:	431bde83 	.word	0x431bde83
 80034d8:	10624dd3 	.word	0x10624dd3

080034dc <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80034dc:	b580      	push	{r7, lr}
 80034de:	b088      	sub	sp, #32
 80034e0:	af02      	add	r7, sp, #8
 80034e2:	60f8      	str	r0, [r7, #12]
 80034e4:	607a      	str	r2, [r7, #4]
 80034e6:	461a      	mov	r2, r3
 80034e8:	460b      	mov	r3, r1
 80034ea:	817b      	strh	r3, [r7, #10]
 80034ec:	4613      	mov	r3, r2
 80034ee:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80034f0:	f7ff fc3c 	bl	8002d6c <HAL_GetTick>
 80034f4:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80034fc:	b2db      	uxtb	r3, r3
 80034fe:	2b20      	cmp	r3, #32
 8003500:	f040 80e0 	bne.w	80036c4 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003504:	697b      	ldr	r3, [r7, #20]
 8003506:	9300      	str	r3, [sp, #0]
 8003508:	2319      	movs	r3, #25
 800350a:	2201      	movs	r2, #1
 800350c:	4970      	ldr	r1, [pc, #448]	; (80036d0 <HAL_I2C_Master_Transmit+0x1f4>)
 800350e:	68f8      	ldr	r0, [r7, #12]
 8003510:	f000 ff04 	bl	800431c <I2C_WaitOnFlagUntilTimeout>
 8003514:	4603      	mov	r3, r0
 8003516:	2b00      	cmp	r3, #0
 8003518:	d001      	beq.n	800351e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800351a:	2302      	movs	r3, #2
 800351c:	e0d3      	b.n	80036c6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003524:	2b01      	cmp	r3, #1
 8003526:	d101      	bne.n	800352c <HAL_I2C_Master_Transmit+0x50>
 8003528:	2302      	movs	r3, #2
 800352a:	e0cc      	b.n	80036c6 <HAL_I2C_Master_Transmit+0x1ea>
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	2201      	movs	r2, #1
 8003530:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	f003 0301 	and.w	r3, r3, #1
 800353e:	2b01      	cmp	r3, #1
 8003540:	d007      	beq.n	8003552 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	681a      	ldr	r2, [r3, #0]
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	f042 0201 	orr.w	r2, r2, #1
 8003550:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	681a      	ldr	r2, [r3, #0]
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003560:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	2221      	movs	r2, #33	; 0x21
 8003566:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	2210      	movs	r2, #16
 800356e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	2200      	movs	r2, #0
 8003576:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	687a      	ldr	r2, [r7, #4]
 800357c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	893a      	ldrh	r2, [r7, #8]
 8003582:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003588:	b29a      	uxth	r2, r3
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	4a50      	ldr	r2, [pc, #320]	; (80036d4 <HAL_I2C_Master_Transmit+0x1f8>)
 8003592:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003594:	8979      	ldrh	r1, [r7, #10]
 8003596:	697b      	ldr	r3, [r7, #20]
 8003598:	6a3a      	ldr	r2, [r7, #32]
 800359a:	68f8      	ldr	r0, [r7, #12]
 800359c:	f000 fcee 	bl	8003f7c <I2C_MasterRequestWrite>
 80035a0:	4603      	mov	r3, r0
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d001      	beq.n	80035aa <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80035a6:	2301      	movs	r3, #1
 80035a8:	e08d      	b.n	80036c6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80035aa:	2300      	movs	r3, #0
 80035ac:	613b      	str	r3, [r7, #16]
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	695b      	ldr	r3, [r3, #20]
 80035b4:	613b      	str	r3, [r7, #16]
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	699b      	ldr	r3, [r3, #24]
 80035bc:	613b      	str	r3, [r7, #16]
 80035be:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80035c0:	e066      	b.n	8003690 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80035c2:	697a      	ldr	r2, [r7, #20]
 80035c4:	6a39      	ldr	r1, [r7, #32]
 80035c6:	68f8      	ldr	r0, [r7, #12]
 80035c8:	f000 ff7e 	bl	80044c8 <I2C_WaitOnTXEFlagUntilTimeout>
 80035cc:	4603      	mov	r3, r0
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d00d      	beq.n	80035ee <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035d6:	2b04      	cmp	r3, #4
 80035d8:	d107      	bne.n	80035ea <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	681a      	ldr	r2, [r3, #0]
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80035e8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80035ea:	2301      	movs	r3, #1
 80035ec:	e06b      	b.n	80036c6 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035f2:	781a      	ldrb	r2, [r3, #0]
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035fe:	1c5a      	adds	r2, r3, #1
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003608:	b29b      	uxth	r3, r3
 800360a:	3b01      	subs	r3, #1
 800360c:	b29a      	uxth	r2, r3
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003616:	3b01      	subs	r3, #1
 8003618:	b29a      	uxth	r2, r3
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	695b      	ldr	r3, [r3, #20]
 8003624:	f003 0304 	and.w	r3, r3, #4
 8003628:	2b04      	cmp	r3, #4
 800362a:	d11b      	bne.n	8003664 <HAL_I2C_Master_Transmit+0x188>
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003630:	2b00      	cmp	r3, #0
 8003632:	d017      	beq.n	8003664 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003638:	781a      	ldrb	r2, [r3, #0]
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003644:	1c5a      	adds	r2, r3, #1
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800364e:	b29b      	uxth	r3, r3
 8003650:	3b01      	subs	r3, #1
 8003652:	b29a      	uxth	r2, r3
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800365c:	3b01      	subs	r3, #1
 800365e:	b29a      	uxth	r2, r3
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003664:	697a      	ldr	r2, [r7, #20]
 8003666:	6a39      	ldr	r1, [r7, #32]
 8003668:	68f8      	ldr	r0, [r7, #12]
 800366a:	f000 ff6e 	bl	800454a <I2C_WaitOnBTFFlagUntilTimeout>
 800366e:	4603      	mov	r3, r0
 8003670:	2b00      	cmp	r3, #0
 8003672:	d00d      	beq.n	8003690 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003678:	2b04      	cmp	r3, #4
 800367a:	d107      	bne.n	800368c <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	681a      	ldr	r2, [r3, #0]
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800368a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800368c:	2301      	movs	r3, #1
 800368e:	e01a      	b.n	80036c6 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003694:	2b00      	cmp	r3, #0
 8003696:	d194      	bne.n	80035c2 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	681a      	ldr	r2, [r3, #0]
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80036a6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	2220      	movs	r2, #32
 80036ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	2200      	movs	r2, #0
 80036b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	2200      	movs	r2, #0
 80036bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80036c0:	2300      	movs	r3, #0
 80036c2:	e000      	b.n	80036c6 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80036c4:	2302      	movs	r3, #2
  }
}
 80036c6:	4618      	mov	r0, r3
 80036c8:	3718      	adds	r7, #24
 80036ca:	46bd      	mov	sp, r7
 80036cc:	bd80      	pop	{r7, pc}
 80036ce:	bf00      	nop
 80036d0:	00100002 	.word	0x00100002
 80036d4:	ffff0000 	.word	0xffff0000

080036d8 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80036d8:	b580      	push	{r7, lr}
 80036da:	b088      	sub	sp, #32
 80036dc:	af02      	add	r7, sp, #8
 80036de:	60f8      	str	r0, [r7, #12]
 80036e0:	4608      	mov	r0, r1
 80036e2:	4611      	mov	r1, r2
 80036e4:	461a      	mov	r2, r3
 80036e6:	4603      	mov	r3, r0
 80036e8:	817b      	strh	r3, [r7, #10]
 80036ea:	460b      	mov	r3, r1
 80036ec:	813b      	strh	r3, [r7, #8]
 80036ee:	4613      	mov	r3, r2
 80036f0:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80036f2:	f7ff fb3b 	bl	8002d6c <HAL_GetTick>
 80036f6:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80036fe:	b2db      	uxtb	r3, r3
 8003700:	2b20      	cmp	r3, #32
 8003702:	f040 80d9 	bne.w	80038b8 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003706:	697b      	ldr	r3, [r7, #20]
 8003708:	9300      	str	r3, [sp, #0]
 800370a:	2319      	movs	r3, #25
 800370c:	2201      	movs	r2, #1
 800370e:	496d      	ldr	r1, [pc, #436]	; (80038c4 <HAL_I2C_Mem_Write+0x1ec>)
 8003710:	68f8      	ldr	r0, [r7, #12]
 8003712:	f000 fe03 	bl	800431c <I2C_WaitOnFlagUntilTimeout>
 8003716:	4603      	mov	r3, r0
 8003718:	2b00      	cmp	r3, #0
 800371a:	d001      	beq.n	8003720 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 800371c:	2302      	movs	r3, #2
 800371e:	e0cc      	b.n	80038ba <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003726:	2b01      	cmp	r3, #1
 8003728:	d101      	bne.n	800372e <HAL_I2C_Mem_Write+0x56>
 800372a:	2302      	movs	r3, #2
 800372c:	e0c5      	b.n	80038ba <HAL_I2C_Mem_Write+0x1e2>
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	2201      	movs	r2, #1
 8003732:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	f003 0301 	and.w	r3, r3, #1
 8003740:	2b01      	cmp	r3, #1
 8003742:	d007      	beq.n	8003754 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	681a      	ldr	r2, [r3, #0]
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	f042 0201 	orr.w	r2, r2, #1
 8003752:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	681a      	ldr	r2, [r3, #0]
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003762:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	2221      	movs	r2, #33	; 0x21
 8003768:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	2240      	movs	r2, #64	; 0x40
 8003770:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	2200      	movs	r2, #0
 8003778:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	6a3a      	ldr	r2, [r7, #32]
 800377e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003784:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800378a:	b29a      	uxth	r2, r3
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	4a4d      	ldr	r2, [pc, #308]	; (80038c8 <HAL_I2C_Mem_Write+0x1f0>)
 8003794:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003796:	88f8      	ldrh	r0, [r7, #6]
 8003798:	893a      	ldrh	r2, [r7, #8]
 800379a:	8979      	ldrh	r1, [r7, #10]
 800379c:	697b      	ldr	r3, [r7, #20]
 800379e:	9301      	str	r3, [sp, #4]
 80037a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037a2:	9300      	str	r3, [sp, #0]
 80037a4:	4603      	mov	r3, r0
 80037a6:	68f8      	ldr	r0, [r7, #12]
 80037a8:	f000 fc5e 	bl	8004068 <I2C_RequestMemoryWrite>
 80037ac:	4603      	mov	r3, r0
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d052      	beq.n	8003858 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80037b2:	2301      	movs	r3, #1
 80037b4:	e081      	b.n	80038ba <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80037b6:	697a      	ldr	r2, [r7, #20]
 80037b8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80037ba:	68f8      	ldr	r0, [r7, #12]
 80037bc:	f000 fe84 	bl	80044c8 <I2C_WaitOnTXEFlagUntilTimeout>
 80037c0:	4603      	mov	r3, r0
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d00d      	beq.n	80037e2 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037ca:	2b04      	cmp	r3, #4
 80037cc:	d107      	bne.n	80037de <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	681a      	ldr	r2, [r3, #0]
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80037dc:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80037de:	2301      	movs	r3, #1
 80037e0:	e06b      	b.n	80038ba <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037e6:	781a      	ldrb	r2, [r3, #0]
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037f2:	1c5a      	adds	r2, r3, #1
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80037fc:	3b01      	subs	r3, #1
 80037fe:	b29a      	uxth	r2, r3
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003808:	b29b      	uxth	r3, r3
 800380a:	3b01      	subs	r3, #1
 800380c:	b29a      	uxth	r2, r3
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	695b      	ldr	r3, [r3, #20]
 8003818:	f003 0304 	and.w	r3, r3, #4
 800381c:	2b04      	cmp	r3, #4
 800381e:	d11b      	bne.n	8003858 <HAL_I2C_Mem_Write+0x180>
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003824:	2b00      	cmp	r3, #0
 8003826:	d017      	beq.n	8003858 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800382c:	781a      	ldrb	r2, [r3, #0]
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003838:	1c5a      	adds	r2, r3, #1
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003842:	3b01      	subs	r3, #1
 8003844:	b29a      	uxth	r2, r3
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800384e:	b29b      	uxth	r3, r3
 8003850:	3b01      	subs	r3, #1
 8003852:	b29a      	uxth	r2, r3
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800385c:	2b00      	cmp	r3, #0
 800385e:	d1aa      	bne.n	80037b6 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003860:	697a      	ldr	r2, [r7, #20]
 8003862:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003864:	68f8      	ldr	r0, [r7, #12]
 8003866:	f000 fe70 	bl	800454a <I2C_WaitOnBTFFlagUntilTimeout>
 800386a:	4603      	mov	r3, r0
 800386c:	2b00      	cmp	r3, #0
 800386e:	d00d      	beq.n	800388c <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003874:	2b04      	cmp	r3, #4
 8003876:	d107      	bne.n	8003888 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	681a      	ldr	r2, [r3, #0]
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003886:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003888:	2301      	movs	r3, #1
 800388a:	e016      	b.n	80038ba <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	681a      	ldr	r2, [r3, #0]
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800389a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	2220      	movs	r2, #32
 80038a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	2200      	movs	r2, #0
 80038a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	2200      	movs	r2, #0
 80038b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80038b4:	2300      	movs	r3, #0
 80038b6:	e000      	b.n	80038ba <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80038b8:	2302      	movs	r3, #2
  }
}
 80038ba:	4618      	mov	r0, r3
 80038bc:	3718      	adds	r7, #24
 80038be:	46bd      	mov	sp, r7
 80038c0:	bd80      	pop	{r7, pc}
 80038c2:	bf00      	nop
 80038c4:	00100002 	.word	0x00100002
 80038c8:	ffff0000 	.word	0xffff0000

080038cc <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80038cc:	b580      	push	{r7, lr}
 80038ce:	b08c      	sub	sp, #48	; 0x30
 80038d0:	af02      	add	r7, sp, #8
 80038d2:	60f8      	str	r0, [r7, #12]
 80038d4:	4608      	mov	r0, r1
 80038d6:	4611      	mov	r1, r2
 80038d8:	461a      	mov	r2, r3
 80038da:	4603      	mov	r3, r0
 80038dc:	817b      	strh	r3, [r7, #10]
 80038de:	460b      	mov	r3, r1
 80038e0:	813b      	strh	r3, [r7, #8]
 80038e2:	4613      	mov	r3, r2
 80038e4:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80038e6:	f7ff fa41 	bl	8002d6c <HAL_GetTick>
 80038ea:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80038f2:	b2db      	uxtb	r3, r3
 80038f4:	2b20      	cmp	r3, #32
 80038f6:	f040 8218 	bne.w	8003d2a <HAL_I2C_Mem_Read+0x45e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80038fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038fc:	9300      	str	r3, [sp, #0]
 80038fe:	2319      	movs	r3, #25
 8003900:	2201      	movs	r2, #1
 8003902:	4981      	ldr	r1, [pc, #516]	; (8003b08 <HAL_I2C_Mem_Read+0x23c>)
 8003904:	68f8      	ldr	r0, [r7, #12]
 8003906:	f000 fd09 	bl	800431c <I2C_WaitOnFlagUntilTimeout>
 800390a:	4603      	mov	r3, r0
 800390c:	2b00      	cmp	r3, #0
 800390e:	d001      	beq.n	8003914 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8003910:	2302      	movs	r3, #2
 8003912:	e20b      	b.n	8003d2c <HAL_I2C_Mem_Read+0x460>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800391a:	2b01      	cmp	r3, #1
 800391c:	d101      	bne.n	8003922 <HAL_I2C_Mem_Read+0x56>
 800391e:	2302      	movs	r3, #2
 8003920:	e204      	b.n	8003d2c <HAL_I2C_Mem_Read+0x460>
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	2201      	movs	r2, #1
 8003926:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	f003 0301 	and.w	r3, r3, #1
 8003934:	2b01      	cmp	r3, #1
 8003936:	d007      	beq.n	8003948 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	681a      	ldr	r2, [r3, #0]
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	f042 0201 	orr.w	r2, r2, #1
 8003946:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	681a      	ldr	r2, [r3, #0]
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003956:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	2222      	movs	r2, #34	; 0x22
 800395c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	2240      	movs	r2, #64	; 0x40
 8003964:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	2200      	movs	r2, #0
 800396c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003972:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8003978:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800397e:	b29a      	uxth	r2, r3
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	4a61      	ldr	r2, [pc, #388]	; (8003b0c <HAL_I2C_Mem_Read+0x240>)
 8003988:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800398a:	88f8      	ldrh	r0, [r7, #6]
 800398c:	893a      	ldrh	r2, [r7, #8]
 800398e:	8979      	ldrh	r1, [r7, #10]
 8003990:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003992:	9301      	str	r3, [sp, #4]
 8003994:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003996:	9300      	str	r3, [sp, #0]
 8003998:	4603      	mov	r3, r0
 800399a:	68f8      	ldr	r0, [r7, #12]
 800399c:	f000 fbee 	bl	800417c <I2C_RequestMemoryRead>
 80039a0:	4603      	mov	r3, r0
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d001      	beq.n	80039aa <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 80039a6:	2301      	movs	r3, #1
 80039a8:	e1c0      	b.n	8003d2c <HAL_I2C_Mem_Read+0x460>
    }

    if (hi2c->XferSize == 0U)
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d113      	bne.n	80039da <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80039b2:	2300      	movs	r3, #0
 80039b4:	623b      	str	r3, [r7, #32]
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	695b      	ldr	r3, [r3, #20]
 80039bc:	623b      	str	r3, [r7, #32]
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	699b      	ldr	r3, [r3, #24]
 80039c4:	623b      	str	r3, [r7, #32]
 80039c6:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	681a      	ldr	r2, [r3, #0]
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80039d6:	601a      	str	r2, [r3, #0]
 80039d8:	e194      	b.n	8003d04 <HAL_I2C_Mem_Read+0x438>
    }
    else if (hi2c->XferSize == 1U)
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80039de:	2b01      	cmp	r3, #1
 80039e0:	d11d      	bne.n	8003a1e <HAL_I2C_Mem_Read+0x152>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	681a      	ldr	r2, [r3, #0]
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80039f0:	601a      	str	r2, [r3, #0]
 80039f2:	b672      	cpsid	i
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80039f4:	2300      	movs	r3, #0
 80039f6:	61fb      	str	r3, [r7, #28]
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	695b      	ldr	r3, [r3, #20]
 80039fe:	61fb      	str	r3, [r7, #28]
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	699b      	ldr	r3, [r3, #24]
 8003a06:	61fb      	str	r3, [r7, #28]
 8003a08:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	681a      	ldr	r2, [r3, #0]
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003a18:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8003a1a:	b662      	cpsie	i
 8003a1c:	e172      	b.n	8003d04 <HAL_I2C_Mem_Read+0x438>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a22:	2b02      	cmp	r3, #2
 8003a24:	d11d      	bne.n	8003a62 <HAL_I2C_Mem_Read+0x196>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	681a      	ldr	r2, [r3, #0]
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003a34:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003a36:	b672      	cpsid	i
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003a38:	2300      	movs	r3, #0
 8003a3a:	61bb      	str	r3, [r7, #24]
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	695b      	ldr	r3, [r3, #20]
 8003a42:	61bb      	str	r3, [r7, #24]
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	699b      	ldr	r3, [r3, #24]
 8003a4a:	61bb      	str	r3, [r7, #24]
 8003a4c:	69bb      	ldr	r3, [r7, #24]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	681a      	ldr	r2, [r3, #0]
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003a5c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8003a5e:	b662      	cpsie	i
 8003a60:	e150      	b.n	8003d04 <HAL_I2C_Mem_Read+0x438>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	681a      	ldr	r2, [r3, #0]
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003a70:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003a72:	2300      	movs	r3, #0
 8003a74:	617b      	str	r3, [r7, #20]
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	695b      	ldr	r3, [r3, #20]
 8003a7c:	617b      	str	r3, [r7, #20]
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	699b      	ldr	r3, [r3, #24]
 8003a84:	617b      	str	r3, [r7, #20]
 8003a86:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8003a88:	e13c      	b.n	8003d04 <HAL_I2C_Mem_Read+0x438>
    {
      if (hi2c->XferSize <= 3U)
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a8e:	2b03      	cmp	r3, #3
 8003a90:	f200 80f5 	bhi.w	8003c7e <HAL_I2C_Mem_Read+0x3b2>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a98:	2b01      	cmp	r3, #1
 8003a9a:	d123      	bne.n	8003ae4 <HAL_I2C_Mem_Read+0x218>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003a9c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a9e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003aa0:	68f8      	ldr	r0, [r7, #12]
 8003aa2:	f000 fd93 	bl	80045cc <I2C_WaitOnRXNEFlagUntilTimeout>
 8003aa6:	4603      	mov	r3, r0
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d001      	beq.n	8003ab0 <HAL_I2C_Mem_Read+0x1e4>
          {
            return HAL_ERROR;
 8003aac:	2301      	movs	r3, #1
 8003aae:	e13d      	b.n	8003d2c <HAL_I2C_Mem_Read+0x460>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	691a      	ldr	r2, [r3, #16]
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003aba:	b2d2      	uxtb	r2, r2
 8003abc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ac2:	1c5a      	adds	r2, r3, #1
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003acc:	3b01      	subs	r3, #1
 8003ace:	b29a      	uxth	r2, r3
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ad8:	b29b      	uxth	r3, r3
 8003ada:	3b01      	subs	r3, #1
 8003adc:	b29a      	uxth	r2, r3
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003ae2:	e10f      	b.n	8003d04 <HAL_I2C_Mem_Read+0x438>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ae8:	2b02      	cmp	r3, #2
 8003aea:	d150      	bne.n	8003b8e <HAL_I2C_Mem_Read+0x2c2>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003aec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003aee:	9300      	str	r3, [sp, #0]
 8003af0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003af2:	2200      	movs	r2, #0
 8003af4:	4906      	ldr	r1, [pc, #24]	; (8003b10 <HAL_I2C_Mem_Read+0x244>)
 8003af6:	68f8      	ldr	r0, [r7, #12]
 8003af8:	f000 fc10 	bl	800431c <I2C_WaitOnFlagUntilTimeout>
 8003afc:	4603      	mov	r3, r0
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d008      	beq.n	8003b14 <HAL_I2C_Mem_Read+0x248>
          {
            return HAL_ERROR;
 8003b02:	2301      	movs	r3, #1
 8003b04:	e112      	b.n	8003d2c <HAL_I2C_Mem_Read+0x460>
 8003b06:	bf00      	nop
 8003b08:	00100002 	.word	0x00100002
 8003b0c:	ffff0000 	.word	0xffff0000
 8003b10:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8003b14:	b672      	cpsid	i
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	681a      	ldr	r2, [r3, #0]
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003b24:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	691a      	ldr	r2, [r3, #16]
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b30:	b2d2      	uxtb	r2, r2
 8003b32:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b38:	1c5a      	adds	r2, r3, #1
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b42:	3b01      	subs	r3, #1
 8003b44:	b29a      	uxth	r2, r3
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b4e:	b29b      	uxth	r3, r3
 8003b50:	3b01      	subs	r3, #1
 8003b52:	b29a      	uxth	r2, r3
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8003b58:	b662      	cpsie	i

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	691a      	ldr	r2, [r3, #16]
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b64:	b2d2      	uxtb	r2, r2
 8003b66:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b6c:	1c5a      	adds	r2, r3, #1
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b76:	3b01      	subs	r3, #1
 8003b78:	b29a      	uxth	r2, r3
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b82:	b29b      	uxth	r3, r3
 8003b84:	3b01      	subs	r3, #1
 8003b86:	b29a      	uxth	r2, r3
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003b8c:	e0ba      	b.n	8003d04 <HAL_I2C_Mem_Read+0x438>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003b8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b90:	9300      	str	r3, [sp, #0]
 8003b92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b94:	2200      	movs	r2, #0
 8003b96:	4967      	ldr	r1, [pc, #412]	; (8003d34 <HAL_I2C_Mem_Read+0x468>)
 8003b98:	68f8      	ldr	r0, [r7, #12]
 8003b9a:	f000 fbbf 	bl	800431c <I2C_WaitOnFlagUntilTimeout>
 8003b9e:	4603      	mov	r3, r0
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d001      	beq.n	8003ba8 <HAL_I2C_Mem_Read+0x2dc>
          {
            return HAL_ERROR;
 8003ba4:	2301      	movs	r3, #1
 8003ba6:	e0c1      	b.n	8003d2c <HAL_I2C_Mem_Read+0x460>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	681a      	ldr	r2, [r3, #0]
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003bb6:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003bb8:	b672      	cpsid	i
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	691a      	ldr	r2, [r3, #16]
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bc4:	b2d2      	uxtb	r2, r2
 8003bc6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bcc:	1c5a      	adds	r2, r3, #1
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003bd6:	3b01      	subs	r3, #1
 8003bd8:	b29a      	uxth	r2, r3
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003be2:	b29b      	uxth	r3, r3
 8003be4:	3b01      	subs	r3, #1
 8003be6:	b29a      	uxth	r2, r3
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003bec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bee:	9300      	str	r3, [sp, #0]
 8003bf0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003bf2:	2200      	movs	r2, #0
 8003bf4:	494f      	ldr	r1, [pc, #316]	; (8003d34 <HAL_I2C_Mem_Read+0x468>)
 8003bf6:	68f8      	ldr	r0, [r7, #12]
 8003bf8:	f000 fb90 	bl	800431c <I2C_WaitOnFlagUntilTimeout>
 8003bfc:	4603      	mov	r3, r0
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d001      	beq.n	8003c06 <HAL_I2C_Mem_Read+0x33a>
          {
            return HAL_ERROR;
 8003c02:	2301      	movs	r3, #1
 8003c04:	e092      	b.n	8003d2c <HAL_I2C_Mem_Read+0x460>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	681a      	ldr	r2, [r3, #0]
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003c14:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	691a      	ldr	r2, [r3, #16]
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c20:	b2d2      	uxtb	r2, r2
 8003c22:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c28:	1c5a      	adds	r2, r3, #1
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c32:	3b01      	subs	r3, #1
 8003c34:	b29a      	uxth	r2, r3
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c3e:	b29b      	uxth	r3, r3
 8003c40:	3b01      	subs	r3, #1
 8003c42:	b29a      	uxth	r2, r3
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8003c48:	b662      	cpsie	i

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	691a      	ldr	r2, [r3, #16]
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c54:	b2d2      	uxtb	r2, r2
 8003c56:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c5c:	1c5a      	adds	r2, r3, #1
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c66:	3b01      	subs	r3, #1
 8003c68:	b29a      	uxth	r2, r3
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c72:	b29b      	uxth	r3, r3
 8003c74:	3b01      	subs	r3, #1
 8003c76:	b29a      	uxth	r2, r3
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003c7c:	e042      	b.n	8003d04 <HAL_I2C_Mem_Read+0x438>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003c7e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003c80:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003c82:	68f8      	ldr	r0, [r7, #12]
 8003c84:	f000 fca2 	bl	80045cc <I2C_WaitOnRXNEFlagUntilTimeout>
 8003c88:	4603      	mov	r3, r0
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d001      	beq.n	8003c92 <HAL_I2C_Mem_Read+0x3c6>
        {
          return HAL_ERROR;
 8003c8e:	2301      	movs	r3, #1
 8003c90:	e04c      	b.n	8003d2c <HAL_I2C_Mem_Read+0x460>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	691a      	ldr	r2, [r3, #16]
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c9c:	b2d2      	uxtb	r2, r2
 8003c9e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ca4:	1c5a      	adds	r2, r3, #1
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003cae:	3b01      	subs	r3, #1
 8003cb0:	b29a      	uxth	r2, r3
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003cba:	b29b      	uxth	r3, r3
 8003cbc:	3b01      	subs	r3, #1
 8003cbe:	b29a      	uxth	r2, r3
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	695b      	ldr	r3, [r3, #20]
 8003cca:	f003 0304 	and.w	r3, r3, #4
 8003cce:	2b04      	cmp	r3, #4
 8003cd0:	d118      	bne.n	8003d04 <HAL_I2C_Mem_Read+0x438>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	691a      	ldr	r2, [r3, #16]
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cdc:	b2d2      	uxtb	r2, r2
 8003cde:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ce4:	1c5a      	adds	r2, r3, #1
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003cee:	3b01      	subs	r3, #1
 8003cf0:	b29a      	uxth	r2, r3
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003cfa:	b29b      	uxth	r3, r3
 8003cfc:	3b01      	subs	r3, #1
 8003cfe:	b29a      	uxth	r2, r3
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	f47f aebe 	bne.w	8003a8a <HAL_I2C_Mem_Read+0x1be>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	2220      	movs	r2, #32
 8003d12:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	2200      	movs	r2, #0
 8003d1a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	2200      	movs	r2, #0
 8003d22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003d26:	2300      	movs	r3, #0
 8003d28:	e000      	b.n	8003d2c <HAL_I2C_Mem_Read+0x460>
  }
  else
  {
    return HAL_BUSY;
 8003d2a:	2302      	movs	r3, #2
  }
}
 8003d2c:	4618      	mov	r0, r3
 8003d2e:	3728      	adds	r7, #40	; 0x28
 8003d30:	46bd      	mov	sp, r7
 8003d32:	bd80      	pop	{r7, pc}
 8003d34:	00010004 	.word	0x00010004

08003d38 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8003d38:	b580      	push	{r7, lr}
 8003d3a:	b08a      	sub	sp, #40	; 0x28
 8003d3c:	af02      	add	r7, sp, #8
 8003d3e:	60f8      	str	r0, [r7, #12]
 8003d40:	607a      	str	r2, [r7, #4]
 8003d42:	603b      	str	r3, [r7, #0]
 8003d44:	460b      	mov	r3, r1
 8003d46:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8003d48:	f7ff f810 	bl	8002d6c <HAL_GetTick>
 8003d4c:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 1U;
 8003d4e:	2301      	movs	r3, #1
 8003d50:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d58:	b2db      	uxtb	r3, r3
 8003d5a:	2b20      	cmp	r3, #32
 8003d5c:	f040 8105 	bne.w	8003f6a <HAL_I2C_IsDeviceReady+0x232>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003d60:	69fb      	ldr	r3, [r7, #28]
 8003d62:	9300      	str	r3, [sp, #0]
 8003d64:	2319      	movs	r3, #25
 8003d66:	2201      	movs	r2, #1
 8003d68:	4982      	ldr	r1, [pc, #520]	; (8003f74 <HAL_I2C_IsDeviceReady+0x23c>)
 8003d6a:	68f8      	ldr	r0, [r7, #12]
 8003d6c:	f000 fad6 	bl	800431c <I2C_WaitOnFlagUntilTimeout>
 8003d70:	4603      	mov	r3, r0
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d001      	beq.n	8003d7a <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8003d76:	2302      	movs	r3, #2
 8003d78:	e0f8      	b.n	8003f6c <HAL_I2C_IsDeviceReady+0x234>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003d80:	2b01      	cmp	r3, #1
 8003d82:	d101      	bne.n	8003d88 <HAL_I2C_IsDeviceReady+0x50>
 8003d84:	2302      	movs	r3, #2
 8003d86:	e0f1      	b.n	8003f6c <HAL_I2C_IsDeviceReady+0x234>
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	2201      	movs	r2, #1
 8003d8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	f003 0301 	and.w	r3, r3, #1
 8003d9a:	2b01      	cmp	r3, #1
 8003d9c:	d007      	beq.n	8003dae <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	681a      	ldr	r2, [r3, #0]
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	f042 0201 	orr.w	r2, r2, #1
 8003dac:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	681a      	ldr	r2, [r3, #0]
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003dbc:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	2224      	movs	r2, #36	; 0x24
 8003dc2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	2200      	movs	r2, #0
 8003dca:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	4a6a      	ldr	r2, [pc, #424]	; (8003f78 <HAL_I2C_IsDeviceReady+0x240>)
 8003dd0:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	681a      	ldr	r2, [r3, #0]
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003de0:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8003de2:	69fb      	ldr	r3, [r7, #28]
 8003de4:	9300      	str	r3, [sp, #0]
 8003de6:	683b      	ldr	r3, [r7, #0]
 8003de8:	2200      	movs	r2, #0
 8003dea:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003dee:	68f8      	ldr	r0, [r7, #12]
 8003df0:	f000 fa94 	bl	800431c <I2C_WaitOnFlagUntilTimeout>
 8003df4:	4603      	mov	r3, r0
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d001      	beq.n	8003dfe <HAL_I2C_IsDeviceReady+0xc6>
      {
        return HAL_ERROR;
 8003dfa:	2301      	movs	r3, #1
 8003dfc:	e0b6      	b.n	8003f6c <HAL_I2C_IsDeviceReady+0x234>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003dfe:	897b      	ldrh	r3, [r7, #10]
 8003e00:	b2db      	uxtb	r3, r3
 8003e02:	461a      	mov	r2, r3
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003e0c:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8003e0e:	f7fe ffad 	bl	8002d6c <HAL_GetTick>
 8003e12:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	695b      	ldr	r3, [r3, #20]
 8003e1a:	f003 0302 	and.w	r3, r3, #2
 8003e1e:	2b02      	cmp	r3, #2
 8003e20:	bf0c      	ite	eq
 8003e22:	2301      	moveq	r3, #1
 8003e24:	2300      	movne	r3, #0
 8003e26:	b2db      	uxtb	r3, r3
 8003e28:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	695b      	ldr	r3, [r3, #20]
 8003e30:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003e34:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003e38:	bf0c      	ite	eq
 8003e3a:	2301      	moveq	r3, #1
 8003e3c:	2300      	movne	r3, #0
 8003e3e:	b2db      	uxtb	r3, r3
 8003e40:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8003e42:	e025      	b.n	8003e90 <HAL_I2C_IsDeviceReady+0x158>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003e44:	f7fe ff92 	bl	8002d6c <HAL_GetTick>
 8003e48:	4602      	mov	r2, r0
 8003e4a:	69fb      	ldr	r3, [r7, #28]
 8003e4c:	1ad3      	subs	r3, r2, r3
 8003e4e:	683a      	ldr	r2, [r7, #0]
 8003e50:	429a      	cmp	r2, r3
 8003e52:	d302      	bcc.n	8003e5a <HAL_I2C_IsDeviceReady+0x122>
 8003e54:	683b      	ldr	r3, [r7, #0]
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d103      	bne.n	8003e62 <HAL_I2C_IsDeviceReady+0x12a>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	22a0      	movs	r2, #160	; 0xa0
 8003e5e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	695b      	ldr	r3, [r3, #20]
 8003e68:	f003 0302 	and.w	r3, r3, #2
 8003e6c:	2b02      	cmp	r3, #2
 8003e6e:	bf0c      	ite	eq
 8003e70:	2301      	moveq	r3, #1
 8003e72:	2300      	movne	r3, #0
 8003e74:	b2db      	uxtb	r3, r3
 8003e76:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	695b      	ldr	r3, [r3, #20]
 8003e7e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003e82:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003e86:	bf0c      	ite	eq
 8003e88:	2301      	moveq	r3, #1
 8003e8a:	2300      	movne	r3, #0
 8003e8c:	b2db      	uxtb	r3, r3
 8003e8e:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e96:	b2db      	uxtb	r3, r3
 8003e98:	2ba0      	cmp	r3, #160	; 0xa0
 8003e9a:	d005      	beq.n	8003ea8 <HAL_I2C_IsDeviceReady+0x170>
 8003e9c:	7dfb      	ldrb	r3, [r7, #23]
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d102      	bne.n	8003ea8 <HAL_I2C_IsDeviceReady+0x170>
 8003ea2:	7dbb      	ldrb	r3, [r7, #22]
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d0cd      	beq.n	8003e44 <HAL_I2C_IsDeviceReady+0x10c>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	2220      	movs	r2, #32
 8003eac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	695b      	ldr	r3, [r3, #20]
 8003eb6:	f003 0302 	and.w	r3, r3, #2
 8003eba:	2b02      	cmp	r3, #2
 8003ebc:	d129      	bne.n	8003f12 <HAL_I2C_IsDeviceReady+0x1da>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	681a      	ldr	r2, [r3, #0]
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003ecc:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003ece:	2300      	movs	r3, #0
 8003ed0:	613b      	str	r3, [r7, #16]
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	695b      	ldr	r3, [r3, #20]
 8003ed8:	613b      	str	r3, [r7, #16]
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	699b      	ldr	r3, [r3, #24]
 8003ee0:	613b      	str	r3, [r7, #16]
 8003ee2:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003ee4:	69fb      	ldr	r3, [r7, #28]
 8003ee6:	9300      	str	r3, [sp, #0]
 8003ee8:	2319      	movs	r3, #25
 8003eea:	2201      	movs	r2, #1
 8003eec:	4921      	ldr	r1, [pc, #132]	; (8003f74 <HAL_I2C_IsDeviceReady+0x23c>)
 8003eee:	68f8      	ldr	r0, [r7, #12]
 8003ef0:	f000 fa14 	bl	800431c <I2C_WaitOnFlagUntilTimeout>
 8003ef4:	4603      	mov	r3, r0
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d001      	beq.n	8003efe <HAL_I2C_IsDeviceReady+0x1c6>
        {
          return HAL_ERROR;
 8003efa:	2301      	movs	r3, #1
 8003efc:	e036      	b.n	8003f6c <HAL_I2C_IsDeviceReady+0x234>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	2220      	movs	r2, #32
 8003f02:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	2200      	movs	r2, #0
 8003f0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 8003f0e:	2300      	movs	r3, #0
 8003f10:	e02c      	b.n	8003f6c <HAL_I2C_IsDeviceReady+0x234>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	681a      	ldr	r2, [r3, #0]
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003f20:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003f2a:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003f2c:	69fb      	ldr	r3, [r7, #28]
 8003f2e:	9300      	str	r3, [sp, #0]
 8003f30:	2319      	movs	r3, #25
 8003f32:	2201      	movs	r2, #1
 8003f34:	490f      	ldr	r1, [pc, #60]	; (8003f74 <HAL_I2C_IsDeviceReady+0x23c>)
 8003f36:	68f8      	ldr	r0, [r7, #12]
 8003f38:	f000 f9f0 	bl	800431c <I2C_WaitOnFlagUntilTimeout>
 8003f3c:	4603      	mov	r3, r0
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d001      	beq.n	8003f46 <HAL_I2C_IsDeviceReady+0x20e>
        {
          return HAL_ERROR;
 8003f42:	2301      	movs	r3, #1
 8003f44:	e012      	b.n	8003f6c <HAL_I2C_IsDeviceReady+0x234>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8003f46:	69bb      	ldr	r3, [r7, #24]
 8003f48:	3301      	adds	r3, #1
 8003f4a:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8003f4c:	69ba      	ldr	r2, [r7, #24]
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	429a      	cmp	r2, r3
 8003f52:	f4ff af3e 	bcc.w	8003dd2 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	2220      	movs	r2, #32
 8003f5a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	2200      	movs	r2, #0
 8003f62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003f66:	2301      	movs	r3, #1
 8003f68:	e000      	b.n	8003f6c <HAL_I2C_IsDeviceReady+0x234>
  }
  else
  {
    return HAL_BUSY;
 8003f6a:	2302      	movs	r3, #2
  }
}
 8003f6c:	4618      	mov	r0, r3
 8003f6e:	3720      	adds	r7, #32
 8003f70:	46bd      	mov	sp, r7
 8003f72:	bd80      	pop	{r7, pc}
 8003f74:	00100002 	.word	0x00100002
 8003f78:	ffff0000 	.word	0xffff0000

08003f7c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003f7c:	b580      	push	{r7, lr}
 8003f7e:	b088      	sub	sp, #32
 8003f80:	af02      	add	r7, sp, #8
 8003f82:	60f8      	str	r0, [r7, #12]
 8003f84:	607a      	str	r2, [r7, #4]
 8003f86:	603b      	str	r3, [r7, #0]
 8003f88:	460b      	mov	r3, r1
 8003f8a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f90:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003f92:	697b      	ldr	r3, [r7, #20]
 8003f94:	2b08      	cmp	r3, #8
 8003f96:	d006      	beq.n	8003fa6 <I2C_MasterRequestWrite+0x2a>
 8003f98:	697b      	ldr	r3, [r7, #20]
 8003f9a:	2b01      	cmp	r3, #1
 8003f9c:	d003      	beq.n	8003fa6 <I2C_MasterRequestWrite+0x2a>
 8003f9e:	697b      	ldr	r3, [r7, #20]
 8003fa0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003fa4:	d108      	bne.n	8003fb8 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	681a      	ldr	r2, [r3, #0]
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003fb4:	601a      	str	r2, [r3, #0]
 8003fb6:	e00b      	b.n	8003fd0 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fbc:	2b12      	cmp	r3, #18
 8003fbe:	d107      	bne.n	8003fd0 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	681a      	ldr	r2, [r3, #0]
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003fce:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003fd0:	683b      	ldr	r3, [r7, #0]
 8003fd2:	9300      	str	r3, [sp, #0]
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	2200      	movs	r2, #0
 8003fd8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003fdc:	68f8      	ldr	r0, [r7, #12]
 8003fde:	f000 f99d 	bl	800431c <I2C_WaitOnFlagUntilTimeout>
 8003fe2:	4603      	mov	r3, r0
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d001      	beq.n	8003fec <I2C_MasterRequestWrite+0x70>
  {
    return HAL_ERROR;
 8003fe8:	2301      	movs	r3, #1
 8003fea:	e035      	b.n	8004058 <I2C_MasterRequestWrite+0xdc>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	691b      	ldr	r3, [r3, #16]
 8003ff0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003ff4:	d108      	bne.n	8004008 <I2C_MasterRequestWrite+0x8c>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003ff6:	897b      	ldrh	r3, [r7, #10]
 8003ff8:	b2db      	uxtb	r3, r3
 8003ffa:	461a      	mov	r2, r3
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004004:	611a      	str	r2, [r3, #16]
 8004006:	e01b      	b.n	8004040 <I2C_MasterRequestWrite+0xc4>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004008:	897b      	ldrh	r3, [r7, #10]
 800400a:	11db      	asrs	r3, r3, #7
 800400c:	b2db      	uxtb	r3, r3
 800400e:	f003 0306 	and.w	r3, r3, #6
 8004012:	b2db      	uxtb	r3, r3
 8004014:	f063 030f 	orn	r3, r3, #15
 8004018:	b2da      	uxtb	r2, r3
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004020:	683b      	ldr	r3, [r7, #0]
 8004022:	687a      	ldr	r2, [r7, #4]
 8004024:	490e      	ldr	r1, [pc, #56]	; (8004060 <I2C_MasterRequestWrite+0xe4>)
 8004026:	68f8      	ldr	r0, [r7, #12]
 8004028:	f000 f9cf 	bl	80043ca <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800402c:	4603      	mov	r3, r0
 800402e:	2b00      	cmp	r3, #0
 8004030:	d001      	beq.n	8004036 <I2C_MasterRequestWrite+0xba>
    {
      return HAL_ERROR;
 8004032:	2301      	movs	r3, #1
 8004034:	e010      	b.n	8004058 <I2C_MasterRequestWrite+0xdc>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8004036:	897b      	ldrh	r3, [r7, #10]
 8004038:	b2da      	uxtb	r2, r3
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004040:	683b      	ldr	r3, [r7, #0]
 8004042:	687a      	ldr	r2, [r7, #4]
 8004044:	4907      	ldr	r1, [pc, #28]	; (8004064 <I2C_MasterRequestWrite+0xe8>)
 8004046:	68f8      	ldr	r0, [r7, #12]
 8004048:	f000 f9bf 	bl	80043ca <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800404c:	4603      	mov	r3, r0
 800404e:	2b00      	cmp	r3, #0
 8004050:	d001      	beq.n	8004056 <I2C_MasterRequestWrite+0xda>
  {
    return HAL_ERROR;
 8004052:	2301      	movs	r3, #1
 8004054:	e000      	b.n	8004058 <I2C_MasterRequestWrite+0xdc>
  }

  return HAL_OK;
 8004056:	2300      	movs	r3, #0
}
 8004058:	4618      	mov	r0, r3
 800405a:	3718      	adds	r7, #24
 800405c:	46bd      	mov	sp, r7
 800405e:	bd80      	pop	{r7, pc}
 8004060:	00010008 	.word	0x00010008
 8004064:	00010002 	.word	0x00010002

08004068 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004068:	b580      	push	{r7, lr}
 800406a:	b088      	sub	sp, #32
 800406c:	af02      	add	r7, sp, #8
 800406e:	60f8      	str	r0, [r7, #12]
 8004070:	4608      	mov	r0, r1
 8004072:	4611      	mov	r1, r2
 8004074:	461a      	mov	r2, r3
 8004076:	4603      	mov	r3, r0
 8004078:	817b      	strh	r3, [r7, #10]
 800407a:	460b      	mov	r3, r1
 800407c:	813b      	strh	r3, [r7, #8]
 800407e:	4613      	mov	r3, r2
 8004080:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	681a      	ldr	r2, [r3, #0]
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004090:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004092:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004094:	9300      	str	r3, [sp, #0]
 8004096:	6a3b      	ldr	r3, [r7, #32]
 8004098:	2200      	movs	r2, #0
 800409a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800409e:	68f8      	ldr	r0, [r7, #12]
 80040a0:	f000 f93c 	bl	800431c <I2C_WaitOnFlagUntilTimeout>
 80040a4:	4603      	mov	r3, r0
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d001      	beq.n	80040ae <I2C_RequestMemoryWrite+0x46>
  {
    return HAL_ERROR;
 80040aa:	2301      	movs	r3, #1
 80040ac:	e05f      	b.n	800416e <I2C_RequestMemoryWrite+0x106>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80040ae:	897b      	ldrh	r3, [r7, #10]
 80040b0:	b2db      	uxtb	r3, r3
 80040b2:	461a      	mov	r2, r3
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80040bc:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80040be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040c0:	6a3a      	ldr	r2, [r7, #32]
 80040c2:	492d      	ldr	r1, [pc, #180]	; (8004178 <I2C_RequestMemoryWrite+0x110>)
 80040c4:	68f8      	ldr	r0, [r7, #12]
 80040c6:	f000 f980 	bl	80043ca <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80040ca:	4603      	mov	r3, r0
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d001      	beq.n	80040d4 <I2C_RequestMemoryWrite+0x6c>
  {
    return HAL_ERROR;
 80040d0:	2301      	movs	r3, #1
 80040d2:	e04c      	b.n	800416e <I2C_RequestMemoryWrite+0x106>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80040d4:	2300      	movs	r3, #0
 80040d6:	617b      	str	r3, [r7, #20]
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	695b      	ldr	r3, [r3, #20]
 80040de:	617b      	str	r3, [r7, #20]
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	699b      	ldr	r3, [r3, #24]
 80040e6:	617b      	str	r3, [r7, #20]
 80040e8:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80040ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80040ec:	6a39      	ldr	r1, [r7, #32]
 80040ee:	68f8      	ldr	r0, [r7, #12]
 80040f0:	f000 f9ea 	bl	80044c8 <I2C_WaitOnTXEFlagUntilTimeout>
 80040f4:	4603      	mov	r3, r0
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d00d      	beq.n	8004116 <I2C_RequestMemoryWrite+0xae>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040fe:	2b04      	cmp	r3, #4
 8004100:	d107      	bne.n	8004112 <I2C_RequestMemoryWrite+0xaa>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	681a      	ldr	r2, [r3, #0]
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004110:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004112:	2301      	movs	r3, #1
 8004114:	e02b      	b.n	800416e <I2C_RequestMemoryWrite+0x106>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004116:	88fb      	ldrh	r3, [r7, #6]
 8004118:	2b01      	cmp	r3, #1
 800411a:	d105      	bne.n	8004128 <I2C_RequestMemoryWrite+0xc0>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800411c:	893b      	ldrh	r3, [r7, #8]
 800411e:	b2da      	uxtb	r2, r3
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	611a      	str	r2, [r3, #16]
 8004126:	e021      	b.n	800416c <I2C_RequestMemoryWrite+0x104>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004128:	893b      	ldrh	r3, [r7, #8]
 800412a:	0a1b      	lsrs	r3, r3, #8
 800412c:	b29b      	uxth	r3, r3
 800412e:	b2da      	uxtb	r2, r3
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004136:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004138:	6a39      	ldr	r1, [r7, #32]
 800413a:	68f8      	ldr	r0, [r7, #12]
 800413c:	f000 f9c4 	bl	80044c8 <I2C_WaitOnTXEFlagUntilTimeout>
 8004140:	4603      	mov	r3, r0
 8004142:	2b00      	cmp	r3, #0
 8004144:	d00d      	beq.n	8004162 <I2C_RequestMemoryWrite+0xfa>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800414a:	2b04      	cmp	r3, #4
 800414c:	d107      	bne.n	800415e <I2C_RequestMemoryWrite+0xf6>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	681a      	ldr	r2, [r3, #0]
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800415c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800415e:	2301      	movs	r3, #1
 8004160:	e005      	b.n	800416e <I2C_RequestMemoryWrite+0x106>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004162:	893b      	ldrh	r3, [r7, #8]
 8004164:	b2da      	uxtb	r2, r3
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 800416c:	2300      	movs	r3, #0
}
 800416e:	4618      	mov	r0, r3
 8004170:	3718      	adds	r7, #24
 8004172:	46bd      	mov	sp, r7
 8004174:	bd80      	pop	{r7, pc}
 8004176:	bf00      	nop
 8004178:	00010002 	.word	0x00010002

0800417c <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800417c:	b580      	push	{r7, lr}
 800417e:	b088      	sub	sp, #32
 8004180:	af02      	add	r7, sp, #8
 8004182:	60f8      	str	r0, [r7, #12]
 8004184:	4608      	mov	r0, r1
 8004186:	4611      	mov	r1, r2
 8004188:	461a      	mov	r2, r3
 800418a:	4603      	mov	r3, r0
 800418c:	817b      	strh	r3, [r7, #10]
 800418e:	460b      	mov	r3, r1
 8004190:	813b      	strh	r3, [r7, #8]
 8004192:	4613      	mov	r3, r2
 8004194:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	681a      	ldr	r2, [r3, #0]
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80041a4:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	681a      	ldr	r2, [r3, #0]
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80041b4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80041b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041b8:	9300      	str	r3, [sp, #0]
 80041ba:	6a3b      	ldr	r3, [r7, #32]
 80041bc:	2200      	movs	r2, #0
 80041be:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80041c2:	68f8      	ldr	r0, [r7, #12]
 80041c4:	f000 f8aa 	bl	800431c <I2C_WaitOnFlagUntilTimeout>
 80041c8:	4603      	mov	r3, r0
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d001      	beq.n	80041d2 <I2C_RequestMemoryRead+0x56>
  {
    return HAL_ERROR;
 80041ce:	2301      	movs	r3, #1
 80041d0:	e09e      	b.n	8004310 <I2C_RequestMemoryRead+0x194>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80041d2:	897b      	ldrh	r3, [r7, #10]
 80041d4:	b2db      	uxtb	r3, r3
 80041d6:	461a      	mov	r2, r3
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80041e0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80041e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041e4:	6a3a      	ldr	r2, [r7, #32]
 80041e6:	494c      	ldr	r1, [pc, #304]	; (8004318 <I2C_RequestMemoryRead+0x19c>)
 80041e8:	68f8      	ldr	r0, [r7, #12]
 80041ea:	f000 f8ee 	bl	80043ca <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80041ee:	4603      	mov	r3, r0
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d001      	beq.n	80041f8 <I2C_RequestMemoryRead+0x7c>
  {
    return HAL_ERROR;
 80041f4:	2301      	movs	r3, #1
 80041f6:	e08b      	b.n	8004310 <I2C_RequestMemoryRead+0x194>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80041f8:	2300      	movs	r3, #0
 80041fa:	617b      	str	r3, [r7, #20]
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	695b      	ldr	r3, [r3, #20]
 8004202:	617b      	str	r3, [r7, #20]
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	699b      	ldr	r3, [r3, #24]
 800420a:	617b      	str	r3, [r7, #20]
 800420c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800420e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004210:	6a39      	ldr	r1, [r7, #32]
 8004212:	68f8      	ldr	r0, [r7, #12]
 8004214:	f000 f958 	bl	80044c8 <I2C_WaitOnTXEFlagUntilTimeout>
 8004218:	4603      	mov	r3, r0
 800421a:	2b00      	cmp	r3, #0
 800421c:	d00d      	beq.n	800423a <I2C_RequestMemoryRead+0xbe>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004222:	2b04      	cmp	r3, #4
 8004224:	d107      	bne.n	8004236 <I2C_RequestMemoryRead+0xba>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	681a      	ldr	r2, [r3, #0]
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004234:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004236:	2301      	movs	r3, #1
 8004238:	e06a      	b.n	8004310 <I2C_RequestMemoryRead+0x194>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800423a:	88fb      	ldrh	r3, [r7, #6]
 800423c:	2b01      	cmp	r3, #1
 800423e:	d105      	bne.n	800424c <I2C_RequestMemoryRead+0xd0>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004240:	893b      	ldrh	r3, [r7, #8]
 8004242:	b2da      	uxtb	r2, r3
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	611a      	str	r2, [r3, #16]
 800424a:	e021      	b.n	8004290 <I2C_RequestMemoryRead+0x114>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800424c:	893b      	ldrh	r3, [r7, #8]
 800424e:	0a1b      	lsrs	r3, r3, #8
 8004250:	b29b      	uxth	r3, r3
 8004252:	b2da      	uxtb	r2, r3
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800425a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800425c:	6a39      	ldr	r1, [r7, #32]
 800425e:	68f8      	ldr	r0, [r7, #12]
 8004260:	f000 f932 	bl	80044c8 <I2C_WaitOnTXEFlagUntilTimeout>
 8004264:	4603      	mov	r3, r0
 8004266:	2b00      	cmp	r3, #0
 8004268:	d00d      	beq.n	8004286 <I2C_RequestMemoryRead+0x10a>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800426e:	2b04      	cmp	r3, #4
 8004270:	d107      	bne.n	8004282 <I2C_RequestMemoryRead+0x106>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	681a      	ldr	r2, [r3, #0]
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004280:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004282:	2301      	movs	r3, #1
 8004284:	e044      	b.n	8004310 <I2C_RequestMemoryRead+0x194>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004286:	893b      	ldrh	r3, [r7, #8]
 8004288:	b2da      	uxtb	r2, r3
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004290:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004292:	6a39      	ldr	r1, [r7, #32]
 8004294:	68f8      	ldr	r0, [r7, #12]
 8004296:	f000 f917 	bl	80044c8 <I2C_WaitOnTXEFlagUntilTimeout>
 800429a:	4603      	mov	r3, r0
 800429c:	2b00      	cmp	r3, #0
 800429e:	d00d      	beq.n	80042bc <I2C_RequestMemoryRead+0x140>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042a4:	2b04      	cmp	r3, #4
 80042a6:	d107      	bne.n	80042b8 <I2C_RequestMemoryRead+0x13c>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	681a      	ldr	r2, [r3, #0]
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80042b6:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80042b8:	2301      	movs	r3, #1
 80042ba:	e029      	b.n	8004310 <I2C_RequestMemoryRead+0x194>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	681a      	ldr	r2, [r3, #0]
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80042ca:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80042cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042ce:	9300      	str	r3, [sp, #0]
 80042d0:	6a3b      	ldr	r3, [r7, #32]
 80042d2:	2200      	movs	r2, #0
 80042d4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80042d8:	68f8      	ldr	r0, [r7, #12]
 80042da:	f000 f81f 	bl	800431c <I2C_WaitOnFlagUntilTimeout>
 80042de:	4603      	mov	r3, r0
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d001      	beq.n	80042e8 <I2C_RequestMemoryRead+0x16c>
  {
    return HAL_ERROR;
 80042e4:	2301      	movs	r3, #1
 80042e6:	e013      	b.n	8004310 <I2C_RequestMemoryRead+0x194>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80042e8:	897b      	ldrh	r3, [r7, #10]
 80042ea:	b2db      	uxtb	r3, r3
 80042ec:	f043 0301 	orr.w	r3, r3, #1
 80042f0:	b2da      	uxtb	r2, r3
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80042f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042fa:	6a3a      	ldr	r2, [r7, #32]
 80042fc:	4906      	ldr	r1, [pc, #24]	; (8004318 <I2C_RequestMemoryRead+0x19c>)
 80042fe:	68f8      	ldr	r0, [r7, #12]
 8004300:	f000 f863 	bl	80043ca <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004304:	4603      	mov	r3, r0
 8004306:	2b00      	cmp	r3, #0
 8004308:	d001      	beq.n	800430e <I2C_RequestMemoryRead+0x192>
  {
    return HAL_ERROR;
 800430a:	2301      	movs	r3, #1
 800430c:	e000      	b.n	8004310 <I2C_RequestMemoryRead+0x194>
  }

  return HAL_OK;
 800430e:	2300      	movs	r3, #0
}
 8004310:	4618      	mov	r0, r3
 8004312:	3718      	adds	r7, #24
 8004314:	46bd      	mov	sp, r7
 8004316:	bd80      	pop	{r7, pc}
 8004318:	00010002 	.word	0x00010002

0800431c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800431c:	b580      	push	{r7, lr}
 800431e:	b084      	sub	sp, #16
 8004320:	af00      	add	r7, sp, #0
 8004322:	60f8      	str	r0, [r7, #12]
 8004324:	60b9      	str	r1, [r7, #8]
 8004326:	603b      	str	r3, [r7, #0]
 8004328:	4613      	mov	r3, r2
 800432a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800432c:	e025      	b.n	800437a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800432e:	683b      	ldr	r3, [r7, #0]
 8004330:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004334:	d021      	beq.n	800437a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004336:	f7fe fd19 	bl	8002d6c <HAL_GetTick>
 800433a:	4602      	mov	r2, r0
 800433c:	69bb      	ldr	r3, [r7, #24]
 800433e:	1ad3      	subs	r3, r2, r3
 8004340:	683a      	ldr	r2, [r7, #0]
 8004342:	429a      	cmp	r2, r3
 8004344:	d302      	bcc.n	800434c <I2C_WaitOnFlagUntilTimeout+0x30>
 8004346:	683b      	ldr	r3, [r7, #0]
 8004348:	2b00      	cmp	r3, #0
 800434a:	d116      	bne.n	800437a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	2200      	movs	r2, #0
 8004350:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	2220      	movs	r2, #32
 8004356:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	2200      	movs	r2, #0
 800435e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004366:	f043 0220 	orr.w	r2, r3, #32
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	2200      	movs	r2, #0
 8004372:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004376:	2301      	movs	r3, #1
 8004378:	e023      	b.n	80043c2 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800437a:	68bb      	ldr	r3, [r7, #8]
 800437c:	0c1b      	lsrs	r3, r3, #16
 800437e:	b2db      	uxtb	r3, r3
 8004380:	2b01      	cmp	r3, #1
 8004382:	d10d      	bne.n	80043a0 <I2C_WaitOnFlagUntilTimeout+0x84>
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	695b      	ldr	r3, [r3, #20]
 800438a:	43da      	mvns	r2, r3
 800438c:	68bb      	ldr	r3, [r7, #8]
 800438e:	4013      	ands	r3, r2
 8004390:	b29b      	uxth	r3, r3
 8004392:	2b00      	cmp	r3, #0
 8004394:	bf0c      	ite	eq
 8004396:	2301      	moveq	r3, #1
 8004398:	2300      	movne	r3, #0
 800439a:	b2db      	uxtb	r3, r3
 800439c:	461a      	mov	r2, r3
 800439e:	e00c      	b.n	80043ba <I2C_WaitOnFlagUntilTimeout+0x9e>
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	699b      	ldr	r3, [r3, #24]
 80043a6:	43da      	mvns	r2, r3
 80043a8:	68bb      	ldr	r3, [r7, #8]
 80043aa:	4013      	ands	r3, r2
 80043ac:	b29b      	uxth	r3, r3
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	bf0c      	ite	eq
 80043b2:	2301      	moveq	r3, #1
 80043b4:	2300      	movne	r3, #0
 80043b6:	b2db      	uxtb	r3, r3
 80043b8:	461a      	mov	r2, r3
 80043ba:	79fb      	ldrb	r3, [r7, #7]
 80043bc:	429a      	cmp	r2, r3
 80043be:	d0b6      	beq.n	800432e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80043c0:	2300      	movs	r3, #0
}
 80043c2:	4618      	mov	r0, r3
 80043c4:	3710      	adds	r7, #16
 80043c6:	46bd      	mov	sp, r7
 80043c8:	bd80      	pop	{r7, pc}

080043ca <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80043ca:	b580      	push	{r7, lr}
 80043cc:	b084      	sub	sp, #16
 80043ce:	af00      	add	r7, sp, #0
 80043d0:	60f8      	str	r0, [r7, #12]
 80043d2:	60b9      	str	r1, [r7, #8]
 80043d4:	607a      	str	r2, [r7, #4]
 80043d6:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80043d8:	e051      	b.n	800447e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	695b      	ldr	r3, [r3, #20]
 80043e0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80043e4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80043e8:	d123      	bne.n	8004432 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	681a      	ldr	r2, [r3, #0]
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80043f8:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004402:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	2200      	movs	r2, #0
 8004408:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	2220      	movs	r2, #32
 800440e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	2200      	movs	r2, #0
 8004416:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800441e:	f043 0204 	orr.w	r2, r3, #4
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	2200      	movs	r2, #0
 800442a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800442e:	2301      	movs	r3, #1
 8004430:	e046      	b.n	80044c0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004438:	d021      	beq.n	800447e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800443a:	f7fe fc97 	bl	8002d6c <HAL_GetTick>
 800443e:	4602      	mov	r2, r0
 8004440:	683b      	ldr	r3, [r7, #0]
 8004442:	1ad3      	subs	r3, r2, r3
 8004444:	687a      	ldr	r2, [r7, #4]
 8004446:	429a      	cmp	r2, r3
 8004448:	d302      	bcc.n	8004450 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	2b00      	cmp	r3, #0
 800444e:	d116      	bne.n	800447e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	2200      	movs	r2, #0
 8004454:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	2220      	movs	r2, #32
 800445a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	2200      	movs	r2, #0
 8004462:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800446a:	f043 0220 	orr.w	r2, r3, #32
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	2200      	movs	r2, #0
 8004476:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800447a:	2301      	movs	r3, #1
 800447c:	e020      	b.n	80044c0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800447e:	68bb      	ldr	r3, [r7, #8]
 8004480:	0c1b      	lsrs	r3, r3, #16
 8004482:	b2db      	uxtb	r3, r3
 8004484:	2b01      	cmp	r3, #1
 8004486:	d10c      	bne.n	80044a2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	695b      	ldr	r3, [r3, #20]
 800448e:	43da      	mvns	r2, r3
 8004490:	68bb      	ldr	r3, [r7, #8]
 8004492:	4013      	ands	r3, r2
 8004494:	b29b      	uxth	r3, r3
 8004496:	2b00      	cmp	r3, #0
 8004498:	bf14      	ite	ne
 800449a:	2301      	movne	r3, #1
 800449c:	2300      	moveq	r3, #0
 800449e:	b2db      	uxtb	r3, r3
 80044a0:	e00b      	b.n	80044ba <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	699b      	ldr	r3, [r3, #24]
 80044a8:	43da      	mvns	r2, r3
 80044aa:	68bb      	ldr	r3, [r7, #8]
 80044ac:	4013      	ands	r3, r2
 80044ae:	b29b      	uxth	r3, r3
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	bf14      	ite	ne
 80044b4:	2301      	movne	r3, #1
 80044b6:	2300      	moveq	r3, #0
 80044b8:	b2db      	uxtb	r3, r3
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d18d      	bne.n	80043da <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80044be:	2300      	movs	r3, #0
}
 80044c0:	4618      	mov	r0, r3
 80044c2:	3710      	adds	r7, #16
 80044c4:	46bd      	mov	sp, r7
 80044c6:	bd80      	pop	{r7, pc}

080044c8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80044c8:	b580      	push	{r7, lr}
 80044ca:	b084      	sub	sp, #16
 80044cc:	af00      	add	r7, sp, #0
 80044ce:	60f8      	str	r0, [r7, #12]
 80044d0:	60b9      	str	r1, [r7, #8]
 80044d2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80044d4:	e02d      	b.n	8004532 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80044d6:	68f8      	ldr	r0, [r7, #12]
 80044d8:	f000 f8ce 	bl	8004678 <I2C_IsAcknowledgeFailed>
 80044dc:	4603      	mov	r3, r0
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d001      	beq.n	80044e6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80044e2:	2301      	movs	r3, #1
 80044e4:	e02d      	b.n	8004542 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80044e6:	68bb      	ldr	r3, [r7, #8]
 80044e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80044ec:	d021      	beq.n	8004532 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80044ee:	f7fe fc3d 	bl	8002d6c <HAL_GetTick>
 80044f2:	4602      	mov	r2, r0
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	1ad3      	subs	r3, r2, r3
 80044f8:	68ba      	ldr	r2, [r7, #8]
 80044fa:	429a      	cmp	r2, r3
 80044fc:	d302      	bcc.n	8004504 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80044fe:	68bb      	ldr	r3, [r7, #8]
 8004500:	2b00      	cmp	r3, #0
 8004502:	d116      	bne.n	8004532 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	2200      	movs	r2, #0
 8004508:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	2220      	movs	r2, #32
 800450e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	2200      	movs	r2, #0
 8004516:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800451e:	f043 0220 	orr.w	r2, r3, #32
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	2200      	movs	r2, #0
 800452a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800452e:	2301      	movs	r3, #1
 8004530:	e007      	b.n	8004542 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	695b      	ldr	r3, [r3, #20]
 8004538:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800453c:	2b80      	cmp	r3, #128	; 0x80
 800453e:	d1ca      	bne.n	80044d6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004540:	2300      	movs	r3, #0
}
 8004542:	4618      	mov	r0, r3
 8004544:	3710      	adds	r7, #16
 8004546:	46bd      	mov	sp, r7
 8004548:	bd80      	pop	{r7, pc}

0800454a <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800454a:	b580      	push	{r7, lr}
 800454c:	b084      	sub	sp, #16
 800454e:	af00      	add	r7, sp, #0
 8004550:	60f8      	str	r0, [r7, #12]
 8004552:	60b9      	str	r1, [r7, #8]
 8004554:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004556:	e02d      	b.n	80045b4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004558:	68f8      	ldr	r0, [r7, #12]
 800455a:	f000 f88d 	bl	8004678 <I2C_IsAcknowledgeFailed>
 800455e:	4603      	mov	r3, r0
 8004560:	2b00      	cmp	r3, #0
 8004562:	d001      	beq.n	8004568 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004564:	2301      	movs	r3, #1
 8004566:	e02d      	b.n	80045c4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004568:	68bb      	ldr	r3, [r7, #8]
 800456a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800456e:	d021      	beq.n	80045b4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004570:	f7fe fbfc 	bl	8002d6c <HAL_GetTick>
 8004574:	4602      	mov	r2, r0
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	1ad3      	subs	r3, r2, r3
 800457a:	68ba      	ldr	r2, [r7, #8]
 800457c:	429a      	cmp	r2, r3
 800457e:	d302      	bcc.n	8004586 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004580:	68bb      	ldr	r3, [r7, #8]
 8004582:	2b00      	cmp	r3, #0
 8004584:	d116      	bne.n	80045b4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	2200      	movs	r2, #0
 800458a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	2220      	movs	r2, #32
 8004590:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	2200      	movs	r2, #0
 8004598:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045a0:	f043 0220 	orr.w	r2, r3, #32
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	2200      	movs	r2, #0
 80045ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80045b0:	2301      	movs	r3, #1
 80045b2:	e007      	b.n	80045c4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	695b      	ldr	r3, [r3, #20]
 80045ba:	f003 0304 	and.w	r3, r3, #4
 80045be:	2b04      	cmp	r3, #4
 80045c0:	d1ca      	bne.n	8004558 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80045c2:	2300      	movs	r3, #0
}
 80045c4:	4618      	mov	r0, r3
 80045c6:	3710      	adds	r7, #16
 80045c8:	46bd      	mov	sp, r7
 80045ca:	bd80      	pop	{r7, pc}

080045cc <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80045cc:	b580      	push	{r7, lr}
 80045ce:	b084      	sub	sp, #16
 80045d0:	af00      	add	r7, sp, #0
 80045d2:	60f8      	str	r0, [r7, #12]
 80045d4:	60b9      	str	r1, [r7, #8]
 80045d6:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80045d8:	e042      	b.n	8004660 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	695b      	ldr	r3, [r3, #20]
 80045e0:	f003 0310 	and.w	r3, r3, #16
 80045e4:	2b10      	cmp	r3, #16
 80045e6:	d119      	bne.n	800461c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	f06f 0210 	mvn.w	r2, #16
 80045f0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	2200      	movs	r2, #0
 80045f6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	2220      	movs	r2, #32
 80045fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	2200      	movs	r2, #0
 8004604:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	2200      	movs	r2, #0
 8004614:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004618:	2301      	movs	r3, #1
 800461a:	e029      	b.n	8004670 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800461c:	f7fe fba6 	bl	8002d6c <HAL_GetTick>
 8004620:	4602      	mov	r2, r0
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	1ad3      	subs	r3, r2, r3
 8004626:	68ba      	ldr	r2, [r7, #8]
 8004628:	429a      	cmp	r2, r3
 800462a:	d302      	bcc.n	8004632 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800462c:	68bb      	ldr	r3, [r7, #8]
 800462e:	2b00      	cmp	r3, #0
 8004630:	d116      	bne.n	8004660 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	2200      	movs	r2, #0
 8004636:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	2220      	movs	r2, #32
 800463c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	2200      	movs	r2, #0
 8004644:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800464c:	f043 0220 	orr.w	r2, r3, #32
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	2200      	movs	r2, #0
 8004658:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800465c:	2301      	movs	r3, #1
 800465e:	e007      	b.n	8004670 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	695b      	ldr	r3, [r3, #20]
 8004666:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800466a:	2b40      	cmp	r3, #64	; 0x40
 800466c:	d1b5      	bne.n	80045da <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800466e:	2300      	movs	r3, #0
}
 8004670:	4618      	mov	r0, r3
 8004672:	3710      	adds	r7, #16
 8004674:	46bd      	mov	sp, r7
 8004676:	bd80      	pop	{r7, pc}

08004678 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004678:	b480      	push	{r7}
 800467a:	b083      	sub	sp, #12
 800467c:	af00      	add	r7, sp, #0
 800467e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	695b      	ldr	r3, [r3, #20]
 8004686:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800468a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800468e:	d11b      	bne.n	80046c8 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004698:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	2200      	movs	r2, #0
 800469e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	2220      	movs	r2, #32
 80046a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	2200      	movs	r2, #0
 80046ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046b4:	f043 0204 	orr.w	r2, r3, #4
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	2200      	movs	r2, #0
 80046c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80046c4:	2301      	movs	r3, #1
 80046c6:	e000      	b.n	80046ca <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80046c8:	2300      	movs	r3, #0
}
 80046ca:	4618      	mov	r0, r3
 80046cc:	370c      	adds	r7, #12
 80046ce:	46bd      	mov	sp, r7
 80046d0:	bc80      	pop	{r7}
 80046d2:	4770      	bx	lr

080046d4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80046d4:	b580      	push	{r7, lr}
 80046d6:	b086      	sub	sp, #24
 80046d8:	af00      	add	r7, sp, #0
 80046da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d101      	bne.n	80046e6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80046e2:	2301      	movs	r3, #1
 80046e4:	e26c      	b.n	8004bc0 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	f003 0301 	and.w	r3, r3, #1
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	f000 8087 	beq.w	8004802 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80046f4:	4b92      	ldr	r3, [pc, #584]	; (8004940 <HAL_RCC_OscConfig+0x26c>)
 80046f6:	685b      	ldr	r3, [r3, #4]
 80046f8:	f003 030c 	and.w	r3, r3, #12
 80046fc:	2b04      	cmp	r3, #4
 80046fe:	d00c      	beq.n	800471a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004700:	4b8f      	ldr	r3, [pc, #572]	; (8004940 <HAL_RCC_OscConfig+0x26c>)
 8004702:	685b      	ldr	r3, [r3, #4]
 8004704:	f003 030c 	and.w	r3, r3, #12
 8004708:	2b08      	cmp	r3, #8
 800470a:	d112      	bne.n	8004732 <HAL_RCC_OscConfig+0x5e>
 800470c:	4b8c      	ldr	r3, [pc, #560]	; (8004940 <HAL_RCC_OscConfig+0x26c>)
 800470e:	685b      	ldr	r3, [r3, #4]
 8004710:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004714:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004718:	d10b      	bne.n	8004732 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800471a:	4b89      	ldr	r3, [pc, #548]	; (8004940 <HAL_RCC_OscConfig+0x26c>)
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004722:	2b00      	cmp	r3, #0
 8004724:	d06c      	beq.n	8004800 <HAL_RCC_OscConfig+0x12c>
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	685b      	ldr	r3, [r3, #4]
 800472a:	2b00      	cmp	r3, #0
 800472c:	d168      	bne.n	8004800 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800472e:	2301      	movs	r3, #1
 8004730:	e246      	b.n	8004bc0 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	685b      	ldr	r3, [r3, #4]
 8004736:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800473a:	d106      	bne.n	800474a <HAL_RCC_OscConfig+0x76>
 800473c:	4b80      	ldr	r3, [pc, #512]	; (8004940 <HAL_RCC_OscConfig+0x26c>)
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	4a7f      	ldr	r2, [pc, #508]	; (8004940 <HAL_RCC_OscConfig+0x26c>)
 8004742:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004746:	6013      	str	r3, [r2, #0]
 8004748:	e02e      	b.n	80047a8 <HAL_RCC_OscConfig+0xd4>
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	685b      	ldr	r3, [r3, #4]
 800474e:	2b00      	cmp	r3, #0
 8004750:	d10c      	bne.n	800476c <HAL_RCC_OscConfig+0x98>
 8004752:	4b7b      	ldr	r3, [pc, #492]	; (8004940 <HAL_RCC_OscConfig+0x26c>)
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	4a7a      	ldr	r2, [pc, #488]	; (8004940 <HAL_RCC_OscConfig+0x26c>)
 8004758:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800475c:	6013      	str	r3, [r2, #0]
 800475e:	4b78      	ldr	r3, [pc, #480]	; (8004940 <HAL_RCC_OscConfig+0x26c>)
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	4a77      	ldr	r2, [pc, #476]	; (8004940 <HAL_RCC_OscConfig+0x26c>)
 8004764:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004768:	6013      	str	r3, [r2, #0]
 800476a:	e01d      	b.n	80047a8 <HAL_RCC_OscConfig+0xd4>
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	685b      	ldr	r3, [r3, #4]
 8004770:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004774:	d10c      	bne.n	8004790 <HAL_RCC_OscConfig+0xbc>
 8004776:	4b72      	ldr	r3, [pc, #456]	; (8004940 <HAL_RCC_OscConfig+0x26c>)
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	4a71      	ldr	r2, [pc, #452]	; (8004940 <HAL_RCC_OscConfig+0x26c>)
 800477c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004780:	6013      	str	r3, [r2, #0]
 8004782:	4b6f      	ldr	r3, [pc, #444]	; (8004940 <HAL_RCC_OscConfig+0x26c>)
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	4a6e      	ldr	r2, [pc, #440]	; (8004940 <HAL_RCC_OscConfig+0x26c>)
 8004788:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800478c:	6013      	str	r3, [r2, #0]
 800478e:	e00b      	b.n	80047a8 <HAL_RCC_OscConfig+0xd4>
 8004790:	4b6b      	ldr	r3, [pc, #428]	; (8004940 <HAL_RCC_OscConfig+0x26c>)
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	4a6a      	ldr	r2, [pc, #424]	; (8004940 <HAL_RCC_OscConfig+0x26c>)
 8004796:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800479a:	6013      	str	r3, [r2, #0]
 800479c:	4b68      	ldr	r3, [pc, #416]	; (8004940 <HAL_RCC_OscConfig+0x26c>)
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	4a67      	ldr	r2, [pc, #412]	; (8004940 <HAL_RCC_OscConfig+0x26c>)
 80047a2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80047a6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	685b      	ldr	r3, [r3, #4]
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d013      	beq.n	80047d8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80047b0:	f7fe fadc 	bl	8002d6c <HAL_GetTick>
 80047b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80047b6:	e008      	b.n	80047ca <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80047b8:	f7fe fad8 	bl	8002d6c <HAL_GetTick>
 80047bc:	4602      	mov	r2, r0
 80047be:	693b      	ldr	r3, [r7, #16]
 80047c0:	1ad3      	subs	r3, r2, r3
 80047c2:	2b64      	cmp	r3, #100	; 0x64
 80047c4:	d901      	bls.n	80047ca <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80047c6:	2303      	movs	r3, #3
 80047c8:	e1fa      	b.n	8004bc0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80047ca:	4b5d      	ldr	r3, [pc, #372]	; (8004940 <HAL_RCC_OscConfig+0x26c>)
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d0f0      	beq.n	80047b8 <HAL_RCC_OscConfig+0xe4>
 80047d6:	e014      	b.n	8004802 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80047d8:	f7fe fac8 	bl	8002d6c <HAL_GetTick>
 80047dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80047de:	e008      	b.n	80047f2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80047e0:	f7fe fac4 	bl	8002d6c <HAL_GetTick>
 80047e4:	4602      	mov	r2, r0
 80047e6:	693b      	ldr	r3, [r7, #16]
 80047e8:	1ad3      	subs	r3, r2, r3
 80047ea:	2b64      	cmp	r3, #100	; 0x64
 80047ec:	d901      	bls.n	80047f2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80047ee:	2303      	movs	r3, #3
 80047f0:	e1e6      	b.n	8004bc0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80047f2:	4b53      	ldr	r3, [pc, #332]	; (8004940 <HAL_RCC_OscConfig+0x26c>)
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d1f0      	bne.n	80047e0 <HAL_RCC_OscConfig+0x10c>
 80047fe:	e000      	b.n	8004802 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004800:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	f003 0302 	and.w	r3, r3, #2
 800480a:	2b00      	cmp	r3, #0
 800480c:	d063      	beq.n	80048d6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800480e:	4b4c      	ldr	r3, [pc, #304]	; (8004940 <HAL_RCC_OscConfig+0x26c>)
 8004810:	685b      	ldr	r3, [r3, #4]
 8004812:	f003 030c 	and.w	r3, r3, #12
 8004816:	2b00      	cmp	r3, #0
 8004818:	d00b      	beq.n	8004832 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800481a:	4b49      	ldr	r3, [pc, #292]	; (8004940 <HAL_RCC_OscConfig+0x26c>)
 800481c:	685b      	ldr	r3, [r3, #4]
 800481e:	f003 030c 	and.w	r3, r3, #12
 8004822:	2b08      	cmp	r3, #8
 8004824:	d11c      	bne.n	8004860 <HAL_RCC_OscConfig+0x18c>
 8004826:	4b46      	ldr	r3, [pc, #280]	; (8004940 <HAL_RCC_OscConfig+0x26c>)
 8004828:	685b      	ldr	r3, [r3, #4]
 800482a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800482e:	2b00      	cmp	r3, #0
 8004830:	d116      	bne.n	8004860 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004832:	4b43      	ldr	r3, [pc, #268]	; (8004940 <HAL_RCC_OscConfig+0x26c>)
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	f003 0302 	and.w	r3, r3, #2
 800483a:	2b00      	cmp	r3, #0
 800483c:	d005      	beq.n	800484a <HAL_RCC_OscConfig+0x176>
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	691b      	ldr	r3, [r3, #16]
 8004842:	2b01      	cmp	r3, #1
 8004844:	d001      	beq.n	800484a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8004846:	2301      	movs	r3, #1
 8004848:	e1ba      	b.n	8004bc0 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800484a:	4b3d      	ldr	r3, [pc, #244]	; (8004940 <HAL_RCC_OscConfig+0x26c>)
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	695b      	ldr	r3, [r3, #20]
 8004856:	00db      	lsls	r3, r3, #3
 8004858:	4939      	ldr	r1, [pc, #228]	; (8004940 <HAL_RCC_OscConfig+0x26c>)
 800485a:	4313      	orrs	r3, r2
 800485c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800485e:	e03a      	b.n	80048d6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	691b      	ldr	r3, [r3, #16]
 8004864:	2b00      	cmp	r3, #0
 8004866:	d020      	beq.n	80048aa <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004868:	4b36      	ldr	r3, [pc, #216]	; (8004944 <HAL_RCC_OscConfig+0x270>)
 800486a:	2201      	movs	r2, #1
 800486c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800486e:	f7fe fa7d 	bl	8002d6c <HAL_GetTick>
 8004872:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004874:	e008      	b.n	8004888 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004876:	f7fe fa79 	bl	8002d6c <HAL_GetTick>
 800487a:	4602      	mov	r2, r0
 800487c:	693b      	ldr	r3, [r7, #16]
 800487e:	1ad3      	subs	r3, r2, r3
 8004880:	2b02      	cmp	r3, #2
 8004882:	d901      	bls.n	8004888 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8004884:	2303      	movs	r3, #3
 8004886:	e19b      	b.n	8004bc0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004888:	4b2d      	ldr	r3, [pc, #180]	; (8004940 <HAL_RCC_OscConfig+0x26c>)
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	f003 0302 	and.w	r3, r3, #2
 8004890:	2b00      	cmp	r3, #0
 8004892:	d0f0      	beq.n	8004876 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004894:	4b2a      	ldr	r3, [pc, #168]	; (8004940 <HAL_RCC_OscConfig+0x26c>)
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	695b      	ldr	r3, [r3, #20]
 80048a0:	00db      	lsls	r3, r3, #3
 80048a2:	4927      	ldr	r1, [pc, #156]	; (8004940 <HAL_RCC_OscConfig+0x26c>)
 80048a4:	4313      	orrs	r3, r2
 80048a6:	600b      	str	r3, [r1, #0]
 80048a8:	e015      	b.n	80048d6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80048aa:	4b26      	ldr	r3, [pc, #152]	; (8004944 <HAL_RCC_OscConfig+0x270>)
 80048ac:	2200      	movs	r2, #0
 80048ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80048b0:	f7fe fa5c 	bl	8002d6c <HAL_GetTick>
 80048b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80048b6:	e008      	b.n	80048ca <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80048b8:	f7fe fa58 	bl	8002d6c <HAL_GetTick>
 80048bc:	4602      	mov	r2, r0
 80048be:	693b      	ldr	r3, [r7, #16]
 80048c0:	1ad3      	subs	r3, r2, r3
 80048c2:	2b02      	cmp	r3, #2
 80048c4:	d901      	bls.n	80048ca <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80048c6:	2303      	movs	r3, #3
 80048c8:	e17a      	b.n	8004bc0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80048ca:	4b1d      	ldr	r3, [pc, #116]	; (8004940 <HAL_RCC_OscConfig+0x26c>)
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	f003 0302 	and.w	r3, r3, #2
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d1f0      	bne.n	80048b8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	f003 0308 	and.w	r3, r3, #8
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d03a      	beq.n	8004958 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	699b      	ldr	r3, [r3, #24]
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d019      	beq.n	800491e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80048ea:	4b17      	ldr	r3, [pc, #92]	; (8004948 <HAL_RCC_OscConfig+0x274>)
 80048ec:	2201      	movs	r2, #1
 80048ee:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80048f0:	f7fe fa3c 	bl	8002d6c <HAL_GetTick>
 80048f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80048f6:	e008      	b.n	800490a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80048f8:	f7fe fa38 	bl	8002d6c <HAL_GetTick>
 80048fc:	4602      	mov	r2, r0
 80048fe:	693b      	ldr	r3, [r7, #16]
 8004900:	1ad3      	subs	r3, r2, r3
 8004902:	2b02      	cmp	r3, #2
 8004904:	d901      	bls.n	800490a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8004906:	2303      	movs	r3, #3
 8004908:	e15a      	b.n	8004bc0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800490a:	4b0d      	ldr	r3, [pc, #52]	; (8004940 <HAL_RCC_OscConfig+0x26c>)
 800490c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800490e:	f003 0302 	and.w	r3, r3, #2
 8004912:	2b00      	cmp	r3, #0
 8004914:	d0f0      	beq.n	80048f8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8004916:	2001      	movs	r0, #1
 8004918:	f000 fac6 	bl	8004ea8 <RCC_Delay>
 800491c:	e01c      	b.n	8004958 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800491e:	4b0a      	ldr	r3, [pc, #40]	; (8004948 <HAL_RCC_OscConfig+0x274>)
 8004920:	2200      	movs	r2, #0
 8004922:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004924:	f7fe fa22 	bl	8002d6c <HAL_GetTick>
 8004928:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800492a:	e00f      	b.n	800494c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800492c:	f7fe fa1e 	bl	8002d6c <HAL_GetTick>
 8004930:	4602      	mov	r2, r0
 8004932:	693b      	ldr	r3, [r7, #16]
 8004934:	1ad3      	subs	r3, r2, r3
 8004936:	2b02      	cmp	r3, #2
 8004938:	d908      	bls.n	800494c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800493a:	2303      	movs	r3, #3
 800493c:	e140      	b.n	8004bc0 <HAL_RCC_OscConfig+0x4ec>
 800493e:	bf00      	nop
 8004940:	40021000 	.word	0x40021000
 8004944:	42420000 	.word	0x42420000
 8004948:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800494c:	4b9e      	ldr	r3, [pc, #632]	; (8004bc8 <HAL_RCC_OscConfig+0x4f4>)
 800494e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004950:	f003 0302 	and.w	r3, r3, #2
 8004954:	2b00      	cmp	r3, #0
 8004956:	d1e9      	bne.n	800492c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	f003 0304 	and.w	r3, r3, #4
 8004960:	2b00      	cmp	r3, #0
 8004962:	f000 80a6 	beq.w	8004ab2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004966:	2300      	movs	r3, #0
 8004968:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800496a:	4b97      	ldr	r3, [pc, #604]	; (8004bc8 <HAL_RCC_OscConfig+0x4f4>)
 800496c:	69db      	ldr	r3, [r3, #28]
 800496e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004972:	2b00      	cmp	r3, #0
 8004974:	d10d      	bne.n	8004992 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004976:	4b94      	ldr	r3, [pc, #592]	; (8004bc8 <HAL_RCC_OscConfig+0x4f4>)
 8004978:	69db      	ldr	r3, [r3, #28]
 800497a:	4a93      	ldr	r2, [pc, #588]	; (8004bc8 <HAL_RCC_OscConfig+0x4f4>)
 800497c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004980:	61d3      	str	r3, [r2, #28]
 8004982:	4b91      	ldr	r3, [pc, #580]	; (8004bc8 <HAL_RCC_OscConfig+0x4f4>)
 8004984:	69db      	ldr	r3, [r3, #28]
 8004986:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800498a:	60bb      	str	r3, [r7, #8]
 800498c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800498e:	2301      	movs	r3, #1
 8004990:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004992:	4b8e      	ldr	r3, [pc, #568]	; (8004bcc <HAL_RCC_OscConfig+0x4f8>)
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800499a:	2b00      	cmp	r3, #0
 800499c:	d118      	bne.n	80049d0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800499e:	4b8b      	ldr	r3, [pc, #556]	; (8004bcc <HAL_RCC_OscConfig+0x4f8>)
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	4a8a      	ldr	r2, [pc, #552]	; (8004bcc <HAL_RCC_OscConfig+0x4f8>)
 80049a4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80049a8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80049aa:	f7fe f9df 	bl	8002d6c <HAL_GetTick>
 80049ae:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80049b0:	e008      	b.n	80049c4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80049b2:	f7fe f9db 	bl	8002d6c <HAL_GetTick>
 80049b6:	4602      	mov	r2, r0
 80049b8:	693b      	ldr	r3, [r7, #16]
 80049ba:	1ad3      	subs	r3, r2, r3
 80049bc:	2b64      	cmp	r3, #100	; 0x64
 80049be:	d901      	bls.n	80049c4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80049c0:	2303      	movs	r3, #3
 80049c2:	e0fd      	b.n	8004bc0 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80049c4:	4b81      	ldr	r3, [pc, #516]	; (8004bcc <HAL_RCC_OscConfig+0x4f8>)
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d0f0      	beq.n	80049b2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	68db      	ldr	r3, [r3, #12]
 80049d4:	2b01      	cmp	r3, #1
 80049d6:	d106      	bne.n	80049e6 <HAL_RCC_OscConfig+0x312>
 80049d8:	4b7b      	ldr	r3, [pc, #492]	; (8004bc8 <HAL_RCC_OscConfig+0x4f4>)
 80049da:	6a1b      	ldr	r3, [r3, #32]
 80049dc:	4a7a      	ldr	r2, [pc, #488]	; (8004bc8 <HAL_RCC_OscConfig+0x4f4>)
 80049de:	f043 0301 	orr.w	r3, r3, #1
 80049e2:	6213      	str	r3, [r2, #32]
 80049e4:	e02d      	b.n	8004a42 <HAL_RCC_OscConfig+0x36e>
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	68db      	ldr	r3, [r3, #12]
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d10c      	bne.n	8004a08 <HAL_RCC_OscConfig+0x334>
 80049ee:	4b76      	ldr	r3, [pc, #472]	; (8004bc8 <HAL_RCC_OscConfig+0x4f4>)
 80049f0:	6a1b      	ldr	r3, [r3, #32]
 80049f2:	4a75      	ldr	r2, [pc, #468]	; (8004bc8 <HAL_RCC_OscConfig+0x4f4>)
 80049f4:	f023 0301 	bic.w	r3, r3, #1
 80049f8:	6213      	str	r3, [r2, #32]
 80049fa:	4b73      	ldr	r3, [pc, #460]	; (8004bc8 <HAL_RCC_OscConfig+0x4f4>)
 80049fc:	6a1b      	ldr	r3, [r3, #32]
 80049fe:	4a72      	ldr	r2, [pc, #456]	; (8004bc8 <HAL_RCC_OscConfig+0x4f4>)
 8004a00:	f023 0304 	bic.w	r3, r3, #4
 8004a04:	6213      	str	r3, [r2, #32]
 8004a06:	e01c      	b.n	8004a42 <HAL_RCC_OscConfig+0x36e>
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	68db      	ldr	r3, [r3, #12]
 8004a0c:	2b05      	cmp	r3, #5
 8004a0e:	d10c      	bne.n	8004a2a <HAL_RCC_OscConfig+0x356>
 8004a10:	4b6d      	ldr	r3, [pc, #436]	; (8004bc8 <HAL_RCC_OscConfig+0x4f4>)
 8004a12:	6a1b      	ldr	r3, [r3, #32]
 8004a14:	4a6c      	ldr	r2, [pc, #432]	; (8004bc8 <HAL_RCC_OscConfig+0x4f4>)
 8004a16:	f043 0304 	orr.w	r3, r3, #4
 8004a1a:	6213      	str	r3, [r2, #32]
 8004a1c:	4b6a      	ldr	r3, [pc, #424]	; (8004bc8 <HAL_RCC_OscConfig+0x4f4>)
 8004a1e:	6a1b      	ldr	r3, [r3, #32]
 8004a20:	4a69      	ldr	r2, [pc, #420]	; (8004bc8 <HAL_RCC_OscConfig+0x4f4>)
 8004a22:	f043 0301 	orr.w	r3, r3, #1
 8004a26:	6213      	str	r3, [r2, #32]
 8004a28:	e00b      	b.n	8004a42 <HAL_RCC_OscConfig+0x36e>
 8004a2a:	4b67      	ldr	r3, [pc, #412]	; (8004bc8 <HAL_RCC_OscConfig+0x4f4>)
 8004a2c:	6a1b      	ldr	r3, [r3, #32]
 8004a2e:	4a66      	ldr	r2, [pc, #408]	; (8004bc8 <HAL_RCC_OscConfig+0x4f4>)
 8004a30:	f023 0301 	bic.w	r3, r3, #1
 8004a34:	6213      	str	r3, [r2, #32]
 8004a36:	4b64      	ldr	r3, [pc, #400]	; (8004bc8 <HAL_RCC_OscConfig+0x4f4>)
 8004a38:	6a1b      	ldr	r3, [r3, #32]
 8004a3a:	4a63      	ldr	r2, [pc, #396]	; (8004bc8 <HAL_RCC_OscConfig+0x4f4>)
 8004a3c:	f023 0304 	bic.w	r3, r3, #4
 8004a40:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	68db      	ldr	r3, [r3, #12]
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d015      	beq.n	8004a76 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004a4a:	f7fe f98f 	bl	8002d6c <HAL_GetTick>
 8004a4e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004a50:	e00a      	b.n	8004a68 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004a52:	f7fe f98b 	bl	8002d6c <HAL_GetTick>
 8004a56:	4602      	mov	r2, r0
 8004a58:	693b      	ldr	r3, [r7, #16]
 8004a5a:	1ad3      	subs	r3, r2, r3
 8004a5c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a60:	4293      	cmp	r3, r2
 8004a62:	d901      	bls.n	8004a68 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8004a64:	2303      	movs	r3, #3
 8004a66:	e0ab      	b.n	8004bc0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004a68:	4b57      	ldr	r3, [pc, #348]	; (8004bc8 <HAL_RCC_OscConfig+0x4f4>)
 8004a6a:	6a1b      	ldr	r3, [r3, #32]
 8004a6c:	f003 0302 	and.w	r3, r3, #2
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	d0ee      	beq.n	8004a52 <HAL_RCC_OscConfig+0x37e>
 8004a74:	e014      	b.n	8004aa0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004a76:	f7fe f979 	bl	8002d6c <HAL_GetTick>
 8004a7a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004a7c:	e00a      	b.n	8004a94 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004a7e:	f7fe f975 	bl	8002d6c <HAL_GetTick>
 8004a82:	4602      	mov	r2, r0
 8004a84:	693b      	ldr	r3, [r7, #16]
 8004a86:	1ad3      	subs	r3, r2, r3
 8004a88:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a8c:	4293      	cmp	r3, r2
 8004a8e:	d901      	bls.n	8004a94 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8004a90:	2303      	movs	r3, #3
 8004a92:	e095      	b.n	8004bc0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004a94:	4b4c      	ldr	r3, [pc, #304]	; (8004bc8 <HAL_RCC_OscConfig+0x4f4>)
 8004a96:	6a1b      	ldr	r3, [r3, #32]
 8004a98:	f003 0302 	and.w	r3, r3, #2
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	d1ee      	bne.n	8004a7e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004aa0:	7dfb      	ldrb	r3, [r7, #23]
 8004aa2:	2b01      	cmp	r3, #1
 8004aa4:	d105      	bne.n	8004ab2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004aa6:	4b48      	ldr	r3, [pc, #288]	; (8004bc8 <HAL_RCC_OscConfig+0x4f4>)
 8004aa8:	69db      	ldr	r3, [r3, #28]
 8004aaa:	4a47      	ldr	r2, [pc, #284]	; (8004bc8 <HAL_RCC_OscConfig+0x4f4>)
 8004aac:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004ab0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	69db      	ldr	r3, [r3, #28]
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	f000 8081 	beq.w	8004bbe <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004abc:	4b42      	ldr	r3, [pc, #264]	; (8004bc8 <HAL_RCC_OscConfig+0x4f4>)
 8004abe:	685b      	ldr	r3, [r3, #4]
 8004ac0:	f003 030c 	and.w	r3, r3, #12
 8004ac4:	2b08      	cmp	r3, #8
 8004ac6:	d061      	beq.n	8004b8c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	69db      	ldr	r3, [r3, #28]
 8004acc:	2b02      	cmp	r3, #2
 8004ace:	d146      	bne.n	8004b5e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004ad0:	4b3f      	ldr	r3, [pc, #252]	; (8004bd0 <HAL_RCC_OscConfig+0x4fc>)
 8004ad2:	2200      	movs	r2, #0
 8004ad4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ad6:	f7fe f949 	bl	8002d6c <HAL_GetTick>
 8004ada:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004adc:	e008      	b.n	8004af0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004ade:	f7fe f945 	bl	8002d6c <HAL_GetTick>
 8004ae2:	4602      	mov	r2, r0
 8004ae4:	693b      	ldr	r3, [r7, #16]
 8004ae6:	1ad3      	subs	r3, r2, r3
 8004ae8:	2b02      	cmp	r3, #2
 8004aea:	d901      	bls.n	8004af0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8004aec:	2303      	movs	r3, #3
 8004aee:	e067      	b.n	8004bc0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004af0:	4b35      	ldr	r3, [pc, #212]	; (8004bc8 <HAL_RCC_OscConfig+0x4f4>)
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	d1f0      	bne.n	8004ade <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	6a1b      	ldr	r3, [r3, #32]
 8004b00:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004b04:	d108      	bne.n	8004b18 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8004b06:	4b30      	ldr	r3, [pc, #192]	; (8004bc8 <HAL_RCC_OscConfig+0x4f4>)
 8004b08:	685b      	ldr	r3, [r3, #4]
 8004b0a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	689b      	ldr	r3, [r3, #8]
 8004b12:	492d      	ldr	r1, [pc, #180]	; (8004bc8 <HAL_RCC_OscConfig+0x4f4>)
 8004b14:	4313      	orrs	r3, r2
 8004b16:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004b18:	4b2b      	ldr	r3, [pc, #172]	; (8004bc8 <HAL_RCC_OscConfig+0x4f4>)
 8004b1a:	685b      	ldr	r3, [r3, #4]
 8004b1c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	6a19      	ldr	r1, [r3, #32]
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b28:	430b      	orrs	r3, r1
 8004b2a:	4927      	ldr	r1, [pc, #156]	; (8004bc8 <HAL_RCC_OscConfig+0x4f4>)
 8004b2c:	4313      	orrs	r3, r2
 8004b2e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004b30:	4b27      	ldr	r3, [pc, #156]	; (8004bd0 <HAL_RCC_OscConfig+0x4fc>)
 8004b32:	2201      	movs	r2, #1
 8004b34:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b36:	f7fe f919 	bl	8002d6c <HAL_GetTick>
 8004b3a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004b3c:	e008      	b.n	8004b50 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004b3e:	f7fe f915 	bl	8002d6c <HAL_GetTick>
 8004b42:	4602      	mov	r2, r0
 8004b44:	693b      	ldr	r3, [r7, #16]
 8004b46:	1ad3      	subs	r3, r2, r3
 8004b48:	2b02      	cmp	r3, #2
 8004b4a:	d901      	bls.n	8004b50 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8004b4c:	2303      	movs	r3, #3
 8004b4e:	e037      	b.n	8004bc0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004b50:	4b1d      	ldr	r3, [pc, #116]	; (8004bc8 <HAL_RCC_OscConfig+0x4f4>)
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d0f0      	beq.n	8004b3e <HAL_RCC_OscConfig+0x46a>
 8004b5c:	e02f      	b.n	8004bbe <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004b5e:	4b1c      	ldr	r3, [pc, #112]	; (8004bd0 <HAL_RCC_OscConfig+0x4fc>)
 8004b60:	2200      	movs	r2, #0
 8004b62:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b64:	f7fe f902 	bl	8002d6c <HAL_GetTick>
 8004b68:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004b6a:	e008      	b.n	8004b7e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004b6c:	f7fe f8fe 	bl	8002d6c <HAL_GetTick>
 8004b70:	4602      	mov	r2, r0
 8004b72:	693b      	ldr	r3, [r7, #16]
 8004b74:	1ad3      	subs	r3, r2, r3
 8004b76:	2b02      	cmp	r3, #2
 8004b78:	d901      	bls.n	8004b7e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8004b7a:	2303      	movs	r3, #3
 8004b7c:	e020      	b.n	8004bc0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004b7e:	4b12      	ldr	r3, [pc, #72]	; (8004bc8 <HAL_RCC_OscConfig+0x4f4>)
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d1f0      	bne.n	8004b6c <HAL_RCC_OscConfig+0x498>
 8004b8a:	e018      	b.n	8004bbe <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	69db      	ldr	r3, [r3, #28]
 8004b90:	2b01      	cmp	r3, #1
 8004b92:	d101      	bne.n	8004b98 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8004b94:	2301      	movs	r3, #1
 8004b96:	e013      	b.n	8004bc0 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004b98:	4b0b      	ldr	r3, [pc, #44]	; (8004bc8 <HAL_RCC_OscConfig+0x4f4>)
 8004b9a:	685b      	ldr	r3, [r3, #4]
 8004b9c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	6a1b      	ldr	r3, [r3, #32]
 8004ba8:	429a      	cmp	r2, r3
 8004baa:	d106      	bne.n	8004bba <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004bb6:	429a      	cmp	r2, r3
 8004bb8:	d001      	beq.n	8004bbe <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8004bba:	2301      	movs	r3, #1
 8004bbc:	e000      	b.n	8004bc0 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8004bbe:	2300      	movs	r3, #0
}
 8004bc0:	4618      	mov	r0, r3
 8004bc2:	3718      	adds	r7, #24
 8004bc4:	46bd      	mov	sp, r7
 8004bc6:	bd80      	pop	{r7, pc}
 8004bc8:	40021000 	.word	0x40021000
 8004bcc:	40007000 	.word	0x40007000
 8004bd0:	42420060 	.word	0x42420060

08004bd4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004bd4:	b580      	push	{r7, lr}
 8004bd6:	b084      	sub	sp, #16
 8004bd8:	af00      	add	r7, sp, #0
 8004bda:	6078      	str	r0, [r7, #4]
 8004bdc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d101      	bne.n	8004be8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004be4:	2301      	movs	r3, #1
 8004be6:	e0d0      	b.n	8004d8a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004be8:	4b6a      	ldr	r3, [pc, #424]	; (8004d94 <HAL_RCC_ClockConfig+0x1c0>)
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	f003 0307 	and.w	r3, r3, #7
 8004bf0:	683a      	ldr	r2, [r7, #0]
 8004bf2:	429a      	cmp	r2, r3
 8004bf4:	d910      	bls.n	8004c18 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004bf6:	4b67      	ldr	r3, [pc, #412]	; (8004d94 <HAL_RCC_ClockConfig+0x1c0>)
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	f023 0207 	bic.w	r2, r3, #7
 8004bfe:	4965      	ldr	r1, [pc, #404]	; (8004d94 <HAL_RCC_ClockConfig+0x1c0>)
 8004c00:	683b      	ldr	r3, [r7, #0]
 8004c02:	4313      	orrs	r3, r2
 8004c04:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004c06:	4b63      	ldr	r3, [pc, #396]	; (8004d94 <HAL_RCC_ClockConfig+0x1c0>)
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	f003 0307 	and.w	r3, r3, #7
 8004c0e:	683a      	ldr	r2, [r7, #0]
 8004c10:	429a      	cmp	r2, r3
 8004c12:	d001      	beq.n	8004c18 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8004c14:	2301      	movs	r3, #1
 8004c16:	e0b8      	b.n	8004d8a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	f003 0302 	and.w	r3, r3, #2
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d020      	beq.n	8004c66 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	f003 0304 	and.w	r3, r3, #4
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	d005      	beq.n	8004c3c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004c30:	4b59      	ldr	r3, [pc, #356]	; (8004d98 <HAL_RCC_ClockConfig+0x1c4>)
 8004c32:	685b      	ldr	r3, [r3, #4]
 8004c34:	4a58      	ldr	r2, [pc, #352]	; (8004d98 <HAL_RCC_ClockConfig+0x1c4>)
 8004c36:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8004c3a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	f003 0308 	and.w	r3, r3, #8
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	d005      	beq.n	8004c54 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004c48:	4b53      	ldr	r3, [pc, #332]	; (8004d98 <HAL_RCC_ClockConfig+0x1c4>)
 8004c4a:	685b      	ldr	r3, [r3, #4]
 8004c4c:	4a52      	ldr	r2, [pc, #328]	; (8004d98 <HAL_RCC_ClockConfig+0x1c4>)
 8004c4e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8004c52:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004c54:	4b50      	ldr	r3, [pc, #320]	; (8004d98 <HAL_RCC_ClockConfig+0x1c4>)
 8004c56:	685b      	ldr	r3, [r3, #4]
 8004c58:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	689b      	ldr	r3, [r3, #8]
 8004c60:	494d      	ldr	r1, [pc, #308]	; (8004d98 <HAL_RCC_ClockConfig+0x1c4>)
 8004c62:	4313      	orrs	r3, r2
 8004c64:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	f003 0301 	and.w	r3, r3, #1
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d040      	beq.n	8004cf4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	685b      	ldr	r3, [r3, #4]
 8004c76:	2b01      	cmp	r3, #1
 8004c78:	d107      	bne.n	8004c8a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004c7a:	4b47      	ldr	r3, [pc, #284]	; (8004d98 <HAL_RCC_ClockConfig+0x1c4>)
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d115      	bne.n	8004cb2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004c86:	2301      	movs	r3, #1
 8004c88:	e07f      	b.n	8004d8a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	685b      	ldr	r3, [r3, #4]
 8004c8e:	2b02      	cmp	r3, #2
 8004c90:	d107      	bne.n	8004ca2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004c92:	4b41      	ldr	r3, [pc, #260]	; (8004d98 <HAL_RCC_ClockConfig+0x1c4>)
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d109      	bne.n	8004cb2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004c9e:	2301      	movs	r3, #1
 8004ca0:	e073      	b.n	8004d8a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004ca2:	4b3d      	ldr	r3, [pc, #244]	; (8004d98 <HAL_RCC_ClockConfig+0x1c4>)
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	f003 0302 	and.w	r3, r3, #2
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d101      	bne.n	8004cb2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004cae:	2301      	movs	r3, #1
 8004cb0:	e06b      	b.n	8004d8a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004cb2:	4b39      	ldr	r3, [pc, #228]	; (8004d98 <HAL_RCC_ClockConfig+0x1c4>)
 8004cb4:	685b      	ldr	r3, [r3, #4]
 8004cb6:	f023 0203 	bic.w	r2, r3, #3
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	685b      	ldr	r3, [r3, #4]
 8004cbe:	4936      	ldr	r1, [pc, #216]	; (8004d98 <HAL_RCC_ClockConfig+0x1c4>)
 8004cc0:	4313      	orrs	r3, r2
 8004cc2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004cc4:	f7fe f852 	bl	8002d6c <HAL_GetTick>
 8004cc8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004cca:	e00a      	b.n	8004ce2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004ccc:	f7fe f84e 	bl	8002d6c <HAL_GetTick>
 8004cd0:	4602      	mov	r2, r0
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	1ad3      	subs	r3, r2, r3
 8004cd6:	f241 3288 	movw	r2, #5000	; 0x1388
 8004cda:	4293      	cmp	r3, r2
 8004cdc:	d901      	bls.n	8004ce2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004cde:	2303      	movs	r3, #3
 8004ce0:	e053      	b.n	8004d8a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004ce2:	4b2d      	ldr	r3, [pc, #180]	; (8004d98 <HAL_RCC_ClockConfig+0x1c4>)
 8004ce4:	685b      	ldr	r3, [r3, #4]
 8004ce6:	f003 020c 	and.w	r2, r3, #12
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	685b      	ldr	r3, [r3, #4]
 8004cee:	009b      	lsls	r3, r3, #2
 8004cf0:	429a      	cmp	r2, r3
 8004cf2:	d1eb      	bne.n	8004ccc <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004cf4:	4b27      	ldr	r3, [pc, #156]	; (8004d94 <HAL_RCC_ClockConfig+0x1c0>)
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	f003 0307 	and.w	r3, r3, #7
 8004cfc:	683a      	ldr	r2, [r7, #0]
 8004cfe:	429a      	cmp	r2, r3
 8004d00:	d210      	bcs.n	8004d24 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004d02:	4b24      	ldr	r3, [pc, #144]	; (8004d94 <HAL_RCC_ClockConfig+0x1c0>)
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	f023 0207 	bic.w	r2, r3, #7
 8004d0a:	4922      	ldr	r1, [pc, #136]	; (8004d94 <HAL_RCC_ClockConfig+0x1c0>)
 8004d0c:	683b      	ldr	r3, [r7, #0]
 8004d0e:	4313      	orrs	r3, r2
 8004d10:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004d12:	4b20      	ldr	r3, [pc, #128]	; (8004d94 <HAL_RCC_ClockConfig+0x1c0>)
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	f003 0307 	and.w	r3, r3, #7
 8004d1a:	683a      	ldr	r2, [r7, #0]
 8004d1c:	429a      	cmp	r2, r3
 8004d1e:	d001      	beq.n	8004d24 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8004d20:	2301      	movs	r3, #1
 8004d22:	e032      	b.n	8004d8a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	f003 0304 	and.w	r3, r3, #4
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d008      	beq.n	8004d42 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004d30:	4b19      	ldr	r3, [pc, #100]	; (8004d98 <HAL_RCC_ClockConfig+0x1c4>)
 8004d32:	685b      	ldr	r3, [r3, #4]
 8004d34:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	68db      	ldr	r3, [r3, #12]
 8004d3c:	4916      	ldr	r1, [pc, #88]	; (8004d98 <HAL_RCC_ClockConfig+0x1c4>)
 8004d3e:	4313      	orrs	r3, r2
 8004d40:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	f003 0308 	and.w	r3, r3, #8
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d009      	beq.n	8004d62 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004d4e:	4b12      	ldr	r3, [pc, #72]	; (8004d98 <HAL_RCC_ClockConfig+0x1c4>)
 8004d50:	685b      	ldr	r3, [r3, #4]
 8004d52:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	691b      	ldr	r3, [r3, #16]
 8004d5a:	00db      	lsls	r3, r3, #3
 8004d5c:	490e      	ldr	r1, [pc, #56]	; (8004d98 <HAL_RCC_ClockConfig+0x1c4>)
 8004d5e:	4313      	orrs	r3, r2
 8004d60:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004d62:	f000 f821 	bl	8004da8 <HAL_RCC_GetSysClockFreq>
 8004d66:	4601      	mov	r1, r0
 8004d68:	4b0b      	ldr	r3, [pc, #44]	; (8004d98 <HAL_RCC_ClockConfig+0x1c4>)
 8004d6a:	685b      	ldr	r3, [r3, #4]
 8004d6c:	091b      	lsrs	r3, r3, #4
 8004d6e:	f003 030f 	and.w	r3, r3, #15
 8004d72:	4a0a      	ldr	r2, [pc, #40]	; (8004d9c <HAL_RCC_ClockConfig+0x1c8>)
 8004d74:	5cd3      	ldrb	r3, [r2, r3]
 8004d76:	fa21 f303 	lsr.w	r3, r1, r3
 8004d7a:	4a09      	ldr	r2, [pc, #36]	; (8004da0 <HAL_RCC_ClockConfig+0x1cc>)
 8004d7c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004d7e:	4b09      	ldr	r3, [pc, #36]	; (8004da4 <HAL_RCC_ClockConfig+0x1d0>)
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	4618      	mov	r0, r3
 8004d84:	f7fd ffb0 	bl	8002ce8 <HAL_InitTick>

  return HAL_OK;
 8004d88:	2300      	movs	r3, #0
}
 8004d8a:	4618      	mov	r0, r3
 8004d8c:	3710      	adds	r7, #16
 8004d8e:	46bd      	mov	sp, r7
 8004d90:	bd80      	pop	{r7, pc}
 8004d92:	bf00      	nop
 8004d94:	40022000 	.word	0x40022000
 8004d98:	40021000 	.word	0x40021000
 8004d9c:	080097f4 	.word	0x080097f4
 8004da0:	200000a0 	.word	0x200000a0
 8004da4:	200000a4 	.word	0x200000a4

08004da8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004da8:	b490      	push	{r4, r7}
 8004daa:	b08a      	sub	sp, #40	; 0x28
 8004dac:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8004dae:	4b2a      	ldr	r3, [pc, #168]	; (8004e58 <HAL_RCC_GetSysClockFreq+0xb0>)
 8004db0:	1d3c      	adds	r4, r7, #4
 8004db2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004db4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8004db8:	4b28      	ldr	r3, [pc, #160]	; (8004e5c <HAL_RCC_GetSysClockFreq+0xb4>)
 8004dba:	881b      	ldrh	r3, [r3, #0]
 8004dbc:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004dbe:	2300      	movs	r3, #0
 8004dc0:	61fb      	str	r3, [r7, #28]
 8004dc2:	2300      	movs	r3, #0
 8004dc4:	61bb      	str	r3, [r7, #24]
 8004dc6:	2300      	movs	r3, #0
 8004dc8:	627b      	str	r3, [r7, #36]	; 0x24
 8004dca:	2300      	movs	r3, #0
 8004dcc:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8004dce:	2300      	movs	r3, #0
 8004dd0:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8004dd2:	4b23      	ldr	r3, [pc, #140]	; (8004e60 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004dd4:	685b      	ldr	r3, [r3, #4]
 8004dd6:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004dd8:	69fb      	ldr	r3, [r7, #28]
 8004dda:	f003 030c 	and.w	r3, r3, #12
 8004dde:	2b04      	cmp	r3, #4
 8004de0:	d002      	beq.n	8004de8 <HAL_RCC_GetSysClockFreq+0x40>
 8004de2:	2b08      	cmp	r3, #8
 8004de4:	d003      	beq.n	8004dee <HAL_RCC_GetSysClockFreq+0x46>
 8004de6:	e02d      	b.n	8004e44 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004de8:	4b1e      	ldr	r3, [pc, #120]	; (8004e64 <HAL_RCC_GetSysClockFreq+0xbc>)
 8004dea:	623b      	str	r3, [r7, #32]
      break;
 8004dec:	e02d      	b.n	8004e4a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8004dee:	69fb      	ldr	r3, [r7, #28]
 8004df0:	0c9b      	lsrs	r3, r3, #18
 8004df2:	f003 030f 	and.w	r3, r3, #15
 8004df6:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8004dfa:	4413      	add	r3, r2
 8004dfc:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8004e00:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004e02:	69fb      	ldr	r3, [r7, #28]
 8004e04:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d013      	beq.n	8004e34 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004e0c:	4b14      	ldr	r3, [pc, #80]	; (8004e60 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004e0e:	685b      	ldr	r3, [r3, #4]
 8004e10:	0c5b      	lsrs	r3, r3, #17
 8004e12:	f003 0301 	and.w	r3, r3, #1
 8004e16:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8004e1a:	4413      	add	r3, r2
 8004e1c:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8004e20:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8004e22:	697b      	ldr	r3, [r7, #20]
 8004e24:	4a0f      	ldr	r2, [pc, #60]	; (8004e64 <HAL_RCC_GetSysClockFreq+0xbc>)
 8004e26:	fb02 f203 	mul.w	r2, r2, r3
 8004e2a:	69bb      	ldr	r3, [r7, #24]
 8004e2c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e30:	627b      	str	r3, [r7, #36]	; 0x24
 8004e32:	e004      	b.n	8004e3e <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004e34:	697b      	ldr	r3, [r7, #20]
 8004e36:	4a0c      	ldr	r2, [pc, #48]	; (8004e68 <HAL_RCC_GetSysClockFreq+0xc0>)
 8004e38:	fb02 f303 	mul.w	r3, r2, r3
 8004e3c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8004e3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e40:	623b      	str	r3, [r7, #32]
      break;
 8004e42:	e002      	b.n	8004e4a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004e44:	4b07      	ldr	r3, [pc, #28]	; (8004e64 <HAL_RCC_GetSysClockFreq+0xbc>)
 8004e46:	623b      	str	r3, [r7, #32]
      break;
 8004e48:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004e4a:	6a3b      	ldr	r3, [r7, #32]
}
 8004e4c:	4618      	mov	r0, r3
 8004e4e:	3728      	adds	r7, #40	; 0x28
 8004e50:	46bd      	mov	sp, r7
 8004e52:	bc90      	pop	{r4, r7}
 8004e54:	4770      	bx	lr
 8004e56:	bf00      	nop
 8004e58:	08007738 	.word	0x08007738
 8004e5c:	08007748 	.word	0x08007748
 8004e60:	40021000 	.word	0x40021000
 8004e64:	007a1200 	.word	0x007a1200
 8004e68:	003d0900 	.word	0x003d0900

08004e6c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004e6c:	b480      	push	{r7}
 8004e6e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004e70:	4b02      	ldr	r3, [pc, #8]	; (8004e7c <HAL_RCC_GetHCLKFreq+0x10>)
 8004e72:	681b      	ldr	r3, [r3, #0]
}
 8004e74:	4618      	mov	r0, r3
 8004e76:	46bd      	mov	sp, r7
 8004e78:	bc80      	pop	{r7}
 8004e7a:	4770      	bx	lr
 8004e7c:	200000a0 	.word	0x200000a0

08004e80 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004e80:	b580      	push	{r7, lr}
 8004e82:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004e84:	f7ff fff2 	bl	8004e6c <HAL_RCC_GetHCLKFreq>
 8004e88:	4601      	mov	r1, r0
 8004e8a:	4b05      	ldr	r3, [pc, #20]	; (8004ea0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004e8c:	685b      	ldr	r3, [r3, #4]
 8004e8e:	0a1b      	lsrs	r3, r3, #8
 8004e90:	f003 0307 	and.w	r3, r3, #7
 8004e94:	4a03      	ldr	r2, [pc, #12]	; (8004ea4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004e96:	5cd3      	ldrb	r3, [r2, r3]
 8004e98:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004e9c:	4618      	mov	r0, r3
 8004e9e:	bd80      	pop	{r7, pc}
 8004ea0:	40021000 	.word	0x40021000
 8004ea4:	08009804 	.word	0x08009804

08004ea8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8004ea8:	b480      	push	{r7}
 8004eaa:	b085      	sub	sp, #20
 8004eac:	af00      	add	r7, sp, #0
 8004eae:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8004eb0:	4b0a      	ldr	r3, [pc, #40]	; (8004edc <RCC_Delay+0x34>)
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	4a0a      	ldr	r2, [pc, #40]	; (8004ee0 <RCC_Delay+0x38>)
 8004eb6:	fba2 2303 	umull	r2, r3, r2, r3
 8004eba:	0a5b      	lsrs	r3, r3, #9
 8004ebc:	687a      	ldr	r2, [r7, #4]
 8004ebe:	fb02 f303 	mul.w	r3, r2, r3
 8004ec2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8004ec4:	bf00      	nop
  }
  while (Delay --);
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	1e5a      	subs	r2, r3, #1
 8004eca:	60fa      	str	r2, [r7, #12]
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	d1f9      	bne.n	8004ec4 <RCC_Delay+0x1c>
}
 8004ed0:	bf00      	nop
 8004ed2:	3714      	adds	r7, #20
 8004ed4:	46bd      	mov	sp, r7
 8004ed6:	bc80      	pop	{r7}
 8004ed8:	4770      	bx	lr
 8004eda:	bf00      	nop
 8004edc:	200000a0 	.word	0x200000a0
 8004ee0:	10624dd3 	.word	0x10624dd3

08004ee4 <__errno>:
 8004ee4:	4b01      	ldr	r3, [pc, #4]	; (8004eec <__errno+0x8>)
 8004ee6:	6818      	ldr	r0, [r3, #0]
 8004ee8:	4770      	bx	lr
 8004eea:	bf00      	nop
 8004eec:	200000ac 	.word	0x200000ac

08004ef0 <__libc_init_array>:
 8004ef0:	b570      	push	{r4, r5, r6, lr}
 8004ef2:	2500      	movs	r5, #0
 8004ef4:	4e0c      	ldr	r6, [pc, #48]	; (8004f28 <__libc_init_array+0x38>)
 8004ef6:	4c0d      	ldr	r4, [pc, #52]	; (8004f2c <__libc_init_array+0x3c>)
 8004ef8:	1ba4      	subs	r4, r4, r6
 8004efa:	10a4      	asrs	r4, r4, #2
 8004efc:	42a5      	cmp	r5, r4
 8004efe:	d109      	bne.n	8004f14 <__libc_init_array+0x24>
 8004f00:	f002 fc06 	bl	8007710 <_init>
 8004f04:	2500      	movs	r5, #0
 8004f06:	4e0a      	ldr	r6, [pc, #40]	; (8004f30 <__libc_init_array+0x40>)
 8004f08:	4c0a      	ldr	r4, [pc, #40]	; (8004f34 <__libc_init_array+0x44>)
 8004f0a:	1ba4      	subs	r4, r4, r6
 8004f0c:	10a4      	asrs	r4, r4, #2
 8004f0e:	42a5      	cmp	r5, r4
 8004f10:	d105      	bne.n	8004f1e <__libc_init_array+0x2e>
 8004f12:	bd70      	pop	{r4, r5, r6, pc}
 8004f14:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004f18:	4798      	blx	r3
 8004f1a:	3501      	adds	r5, #1
 8004f1c:	e7ee      	b.n	8004efc <__libc_init_array+0xc>
 8004f1e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004f22:	4798      	blx	r3
 8004f24:	3501      	adds	r5, #1
 8004f26:	e7f2      	b.n	8004f0e <__libc_init_array+0x1e>
 8004f28:	08009ab0 	.word	0x08009ab0
 8004f2c:	08009ab0 	.word	0x08009ab0
 8004f30:	08009ab0 	.word	0x08009ab0
 8004f34:	08009ab4 	.word	0x08009ab4

08004f38 <memset>:
 8004f38:	4603      	mov	r3, r0
 8004f3a:	4402      	add	r2, r0
 8004f3c:	4293      	cmp	r3, r2
 8004f3e:	d100      	bne.n	8004f42 <memset+0xa>
 8004f40:	4770      	bx	lr
 8004f42:	f803 1b01 	strb.w	r1, [r3], #1
 8004f46:	e7f9      	b.n	8004f3c <memset+0x4>

08004f48 <__cvt>:
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004f4e:	461e      	mov	r6, r3
 8004f50:	bfbb      	ittet	lt
 8004f52:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8004f56:	461e      	movlt	r6, r3
 8004f58:	2300      	movge	r3, #0
 8004f5a:	232d      	movlt	r3, #45	; 0x2d
 8004f5c:	b088      	sub	sp, #32
 8004f5e:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8004f60:	e9dd 1a12 	ldrd	r1, sl, [sp, #72]	; 0x48
 8004f64:	f027 0720 	bic.w	r7, r7, #32
 8004f68:	2f46      	cmp	r7, #70	; 0x46
 8004f6a:	4614      	mov	r4, r2
 8004f6c:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8004f6e:	700b      	strb	r3, [r1, #0]
 8004f70:	d004      	beq.n	8004f7c <__cvt+0x34>
 8004f72:	2f45      	cmp	r7, #69	; 0x45
 8004f74:	d100      	bne.n	8004f78 <__cvt+0x30>
 8004f76:	3501      	adds	r5, #1
 8004f78:	2302      	movs	r3, #2
 8004f7a:	e000      	b.n	8004f7e <__cvt+0x36>
 8004f7c:	2303      	movs	r3, #3
 8004f7e:	aa07      	add	r2, sp, #28
 8004f80:	9204      	str	r2, [sp, #16]
 8004f82:	aa06      	add	r2, sp, #24
 8004f84:	e9cd a202 	strd	sl, r2, [sp, #8]
 8004f88:	e9cd 3500 	strd	r3, r5, [sp]
 8004f8c:	4622      	mov	r2, r4
 8004f8e:	4633      	mov	r3, r6
 8004f90:	f000 fcea 	bl	8005968 <_dtoa_r>
 8004f94:	2f47      	cmp	r7, #71	; 0x47
 8004f96:	4680      	mov	r8, r0
 8004f98:	d102      	bne.n	8004fa0 <__cvt+0x58>
 8004f9a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8004f9c:	07db      	lsls	r3, r3, #31
 8004f9e:	d526      	bpl.n	8004fee <__cvt+0xa6>
 8004fa0:	2f46      	cmp	r7, #70	; 0x46
 8004fa2:	eb08 0905 	add.w	r9, r8, r5
 8004fa6:	d111      	bne.n	8004fcc <__cvt+0x84>
 8004fa8:	f898 3000 	ldrb.w	r3, [r8]
 8004fac:	2b30      	cmp	r3, #48	; 0x30
 8004fae:	d10a      	bne.n	8004fc6 <__cvt+0x7e>
 8004fb0:	2200      	movs	r2, #0
 8004fb2:	2300      	movs	r3, #0
 8004fb4:	4620      	mov	r0, r4
 8004fb6:	4631      	mov	r1, r6
 8004fb8:	f7fb fcf6 	bl	80009a8 <__aeabi_dcmpeq>
 8004fbc:	b918      	cbnz	r0, 8004fc6 <__cvt+0x7e>
 8004fbe:	f1c5 0501 	rsb	r5, r5, #1
 8004fc2:	f8ca 5000 	str.w	r5, [sl]
 8004fc6:	f8da 3000 	ldr.w	r3, [sl]
 8004fca:	4499      	add	r9, r3
 8004fcc:	2200      	movs	r2, #0
 8004fce:	2300      	movs	r3, #0
 8004fd0:	4620      	mov	r0, r4
 8004fd2:	4631      	mov	r1, r6
 8004fd4:	f7fb fce8 	bl	80009a8 <__aeabi_dcmpeq>
 8004fd8:	b938      	cbnz	r0, 8004fea <__cvt+0xa2>
 8004fda:	2230      	movs	r2, #48	; 0x30
 8004fdc:	9b07      	ldr	r3, [sp, #28]
 8004fde:	454b      	cmp	r3, r9
 8004fe0:	d205      	bcs.n	8004fee <__cvt+0xa6>
 8004fe2:	1c59      	adds	r1, r3, #1
 8004fe4:	9107      	str	r1, [sp, #28]
 8004fe6:	701a      	strb	r2, [r3, #0]
 8004fe8:	e7f8      	b.n	8004fdc <__cvt+0x94>
 8004fea:	f8cd 901c 	str.w	r9, [sp, #28]
 8004fee:	4640      	mov	r0, r8
 8004ff0:	9b07      	ldr	r3, [sp, #28]
 8004ff2:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8004ff4:	eba3 0308 	sub.w	r3, r3, r8
 8004ff8:	6013      	str	r3, [r2, #0]
 8004ffa:	b008      	add	sp, #32
 8004ffc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08005000 <__exponent>:
 8005000:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005002:	2900      	cmp	r1, #0
 8005004:	bfb4      	ite	lt
 8005006:	232d      	movlt	r3, #45	; 0x2d
 8005008:	232b      	movge	r3, #43	; 0x2b
 800500a:	4604      	mov	r4, r0
 800500c:	bfb8      	it	lt
 800500e:	4249      	neglt	r1, r1
 8005010:	2909      	cmp	r1, #9
 8005012:	f804 2b02 	strb.w	r2, [r4], #2
 8005016:	7043      	strb	r3, [r0, #1]
 8005018:	dd21      	ble.n	800505e <__exponent+0x5e>
 800501a:	f10d 0307 	add.w	r3, sp, #7
 800501e:	461f      	mov	r7, r3
 8005020:	260a      	movs	r6, #10
 8005022:	fb91 f5f6 	sdiv	r5, r1, r6
 8005026:	fb06 1115 	mls	r1, r6, r5, r1
 800502a:	2d09      	cmp	r5, #9
 800502c:	f101 0130 	add.w	r1, r1, #48	; 0x30
 8005030:	f803 1c01 	strb.w	r1, [r3, #-1]
 8005034:	f103 32ff 	add.w	r2, r3, #4294967295
 8005038:	4629      	mov	r1, r5
 800503a:	dc09      	bgt.n	8005050 <__exponent+0x50>
 800503c:	3130      	adds	r1, #48	; 0x30
 800503e:	3b02      	subs	r3, #2
 8005040:	f802 1c01 	strb.w	r1, [r2, #-1]
 8005044:	42bb      	cmp	r3, r7
 8005046:	4622      	mov	r2, r4
 8005048:	d304      	bcc.n	8005054 <__exponent+0x54>
 800504a:	1a10      	subs	r0, r2, r0
 800504c:	b003      	add	sp, #12
 800504e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005050:	4613      	mov	r3, r2
 8005052:	e7e6      	b.n	8005022 <__exponent+0x22>
 8005054:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005058:	f804 2b01 	strb.w	r2, [r4], #1
 800505c:	e7f2      	b.n	8005044 <__exponent+0x44>
 800505e:	2330      	movs	r3, #48	; 0x30
 8005060:	4419      	add	r1, r3
 8005062:	7083      	strb	r3, [r0, #2]
 8005064:	1d02      	adds	r2, r0, #4
 8005066:	70c1      	strb	r1, [r0, #3]
 8005068:	e7ef      	b.n	800504a <__exponent+0x4a>
	...

0800506c <_printf_float>:
 800506c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005070:	b091      	sub	sp, #68	; 0x44
 8005072:	460c      	mov	r4, r1
 8005074:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 8005076:	4693      	mov	fp, r2
 8005078:	461e      	mov	r6, r3
 800507a:	4605      	mov	r5, r0
 800507c:	f001 fa28 	bl	80064d0 <_localeconv_r>
 8005080:	6803      	ldr	r3, [r0, #0]
 8005082:	4618      	mov	r0, r3
 8005084:	9309      	str	r3, [sp, #36]	; 0x24
 8005086:	f7fb f863 	bl	8000150 <strlen>
 800508a:	2300      	movs	r3, #0
 800508c:	930e      	str	r3, [sp, #56]	; 0x38
 800508e:	683b      	ldr	r3, [r7, #0]
 8005090:	900a      	str	r0, [sp, #40]	; 0x28
 8005092:	3307      	adds	r3, #7
 8005094:	f023 0307 	bic.w	r3, r3, #7
 8005098:	f103 0208 	add.w	r2, r3, #8
 800509c:	f894 8018 	ldrb.w	r8, [r4, #24]
 80050a0:	f8d4 a000 	ldr.w	sl, [r4]
 80050a4:	603a      	str	r2, [r7, #0]
 80050a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050aa:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80050ae:	e9d4 7912 	ldrd	r7, r9, [r4, #72]	; 0x48
 80050b2:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80050b6:	930b      	str	r3, [sp, #44]	; 0x2c
 80050b8:	f04f 32ff 	mov.w	r2, #4294967295
 80050bc:	4ba6      	ldr	r3, [pc, #664]	; (8005358 <_printf_float+0x2ec>)
 80050be:	4638      	mov	r0, r7
 80050c0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80050c2:	f7fb fca3 	bl	8000a0c <__aeabi_dcmpun>
 80050c6:	bb68      	cbnz	r0, 8005124 <_printf_float+0xb8>
 80050c8:	f04f 32ff 	mov.w	r2, #4294967295
 80050cc:	4ba2      	ldr	r3, [pc, #648]	; (8005358 <_printf_float+0x2ec>)
 80050ce:	4638      	mov	r0, r7
 80050d0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80050d2:	f7fb fc7d 	bl	80009d0 <__aeabi_dcmple>
 80050d6:	bb28      	cbnz	r0, 8005124 <_printf_float+0xb8>
 80050d8:	2200      	movs	r2, #0
 80050da:	2300      	movs	r3, #0
 80050dc:	4638      	mov	r0, r7
 80050de:	4649      	mov	r1, r9
 80050e0:	f7fb fc6c 	bl	80009bc <__aeabi_dcmplt>
 80050e4:	b110      	cbz	r0, 80050ec <_printf_float+0x80>
 80050e6:	232d      	movs	r3, #45	; 0x2d
 80050e8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80050ec:	4f9b      	ldr	r7, [pc, #620]	; (800535c <_printf_float+0x2f0>)
 80050ee:	4b9c      	ldr	r3, [pc, #624]	; (8005360 <_printf_float+0x2f4>)
 80050f0:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80050f4:	bf98      	it	ls
 80050f6:	461f      	movls	r7, r3
 80050f8:	2303      	movs	r3, #3
 80050fa:	f04f 0900 	mov.w	r9, #0
 80050fe:	6123      	str	r3, [r4, #16]
 8005100:	f02a 0304 	bic.w	r3, sl, #4
 8005104:	6023      	str	r3, [r4, #0]
 8005106:	9600      	str	r6, [sp, #0]
 8005108:	465b      	mov	r3, fp
 800510a:	aa0f      	add	r2, sp, #60	; 0x3c
 800510c:	4621      	mov	r1, r4
 800510e:	4628      	mov	r0, r5
 8005110:	f000 f9e2 	bl	80054d8 <_printf_common>
 8005114:	3001      	adds	r0, #1
 8005116:	f040 8090 	bne.w	800523a <_printf_float+0x1ce>
 800511a:	f04f 30ff 	mov.w	r0, #4294967295
 800511e:	b011      	add	sp, #68	; 0x44
 8005120:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005124:	463a      	mov	r2, r7
 8005126:	464b      	mov	r3, r9
 8005128:	4638      	mov	r0, r7
 800512a:	4649      	mov	r1, r9
 800512c:	f7fb fc6e 	bl	8000a0c <__aeabi_dcmpun>
 8005130:	b110      	cbz	r0, 8005138 <_printf_float+0xcc>
 8005132:	4f8c      	ldr	r7, [pc, #560]	; (8005364 <_printf_float+0x2f8>)
 8005134:	4b8c      	ldr	r3, [pc, #560]	; (8005368 <_printf_float+0x2fc>)
 8005136:	e7db      	b.n	80050f0 <_printf_float+0x84>
 8005138:	6863      	ldr	r3, [r4, #4]
 800513a:	f44a 6280 	orr.w	r2, sl, #1024	; 0x400
 800513e:	1c59      	adds	r1, r3, #1
 8005140:	a80d      	add	r0, sp, #52	; 0x34
 8005142:	a90e      	add	r1, sp, #56	; 0x38
 8005144:	d140      	bne.n	80051c8 <_printf_float+0x15c>
 8005146:	2306      	movs	r3, #6
 8005148:	6063      	str	r3, [r4, #4]
 800514a:	f04f 0c00 	mov.w	ip, #0
 800514e:	f10d 0333 	add.w	r3, sp, #51	; 0x33
 8005152:	e9cd 2301 	strd	r2, r3, [sp, #4]
 8005156:	6863      	ldr	r3, [r4, #4]
 8005158:	6022      	str	r2, [r4, #0]
 800515a:	e9cd 0803 	strd	r0, r8, [sp, #12]
 800515e:	9300      	str	r3, [sp, #0]
 8005160:	463a      	mov	r2, r7
 8005162:	464b      	mov	r3, r9
 8005164:	e9cd 1c05 	strd	r1, ip, [sp, #20]
 8005168:	4628      	mov	r0, r5
 800516a:	f7ff feed 	bl	8004f48 <__cvt>
 800516e:	f008 03df 	and.w	r3, r8, #223	; 0xdf
 8005172:	2b47      	cmp	r3, #71	; 0x47
 8005174:	4607      	mov	r7, r0
 8005176:	d109      	bne.n	800518c <_printf_float+0x120>
 8005178:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800517a:	1cd8      	adds	r0, r3, #3
 800517c:	db02      	blt.n	8005184 <_printf_float+0x118>
 800517e:	6862      	ldr	r2, [r4, #4]
 8005180:	4293      	cmp	r3, r2
 8005182:	dd47      	ble.n	8005214 <_printf_float+0x1a8>
 8005184:	f1a8 0802 	sub.w	r8, r8, #2
 8005188:	fa5f f888 	uxtb.w	r8, r8
 800518c:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
 8005190:	990d      	ldr	r1, [sp, #52]	; 0x34
 8005192:	d824      	bhi.n	80051de <_printf_float+0x172>
 8005194:	3901      	subs	r1, #1
 8005196:	4642      	mov	r2, r8
 8005198:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800519c:	910d      	str	r1, [sp, #52]	; 0x34
 800519e:	f7ff ff2f 	bl	8005000 <__exponent>
 80051a2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80051a4:	4681      	mov	r9, r0
 80051a6:	1813      	adds	r3, r2, r0
 80051a8:	2a01      	cmp	r2, #1
 80051aa:	6123      	str	r3, [r4, #16]
 80051ac:	dc02      	bgt.n	80051b4 <_printf_float+0x148>
 80051ae:	6822      	ldr	r2, [r4, #0]
 80051b0:	07d1      	lsls	r1, r2, #31
 80051b2:	d501      	bpl.n	80051b8 <_printf_float+0x14c>
 80051b4:	3301      	adds	r3, #1
 80051b6:	6123      	str	r3, [r4, #16]
 80051b8:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 80051bc:	2b00      	cmp	r3, #0
 80051be:	d0a2      	beq.n	8005106 <_printf_float+0x9a>
 80051c0:	232d      	movs	r3, #45	; 0x2d
 80051c2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80051c6:	e79e      	b.n	8005106 <_printf_float+0x9a>
 80051c8:	f1b8 0f67 	cmp.w	r8, #103	; 0x67
 80051cc:	f000 816e 	beq.w	80054ac <_printf_float+0x440>
 80051d0:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80051d4:	d1b9      	bne.n	800514a <_printf_float+0xde>
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	d1b7      	bne.n	800514a <_printf_float+0xde>
 80051da:	2301      	movs	r3, #1
 80051dc:	e7b4      	b.n	8005148 <_printf_float+0xdc>
 80051de:	f1b8 0f66 	cmp.w	r8, #102	; 0x66
 80051e2:	d119      	bne.n	8005218 <_printf_float+0x1ac>
 80051e4:	2900      	cmp	r1, #0
 80051e6:	6863      	ldr	r3, [r4, #4]
 80051e8:	dd0c      	ble.n	8005204 <_printf_float+0x198>
 80051ea:	6121      	str	r1, [r4, #16]
 80051ec:	b913      	cbnz	r3, 80051f4 <_printf_float+0x188>
 80051ee:	6822      	ldr	r2, [r4, #0]
 80051f0:	07d2      	lsls	r2, r2, #31
 80051f2:	d502      	bpl.n	80051fa <_printf_float+0x18e>
 80051f4:	3301      	adds	r3, #1
 80051f6:	440b      	add	r3, r1
 80051f8:	6123      	str	r3, [r4, #16]
 80051fa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80051fc:	f04f 0900 	mov.w	r9, #0
 8005200:	65a3      	str	r3, [r4, #88]	; 0x58
 8005202:	e7d9      	b.n	80051b8 <_printf_float+0x14c>
 8005204:	b913      	cbnz	r3, 800520c <_printf_float+0x1a0>
 8005206:	6822      	ldr	r2, [r4, #0]
 8005208:	07d0      	lsls	r0, r2, #31
 800520a:	d501      	bpl.n	8005210 <_printf_float+0x1a4>
 800520c:	3302      	adds	r3, #2
 800520e:	e7f3      	b.n	80051f8 <_printf_float+0x18c>
 8005210:	2301      	movs	r3, #1
 8005212:	e7f1      	b.n	80051f8 <_printf_float+0x18c>
 8005214:	f04f 0867 	mov.w	r8, #103	; 0x67
 8005218:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 800521c:	4293      	cmp	r3, r2
 800521e:	db05      	blt.n	800522c <_printf_float+0x1c0>
 8005220:	6822      	ldr	r2, [r4, #0]
 8005222:	6123      	str	r3, [r4, #16]
 8005224:	07d1      	lsls	r1, r2, #31
 8005226:	d5e8      	bpl.n	80051fa <_printf_float+0x18e>
 8005228:	3301      	adds	r3, #1
 800522a:	e7e5      	b.n	80051f8 <_printf_float+0x18c>
 800522c:	2b00      	cmp	r3, #0
 800522e:	bfcc      	ite	gt
 8005230:	2301      	movgt	r3, #1
 8005232:	f1c3 0302 	rsble	r3, r3, #2
 8005236:	4413      	add	r3, r2
 8005238:	e7de      	b.n	80051f8 <_printf_float+0x18c>
 800523a:	6823      	ldr	r3, [r4, #0]
 800523c:	055a      	lsls	r2, r3, #21
 800523e:	d407      	bmi.n	8005250 <_printf_float+0x1e4>
 8005240:	6923      	ldr	r3, [r4, #16]
 8005242:	463a      	mov	r2, r7
 8005244:	4659      	mov	r1, fp
 8005246:	4628      	mov	r0, r5
 8005248:	47b0      	blx	r6
 800524a:	3001      	adds	r0, #1
 800524c:	d129      	bne.n	80052a2 <_printf_float+0x236>
 800524e:	e764      	b.n	800511a <_printf_float+0xae>
 8005250:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
 8005254:	f240 80d7 	bls.w	8005406 <_printf_float+0x39a>
 8005258:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800525c:	2200      	movs	r2, #0
 800525e:	2300      	movs	r3, #0
 8005260:	f7fb fba2 	bl	80009a8 <__aeabi_dcmpeq>
 8005264:	b388      	cbz	r0, 80052ca <_printf_float+0x25e>
 8005266:	2301      	movs	r3, #1
 8005268:	4a40      	ldr	r2, [pc, #256]	; (800536c <_printf_float+0x300>)
 800526a:	4659      	mov	r1, fp
 800526c:	4628      	mov	r0, r5
 800526e:	47b0      	blx	r6
 8005270:	3001      	adds	r0, #1
 8005272:	f43f af52 	beq.w	800511a <_printf_float+0xae>
 8005276:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800527a:	429a      	cmp	r2, r3
 800527c:	db02      	blt.n	8005284 <_printf_float+0x218>
 800527e:	6823      	ldr	r3, [r4, #0]
 8005280:	07d8      	lsls	r0, r3, #31
 8005282:	d50e      	bpl.n	80052a2 <_printf_float+0x236>
 8005284:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005288:	4659      	mov	r1, fp
 800528a:	4628      	mov	r0, r5
 800528c:	47b0      	blx	r6
 800528e:	3001      	adds	r0, #1
 8005290:	f43f af43 	beq.w	800511a <_printf_float+0xae>
 8005294:	2700      	movs	r7, #0
 8005296:	f104 081a 	add.w	r8, r4, #26
 800529a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800529c:	3b01      	subs	r3, #1
 800529e:	42bb      	cmp	r3, r7
 80052a0:	dc09      	bgt.n	80052b6 <_printf_float+0x24a>
 80052a2:	6823      	ldr	r3, [r4, #0]
 80052a4:	079f      	lsls	r7, r3, #30
 80052a6:	f100 80fd 	bmi.w	80054a4 <_printf_float+0x438>
 80052aa:	68e0      	ldr	r0, [r4, #12]
 80052ac:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80052ae:	4298      	cmp	r0, r3
 80052b0:	bfb8      	it	lt
 80052b2:	4618      	movlt	r0, r3
 80052b4:	e733      	b.n	800511e <_printf_float+0xb2>
 80052b6:	2301      	movs	r3, #1
 80052b8:	4642      	mov	r2, r8
 80052ba:	4659      	mov	r1, fp
 80052bc:	4628      	mov	r0, r5
 80052be:	47b0      	blx	r6
 80052c0:	3001      	adds	r0, #1
 80052c2:	f43f af2a 	beq.w	800511a <_printf_float+0xae>
 80052c6:	3701      	adds	r7, #1
 80052c8:	e7e7      	b.n	800529a <_printf_float+0x22e>
 80052ca:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	dc2b      	bgt.n	8005328 <_printf_float+0x2bc>
 80052d0:	2301      	movs	r3, #1
 80052d2:	4a26      	ldr	r2, [pc, #152]	; (800536c <_printf_float+0x300>)
 80052d4:	4659      	mov	r1, fp
 80052d6:	4628      	mov	r0, r5
 80052d8:	47b0      	blx	r6
 80052da:	3001      	adds	r0, #1
 80052dc:	f43f af1d 	beq.w	800511a <_printf_float+0xae>
 80052e0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80052e2:	b923      	cbnz	r3, 80052ee <_printf_float+0x282>
 80052e4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80052e6:	b913      	cbnz	r3, 80052ee <_printf_float+0x282>
 80052e8:	6823      	ldr	r3, [r4, #0]
 80052ea:	07d9      	lsls	r1, r3, #31
 80052ec:	d5d9      	bpl.n	80052a2 <_printf_float+0x236>
 80052ee:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80052f2:	4659      	mov	r1, fp
 80052f4:	4628      	mov	r0, r5
 80052f6:	47b0      	blx	r6
 80052f8:	3001      	adds	r0, #1
 80052fa:	f43f af0e 	beq.w	800511a <_printf_float+0xae>
 80052fe:	f04f 0800 	mov.w	r8, #0
 8005302:	f104 091a 	add.w	r9, r4, #26
 8005306:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005308:	425b      	negs	r3, r3
 800530a:	4543      	cmp	r3, r8
 800530c:	dc01      	bgt.n	8005312 <_printf_float+0x2a6>
 800530e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005310:	e797      	b.n	8005242 <_printf_float+0x1d6>
 8005312:	2301      	movs	r3, #1
 8005314:	464a      	mov	r2, r9
 8005316:	4659      	mov	r1, fp
 8005318:	4628      	mov	r0, r5
 800531a:	47b0      	blx	r6
 800531c:	3001      	adds	r0, #1
 800531e:	f43f aefc 	beq.w	800511a <_printf_float+0xae>
 8005322:	f108 0801 	add.w	r8, r8, #1
 8005326:	e7ee      	b.n	8005306 <_printf_float+0x29a>
 8005328:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800532a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800532c:	429a      	cmp	r2, r3
 800532e:	bfa8      	it	ge
 8005330:	461a      	movge	r2, r3
 8005332:	2a00      	cmp	r2, #0
 8005334:	4690      	mov	r8, r2
 8005336:	dd07      	ble.n	8005348 <_printf_float+0x2dc>
 8005338:	4613      	mov	r3, r2
 800533a:	4659      	mov	r1, fp
 800533c:	463a      	mov	r2, r7
 800533e:	4628      	mov	r0, r5
 8005340:	47b0      	blx	r6
 8005342:	3001      	adds	r0, #1
 8005344:	f43f aee9 	beq.w	800511a <_printf_float+0xae>
 8005348:	f104 031a 	add.w	r3, r4, #26
 800534c:	f04f 0a00 	mov.w	sl, #0
 8005350:	ea28 78e8 	bic.w	r8, r8, r8, asr #31
 8005354:	930b      	str	r3, [sp, #44]	; 0x2c
 8005356:	e015      	b.n	8005384 <_printf_float+0x318>
 8005358:	7fefffff 	.word	0x7fefffff
 800535c:	08009810 	.word	0x08009810
 8005360:	0800980c 	.word	0x0800980c
 8005364:	08009818 	.word	0x08009818
 8005368:	08009814 	.word	0x08009814
 800536c:	0800981c 	.word	0x0800981c
 8005370:	2301      	movs	r3, #1
 8005372:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8005374:	4659      	mov	r1, fp
 8005376:	4628      	mov	r0, r5
 8005378:	47b0      	blx	r6
 800537a:	3001      	adds	r0, #1
 800537c:	f43f aecd 	beq.w	800511a <_printf_float+0xae>
 8005380:	f10a 0a01 	add.w	sl, sl, #1
 8005384:	f8d4 9058 	ldr.w	r9, [r4, #88]	; 0x58
 8005388:	eba9 0308 	sub.w	r3, r9, r8
 800538c:	4553      	cmp	r3, sl
 800538e:	dcef      	bgt.n	8005370 <_printf_float+0x304>
 8005390:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8005394:	429a      	cmp	r2, r3
 8005396:	444f      	add	r7, r9
 8005398:	db14      	blt.n	80053c4 <_printf_float+0x358>
 800539a:	6823      	ldr	r3, [r4, #0]
 800539c:	07da      	lsls	r2, r3, #31
 800539e:	d411      	bmi.n	80053c4 <_printf_float+0x358>
 80053a0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80053a2:	990d      	ldr	r1, [sp, #52]	; 0x34
 80053a4:	eba3 0209 	sub.w	r2, r3, r9
 80053a8:	eba3 0901 	sub.w	r9, r3, r1
 80053ac:	4591      	cmp	r9, r2
 80053ae:	bfa8      	it	ge
 80053b0:	4691      	movge	r9, r2
 80053b2:	f1b9 0f00 	cmp.w	r9, #0
 80053b6:	dc0d      	bgt.n	80053d4 <_printf_float+0x368>
 80053b8:	2700      	movs	r7, #0
 80053ba:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80053be:	f104 081a 	add.w	r8, r4, #26
 80053c2:	e018      	b.n	80053f6 <_printf_float+0x38a>
 80053c4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80053c8:	4659      	mov	r1, fp
 80053ca:	4628      	mov	r0, r5
 80053cc:	47b0      	blx	r6
 80053ce:	3001      	adds	r0, #1
 80053d0:	d1e6      	bne.n	80053a0 <_printf_float+0x334>
 80053d2:	e6a2      	b.n	800511a <_printf_float+0xae>
 80053d4:	464b      	mov	r3, r9
 80053d6:	463a      	mov	r2, r7
 80053d8:	4659      	mov	r1, fp
 80053da:	4628      	mov	r0, r5
 80053dc:	47b0      	blx	r6
 80053de:	3001      	adds	r0, #1
 80053e0:	d1ea      	bne.n	80053b8 <_printf_float+0x34c>
 80053e2:	e69a      	b.n	800511a <_printf_float+0xae>
 80053e4:	2301      	movs	r3, #1
 80053e6:	4642      	mov	r2, r8
 80053e8:	4659      	mov	r1, fp
 80053ea:	4628      	mov	r0, r5
 80053ec:	47b0      	blx	r6
 80053ee:	3001      	adds	r0, #1
 80053f0:	f43f ae93 	beq.w	800511a <_printf_float+0xae>
 80053f4:	3701      	adds	r7, #1
 80053f6:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80053fa:	1a9b      	subs	r3, r3, r2
 80053fc:	eba3 0309 	sub.w	r3, r3, r9
 8005400:	42bb      	cmp	r3, r7
 8005402:	dcef      	bgt.n	80053e4 <_printf_float+0x378>
 8005404:	e74d      	b.n	80052a2 <_printf_float+0x236>
 8005406:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005408:	2a01      	cmp	r2, #1
 800540a:	dc01      	bgt.n	8005410 <_printf_float+0x3a4>
 800540c:	07db      	lsls	r3, r3, #31
 800540e:	d538      	bpl.n	8005482 <_printf_float+0x416>
 8005410:	2301      	movs	r3, #1
 8005412:	463a      	mov	r2, r7
 8005414:	4659      	mov	r1, fp
 8005416:	4628      	mov	r0, r5
 8005418:	47b0      	blx	r6
 800541a:	3001      	adds	r0, #1
 800541c:	f43f ae7d 	beq.w	800511a <_printf_float+0xae>
 8005420:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005424:	4659      	mov	r1, fp
 8005426:	4628      	mov	r0, r5
 8005428:	47b0      	blx	r6
 800542a:	3001      	adds	r0, #1
 800542c:	f107 0701 	add.w	r7, r7, #1
 8005430:	f43f ae73 	beq.w	800511a <_printf_float+0xae>
 8005434:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005438:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800543a:	2200      	movs	r2, #0
 800543c:	f103 38ff 	add.w	r8, r3, #4294967295
 8005440:	2300      	movs	r3, #0
 8005442:	f7fb fab1 	bl	80009a8 <__aeabi_dcmpeq>
 8005446:	b9c0      	cbnz	r0, 800547a <_printf_float+0x40e>
 8005448:	4643      	mov	r3, r8
 800544a:	463a      	mov	r2, r7
 800544c:	4659      	mov	r1, fp
 800544e:	4628      	mov	r0, r5
 8005450:	47b0      	blx	r6
 8005452:	3001      	adds	r0, #1
 8005454:	d10d      	bne.n	8005472 <_printf_float+0x406>
 8005456:	e660      	b.n	800511a <_printf_float+0xae>
 8005458:	2301      	movs	r3, #1
 800545a:	4642      	mov	r2, r8
 800545c:	4659      	mov	r1, fp
 800545e:	4628      	mov	r0, r5
 8005460:	47b0      	blx	r6
 8005462:	3001      	adds	r0, #1
 8005464:	f43f ae59 	beq.w	800511a <_printf_float+0xae>
 8005468:	3701      	adds	r7, #1
 800546a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800546c:	3b01      	subs	r3, #1
 800546e:	42bb      	cmp	r3, r7
 8005470:	dcf2      	bgt.n	8005458 <_printf_float+0x3ec>
 8005472:	464b      	mov	r3, r9
 8005474:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8005478:	e6e4      	b.n	8005244 <_printf_float+0x1d8>
 800547a:	2700      	movs	r7, #0
 800547c:	f104 081a 	add.w	r8, r4, #26
 8005480:	e7f3      	b.n	800546a <_printf_float+0x3fe>
 8005482:	2301      	movs	r3, #1
 8005484:	e7e1      	b.n	800544a <_printf_float+0x3de>
 8005486:	2301      	movs	r3, #1
 8005488:	4642      	mov	r2, r8
 800548a:	4659      	mov	r1, fp
 800548c:	4628      	mov	r0, r5
 800548e:	47b0      	blx	r6
 8005490:	3001      	adds	r0, #1
 8005492:	f43f ae42 	beq.w	800511a <_printf_float+0xae>
 8005496:	3701      	adds	r7, #1
 8005498:	68e3      	ldr	r3, [r4, #12]
 800549a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800549c:	1a9b      	subs	r3, r3, r2
 800549e:	42bb      	cmp	r3, r7
 80054a0:	dcf1      	bgt.n	8005486 <_printf_float+0x41a>
 80054a2:	e702      	b.n	80052aa <_printf_float+0x23e>
 80054a4:	2700      	movs	r7, #0
 80054a6:	f104 0819 	add.w	r8, r4, #25
 80054aa:	e7f5      	b.n	8005498 <_printf_float+0x42c>
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	f43f ae94 	beq.w	80051da <_printf_float+0x16e>
 80054b2:	f04f 0c00 	mov.w	ip, #0
 80054b6:	e9cd 1c05 	strd	r1, ip, [sp, #20]
 80054ba:	f10d 0133 	add.w	r1, sp, #51	; 0x33
 80054be:	6022      	str	r2, [r4, #0]
 80054c0:	e9cd 0803 	strd	r0, r8, [sp, #12]
 80054c4:	e9cd 2101 	strd	r2, r1, [sp, #4]
 80054c8:	9300      	str	r3, [sp, #0]
 80054ca:	463a      	mov	r2, r7
 80054cc:	464b      	mov	r3, r9
 80054ce:	4628      	mov	r0, r5
 80054d0:	f7ff fd3a 	bl	8004f48 <__cvt>
 80054d4:	4607      	mov	r7, r0
 80054d6:	e64f      	b.n	8005178 <_printf_float+0x10c>

080054d8 <_printf_common>:
 80054d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80054dc:	4691      	mov	r9, r2
 80054de:	461f      	mov	r7, r3
 80054e0:	688a      	ldr	r2, [r1, #8]
 80054e2:	690b      	ldr	r3, [r1, #16]
 80054e4:	4606      	mov	r6, r0
 80054e6:	4293      	cmp	r3, r2
 80054e8:	bfb8      	it	lt
 80054ea:	4613      	movlt	r3, r2
 80054ec:	f8c9 3000 	str.w	r3, [r9]
 80054f0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80054f4:	460c      	mov	r4, r1
 80054f6:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80054fa:	b112      	cbz	r2, 8005502 <_printf_common+0x2a>
 80054fc:	3301      	adds	r3, #1
 80054fe:	f8c9 3000 	str.w	r3, [r9]
 8005502:	6823      	ldr	r3, [r4, #0]
 8005504:	0699      	lsls	r1, r3, #26
 8005506:	bf42      	ittt	mi
 8005508:	f8d9 3000 	ldrmi.w	r3, [r9]
 800550c:	3302      	addmi	r3, #2
 800550e:	f8c9 3000 	strmi.w	r3, [r9]
 8005512:	6825      	ldr	r5, [r4, #0]
 8005514:	f015 0506 	ands.w	r5, r5, #6
 8005518:	d107      	bne.n	800552a <_printf_common+0x52>
 800551a:	f104 0a19 	add.w	sl, r4, #25
 800551e:	68e3      	ldr	r3, [r4, #12]
 8005520:	f8d9 2000 	ldr.w	r2, [r9]
 8005524:	1a9b      	subs	r3, r3, r2
 8005526:	42ab      	cmp	r3, r5
 8005528:	dc29      	bgt.n	800557e <_printf_common+0xa6>
 800552a:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800552e:	6822      	ldr	r2, [r4, #0]
 8005530:	3300      	adds	r3, #0
 8005532:	bf18      	it	ne
 8005534:	2301      	movne	r3, #1
 8005536:	0692      	lsls	r2, r2, #26
 8005538:	d42e      	bmi.n	8005598 <_printf_common+0xc0>
 800553a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800553e:	4639      	mov	r1, r7
 8005540:	4630      	mov	r0, r6
 8005542:	47c0      	blx	r8
 8005544:	3001      	adds	r0, #1
 8005546:	d021      	beq.n	800558c <_printf_common+0xb4>
 8005548:	6823      	ldr	r3, [r4, #0]
 800554a:	68e5      	ldr	r5, [r4, #12]
 800554c:	f003 0306 	and.w	r3, r3, #6
 8005550:	2b04      	cmp	r3, #4
 8005552:	bf18      	it	ne
 8005554:	2500      	movne	r5, #0
 8005556:	f8d9 2000 	ldr.w	r2, [r9]
 800555a:	f04f 0900 	mov.w	r9, #0
 800555e:	bf08      	it	eq
 8005560:	1aad      	subeq	r5, r5, r2
 8005562:	68a3      	ldr	r3, [r4, #8]
 8005564:	6922      	ldr	r2, [r4, #16]
 8005566:	bf08      	it	eq
 8005568:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800556c:	4293      	cmp	r3, r2
 800556e:	bfc4      	itt	gt
 8005570:	1a9b      	subgt	r3, r3, r2
 8005572:	18ed      	addgt	r5, r5, r3
 8005574:	341a      	adds	r4, #26
 8005576:	454d      	cmp	r5, r9
 8005578:	d11a      	bne.n	80055b0 <_printf_common+0xd8>
 800557a:	2000      	movs	r0, #0
 800557c:	e008      	b.n	8005590 <_printf_common+0xb8>
 800557e:	2301      	movs	r3, #1
 8005580:	4652      	mov	r2, sl
 8005582:	4639      	mov	r1, r7
 8005584:	4630      	mov	r0, r6
 8005586:	47c0      	blx	r8
 8005588:	3001      	adds	r0, #1
 800558a:	d103      	bne.n	8005594 <_printf_common+0xbc>
 800558c:	f04f 30ff 	mov.w	r0, #4294967295
 8005590:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005594:	3501      	adds	r5, #1
 8005596:	e7c2      	b.n	800551e <_printf_common+0x46>
 8005598:	2030      	movs	r0, #48	; 0x30
 800559a:	18e1      	adds	r1, r4, r3
 800559c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80055a0:	1c5a      	adds	r2, r3, #1
 80055a2:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80055a6:	4422      	add	r2, r4
 80055a8:	3302      	adds	r3, #2
 80055aa:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80055ae:	e7c4      	b.n	800553a <_printf_common+0x62>
 80055b0:	2301      	movs	r3, #1
 80055b2:	4622      	mov	r2, r4
 80055b4:	4639      	mov	r1, r7
 80055b6:	4630      	mov	r0, r6
 80055b8:	47c0      	blx	r8
 80055ba:	3001      	adds	r0, #1
 80055bc:	d0e6      	beq.n	800558c <_printf_common+0xb4>
 80055be:	f109 0901 	add.w	r9, r9, #1
 80055c2:	e7d8      	b.n	8005576 <_printf_common+0x9e>

080055c4 <_printf_i>:
 80055c4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80055c8:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 80055cc:	460c      	mov	r4, r1
 80055ce:	7e09      	ldrb	r1, [r1, #24]
 80055d0:	b085      	sub	sp, #20
 80055d2:	296e      	cmp	r1, #110	; 0x6e
 80055d4:	4617      	mov	r7, r2
 80055d6:	4606      	mov	r6, r0
 80055d8:	4698      	mov	r8, r3
 80055da:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80055dc:	f000 80b3 	beq.w	8005746 <_printf_i+0x182>
 80055e0:	d822      	bhi.n	8005628 <_printf_i+0x64>
 80055e2:	2963      	cmp	r1, #99	; 0x63
 80055e4:	d036      	beq.n	8005654 <_printf_i+0x90>
 80055e6:	d80a      	bhi.n	80055fe <_printf_i+0x3a>
 80055e8:	2900      	cmp	r1, #0
 80055ea:	f000 80b9 	beq.w	8005760 <_printf_i+0x19c>
 80055ee:	2958      	cmp	r1, #88	; 0x58
 80055f0:	f000 8083 	beq.w	80056fa <_printf_i+0x136>
 80055f4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80055f8:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 80055fc:	e032      	b.n	8005664 <_printf_i+0xa0>
 80055fe:	2964      	cmp	r1, #100	; 0x64
 8005600:	d001      	beq.n	8005606 <_printf_i+0x42>
 8005602:	2969      	cmp	r1, #105	; 0x69
 8005604:	d1f6      	bne.n	80055f4 <_printf_i+0x30>
 8005606:	6820      	ldr	r0, [r4, #0]
 8005608:	6813      	ldr	r3, [r2, #0]
 800560a:	0605      	lsls	r5, r0, #24
 800560c:	f103 0104 	add.w	r1, r3, #4
 8005610:	d52a      	bpl.n	8005668 <_printf_i+0xa4>
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	6011      	str	r1, [r2, #0]
 8005616:	2b00      	cmp	r3, #0
 8005618:	da03      	bge.n	8005622 <_printf_i+0x5e>
 800561a:	222d      	movs	r2, #45	; 0x2d
 800561c:	425b      	negs	r3, r3
 800561e:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8005622:	486f      	ldr	r0, [pc, #444]	; (80057e0 <_printf_i+0x21c>)
 8005624:	220a      	movs	r2, #10
 8005626:	e039      	b.n	800569c <_printf_i+0xd8>
 8005628:	2973      	cmp	r1, #115	; 0x73
 800562a:	f000 809d 	beq.w	8005768 <_printf_i+0x1a4>
 800562e:	d808      	bhi.n	8005642 <_printf_i+0x7e>
 8005630:	296f      	cmp	r1, #111	; 0x6f
 8005632:	d020      	beq.n	8005676 <_printf_i+0xb2>
 8005634:	2970      	cmp	r1, #112	; 0x70
 8005636:	d1dd      	bne.n	80055f4 <_printf_i+0x30>
 8005638:	6823      	ldr	r3, [r4, #0]
 800563a:	f043 0320 	orr.w	r3, r3, #32
 800563e:	6023      	str	r3, [r4, #0]
 8005640:	e003      	b.n	800564a <_printf_i+0x86>
 8005642:	2975      	cmp	r1, #117	; 0x75
 8005644:	d017      	beq.n	8005676 <_printf_i+0xb2>
 8005646:	2978      	cmp	r1, #120	; 0x78
 8005648:	d1d4      	bne.n	80055f4 <_printf_i+0x30>
 800564a:	2378      	movs	r3, #120	; 0x78
 800564c:	4865      	ldr	r0, [pc, #404]	; (80057e4 <_printf_i+0x220>)
 800564e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005652:	e055      	b.n	8005700 <_printf_i+0x13c>
 8005654:	6813      	ldr	r3, [r2, #0]
 8005656:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800565a:	1d19      	adds	r1, r3, #4
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	6011      	str	r1, [r2, #0]
 8005660:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005664:	2301      	movs	r3, #1
 8005666:	e08c      	b.n	8005782 <_printf_i+0x1be>
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	f010 0f40 	tst.w	r0, #64	; 0x40
 800566e:	6011      	str	r1, [r2, #0]
 8005670:	bf18      	it	ne
 8005672:	b21b      	sxthne	r3, r3
 8005674:	e7cf      	b.n	8005616 <_printf_i+0x52>
 8005676:	6813      	ldr	r3, [r2, #0]
 8005678:	6825      	ldr	r5, [r4, #0]
 800567a:	1d18      	adds	r0, r3, #4
 800567c:	6010      	str	r0, [r2, #0]
 800567e:	0628      	lsls	r0, r5, #24
 8005680:	d501      	bpl.n	8005686 <_printf_i+0xc2>
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	e002      	b.n	800568c <_printf_i+0xc8>
 8005686:	0668      	lsls	r0, r5, #25
 8005688:	d5fb      	bpl.n	8005682 <_printf_i+0xbe>
 800568a:	881b      	ldrh	r3, [r3, #0]
 800568c:	296f      	cmp	r1, #111	; 0x6f
 800568e:	bf14      	ite	ne
 8005690:	220a      	movne	r2, #10
 8005692:	2208      	moveq	r2, #8
 8005694:	4852      	ldr	r0, [pc, #328]	; (80057e0 <_printf_i+0x21c>)
 8005696:	2100      	movs	r1, #0
 8005698:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800569c:	6865      	ldr	r5, [r4, #4]
 800569e:	2d00      	cmp	r5, #0
 80056a0:	60a5      	str	r5, [r4, #8]
 80056a2:	f2c0 8095 	blt.w	80057d0 <_printf_i+0x20c>
 80056a6:	6821      	ldr	r1, [r4, #0]
 80056a8:	f021 0104 	bic.w	r1, r1, #4
 80056ac:	6021      	str	r1, [r4, #0]
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	d13d      	bne.n	800572e <_printf_i+0x16a>
 80056b2:	2d00      	cmp	r5, #0
 80056b4:	f040 808e 	bne.w	80057d4 <_printf_i+0x210>
 80056b8:	4665      	mov	r5, ip
 80056ba:	2a08      	cmp	r2, #8
 80056bc:	d10b      	bne.n	80056d6 <_printf_i+0x112>
 80056be:	6823      	ldr	r3, [r4, #0]
 80056c0:	07db      	lsls	r3, r3, #31
 80056c2:	d508      	bpl.n	80056d6 <_printf_i+0x112>
 80056c4:	6923      	ldr	r3, [r4, #16]
 80056c6:	6862      	ldr	r2, [r4, #4]
 80056c8:	429a      	cmp	r2, r3
 80056ca:	bfde      	ittt	le
 80056cc:	2330      	movle	r3, #48	; 0x30
 80056ce:	f805 3c01 	strble.w	r3, [r5, #-1]
 80056d2:	f105 35ff 	addle.w	r5, r5, #4294967295
 80056d6:	ebac 0305 	sub.w	r3, ip, r5
 80056da:	6123      	str	r3, [r4, #16]
 80056dc:	f8cd 8000 	str.w	r8, [sp]
 80056e0:	463b      	mov	r3, r7
 80056e2:	aa03      	add	r2, sp, #12
 80056e4:	4621      	mov	r1, r4
 80056e6:	4630      	mov	r0, r6
 80056e8:	f7ff fef6 	bl	80054d8 <_printf_common>
 80056ec:	3001      	adds	r0, #1
 80056ee:	d14d      	bne.n	800578c <_printf_i+0x1c8>
 80056f0:	f04f 30ff 	mov.w	r0, #4294967295
 80056f4:	b005      	add	sp, #20
 80056f6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80056fa:	4839      	ldr	r0, [pc, #228]	; (80057e0 <_printf_i+0x21c>)
 80056fc:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8005700:	6813      	ldr	r3, [r2, #0]
 8005702:	6821      	ldr	r1, [r4, #0]
 8005704:	1d1d      	adds	r5, r3, #4
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	6015      	str	r5, [r2, #0]
 800570a:	060a      	lsls	r2, r1, #24
 800570c:	d50b      	bpl.n	8005726 <_printf_i+0x162>
 800570e:	07ca      	lsls	r2, r1, #31
 8005710:	bf44      	itt	mi
 8005712:	f041 0120 	orrmi.w	r1, r1, #32
 8005716:	6021      	strmi	r1, [r4, #0]
 8005718:	b91b      	cbnz	r3, 8005722 <_printf_i+0x15e>
 800571a:	6822      	ldr	r2, [r4, #0]
 800571c:	f022 0220 	bic.w	r2, r2, #32
 8005720:	6022      	str	r2, [r4, #0]
 8005722:	2210      	movs	r2, #16
 8005724:	e7b7      	b.n	8005696 <_printf_i+0xd2>
 8005726:	064d      	lsls	r5, r1, #25
 8005728:	bf48      	it	mi
 800572a:	b29b      	uxthmi	r3, r3
 800572c:	e7ef      	b.n	800570e <_printf_i+0x14a>
 800572e:	4665      	mov	r5, ip
 8005730:	fbb3 f1f2 	udiv	r1, r3, r2
 8005734:	fb02 3311 	mls	r3, r2, r1, r3
 8005738:	5cc3      	ldrb	r3, [r0, r3]
 800573a:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800573e:	460b      	mov	r3, r1
 8005740:	2900      	cmp	r1, #0
 8005742:	d1f5      	bne.n	8005730 <_printf_i+0x16c>
 8005744:	e7b9      	b.n	80056ba <_printf_i+0xf6>
 8005746:	6813      	ldr	r3, [r2, #0]
 8005748:	6825      	ldr	r5, [r4, #0]
 800574a:	1d18      	adds	r0, r3, #4
 800574c:	6961      	ldr	r1, [r4, #20]
 800574e:	6010      	str	r0, [r2, #0]
 8005750:	0628      	lsls	r0, r5, #24
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	d501      	bpl.n	800575a <_printf_i+0x196>
 8005756:	6019      	str	r1, [r3, #0]
 8005758:	e002      	b.n	8005760 <_printf_i+0x19c>
 800575a:	066a      	lsls	r2, r5, #25
 800575c:	d5fb      	bpl.n	8005756 <_printf_i+0x192>
 800575e:	8019      	strh	r1, [r3, #0]
 8005760:	2300      	movs	r3, #0
 8005762:	4665      	mov	r5, ip
 8005764:	6123      	str	r3, [r4, #16]
 8005766:	e7b9      	b.n	80056dc <_printf_i+0x118>
 8005768:	6813      	ldr	r3, [r2, #0]
 800576a:	1d19      	adds	r1, r3, #4
 800576c:	6011      	str	r1, [r2, #0]
 800576e:	681d      	ldr	r5, [r3, #0]
 8005770:	6862      	ldr	r2, [r4, #4]
 8005772:	2100      	movs	r1, #0
 8005774:	4628      	mov	r0, r5
 8005776:	f000 fec1 	bl	80064fc <memchr>
 800577a:	b108      	cbz	r0, 8005780 <_printf_i+0x1bc>
 800577c:	1b40      	subs	r0, r0, r5
 800577e:	6060      	str	r0, [r4, #4]
 8005780:	6863      	ldr	r3, [r4, #4]
 8005782:	6123      	str	r3, [r4, #16]
 8005784:	2300      	movs	r3, #0
 8005786:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800578a:	e7a7      	b.n	80056dc <_printf_i+0x118>
 800578c:	6923      	ldr	r3, [r4, #16]
 800578e:	462a      	mov	r2, r5
 8005790:	4639      	mov	r1, r7
 8005792:	4630      	mov	r0, r6
 8005794:	47c0      	blx	r8
 8005796:	3001      	adds	r0, #1
 8005798:	d0aa      	beq.n	80056f0 <_printf_i+0x12c>
 800579a:	6823      	ldr	r3, [r4, #0]
 800579c:	079b      	lsls	r3, r3, #30
 800579e:	d413      	bmi.n	80057c8 <_printf_i+0x204>
 80057a0:	68e0      	ldr	r0, [r4, #12]
 80057a2:	9b03      	ldr	r3, [sp, #12]
 80057a4:	4298      	cmp	r0, r3
 80057a6:	bfb8      	it	lt
 80057a8:	4618      	movlt	r0, r3
 80057aa:	e7a3      	b.n	80056f4 <_printf_i+0x130>
 80057ac:	2301      	movs	r3, #1
 80057ae:	464a      	mov	r2, r9
 80057b0:	4639      	mov	r1, r7
 80057b2:	4630      	mov	r0, r6
 80057b4:	47c0      	blx	r8
 80057b6:	3001      	adds	r0, #1
 80057b8:	d09a      	beq.n	80056f0 <_printf_i+0x12c>
 80057ba:	3501      	adds	r5, #1
 80057bc:	68e3      	ldr	r3, [r4, #12]
 80057be:	9a03      	ldr	r2, [sp, #12]
 80057c0:	1a9b      	subs	r3, r3, r2
 80057c2:	42ab      	cmp	r3, r5
 80057c4:	dcf2      	bgt.n	80057ac <_printf_i+0x1e8>
 80057c6:	e7eb      	b.n	80057a0 <_printf_i+0x1dc>
 80057c8:	2500      	movs	r5, #0
 80057ca:	f104 0919 	add.w	r9, r4, #25
 80057ce:	e7f5      	b.n	80057bc <_printf_i+0x1f8>
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	d1ac      	bne.n	800572e <_printf_i+0x16a>
 80057d4:	7803      	ldrb	r3, [r0, #0]
 80057d6:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80057da:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80057de:	e76c      	b.n	80056ba <_printf_i+0xf6>
 80057e0:	0800981e 	.word	0x0800981e
 80057e4:	0800982f 	.word	0x0800982f

080057e8 <siprintf>:
 80057e8:	b40e      	push	{r1, r2, r3}
 80057ea:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80057ee:	b500      	push	{lr}
 80057f0:	b09c      	sub	sp, #112	; 0x70
 80057f2:	ab1d      	add	r3, sp, #116	; 0x74
 80057f4:	9002      	str	r0, [sp, #8]
 80057f6:	9006      	str	r0, [sp, #24]
 80057f8:	9107      	str	r1, [sp, #28]
 80057fa:	9104      	str	r1, [sp, #16]
 80057fc:	4808      	ldr	r0, [pc, #32]	; (8005820 <siprintf+0x38>)
 80057fe:	4909      	ldr	r1, [pc, #36]	; (8005824 <siprintf+0x3c>)
 8005800:	f853 2b04 	ldr.w	r2, [r3], #4
 8005804:	9105      	str	r1, [sp, #20]
 8005806:	6800      	ldr	r0, [r0, #0]
 8005808:	a902      	add	r1, sp, #8
 800580a:	9301      	str	r3, [sp, #4]
 800580c:	f001 fa7a 	bl	8006d04 <_svfiprintf_r>
 8005810:	2200      	movs	r2, #0
 8005812:	9b02      	ldr	r3, [sp, #8]
 8005814:	701a      	strb	r2, [r3, #0]
 8005816:	b01c      	add	sp, #112	; 0x70
 8005818:	f85d eb04 	ldr.w	lr, [sp], #4
 800581c:	b003      	add	sp, #12
 800581e:	4770      	bx	lr
 8005820:	200000ac 	.word	0x200000ac
 8005824:	ffff0208 	.word	0xffff0208

08005828 <strcat>:
 8005828:	4603      	mov	r3, r0
 800582a:	b510      	push	{r4, lr}
 800582c:	781a      	ldrb	r2, [r3, #0]
 800582e:	1c5c      	adds	r4, r3, #1
 8005830:	b93a      	cbnz	r2, 8005842 <strcat+0x1a>
 8005832:	3b01      	subs	r3, #1
 8005834:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005838:	f803 2f01 	strb.w	r2, [r3, #1]!
 800583c:	2a00      	cmp	r2, #0
 800583e:	d1f9      	bne.n	8005834 <strcat+0xc>
 8005840:	bd10      	pop	{r4, pc}
 8005842:	4623      	mov	r3, r4
 8005844:	e7f2      	b.n	800582c <strcat+0x4>

08005846 <quorem>:
 8005846:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800584a:	6903      	ldr	r3, [r0, #16]
 800584c:	690c      	ldr	r4, [r1, #16]
 800584e:	4680      	mov	r8, r0
 8005850:	42a3      	cmp	r3, r4
 8005852:	f2c0 8084 	blt.w	800595e <quorem+0x118>
 8005856:	3c01      	subs	r4, #1
 8005858:	f101 0714 	add.w	r7, r1, #20
 800585c:	f100 0614 	add.w	r6, r0, #20
 8005860:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 8005864:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8005868:	3501      	adds	r5, #1
 800586a:	fbb0 f5f5 	udiv	r5, r0, r5
 800586e:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8005872:	eb06 030c 	add.w	r3, r6, ip
 8005876:	eb07 090c 	add.w	r9, r7, ip
 800587a:	9301      	str	r3, [sp, #4]
 800587c:	b39d      	cbz	r5, 80058e6 <quorem+0xa0>
 800587e:	f04f 0a00 	mov.w	sl, #0
 8005882:	4638      	mov	r0, r7
 8005884:	46b6      	mov	lr, r6
 8005886:	46d3      	mov	fp, sl
 8005888:	f850 2b04 	ldr.w	r2, [r0], #4
 800588c:	b293      	uxth	r3, r2
 800588e:	fb05 a303 	mla	r3, r5, r3, sl
 8005892:	0c12      	lsrs	r2, r2, #16
 8005894:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8005898:	fb05 a202 	mla	r2, r5, r2, sl
 800589c:	b29b      	uxth	r3, r3
 800589e:	ebab 0303 	sub.w	r3, fp, r3
 80058a2:	f8de b000 	ldr.w	fp, [lr]
 80058a6:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 80058aa:	fa1f fb8b 	uxth.w	fp, fp
 80058ae:	445b      	add	r3, fp
 80058b0:	fa1f fb82 	uxth.w	fp, r2
 80058b4:	f8de 2000 	ldr.w	r2, [lr]
 80058b8:	4581      	cmp	r9, r0
 80058ba:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 80058be:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80058c2:	b29b      	uxth	r3, r3
 80058c4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80058c8:	ea4f 4b22 	mov.w	fp, r2, asr #16
 80058cc:	f84e 3b04 	str.w	r3, [lr], #4
 80058d0:	d2da      	bcs.n	8005888 <quorem+0x42>
 80058d2:	f856 300c 	ldr.w	r3, [r6, ip]
 80058d6:	b933      	cbnz	r3, 80058e6 <quorem+0xa0>
 80058d8:	9b01      	ldr	r3, [sp, #4]
 80058da:	3b04      	subs	r3, #4
 80058dc:	429e      	cmp	r6, r3
 80058de:	461a      	mov	r2, r3
 80058e0:	d331      	bcc.n	8005946 <quorem+0x100>
 80058e2:	f8c8 4010 	str.w	r4, [r8, #16]
 80058e6:	4640      	mov	r0, r8
 80058e8:	f001 f836 	bl	8006958 <__mcmp>
 80058ec:	2800      	cmp	r0, #0
 80058ee:	db26      	blt.n	800593e <quorem+0xf8>
 80058f0:	4630      	mov	r0, r6
 80058f2:	f04f 0c00 	mov.w	ip, #0
 80058f6:	3501      	adds	r5, #1
 80058f8:	f857 1b04 	ldr.w	r1, [r7], #4
 80058fc:	f8d0 e000 	ldr.w	lr, [r0]
 8005900:	b28b      	uxth	r3, r1
 8005902:	ebac 0303 	sub.w	r3, ip, r3
 8005906:	fa1f f28e 	uxth.w	r2, lr
 800590a:	4413      	add	r3, r2
 800590c:	0c0a      	lsrs	r2, r1, #16
 800590e:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8005912:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005916:	b29b      	uxth	r3, r3
 8005918:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800591c:	45b9      	cmp	r9, r7
 800591e:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8005922:	f840 3b04 	str.w	r3, [r0], #4
 8005926:	d2e7      	bcs.n	80058f8 <quorem+0xb2>
 8005928:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 800592c:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8005930:	b92a      	cbnz	r2, 800593e <quorem+0xf8>
 8005932:	3b04      	subs	r3, #4
 8005934:	429e      	cmp	r6, r3
 8005936:	461a      	mov	r2, r3
 8005938:	d30b      	bcc.n	8005952 <quorem+0x10c>
 800593a:	f8c8 4010 	str.w	r4, [r8, #16]
 800593e:	4628      	mov	r0, r5
 8005940:	b003      	add	sp, #12
 8005942:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005946:	6812      	ldr	r2, [r2, #0]
 8005948:	3b04      	subs	r3, #4
 800594a:	2a00      	cmp	r2, #0
 800594c:	d1c9      	bne.n	80058e2 <quorem+0x9c>
 800594e:	3c01      	subs	r4, #1
 8005950:	e7c4      	b.n	80058dc <quorem+0x96>
 8005952:	6812      	ldr	r2, [r2, #0]
 8005954:	3b04      	subs	r3, #4
 8005956:	2a00      	cmp	r2, #0
 8005958:	d1ef      	bne.n	800593a <quorem+0xf4>
 800595a:	3c01      	subs	r4, #1
 800595c:	e7ea      	b.n	8005934 <quorem+0xee>
 800595e:	2000      	movs	r0, #0
 8005960:	e7ee      	b.n	8005940 <quorem+0xfa>
 8005962:	0000      	movs	r0, r0
 8005964:	0000      	movs	r0, r0
	...

08005968 <_dtoa_r>:
 8005968:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800596c:	4616      	mov	r6, r2
 800596e:	461f      	mov	r7, r3
 8005970:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8005972:	b095      	sub	sp, #84	; 0x54
 8005974:	4604      	mov	r4, r0
 8005976:	f8dd 8084 	ldr.w	r8, [sp, #132]	; 0x84
 800597a:	e9cd 6702 	strd	r6, r7, [sp, #8]
 800597e:	b93d      	cbnz	r5, 8005990 <_dtoa_r+0x28>
 8005980:	2010      	movs	r0, #16
 8005982:	f000 fdb3 	bl	80064ec <malloc>
 8005986:	6260      	str	r0, [r4, #36]	; 0x24
 8005988:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800598c:	6005      	str	r5, [r0, #0]
 800598e:	60c5      	str	r5, [r0, #12]
 8005990:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005992:	6819      	ldr	r1, [r3, #0]
 8005994:	b151      	cbz	r1, 80059ac <_dtoa_r+0x44>
 8005996:	685a      	ldr	r2, [r3, #4]
 8005998:	2301      	movs	r3, #1
 800599a:	4093      	lsls	r3, r2
 800599c:	604a      	str	r2, [r1, #4]
 800599e:	608b      	str	r3, [r1, #8]
 80059a0:	4620      	mov	r0, r4
 80059a2:	f000 fdf8 	bl	8006596 <_Bfree>
 80059a6:	2200      	movs	r2, #0
 80059a8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80059aa:	601a      	str	r2, [r3, #0]
 80059ac:	1e3b      	subs	r3, r7, #0
 80059ae:	bfaf      	iteee	ge
 80059b0:	2300      	movge	r3, #0
 80059b2:	2201      	movlt	r2, #1
 80059b4:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80059b8:	9303      	strlt	r3, [sp, #12]
 80059ba:	bfac      	ite	ge
 80059bc:	f8c8 3000 	strge.w	r3, [r8]
 80059c0:	f8c8 2000 	strlt.w	r2, [r8]
 80059c4:	4bae      	ldr	r3, [pc, #696]	; (8005c80 <_dtoa_r+0x318>)
 80059c6:	f8dd 800c 	ldr.w	r8, [sp, #12]
 80059ca:	ea33 0308 	bics.w	r3, r3, r8
 80059ce:	d11b      	bne.n	8005a08 <_dtoa_r+0xa0>
 80059d0:	f242 730f 	movw	r3, #9999	; 0x270f
 80059d4:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80059d6:	6013      	str	r3, [r2, #0]
 80059d8:	9b02      	ldr	r3, [sp, #8]
 80059da:	b923      	cbnz	r3, 80059e6 <_dtoa_r+0x7e>
 80059dc:	f3c8 0013 	ubfx	r0, r8, #0, #20
 80059e0:	2800      	cmp	r0, #0
 80059e2:	f000 8545 	beq.w	8006470 <_dtoa_r+0xb08>
 80059e6:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80059e8:	b953      	cbnz	r3, 8005a00 <_dtoa_r+0x98>
 80059ea:	4ba6      	ldr	r3, [pc, #664]	; (8005c84 <_dtoa_r+0x31c>)
 80059ec:	e021      	b.n	8005a32 <_dtoa_r+0xca>
 80059ee:	4ba6      	ldr	r3, [pc, #664]	; (8005c88 <_dtoa_r+0x320>)
 80059f0:	9306      	str	r3, [sp, #24]
 80059f2:	3308      	adds	r3, #8
 80059f4:	9a22      	ldr	r2, [sp, #136]	; 0x88
 80059f6:	6013      	str	r3, [r2, #0]
 80059f8:	9806      	ldr	r0, [sp, #24]
 80059fa:	b015      	add	sp, #84	; 0x54
 80059fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005a00:	4ba0      	ldr	r3, [pc, #640]	; (8005c84 <_dtoa_r+0x31c>)
 8005a02:	9306      	str	r3, [sp, #24]
 8005a04:	3303      	adds	r3, #3
 8005a06:	e7f5      	b.n	80059f4 <_dtoa_r+0x8c>
 8005a08:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8005a0c:	2200      	movs	r2, #0
 8005a0e:	2300      	movs	r3, #0
 8005a10:	4630      	mov	r0, r6
 8005a12:	4639      	mov	r1, r7
 8005a14:	f7fa ffc8 	bl	80009a8 <__aeabi_dcmpeq>
 8005a18:	4682      	mov	sl, r0
 8005a1a:	b160      	cbz	r0, 8005a36 <_dtoa_r+0xce>
 8005a1c:	2301      	movs	r3, #1
 8005a1e:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8005a20:	6013      	str	r3, [r2, #0]
 8005a22:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005a24:	2b00      	cmp	r3, #0
 8005a26:	f000 8520 	beq.w	800646a <_dtoa_r+0xb02>
 8005a2a:	4b98      	ldr	r3, [pc, #608]	; (8005c8c <_dtoa_r+0x324>)
 8005a2c:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8005a2e:	6013      	str	r3, [r2, #0]
 8005a30:	3b01      	subs	r3, #1
 8005a32:	9306      	str	r3, [sp, #24]
 8005a34:	e7e0      	b.n	80059f8 <_dtoa_r+0x90>
 8005a36:	ab12      	add	r3, sp, #72	; 0x48
 8005a38:	9301      	str	r3, [sp, #4]
 8005a3a:	ab13      	add	r3, sp, #76	; 0x4c
 8005a3c:	9300      	str	r3, [sp, #0]
 8005a3e:	4632      	mov	r2, r6
 8005a40:	463b      	mov	r3, r7
 8005a42:	4620      	mov	r0, r4
 8005a44:	f001 f800 	bl	8006a48 <__d2b>
 8005a48:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8005a4c:	4683      	mov	fp, r0
 8005a4e:	2d00      	cmp	r5, #0
 8005a50:	d07d      	beq.n	8005b4e <_dtoa_r+0x1e6>
 8005a52:	46b0      	mov	r8, r6
 8005a54:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8005a58:	f043 597f 	orr.w	r9, r3, #1069547520	; 0x3fc00000
 8005a5c:	f449 1940 	orr.w	r9, r9, #3145728	; 0x300000
 8005a60:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8005a64:	f8cd a040 	str.w	sl, [sp, #64]	; 0x40
 8005a68:	2200      	movs	r2, #0
 8005a6a:	4b89      	ldr	r3, [pc, #548]	; (8005c90 <_dtoa_r+0x328>)
 8005a6c:	4640      	mov	r0, r8
 8005a6e:	4649      	mov	r1, r9
 8005a70:	f7fa fb7a 	bl	8000168 <__aeabi_dsub>
 8005a74:	a37c      	add	r3, pc, #496	; (adr r3, 8005c68 <_dtoa_r+0x300>)
 8005a76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a7a:	f7fa fd2d 	bl	80004d8 <__aeabi_dmul>
 8005a7e:	a37c      	add	r3, pc, #496	; (adr r3, 8005c70 <_dtoa_r+0x308>)
 8005a80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a84:	f7fa fb72 	bl	800016c <__adddf3>
 8005a88:	4606      	mov	r6, r0
 8005a8a:	4628      	mov	r0, r5
 8005a8c:	460f      	mov	r7, r1
 8005a8e:	f7fa fcb9 	bl	8000404 <__aeabi_i2d>
 8005a92:	a379      	add	r3, pc, #484	; (adr r3, 8005c78 <_dtoa_r+0x310>)
 8005a94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a98:	f7fa fd1e 	bl	80004d8 <__aeabi_dmul>
 8005a9c:	4602      	mov	r2, r0
 8005a9e:	460b      	mov	r3, r1
 8005aa0:	4630      	mov	r0, r6
 8005aa2:	4639      	mov	r1, r7
 8005aa4:	f7fa fb62 	bl	800016c <__adddf3>
 8005aa8:	4606      	mov	r6, r0
 8005aaa:	460f      	mov	r7, r1
 8005aac:	f7fa ffc4 	bl	8000a38 <__aeabi_d2iz>
 8005ab0:	2200      	movs	r2, #0
 8005ab2:	4682      	mov	sl, r0
 8005ab4:	2300      	movs	r3, #0
 8005ab6:	4630      	mov	r0, r6
 8005ab8:	4639      	mov	r1, r7
 8005aba:	f7fa ff7f 	bl	80009bc <__aeabi_dcmplt>
 8005abe:	b148      	cbz	r0, 8005ad4 <_dtoa_r+0x16c>
 8005ac0:	4650      	mov	r0, sl
 8005ac2:	f7fa fc9f 	bl	8000404 <__aeabi_i2d>
 8005ac6:	4632      	mov	r2, r6
 8005ac8:	463b      	mov	r3, r7
 8005aca:	f7fa ff6d 	bl	80009a8 <__aeabi_dcmpeq>
 8005ace:	b908      	cbnz	r0, 8005ad4 <_dtoa_r+0x16c>
 8005ad0:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005ad4:	f1ba 0f16 	cmp.w	sl, #22
 8005ad8:	d85a      	bhi.n	8005b90 <_dtoa_r+0x228>
 8005ada:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005ade:	496d      	ldr	r1, [pc, #436]	; (8005c94 <_dtoa_r+0x32c>)
 8005ae0:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8005ae4:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005ae8:	f7fa ff86 	bl	80009f8 <__aeabi_dcmpgt>
 8005aec:	2800      	cmp	r0, #0
 8005aee:	d051      	beq.n	8005b94 <_dtoa_r+0x22c>
 8005af0:	2300      	movs	r3, #0
 8005af2:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005af6:	930d      	str	r3, [sp, #52]	; 0x34
 8005af8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005afa:	1b5d      	subs	r5, r3, r5
 8005afc:	1e6b      	subs	r3, r5, #1
 8005afe:	9307      	str	r3, [sp, #28]
 8005b00:	bf43      	ittte	mi
 8005b02:	2300      	movmi	r3, #0
 8005b04:	f1c5 0901 	rsbmi	r9, r5, #1
 8005b08:	9307      	strmi	r3, [sp, #28]
 8005b0a:	f04f 0900 	movpl.w	r9, #0
 8005b0e:	f1ba 0f00 	cmp.w	sl, #0
 8005b12:	db41      	blt.n	8005b98 <_dtoa_r+0x230>
 8005b14:	9b07      	ldr	r3, [sp, #28]
 8005b16:	f8cd a030 	str.w	sl, [sp, #48]	; 0x30
 8005b1a:	4453      	add	r3, sl
 8005b1c:	9307      	str	r3, [sp, #28]
 8005b1e:	2300      	movs	r3, #0
 8005b20:	9308      	str	r3, [sp, #32]
 8005b22:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8005b24:	2b09      	cmp	r3, #9
 8005b26:	f200 808f 	bhi.w	8005c48 <_dtoa_r+0x2e0>
 8005b2a:	2b05      	cmp	r3, #5
 8005b2c:	bfc4      	itt	gt
 8005b2e:	3b04      	subgt	r3, #4
 8005b30:	931e      	strgt	r3, [sp, #120]	; 0x78
 8005b32:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8005b34:	bfc8      	it	gt
 8005b36:	2500      	movgt	r5, #0
 8005b38:	f1a3 0302 	sub.w	r3, r3, #2
 8005b3c:	bfd8      	it	le
 8005b3e:	2501      	movle	r5, #1
 8005b40:	2b03      	cmp	r3, #3
 8005b42:	f200 808d 	bhi.w	8005c60 <_dtoa_r+0x2f8>
 8005b46:	e8df f003 	tbb	[pc, r3]
 8005b4a:	7d7b      	.short	0x7d7b
 8005b4c:	6f2f      	.short	0x6f2f
 8005b4e:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 8005b52:	441d      	add	r5, r3
 8005b54:	f205 4032 	addw	r0, r5, #1074	; 0x432
 8005b58:	2820      	cmp	r0, #32
 8005b5a:	dd13      	ble.n	8005b84 <_dtoa_r+0x21c>
 8005b5c:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 8005b60:	9b02      	ldr	r3, [sp, #8]
 8005b62:	fa08 f800 	lsl.w	r8, r8, r0
 8005b66:	f205 4012 	addw	r0, r5, #1042	; 0x412
 8005b6a:	fa23 f000 	lsr.w	r0, r3, r0
 8005b6e:	ea48 0000 	orr.w	r0, r8, r0
 8005b72:	f7fa fc37 	bl	80003e4 <__aeabi_ui2d>
 8005b76:	2301      	movs	r3, #1
 8005b78:	4680      	mov	r8, r0
 8005b7a:	f1a1 79f8 	sub.w	r9, r1, #32505856	; 0x1f00000
 8005b7e:	3d01      	subs	r5, #1
 8005b80:	9310      	str	r3, [sp, #64]	; 0x40
 8005b82:	e771      	b.n	8005a68 <_dtoa_r+0x100>
 8005b84:	9b02      	ldr	r3, [sp, #8]
 8005b86:	f1c0 0020 	rsb	r0, r0, #32
 8005b8a:	fa03 f000 	lsl.w	r0, r3, r0
 8005b8e:	e7f0      	b.n	8005b72 <_dtoa_r+0x20a>
 8005b90:	2301      	movs	r3, #1
 8005b92:	e7b0      	b.n	8005af6 <_dtoa_r+0x18e>
 8005b94:	900d      	str	r0, [sp, #52]	; 0x34
 8005b96:	e7af      	b.n	8005af8 <_dtoa_r+0x190>
 8005b98:	f1ca 0300 	rsb	r3, sl, #0
 8005b9c:	9308      	str	r3, [sp, #32]
 8005b9e:	2300      	movs	r3, #0
 8005ba0:	eba9 090a 	sub.w	r9, r9, sl
 8005ba4:	930c      	str	r3, [sp, #48]	; 0x30
 8005ba6:	e7bc      	b.n	8005b22 <_dtoa_r+0x1ba>
 8005ba8:	2301      	movs	r3, #1
 8005baa:	9309      	str	r3, [sp, #36]	; 0x24
 8005bac:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8005bae:	2b00      	cmp	r3, #0
 8005bb0:	dd74      	ble.n	8005c9c <_dtoa_r+0x334>
 8005bb2:	4698      	mov	r8, r3
 8005bb4:	9304      	str	r3, [sp, #16]
 8005bb6:	2200      	movs	r2, #0
 8005bb8:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8005bba:	6072      	str	r2, [r6, #4]
 8005bbc:	2204      	movs	r2, #4
 8005bbe:	f102 0014 	add.w	r0, r2, #20
 8005bc2:	4298      	cmp	r0, r3
 8005bc4:	6871      	ldr	r1, [r6, #4]
 8005bc6:	d96e      	bls.n	8005ca6 <_dtoa_r+0x33e>
 8005bc8:	4620      	mov	r0, r4
 8005bca:	f000 fcb0 	bl	800652e <_Balloc>
 8005bce:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005bd0:	6030      	str	r0, [r6, #0]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	f1b8 0f0e 	cmp.w	r8, #14
 8005bd8:	9306      	str	r3, [sp, #24]
 8005bda:	f200 80ed 	bhi.w	8005db8 <_dtoa_r+0x450>
 8005bde:	2d00      	cmp	r5, #0
 8005be0:	f000 80ea 	beq.w	8005db8 <_dtoa_r+0x450>
 8005be4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005be8:	f1ba 0f00 	cmp.w	sl, #0
 8005bec:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 8005bf0:	dd77      	ble.n	8005ce2 <_dtoa_r+0x37a>
 8005bf2:	4a28      	ldr	r2, [pc, #160]	; (8005c94 <_dtoa_r+0x32c>)
 8005bf4:	f00a 030f 	and.w	r3, sl, #15
 8005bf8:	ea4f 162a 	mov.w	r6, sl, asr #4
 8005bfc:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8005c00:	06f0      	lsls	r0, r6, #27
 8005c02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c06:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8005c0a:	d568      	bpl.n	8005cde <_dtoa_r+0x376>
 8005c0c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8005c10:	4b21      	ldr	r3, [pc, #132]	; (8005c98 <_dtoa_r+0x330>)
 8005c12:	2503      	movs	r5, #3
 8005c14:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8005c18:	f7fa fd88 	bl	800072c <__aeabi_ddiv>
 8005c1c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005c20:	f006 060f 	and.w	r6, r6, #15
 8005c24:	4f1c      	ldr	r7, [pc, #112]	; (8005c98 <_dtoa_r+0x330>)
 8005c26:	e04f      	b.n	8005cc8 <_dtoa_r+0x360>
 8005c28:	2301      	movs	r3, #1
 8005c2a:	9309      	str	r3, [sp, #36]	; 0x24
 8005c2c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8005c2e:	4453      	add	r3, sl
 8005c30:	f103 0801 	add.w	r8, r3, #1
 8005c34:	9304      	str	r3, [sp, #16]
 8005c36:	4643      	mov	r3, r8
 8005c38:	2b01      	cmp	r3, #1
 8005c3a:	bfb8      	it	lt
 8005c3c:	2301      	movlt	r3, #1
 8005c3e:	e7ba      	b.n	8005bb6 <_dtoa_r+0x24e>
 8005c40:	2300      	movs	r3, #0
 8005c42:	e7b2      	b.n	8005baa <_dtoa_r+0x242>
 8005c44:	2300      	movs	r3, #0
 8005c46:	e7f0      	b.n	8005c2a <_dtoa_r+0x2c2>
 8005c48:	2501      	movs	r5, #1
 8005c4a:	2300      	movs	r3, #0
 8005c4c:	9509      	str	r5, [sp, #36]	; 0x24
 8005c4e:	931e      	str	r3, [sp, #120]	; 0x78
 8005c50:	f04f 33ff 	mov.w	r3, #4294967295
 8005c54:	2200      	movs	r2, #0
 8005c56:	9304      	str	r3, [sp, #16]
 8005c58:	4698      	mov	r8, r3
 8005c5a:	2312      	movs	r3, #18
 8005c5c:	921f      	str	r2, [sp, #124]	; 0x7c
 8005c5e:	e7aa      	b.n	8005bb6 <_dtoa_r+0x24e>
 8005c60:	2301      	movs	r3, #1
 8005c62:	9309      	str	r3, [sp, #36]	; 0x24
 8005c64:	e7f4      	b.n	8005c50 <_dtoa_r+0x2e8>
 8005c66:	bf00      	nop
 8005c68:	636f4361 	.word	0x636f4361
 8005c6c:	3fd287a7 	.word	0x3fd287a7
 8005c70:	8b60c8b3 	.word	0x8b60c8b3
 8005c74:	3fc68a28 	.word	0x3fc68a28
 8005c78:	509f79fb 	.word	0x509f79fb
 8005c7c:	3fd34413 	.word	0x3fd34413
 8005c80:	7ff00000 	.word	0x7ff00000
 8005c84:	08009849 	.word	0x08009849
 8005c88:	08009840 	.word	0x08009840
 8005c8c:	0800981d 	.word	0x0800981d
 8005c90:	3ff80000 	.word	0x3ff80000
 8005c94:	08009878 	.word	0x08009878
 8005c98:	08009850 	.word	0x08009850
 8005c9c:	2301      	movs	r3, #1
 8005c9e:	9304      	str	r3, [sp, #16]
 8005ca0:	4698      	mov	r8, r3
 8005ca2:	461a      	mov	r2, r3
 8005ca4:	e7da      	b.n	8005c5c <_dtoa_r+0x2f4>
 8005ca6:	3101      	adds	r1, #1
 8005ca8:	6071      	str	r1, [r6, #4]
 8005caa:	0052      	lsls	r2, r2, #1
 8005cac:	e787      	b.n	8005bbe <_dtoa_r+0x256>
 8005cae:	07f1      	lsls	r1, r6, #31
 8005cb0:	d508      	bpl.n	8005cc4 <_dtoa_r+0x35c>
 8005cb2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8005cb6:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005cba:	f7fa fc0d 	bl	80004d8 <__aeabi_dmul>
 8005cbe:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8005cc2:	3501      	adds	r5, #1
 8005cc4:	1076      	asrs	r6, r6, #1
 8005cc6:	3708      	adds	r7, #8
 8005cc8:	2e00      	cmp	r6, #0
 8005cca:	d1f0      	bne.n	8005cae <_dtoa_r+0x346>
 8005ccc:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8005cd0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005cd4:	f7fa fd2a 	bl	800072c <__aeabi_ddiv>
 8005cd8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005cdc:	e01b      	b.n	8005d16 <_dtoa_r+0x3ae>
 8005cde:	2502      	movs	r5, #2
 8005ce0:	e7a0      	b.n	8005c24 <_dtoa_r+0x2bc>
 8005ce2:	f000 80a4 	beq.w	8005e2e <_dtoa_r+0x4c6>
 8005ce6:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8005cea:	f1ca 0600 	rsb	r6, sl, #0
 8005cee:	4ba0      	ldr	r3, [pc, #640]	; (8005f70 <_dtoa_r+0x608>)
 8005cf0:	f006 020f 	and.w	r2, r6, #15
 8005cf4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005cf8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005cfc:	f7fa fbec 	bl	80004d8 <__aeabi_dmul>
 8005d00:	2502      	movs	r5, #2
 8005d02:	2300      	movs	r3, #0
 8005d04:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005d08:	4f9a      	ldr	r7, [pc, #616]	; (8005f74 <_dtoa_r+0x60c>)
 8005d0a:	1136      	asrs	r6, r6, #4
 8005d0c:	2e00      	cmp	r6, #0
 8005d0e:	f040 8083 	bne.w	8005e18 <_dtoa_r+0x4b0>
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	d1e0      	bne.n	8005cd8 <_dtoa_r+0x370>
 8005d16:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005d18:	2b00      	cmp	r3, #0
 8005d1a:	f000 808a 	beq.w	8005e32 <_dtoa_r+0x4ca>
 8005d1e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005d22:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8005d26:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8005d2a:	2200      	movs	r2, #0
 8005d2c:	4b92      	ldr	r3, [pc, #584]	; (8005f78 <_dtoa_r+0x610>)
 8005d2e:	f7fa fe45 	bl	80009bc <__aeabi_dcmplt>
 8005d32:	2800      	cmp	r0, #0
 8005d34:	d07d      	beq.n	8005e32 <_dtoa_r+0x4ca>
 8005d36:	f1b8 0f00 	cmp.w	r8, #0
 8005d3a:	d07a      	beq.n	8005e32 <_dtoa_r+0x4ca>
 8005d3c:	9b04      	ldr	r3, [sp, #16]
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	dd36      	ble.n	8005db0 <_dtoa_r+0x448>
 8005d42:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8005d46:	2200      	movs	r2, #0
 8005d48:	4b8c      	ldr	r3, [pc, #560]	; (8005f7c <_dtoa_r+0x614>)
 8005d4a:	f7fa fbc5 	bl	80004d8 <__aeabi_dmul>
 8005d4e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005d52:	9e04      	ldr	r6, [sp, #16]
 8005d54:	f10a 37ff 	add.w	r7, sl, #4294967295
 8005d58:	3501      	adds	r5, #1
 8005d5a:	4628      	mov	r0, r5
 8005d5c:	f7fa fb52 	bl	8000404 <__aeabi_i2d>
 8005d60:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005d64:	f7fa fbb8 	bl	80004d8 <__aeabi_dmul>
 8005d68:	2200      	movs	r2, #0
 8005d6a:	4b85      	ldr	r3, [pc, #532]	; (8005f80 <_dtoa_r+0x618>)
 8005d6c:	f7fa f9fe 	bl	800016c <__adddf3>
 8005d70:	f1a1 7550 	sub.w	r5, r1, #54525952	; 0x3400000
 8005d74:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8005d78:	950b      	str	r5, [sp, #44]	; 0x2c
 8005d7a:	2e00      	cmp	r6, #0
 8005d7c:	d15c      	bne.n	8005e38 <_dtoa_r+0x4d0>
 8005d7e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005d82:	2200      	movs	r2, #0
 8005d84:	4b7f      	ldr	r3, [pc, #508]	; (8005f84 <_dtoa_r+0x61c>)
 8005d86:	f7fa f9ef 	bl	8000168 <__aeabi_dsub>
 8005d8a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005d8c:	462b      	mov	r3, r5
 8005d8e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005d92:	f7fa fe31 	bl	80009f8 <__aeabi_dcmpgt>
 8005d96:	2800      	cmp	r0, #0
 8005d98:	f040 8281 	bne.w	800629e <_dtoa_r+0x936>
 8005d9c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005da0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005da2:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 8005da6:	f7fa fe09 	bl	80009bc <__aeabi_dcmplt>
 8005daa:	2800      	cmp	r0, #0
 8005dac:	f040 8275 	bne.w	800629a <_dtoa_r+0x932>
 8005db0:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8005db4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8005db8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	f2c0 814b 	blt.w	8006056 <_dtoa_r+0x6ee>
 8005dc0:	f1ba 0f0e 	cmp.w	sl, #14
 8005dc4:	f300 8147 	bgt.w	8006056 <_dtoa_r+0x6ee>
 8005dc8:	4b69      	ldr	r3, [pc, #420]	; (8005f70 <_dtoa_r+0x608>)
 8005dca:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8005dce:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005dd2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8005dd6:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8005dd8:	2b00      	cmp	r3, #0
 8005dda:	f280 80d7 	bge.w	8005f8c <_dtoa_r+0x624>
 8005dde:	f1b8 0f00 	cmp.w	r8, #0
 8005de2:	f300 80d3 	bgt.w	8005f8c <_dtoa_r+0x624>
 8005de6:	f040 8257 	bne.w	8006298 <_dtoa_r+0x930>
 8005dea:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005dee:	2200      	movs	r2, #0
 8005df0:	4b64      	ldr	r3, [pc, #400]	; (8005f84 <_dtoa_r+0x61c>)
 8005df2:	f7fa fb71 	bl	80004d8 <__aeabi_dmul>
 8005df6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005dfa:	f7fa fdf3 	bl	80009e4 <__aeabi_dcmpge>
 8005dfe:	4646      	mov	r6, r8
 8005e00:	4647      	mov	r7, r8
 8005e02:	2800      	cmp	r0, #0
 8005e04:	f040 822d 	bne.w	8006262 <_dtoa_r+0x8fa>
 8005e08:	9b06      	ldr	r3, [sp, #24]
 8005e0a:	9a06      	ldr	r2, [sp, #24]
 8005e0c:	1c5d      	adds	r5, r3, #1
 8005e0e:	2331      	movs	r3, #49	; 0x31
 8005e10:	f10a 0a01 	add.w	sl, sl, #1
 8005e14:	7013      	strb	r3, [r2, #0]
 8005e16:	e228      	b.n	800626a <_dtoa_r+0x902>
 8005e18:	07f2      	lsls	r2, r6, #31
 8005e1a:	d505      	bpl.n	8005e28 <_dtoa_r+0x4c0>
 8005e1c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005e20:	f7fa fb5a 	bl	80004d8 <__aeabi_dmul>
 8005e24:	2301      	movs	r3, #1
 8005e26:	3501      	adds	r5, #1
 8005e28:	1076      	asrs	r6, r6, #1
 8005e2a:	3708      	adds	r7, #8
 8005e2c:	e76e      	b.n	8005d0c <_dtoa_r+0x3a4>
 8005e2e:	2502      	movs	r5, #2
 8005e30:	e771      	b.n	8005d16 <_dtoa_r+0x3ae>
 8005e32:	4657      	mov	r7, sl
 8005e34:	4646      	mov	r6, r8
 8005e36:	e790      	b.n	8005d5a <_dtoa_r+0x3f2>
 8005e38:	4b4d      	ldr	r3, [pc, #308]	; (8005f70 <_dtoa_r+0x608>)
 8005e3a:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8005e3e:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 8005e42:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005e44:	2b00      	cmp	r3, #0
 8005e46:	d048      	beq.n	8005eda <_dtoa_r+0x572>
 8005e48:	4602      	mov	r2, r0
 8005e4a:	460b      	mov	r3, r1
 8005e4c:	2000      	movs	r0, #0
 8005e4e:	494e      	ldr	r1, [pc, #312]	; (8005f88 <_dtoa_r+0x620>)
 8005e50:	f7fa fc6c 	bl	800072c <__aeabi_ddiv>
 8005e54:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8005e58:	f7fa f986 	bl	8000168 <__aeabi_dsub>
 8005e5c:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8005e60:	9d06      	ldr	r5, [sp, #24]
 8005e62:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005e66:	f7fa fde7 	bl	8000a38 <__aeabi_d2iz>
 8005e6a:	9011      	str	r0, [sp, #68]	; 0x44
 8005e6c:	f7fa faca 	bl	8000404 <__aeabi_i2d>
 8005e70:	4602      	mov	r2, r0
 8005e72:	460b      	mov	r3, r1
 8005e74:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005e78:	f7fa f976 	bl	8000168 <__aeabi_dsub>
 8005e7c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005e7e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005e82:	3330      	adds	r3, #48	; 0x30
 8005e84:	f805 3b01 	strb.w	r3, [r5], #1
 8005e88:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8005e8c:	f7fa fd96 	bl	80009bc <__aeabi_dcmplt>
 8005e90:	2800      	cmp	r0, #0
 8005e92:	d163      	bne.n	8005f5c <_dtoa_r+0x5f4>
 8005e94:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005e98:	2000      	movs	r0, #0
 8005e9a:	4937      	ldr	r1, [pc, #220]	; (8005f78 <_dtoa_r+0x610>)
 8005e9c:	f7fa f964 	bl	8000168 <__aeabi_dsub>
 8005ea0:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8005ea4:	f7fa fd8a 	bl	80009bc <__aeabi_dcmplt>
 8005ea8:	2800      	cmp	r0, #0
 8005eaa:	f040 80b5 	bne.w	8006018 <_dtoa_r+0x6b0>
 8005eae:	9b06      	ldr	r3, [sp, #24]
 8005eb0:	1aeb      	subs	r3, r5, r3
 8005eb2:	429e      	cmp	r6, r3
 8005eb4:	f77f af7c 	ble.w	8005db0 <_dtoa_r+0x448>
 8005eb8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8005ebc:	2200      	movs	r2, #0
 8005ebe:	4b2f      	ldr	r3, [pc, #188]	; (8005f7c <_dtoa_r+0x614>)
 8005ec0:	f7fa fb0a 	bl	80004d8 <__aeabi_dmul>
 8005ec4:	2200      	movs	r2, #0
 8005ec6:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8005eca:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005ece:	4b2b      	ldr	r3, [pc, #172]	; (8005f7c <_dtoa_r+0x614>)
 8005ed0:	f7fa fb02 	bl	80004d8 <__aeabi_dmul>
 8005ed4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005ed8:	e7c3      	b.n	8005e62 <_dtoa_r+0x4fa>
 8005eda:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8005ede:	f7fa fafb 	bl	80004d8 <__aeabi_dmul>
 8005ee2:	9b06      	ldr	r3, [sp, #24]
 8005ee4:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8005ee8:	199d      	adds	r5, r3, r6
 8005eea:	461e      	mov	r6, r3
 8005eec:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005ef0:	f7fa fda2 	bl	8000a38 <__aeabi_d2iz>
 8005ef4:	9011      	str	r0, [sp, #68]	; 0x44
 8005ef6:	f7fa fa85 	bl	8000404 <__aeabi_i2d>
 8005efa:	4602      	mov	r2, r0
 8005efc:	460b      	mov	r3, r1
 8005efe:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005f02:	f7fa f931 	bl	8000168 <__aeabi_dsub>
 8005f06:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005f08:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005f0c:	3330      	adds	r3, #48	; 0x30
 8005f0e:	f806 3b01 	strb.w	r3, [r6], #1
 8005f12:	42ae      	cmp	r6, r5
 8005f14:	f04f 0200 	mov.w	r2, #0
 8005f18:	d124      	bne.n	8005f64 <_dtoa_r+0x5fc>
 8005f1a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8005f1e:	4b1a      	ldr	r3, [pc, #104]	; (8005f88 <_dtoa_r+0x620>)
 8005f20:	f7fa f924 	bl	800016c <__adddf3>
 8005f24:	4602      	mov	r2, r0
 8005f26:	460b      	mov	r3, r1
 8005f28:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005f2c:	f7fa fd64 	bl	80009f8 <__aeabi_dcmpgt>
 8005f30:	2800      	cmp	r0, #0
 8005f32:	d171      	bne.n	8006018 <_dtoa_r+0x6b0>
 8005f34:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8005f38:	2000      	movs	r0, #0
 8005f3a:	4913      	ldr	r1, [pc, #76]	; (8005f88 <_dtoa_r+0x620>)
 8005f3c:	f7fa f914 	bl	8000168 <__aeabi_dsub>
 8005f40:	4602      	mov	r2, r0
 8005f42:	460b      	mov	r3, r1
 8005f44:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005f48:	f7fa fd38 	bl	80009bc <__aeabi_dcmplt>
 8005f4c:	2800      	cmp	r0, #0
 8005f4e:	f43f af2f 	beq.w	8005db0 <_dtoa_r+0x448>
 8005f52:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8005f56:	1e6a      	subs	r2, r5, #1
 8005f58:	2b30      	cmp	r3, #48	; 0x30
 8005f5a:	d001      	beq.n	8005f60 <_dtoa_r+0x5f8>
 8005f5c:	46ba      	mov	sl, r7
 8005f5e:	e04a      	b.n	8005ff6 <_dtoa_r+0x68e>
 8005f60:	4615      	mov	r5, r2
 8005f62:	e7f6      	b.n	8005f52 <_dtoa_r+0x5ea>
 8005f64:	4b05      	ldr	r3, [pc, #20]	; (8005f7c <_dtoa_r+0x614>)
 8005f66:	f7fa fab7 	bl	80004d8 <__aeabi_dmul>
 8005f6a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005f6e:	e7bd      	b.n	8005eec <_dtoa_r+0x584>
 8005f70:	08009878 	.word	0x08009878
 8005f74:	08009850 	.word	0x08009850
 8005f78:	3ff00000 	.word	0x3ff00000
 8005f7c:	40240000 	.word	0x40240000
 8005f80:	401c0000 	.word	0x401c0000
 8005f84:	40140000 	.word	0x40140000
 8005f88:	3fe00000 	.word	0x3fe00000
 8005f8c:	9d06      	ldr	r5, [sp, #24]
 8005f8e:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8005f92:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005f96:	4630      	mov	r0, r6
 8005f98:	4639      	mov	r1, r7
 8005f9a:	f7fa fbc7 	bl	800072c <__aeabi_ddiv>
 8005f9e:	f7fa fd4b 	bl	8000a38 <__aeabi_d2iz>
 8005fa2:	4681      	mov	r9, r0
 8005fa4:	f7fa fa2e 	bl	8000404 <__aeabi_i2d>
 8005fa8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005fac:	f7fa fa94 	bl	80004d8 <__aeabi_dmul>
 8005fb0:	4602      	mov	r2, r0
 8005fb2:	460b      	mov	r3, r1
 8005fb4:	4630      	mov	r0, r6
 8005fb6:	4639      	mov	r1, r7
 8005fb8:	f7fa f8d6 	bl	8000168 <__aeabi_dsub>
 8005fbc:	f109 0630 	add.w	r6, r9, #48	; 0x30
 8005fc0:	f805 6b01 	strb.w	r6, [r5], #1
 8005fc4:	9e06      	ldr	r6, [sp, #24]
 8005fc6:	4602      	mov	r2, r0
 8005fc8:	1bae      	subs	r6, r5, r6
 8005fca:	45b0      	cmp	r8, r6
 8005fcc:	460b      	mov	r3, r1
 8005fce:	d135      	bne.n	800603c <_dtoa_r+0x6d4>
 8005fd0:	f7fa f8cc 	bl	800016c <__adddf3>
 8005fd4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005fd8:	4606      	mov	r6, r0
 8005fda:	460f      	mov	r7, r1
 8005fdc:	f7fa fd0c 	bl	80009f8 <__aeabi_dcmpgt>
 8005fe0:	b9c8      	cbnz	r0, 8006016 <_dtoa_r+0x6ae>
 8005fe2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005fe6:	4630      	mov	r0, r6
 8005fe8:	4639      	mov	r1, r7
 8005fea:	f7fa fcdd 	bl	80009a8 <__aeabi_dcmpeq>
 8005fee:	b110      	cbz	r0, 8005ff6 <_dtoa_r+0x68e>
 8005ff0:	f019 0f01 	tst.w	r9, #1
 8005ff4:	d10f      	bne.n	8006016 <_dtoa_r+0x6ae>
 8005ff6:	4659      	mov	r1, fp
 8005ff8:	4620      	mov	r0, r4
 8005ffa:	f000 facc 	bl	8006596 <_Bfree>
 8005ffe:	2300      	movs	r3, #0
 8006000:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8006002:	702b      	strb	r3, [r5, #0]
 8006004:	f10a 0301 	add.w	r3, sl, #1
 8006008:	6013      	str	r3, [r2, #0]
 800600a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800600c:	2b00      	cmp	r3, #0
 800600e:	f43f acf3 	beq.w	80059f8 <_dtoa_r+0x90>
 8006012:	601d      	str	r5, [r3, #0]
 8006014:	e4f0      	b.n	80059f8 <_dtoa_r+0x90>
 8006016:	4657      	mov	r7, sl
 8006018:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800601c:	1e6b      	subs	r3, r5, #1
 800601e:	2a39      	cmp	r2, #57	; 0x39
 8006020:	d106      	bne.n	8006030 <_dtoa_r+0x6c8>
 8006022:	9a06      	ldr	r2, [sp, #24]
 8006024:	429a      	cmp	r2, r3
 8006026:	d107      	bne.n	8006038 <_dtoa_r+0x6d0>
 8006028:	2330      	movs	r3, #48	; 0x30
 800602a:	7013      	strb	r3, [r2, #0]
 800602c:	4613      	mov	r3, r2
 800602e:	3701      	adds	r7, #1
 8006030:	781a      	ldrb	r2, [r3, #0]
 8006032:	3201      	adds	r2, #1
 8006034:	701a      	strb	r2, [r3, #0]
 8006036:	e791      	b.n	8005f5c <_dtoa_r+0x5f4>
 8006038:	461d      	mov	r5, r3
 800603a:	e7ed      	b.n	8006018 <_dtoa_r+0x6b0>
 800603c:	2200      	movs	r2, #0
 800603e:	4b99      	ldr	r3, [pc, #612]	; (80062a4 <_dtoa_r+0x93c>)
 8006040:	f7fa fa4a 	bl	80004d8 <__aeabi_dmul>
 8006044:	2200      	movs	r2, #0
 8006046:	2300      	movs	r3, #0
 8006048:	4606      	mov	r6, r0
 800604a:	460f      	mov	r7, r1
 800604c:	f7fa fcac 	bl	80009a8 <__aeabi_dcmpeq>
 8006050:	2800      	cmp	r0, #0
 8006052:	d09e      	beq.n	8005f92 <_dtoa_r+0x62a>
 8006054:	e7cf      	b.n	8005ff6 <_dtoa_r+0x68e>
 8006056:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006058:	2a00      	cmp	r2, #0
 800605a:	f000 8088 	beq.w	800616e <_dtoa_r+0x806>
 800605e:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8006060:	2a01      	cmp	r2, #1
 8006062:	dc6d      	bgt.n	8006140 <_dtoa_r+0x7d8>
 8006064:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8006066:	2a00      	cmp	r2, #0
 8006068:	d066      	beq.n	8006138 <_dtoa_r+0x7d0>
 800606a:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800606e:	464d      	mov	r5, r9
 8006070:	9e08      	ldr	r6, [sp, #32]
 8006072:	9a07      	ldr	r2, [sp, #28]
 8006074:	2101      	movs	r1, #1
 8006076:	441a      	add	r2, r3
 8006078:	4620      	mov	r0, r4
 800607a:	4499      	add	r9, r3
 800607c:	9207      	str	r2, [sp, #28]
 800607e:	f000 fb2a 	bl	80066d6 <__i2b>
 8006082:	4607      	mov	r7, r0
 8006084:	2d00      	cmp	r5, #0
 8006086:	dd0b      	ble.n	80060a0 <_dtoa_r+0x738>
 8006088:	9b07      	ldr	r3, [sp, #28]
 800608a:	2b00      	cmp	r3, #0
 800608c:	dd08      	ble.n	80060a0 <_dtoa_r+0x738>
 800608e:	42ab      	cmp	r3, r5
 8006090:	bfa8      	it	ge
 8006092:	462b      	movge	r3, r5
 8006094:	9a07      	ldr	r2, [sp, #28]
 8006096:	eba9 0903 	sub.w	r9, r9, r3
 800609a:	1aed      	subs	r5, r5, r3
 800609c:	1ad3      	subs	r3, r2, r3
 800609e:	9307      	str	r3, [sp, #28]
 80060a0:	9b08      	ldr	r3, [sp, #32]
 80060a2:	b1eb      	cbz	r3, 80060e0 <_dtoa_r+0x778>
 80060a4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	d065      	beq.n	8006176 <_dtoa_r+0x80e>
 80060aa:	b18e      	cbz	r6, 80060d0 <_dtoa_r+0x768>
 80060ac:	4639      	mov	r1, r7
 80060ae:	4632      	mov	r2, r6
 80060b0:	4620      	mov	r0, r4
 80060b2:	f000 fbaf 	bl	8006814 <__pow5mult>
 80060b6:	465a      	mov	r2, fp
 80060b8:	4601      	mov	r1, r0
 80060ba:	4607      	mov	r7, r0
 80060bc:	4620      	mov	r0, r4
 80060be:	f000 fb13 	bl	80066e8 <__multiply>
 80060c2:	4659      	mov	r1, fp
 80060c4:	900a      	str	r0, [sp, #40]	; 0x28
 80060c6:	4620      	mov	r0, r4
 80060c8:	f000 fa65 	bl	8006596 <_Bfree>
 80060cc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80060ce:	469b      	mov	fp, r3
 80060d0:	9b08      	ldr	r3, [sp, #32]
 80060d2:	1b9a      	subs	r2, r3, r6
 80060d4:	d004      	beq.n	80060e0 <_dtoa_r+0x778>
 80060d6:	4659      	mov	r1, fp
 80060d8:	4620      	mov	r0, r4
 80060da:	f000 fb9b 	bl	8006814 <__pow5mult>
 80060de:	4683      	mov	fp, r0
 80060e0:	2101      	movs	r1, #1
 80060e2:	4620      	mov	r0, r4
 80060e4:	f000 faf7 	bl	80066d6 <__i2b>
 80060e8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80060ea:	4606      	mov	r6, r0
 80060ec:	2b00      	cmp	r3, #0
 80060ee:	f000 81c6 	beq.w	800647e <_dtoa_r+0xb16>
 80060f2:	461a      	mov	r2, r3
 80060f4:	4601      	mov	r1, r0
 80060f6:	4620      	mov	r0, r4
 80060f8:	f000 fb8c 	bl	8006814 <__pow5mult>
 80060fc:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80060fe:	4606      	mov	r6, r0
 8006100:	2b01      	cmp	r3, #1
 8006102:	dc3e      	bgt.n	8006182 <_dtoa_r+0x81a>
 8006104:	9b02      	ldr	r3, [sp, #8]
 8006106:	2b00      	cmp	r3, #0
 8006108:	d137      	bne.n	800617a <_dtoa_r+0x812>
 800610a:	9b03      	ldr	r3, [sp, #12]
 800610c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006110:	2b00      	cmp	r3, #0
 8006112:	d134      	bne.n	800617e <_dtoa_r+0x816>
 8006114:	9b03      	ldr	r3, [sp, #12]
 8006116:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800611a:	0d1b      	lsrs	r3, r3, #20
 800611c:	051b      	lsls	r3, r3, #20
 800611e:	b12b      	cbz	r3, 800612c <_dtoa_r+0x7c4>
 8006120:	9b07      	ldr	r3, [sp, #28]
 8006122:	f109 0901 	add.w	r9, r9, #1
 8006126:	3301      	adds	r3, #1
 8006128:	9307      	str	r3, [sp, #28]
 800612a:	2301      	movs	r3, #1
 800612c:	9308      	str	r3, [sp, #32]
 800612e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006130:	2b00      	cmp	r3, #0
 8006132:	d128      	bne.n	8006186 <_dtoa_r+0x81e>
 8006134:	2001      	movs	r0, #1
 8006136:	e02e      	b.n	8006196 <_dtoa_r+0x82e>
 8006138:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800613a:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800613e:	e796      	b.n	800606e <_dtoa_r+0x706>
 8006140:	9b08      	ldr	r3, [sp, #32]
 8006142:	f108 36ff 	add.w	r6, r8, #4294967295
 8006146:	42b3      	cmp	r3, r6
 8006148:	bfb7      	itett	lt
 800614a:	9b08      	ldrlt	r3, [sp, #32]
 800614c:	1b9e      	subge	r6, r3, r6
 800614e:	1af2      	sublt	r2, r6, r3
 8006150:	9b0c      	ldrlt	r3, [sp, #48]	; 0x30
 8006152:	bfbf      	itttt	lt
 8006154:	9608      	strlt	r6, [sp, #32]
 8006156:	189b      	addlt	r3, r3, r2
 8006158:	930c      	strlt	r3, [sp, #48]	; 0x30
 800615a:	2600      	movlt	r6, #0
 800615c:	f1b8 0f00 	cmp.w	r8, #0
 8006160:	bfb9      	ittee	lt
 8006162:	eba9 0508 	sublt.w	r5, r9, r8
 8006166:	2300      	movlt	r3, #0
 8006168:	464d      	movge	r5, r9
 800616a:	4643      	movge	r3, r8
 800616c:	e781      	b.n	8006072 <_dtoa_r+0x70a>
 800616e:	9e08      	ldr	r6, [sp, #32]
 8006170:	464d      	mov	r5, r9
 8006172:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8006174:	e786      	b.n	8006084 <_dtoa_r+0x71c>
 8006176:	9a08      	ldr	r2, [sp, #32]
 8006178:	e7ad      	b.n	80060d6 <_dtoa_r+0x76e>
 800617a:	2300      	movs	r3, #0
 800617c:	e7d6      	b.n	800612c <_dtoa_r+0x7c4>
 800617e:	9b02      	ldr	r3, [sp, #8]
 8006180:	e7d4      	b.n	800612c <_dtoa_r+0x7c4>
 8006182:	2300      	movs	r3, #0
 8006184:	9308      	str	r3, [sp, #32]
 8006186:	6933      	ldr	r3, [r6, #16]
 8006188:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800618c:	6918      	ldr	r0, [r3, #16]
 800618e:	f000 fa54 	bl	800663a <__hi0bits>
 8006192:	f1c0 0020 	rsb	r0, r0, #32
 8006196:	9b07      	ldr	r3, [sp, #28]
 8006198:	4418      	add	r0, r3
 800619a:	f010 001f 	ands.w	r0, r0, #31
 800619e:	d047      	beq.n	8006230 <_dtoa_r+0x8c8>
 80061a0:	f1c0 0320 	rsb	r3, r0, #32
 80061a4:	2b04      	cmp	r3, #4
 80061a6:	dd3b      	ble.n	8006220 <_dtoa_r+0x8b8>
 80061a8:	9b07      	ldr	r3, [sp, #28]
 80061aa:	f1c0 001c 	rsb	r0, r0, #28
 80061ae:	4481      	add	r9, r0
 80061b0:	4405      	add	r5, r0
 80061b2:	4403      	add	r3, r0
 80061b4:	9307      	str	r3, [sp, #28]
 80061b6:	f1b9 0f00 	cmp.w	r9, #0
 80061ba:	dd05      	ble.n	80061c8 <_dtoa_r+0x860>
 80061bc:	4659      	mov	r1, fp
 80061be:	464a      	mov	r2, r9
 80061c0:	4620      	mov	r0, r4
 80061c2:	f000 fb75 	bl	80068b0 <__lshift>
 80061c6:	4683      	mov	fp, r0
 80061c8:	9b07      	ldr	r3, [sp, #28]
 80061ca:	2b00      	cmp	r3, #0
 80061cc:	dd05      	ble.n	80061da <_dtoa_r+0x872>
 80061ce:	4631      	mov	r1, r6
 80061d0:	461a      	mov	r2, r3
 80061d2:	4620      	mov	r0, r4
 80061d4:	f000 fb6c 	bl	80068b0 <__lshift>
 80061d8:	4606      	mov	r6, r0
 80061da:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80061dc:	b353      	cbz	r3, 8006234 <_dtoa_r+0x8cc>
 80061de:	4631      	mov	r1, r6
 80061e0:	4658      	mov	r0, fp
 80061e2:	f000 fbb9 	bl	8006958 <__mcmp>
 80061e6:	2800      	cmp	r0, #0
 80061e8:	da24      	bge.n	8006234 <_dtoa_r+0x8cc>
 80061ea:	2300      	movs	r3, #0
 80061ec:	4659      	mov	r1, fp
 80061ee:	220a      	movs	r2, #10
 80061f0:	4620      	mov	r0, r4
 80061f2:	f000 f9e7 	bl	80065c4 <__multadd>
 80061f6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80061f8:	f10a 3aff 	add.w	sl, sl, #4294967295
 80061fc:	4683      	mov	fp, r0
 80061fe:	2b00      	cmp	r3, #0
 8006200:	f000 8144 	beq.w	800648c <_dtoa_r+0xb24>
 8006204:	2300      	movs	r3, #0
 8006206:	4639      	mov	r1, r7
 8006208:	220a      	movs	r2, #10
 800620a:	4620      	mov	r0, r4
 800620c:	f000 f9da 	bl	80065c4 <__multadd>
 8006210:	9b04      	ldr	r3, [sp, #16]
 8006212:	4607      	mov	r7, r0
 8006214:	2b00      	cmp	r3, #0
 8006216:	dc4d      	bgt.n	80062b4 <_dtoa_r+0x94c>
 8006218:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800621a:	2b02      	cmp	r3, #2
 800621c:	dd4a      	ble.n	80062b4 <_dtoa_r+0x94c>
 800621e:	e011      	b.n	8006244 <_dtoa_r+0x8dc>
 8006220:	d0c9      	beq.n	80061b6 <_dtoa_r+0x84e>
 8006222:	9a07      	ldr	r2, [sp, #28]
 8006224:	331c      	adds	r3, #28
 8006226:	441a      	add	r2, r3
 8006228:	4499      	add	r9, r3
 800622a:	441d      	add	r5, r3
 800622c:	4613      	mov	r3, r2
 800622e:	e7c1      	b.n	80061b4 <_dtoa_r+0x84c>
 8006230:	4603      	mov	r3, r0
 8006232:	e7f6      	b.n	8006222 <_dtoa_r+0x8ba>
 8006234:	f1b8 0f00 	cmp.w	r8, #0
 8006238:	dc36      	bgt.n	80062a8 <_dtoa_r+0x940>
 800623a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800623c:	2b02      	cmp	r3, #2
 800623e:	dd33      	ble.n	80062a8 <_dtoa_r+0x940>
 8006240:	f8cd 8010 	str.w	r8, [sp, #16]
 8006244:	9b04      	ldr	r3, [sp, #16]
 8006246:	b963      	cbnz	r3, 8006262 <_dtoa_r+0x8fa>
 8006248:	4631      	mov	r1, r6
 800624a:	2205      	movs	r2, #5
 800624c:	4620      	mov	r0, r4
 800624e:	f000 f9b9 	bl	80065c4 <__multadd>
 8006252:	4601      	mov	r1, r0
 8006254:	4606      	mov	r6, r0
 8006256:	4658      	mov	r0, fp
 8006258:	f000 fb7e 	bl	8006958 <__mcmp>
 800625c:	2800      	cmp	r0, #0
 800625e:	f73f add3 	bgt.w	8005e08 <_dtoa_r+0x4a0>
 8006262:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8006264:	9d06      	ldr	r5, [sp, #24]
 8006266:	ea6f 0a03 	mvn.w	sl, r3
 800626a:	f04f 0900 	mov.w	r9, #0
 800626e:	4631      	mov	r1, r6
 8006270:	4620      	mov	r0, r4
 8006272:	f000 f990 	bl	8006596 <_Bfree>
 8006276:	2f00      	cmp	r7, #0
 8006278:	f43f aebd 	beq.w	8005ff6 <_dtoa_r+0x68e>
 800627c:	f1b9 0f00 	cmp.w	r9, #0
 8006280:	d005      	beq.n	800628e <_dtoa_r+0x926>
 8006282:	45b9      	cmp	r9, r7
 8006284:	d003      	beq.n	800628e <_dtoa_r+0x926>
 8006286:	4649      	mov	r1, r9
 8006288:	4620      	mov	r0, r4
 800628a:	f000 f984 	bl	8006596 <_Bfree>
 800628e:	4639      	mov	r1, r7
 8006290:	4620      	mov	r0, r4
 8006292:	f000 f980 	bl	8006596 <_Bfree>
 8006296:	e6ae      	b.n	8005ff6 <_dtoa_r+0x68e>
 8006298:	2600      	movs	r6, #0
 800629a:	4637      	mov	r7, r6
 800629c:	e7e1      	b.n	8006262 <_dtoa_r+0x8fa>
 800629e:	46ba      	mov	sl, r7
 80062a0:	4637      	mov	r7, r6
 80062a2:	e5b1      	b.n	8005e08 <_dtoa_r+0x4a0>
 80062a4:	40240000 	.word	0x40240000
 80062a8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80062aa:	f8cd 8010 	str.w	r8, [sp, #16]
 80062ae:	2b00      	cmp	r3, #0
 80062b0:	f000 80f3 	beq.w	800649a <_dtoa_r+0xb32>
 80062b4:	2d00      	cmp	r5, #0
 80062b6:	dd05      	ble.n	80062c4 <_dtoa_r+0x95c>
 80062b8:	4639      	mov	r1, r7
 80062ba:	462a      	mov	r2, r5
 80062bc:	4620      	mov	r0, r4
 80062be:	f000 faf7 	bl	80068b0 <__lshift>
 80062c2:	4607      	mov	r7, r0
 80062c4:	9b08      	ldr	r3, [sp, #32]
 80062c6:	2b00      	cmp	r3, #0
 80062c8:	d04c      	beq.n	8006364 <_dtoa_r+0x9fc>
 80062ca:	6879      	ldr	r1, [r7, #4]
 80062cc:	4620      	mov	r0, r4
 80062ce:	f000 f92e 	bl	800652e <_Balloc>
 80062d2:	4605      	mov	r5, r0
 80062d4:	693a      	ldr	r2, [r7, #16]
 80062d6:	f107 010c 	add.w	r1, r7, #12
 80062da:	3202      	adds	r2, #2
 80062dc:	0092      	lsls	r2, r2, #2
 80062de:	300c      	adds	r0, #12
 80062e0:	f000 f91a 	bl	8006518 <memcpy>
 80062e4:	2201      	movs	r2, #1
 80062e6:	4629      	mov	r1, r5
 80062e8:	4620      	mov	r0, r4
 80062ea:	f000 fae1 	bl	80068b0 <__lshift>
 80062ee:	46b9      	mov	r9, r7
 80062f0:	4607      	mov	r7, r0
 80062f2:	9b06      	ldr	r3, [sp, #24]
 80062f4:	9307      	str	r3, [sp, #28]
 80062f6:	9b02      	ldr	r3, [sp, #8]
 80062f8:	f003 0301 	and.w	r3, r3, #1
 80062fc:	9308      	str	r3, [sp, #32]
 80062fe:	4631      	mov	r1, r6
 8006300:	4658      	mov	r0, fp
 8006302:	f7ff faa0 	bl	8005846 <quorem>
 8006306:	4649      	mov	r1, r9
 8006308:	4605      	mov	r5, r0
 800630a:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800630e:	4658      	mov	r0, fp
 8006310:	f000 fb22 	bl	8006958 <__mcmp>
 8006314:	463a      	mov	r2, r7
 8006316:	9002      	str	r0, [sp, #8]
 8006318:	4631      	mov	r1, r6
 800631a:	4620      	mov	r0, r4
 800631c:	f000 fb36 	bl	800698c <__mdiff>
 8006320:	68c3      	ldr	r3, [r0, #12]
 8006322:	4602      	mov	r2, r0
 8006324:	bb03      	cbnz	r3, 8006368 <_dtoa_r+0xa00>
 8006326:	4601      	mov	r1, r0
 8006328:	9009      	str	r0, [sp, #36]	; 0x24
 800632a:	4658      	mov	r0, fp
 800632c:	f000 fb14 	bl	8006958 <__mcmp>
 8006330:	4603      	mov	r3, r0
 8006332:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006334:	4611      	mov	r1, r2
 8006336:	4620      	mov	r0, r4
 8006338:	9309      	str	r3, [sp, #36]	; 0x24
 800633a:	f000 f92c 	bl	8006596 <_Bfree>
 800633e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006340:	b9a3      	cbnz	r3, 800636c <_dtoa_r+0xa04>
 8006342:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8006344:	b992      	cbnz	r2, 800636c <_dtoa_r+0xa04>
 8006346:	9a08      	ldr	r2, [sp, #32]
 8006348:	b982      	cbnz	r2, 800636c <_dtoa_r+0xa04>
 800634a:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800634e:	d029      	beq.n	80063a4 <_dtoa_r+0xa3c>
 8006350:	9b02      	ldr	r3, [sp, #8]
 8006352:	2b00      	cmp	r3, #0
 8006354:	dd01      	ble.n	800635a <_dtoa_r+0x9f2>
 8006356:	f105 0831 	add.w	r8, r5, #49	; 0x31
 800635a:	9b07      	ldr	r3, [sp, #28]
 800635c:	1c5d      	adds	r5, r3, #1
 800635e:	f883 8000 	strb.w	r8, [r3]
 8006362:	e784      	b.n	800626e <_dtoa_r+0x906>
 8006364:	4638      	mov	r0, r7
 8006366:	e7c2      	b.n	80062ee <_dtoa_r+0x986>
 8006368:	2301      	movs	r3, #1
 800636a:	e7e3      	b.n	8006334 <_dtoa_r+0x9cc>
 800636c:	9a02      	ldr	r2, [sp, #8]
 800636e:	2a00      	cmp	r2, #0
 8006370:	db04      	blt.n	800637c <_dtoa_r+0xa14>
 8006372:	d123      	bne.n	80063bc <_dtoa_r+0xa54>
 8006374:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8006376:	bb0a      	cbnz	r2, 80063bc <_dtoa_r+0xa54>
 8006378:	9a08      	ldr	r2, [sp, #32]
 800637a:	b9fa      	cbnz	r2, 80063bc <_dtoa_r+0xa54>
 800637c:	2b00      	cmp	r3, #0
 800637e:	ddec      	ble.n	800635a <_dtoa_r+0x9f2>
 8006380:	4659      	mov	r1, fp
 8006382:	2201      	movs	r2, #1
 8006384:	4620      	mov	r0, r4
 8006386:	f000 fa93 	bl	80068b0 <__lshift>
 800638a:	4631      	mov	r1, r6
 800638c:	4683      	mov	fp, r0
 800638e:	f000 fae3 	bl	8006958 <__mcmp>
 8006392:	2800      	cmp	r0, #0
 8006394:	dc03      	bgt.n	800639e <_dtoa_r+0xa36>
 8006396:	d1e0      	bne.n	800635a <_dtoa_r+0x9f2>
 8006398:	f018 0f01 	tst.w	r8, #1
 800639c:	d0dd      	beq.n	800635a <_dtoa_r+0x9f2>
 800639e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 80063a2:	d1d8      	bne.n	8006356 <_dtoa_r+0x9ee>
 80063a4:	9b07      	ldr	r3, [sp, #28]
 80063a6:	9a07      	ldr	r2, [sp, #28]
 80063a8:	1c5d      	adds	r5, r3, #1
 80063aa:	2339      	movs	r3, #57	; 0x39
 80063ac:	7013      	strb	r3, [r2, #0]
 80063ae:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80063b2:	1e6a      	subs	r2, r5, #1
 80063b4:	2b39      	cmp	r3, #57	; 0x39
 80063b6:	d04d      	beq.n	8006454 <_dtoa_r+0xaec>
 80063b8:	3301      	adds	r3, #1
 80063ba:	e052      	b.n	8006462 <_dtoa_r+0xafa>
 80063bc:	9a07      	ldr	r2, [sp, #28]
 80063be:	2b00      	cmp	r3, #0
 80063c0:	f102 0501 	add.w	r5, r2, #1
 80063c4:	dd06      	ble.n	80063d4 <_dtoa_r+0xa6c>
 80063c6:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 80063ca:	d0eb      	beq.n	80063a4 <_dtoa_r+0xa3c>
 80063cc:	f108 0801 	add.w	r8, r8, #1
 80063d0:	9b07      	ldr	r3, [sp, #28]
 80063d2:	e7c4      	b.n	800635e <_dtoa_r+0x9f6>
 80063d4:	9b06      	ldr	r3, [sp, #24]
 80063d6:	9a04      	ldr	r2, [sp, #16]
 80063d8:	1aeb      	subs	r3, r5, r3
 80063da:	4293      	cmp	r3, r2
 80063dc:	f805 8c01 	strb.w	r8, [r5, #-1]
 80063e0:	d021      	beq.n	8006426 <_dtoa_r+0xabe>
 80063e2:	4659      	mov	r1, fp
 80063e4:	2300      	movs	r3, #0
 80063e6:	220a      	movs	r2, #10
 80063e8:	4620      	mov	r0, r4
 80063ea:	f000 f8eb 	bl	80065c4 <__multadd>
 80063ee:	45b9      	cmp	r9, r7
 80063f0:	4683      	mov	fp, r0
 80063f2:	f04f 0300 	mov.w	r3, #0
 80063f6:	f04f 020a 	mov.w	r2, #10
 80063fa:	4649      	mov	r1, r9
 80063fc:	4620      	mov	r0, r4
 80063fe:	d105      	bne.n	800640c <_dtoa_r+0xaa4>
 8006400:	f000 f8e0 	bl	80065c4 <__multadd>
 8006404:	4681      	mov	r9, r0
 8006406:	4607      	mov	r7, r0
 8006408:	9507      	str	r5, [sp, #28]
 800640a:	e778      	b.n	80062fe <_dtoa_r+0x996>
 800640c:	f000 f8da 	bl	80065c4 <__multadd>
 8006410:	4639      	mov	r1, r7
 8006412:	4681      	mov	r9, r0
 8006414:	2300      	movs	r3, #0
 8006416:	220a      	movs	r2, #10
 8006418:	4620      	mov	r0, r4
 800641a:	f000 f8d3 	bl	80065c4 <__multadd>
 800641e:	4607      	mov	r7, r0
 8006420:	e7f2      	b.n	8006408 <_dtoa_r+0xaa0>
 8006422:	f04f 0900 	mov.w	r9, #0
 8006426:	4659      	mov	r1, fp
 8006428:	2201      	movs	r2, #1
 800642a:	4620      	mov	r0, r4
 800642c:	f000 fa40 	bl	80068b0 <__lshift>
 8006430:	4631      	mov	r1, r6
 8006432:	4683      	mov	fp, r0
 8006434:	f000 fa90 	bl	8006958 <__mcmp>
 8006438:	2800      	cmp	r0, #0
 800643a:	dcb8      	bgt.n	80063ae <_dtoa_r+0xa46>
 800643c:	d102      	bne.n	8006444 <_dtoa_r+0xadc>
 800643e:	f018 0f01 	tst.w	r8, #1
 8006442:	d1b4      	bne.n	80063ae <_dtoa_r+0xa46>
 8006444:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8006448:	1e6a      	subs	r2, r5, #1
 800644a:	2b30      	cmp	r3, #48	; 0x30
 800644c:	f47f af0f 	bne.w	800626e <_dtoa_r+0x906>
 8006450:	4615      	mov	r5, r2
 8006452:	e7f7      	b.n	8006444 <_dtoa_r+0xadc>
 8006454:	9b06      	ldr	r3, [sp, #24]
 8006456:	4293      	cmp	r3, r2
 8006458:	d105      	bne.n	8006466 <_dtoa_r+0xafe>
 800645a:	2331      	movs	r3, #49	; 0x31
 800645c:	9a06      	ldr	r2, [sp, #24]
 800645e:	f10a 0a01 	add.w	sl, sl, #1
 8006462:	7013      	strb	r3, [r2, #0]
 8006464:	e703      	b.n	800626e <_dtoa_r+0x906>
 8006466:	4615      	mov	r5, r2
 8006468:	e7a1      	b.n	80063ae <_dtoa_r+0xa46>
 800646a:	4b17      	ldr	r3, [pc, #92]	; (80064c8 <_dtoa_r+0xb60>)
 800646c:	f7ff bae1 	b.w	8005a32 <_dtoa_r+0xca>
 8006470:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006472:	2b00      	cmp	r3, #0
 8006474:	f47f aabb 	bne.w	80059ee <_dtoa_r+0x86>
 8006478:	4b14      	ldr	r3, [pc, #80]	; (80064cc <_dtoa_r+0xb64>)
 800647a:	f7ff bada 	b.w	8005a32 <_dtoa_r+0xca>
 800647e:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8006480:	2b01      	cmp	r3, #1
 8006482:	f77f ae3f 	ble.w	8006104 <_dtoa_r+0x79c>
 8006486:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006488:	9308      	str	r3, [sp, #32]
 800648a:	e653      	b.n	8006134 <_dtoa_r+0x7cc>
 800648c:	9b04      	ldr	r3, [sp, #16]
 800648e:	2b00      	cmp	r3, #0
 8006490:	dc03      	bgt.n	800649a <_dtoa_r+0xb32>
 8006492:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8006494:	2b02      	cmp	r3, #2
 8006496:	f73f aed5 	bgt.w	8006244 <_dtoa_r+0x8dc>
 800649a:	9d06      	ldr	r5, [sp, #24]
 800649c:	4631      	mov	r1, r6
 800649e:	4658      	mov	r0, fp
 80064a0:	f7ff f9d1 	bl	8005846 <quorem>
 80064a4:	9b06      	ldr	r3, [sp, #24]
 80064a6:	f100 0830 	add.w	r8, r0, #48	; 0x30
 80064aa:	f805 8b01 	strb.w	r8, [r5], #1
 80064ae:	9a04      	ldr	r2, [sp, #16]
 80064b0:	1aeb      	subs	r3, r5, r3
 80064b2:	429a      	cmp	r2, r3
 80064b4:	ddb5      	ble.n	8006422 <_dtoa_r+0xaba>
 80064b6:	4659      	mov	r1, fp
 80064b8:	2300      	movs	r3, #0
 80064ba:	220a      	movs	r2, #10
 80064bc:	4620      	mov	r0, r4
 80064be:	f000 f881 	bl	80065c4 <__multadd>
 80064c2:	4683      	mov	fp, r0
 80064c4:	e7ea      	b.n	800649c <_dtoa_r+0xb34>
 80064c6:	bf00      	nop
 80064c8:	0800981c 	.word	0x0800981c
 80064cc:	08009840 	.word	0x08009840

080064d0 <_localeconv_r>:
 80064d0:	4b04      	ldr	r3, [pc, #16]	; (80064e4 <_localeconv_r+0x14>)
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	6a18      	ldr	r0, [r3, #32]
 80064d6:	4b04      	ldr	r3, [pc, #16]	; (80064e8 <_localeconv_r+0x18>)
 80064d8:	2800      	cmp	r0, #0
 80064da:	bf08      	it	eq
 80064dc:	4618      	moveq	r0, r3
 80064de:	30f0      	adds	r0, #240	; 0xf0
 80064e0:	4770      	bx	lr
 80064e2:	bf00      	nop
 80064e4:	200000ac 	.word	0x200000ac
 80064e8:	20000110 	.word	0x20000110

080064ec <malloc>:
 80064ec:	4b02      	ldr	r3, [pc, #8]	; (80064f8 <malloc+0xc>)
 80064ee:	4601      	mov	r1, r0
 80064f0:	6818      	ldr	r0, [r3, #0]
 80064f2:	f000 bb53 	b.w	8006b9c <_malloc_r>
 80064f6:	bf00      	nop
 80064f8:	200000ac 	.word	0x200000ac

080064fc <memchr>:
 80064fc:	b510      	push	{r4, lr}
 80064fe:	b2c9      	uxtb	r1, r1
 8006500:	4402      	add	r2, r0
 8006502:	4290      	cmp	r0, r2
 8006504:	4603      	mov	r3, r0
 8006506:	d101      	bne.n	800650c <memchr+0x10>
 8006508:	2300      	movs	r3, #0
 800650a:	e003      	b.n	8006514 <memchr+0x18>
 800650c:	781c      	ldrb	r4, [r3, #0]
 800650e:	3001      	adds	r0, #1
 8006510:	428c      	cmp	r4, r1
 8006512:	d1f6      	bne.n	8006502 <memchr+0x6>
 8006514:	4618      	mov	r0, r3
 8006516:	bd10      	pop	{r4, pc}

08006518 <memcpy>:
 8006518:	b510      	push	{r4, lr}
 800651a:	1e43      	subs	r3, r0, #1
 800651c:	440a      	add	r2, r1
 800651e:	4291      	cmp	r1, r2
 8006520:	d100      	bne.n	8006524 <memcpy+0xc>
 8006522:	bd10      	pop	{r4, pc}
 8006524:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006528:	f803 4f01 	strb.w	r4, [r3, #1]!
 800652c:	e7f7      	b.n	800651e <memcpy+0x6>

0800652e <_Balloc>:
 800652e:	b570      	push	{r4, r5, r6, lr}
 8006530:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8006532:	4604      	mov	r4, r0
 8006534:	460e      	mov	r6, r1
 8006536:	b93d      	cbnz	r5, 8006548 <_Balloc+0x1a>
 8006538:	2010      	movs	r0, #16
 800653a:	f7ff ffd7 	bl	80064ec <malloc>
 800653e:	6260      	str	r0, [r4, #36]	; 0x24
 8006540:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8006544:	6005      	str	r5, [r0, #0]
 8006546:	60c5      	str	r5, [r0, #12]
 8006548:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800654a:	68eb      	ldr	r3, [r5, #12]
 800654c:	b183      	cbz	r3, 8006570 <_Balloc+0x42>
 800654e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006550:	68db      	ldr	r3, [r3, #12]
 8006552:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8006556:	b9b8      	cbnz	r0, 8006588 <_Balloc+0x5a>
 8006558:	2101      	movs	r1, #1
 800655a:	fa01 f506 	lsl.w	r5, r1, r6
 800655e:	1d6a      	adds	r2, r5, #5
 8006560:	0092      	lsls	r2, r2, #2
 8006562:	4620      	mov	r0, r4
 8006564:	f000 fabf 	bl	8006ae6 <_calloc_r>
 8006568:	b160      	cbz	r0, 8006584 <_Balloc+0x56>
 800656a:	e9c0 6501 	strd	r6, r5, [r0, #4]
 800656e:	e00e      	b.n	800658e <_Balloc+0x60>
 8006570:	2221      	movs	r2, #33	; 0x21
 8006572:	2104      	movs	r1, #4
 8006574:	4620      	mov	r0, r4
 8006576:	f000 fab6 	bl	8006ae6 <_calloc_r>
 800657a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800657c:	60e8      	str	r0, [r5, #12]
 800657e:	68db      	ldr	r3, [r3, #12]
 8006580:	2b00      	cmp	r3, #0
 8006582:	d1e4      	bne.n	800654e <_Balloc+0x20>
 8006584:	2000      	movs	r0, #0
 8006586:	bd70      	pop	{r4, r5, r6, pc}
 8006588:	6802      	ldr	r2, [r0, #0]
 800658a:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 800658e:	2300      	movs	r3, #0
 8006590:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8006594:	e7f7      	b.n	8006586 <_Balloc+0x58>

08006596 <_Bfree>:
 8006596:	b570      	push	{r4, r5, r6, lr}
 8006598:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800659a:	4606      	mov	r6, r0
 800659c:	460d      	mov	r5, r1
 800659e:	b93c      	cbnz	r4, 80065b0 <_Bfree+0x1a>
 80065a0:	2010      	movs	r0, #16
 80065a2:	f7ff ffa3 	bl	80064ec <malloc>
 80065a6:	6270      	str	r0, [r6, #36]	; 0x24
 80065a8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80065ac:	6004      	str	r4, [r0, #0]
 80065ae:	60c4      	str	r4, [r0, #12]
 80065b0:	b13d      	cbz	r5, 80065c2 <_Bfree+0x2c>
 80065b2:	6a73      	ldr	r3, [r6, #36]	; 0x24
 80065b4:	686a      	ldr	r2, [r5, #4]
 80065b6:	68db      	ldr	r3, [r3, #12]
 80065b8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80065bc:	6029      	str	r1, [r5, #0]
 80065be:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 80065c2:	bd70      	pop	{r4, r5, r6, pc}

080065c4 <__multadd>:
 80065c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80065c8:	461f      	mov	r7, r3
 80065ca:	4606      	mov	r6, r0
 80065cc:	460c      	mov	r4, r1
 80065ce:	2300      	movs	r3, #0
 80065d0:	690d      	ldr	r5, [r1, #16]
 80065d2:	f101 0c14 	add.w	ip, r1, #20
 80065d6:	f8dc 0000 	ldr.w	r0, [ip]
 80065da:	3301      	adds	r3, #1
 80065dc:	b281      	uxth	r1, r0
 80065de:	fb02 7101 	mla	r1, r2, r1, r7
 80065e2:	0c00      	lsrs	r0, r0, #16
 80065e4:	0c0f      	lsrs	r7, r1, #16
 80065e6:	fb02 7000 	mla	r0, r2, r0, r7
 80065ea:	b289      	uxth	r1, r1
 80065ec:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 80065f0:	429d      	cmp	r5, r3
 80065f2:	ea4f 4710 	mov.w	r7, r0, lsr #16
 80065f6:	f84c 1b04 	str.w	r1, [ip], #4
 80065fa:	dcec      	bgt.n	80065d6 <__multadd+0x12>
 80065fc:	b1d7      	cbz	r7, 8006634 <__multadd+0x70>
 80065fe:	68a3      	ldr	r3, [r4, #8]
 8006600:	42ab      	cmp	r3, r5
 8006602:	dc12      	bgt.n	800662a <__multadd+0x66>
 8006604:	6861      	ldr	r1, [r4, #4]
 8006606:	4630      	mov	r0, r6
 8006608:	3101      	adds	r1, #1
 800660a:	f7ff ff90 	bl	800652e <_Balloc>
 800660e:	4680      	mov	r8, r0
 8006610:	6922      	ldr	r2, [r4, #16]
 8006612:	f104 010c 	add.w	r1, r4, #12
 8006616:	3202      	adds	r2, #2
 8006618:	0092      	lsls	r2, r2, #2
 800661a:	300c      	adds	r0, #12
 800661c:	f7ff ff7c 	bl	8006518 <memcpy>
 8006620:	4621      	mov	r1, r4
 8006622:	4630      	mov	r0, r6
 8006624:	f7ff ffb7 	bl	8006596 <_Bfree>
 8006628:	4644      	mov	r4, r8
 800662a:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800662e:	3501      	adds	r5, #1
 8006630:	615f      	str	r7, [r3, #20]
 8006632:	6125      	str	r5, [r4, #16]
 8006634:	4620      	mov	r0, r4
 8006636:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800663a <__hi0bits>:
 800663a:	0c02      	lsrs	r2, r0, #16
 800663c:	0412      	lsls	r2, r2, #16
 800663e:	4603      	mov	r3, r0
 8006640:	b9b2      	cbnz	r2, 8006670 <__hi0bits+0x36>
 8006642:	0403      	lsls	r3, r0, #16
 8006644:	2010      	movs	r0, #16
 8006646:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800664a:	bf04      	itt	eq
 800664c:	021b      	lsleq	r3, r3, #8
 800664e:	3008      	addeq	r0, #8
 8006650:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8006654:	bf04      	itt	eq
 8006656:	011b      	lsleq	r3, r3, #4
 8006658:	3004      	addeq	r0, #4
 800665a:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800665e:	bf04      	itt	eq
 8006660:	009b      	lsleq	r3, r3, #2
 8006662:	3002      	addeq	r0, #2
 8006664:	2b00      	cmp	r3, #0
 8006666:	db06      	blt.n	8006676 <__hi0bits+0x3c>
 8006668:	005b      	lsls	r3, r3, #1
 800666a:	d503      	bpl.n	8006674 <__hi0bits+0x3a>
 800666c:	3001      	adds	r0, #1
 800666e:	4770      	bx	lr
 8006670:	2000      	movs	r0, #0
 8006672:	e7e8      	b.n	8006646 <__hi0bits+0xc>
 8006674:	2020      	movs	r0, #32
 8006676:	4770      	bx	lr

08006678 <__lo0bits>:
 8006678:	6803      	ldr	r3, [r0, #0]
 800667a:	4601      	mov	r1, r0
 800667c:	f013 0207 	ands.w	r2, r3, #7
 8006680:	d00b      	beq.n	800669a <__lo0bits+0x22>
 8006682:	07da      	lsls	r2, r3, #31
 8006684:	d423      	bmi.n	80066ce <__lo0bits+0x56>
 8006686:	0798      	lsls	r0, r3, #30
 8006688:	bf49      	itett	mi
 800668a:	085b      	lsrmi	r3, r3, #1
 800668c:	089b      	lsrpl	r3, r3, #2
 800668e:	2001      	movmi	r0, #1
 8006690:	600b      	strmi	r3, [r1, #0]
 8006692:	bf5c      	itt	pl
 8006694:	600b      	strpl	r3, [r1, #0]
 8006696:	2002      	movpl	r0, #2
 8006698:	4770      	bx	lr
 800669a:	b298      	uxth	r0, r3
 800669c:	b9a8      	cbnz	r0, 80066ca <__lo0bits+0x52>
 800669e:	2010      	movs	r0, #16
 80066a0:	0c1b      	lsrs	r3, r3, #16
 80066a2:	f013 0fff 	tst.w	r3, #255	; 0xff
 80066a6:	bf04      	itt	eq
 80066a8:	0a1b      	lsreq	r3, r3, #8
 80066aa:	3008      	addeq	r0, #8
 80066ac:	071a      	lsls	r2, r3, #28
 80066ae:	bf04      	itt	eq
 80066b0:	091b      	lsreq	r3, r3, #4
 80066b2:	3004      	addeq	r0, #4
 80066b4:	079a      	lsls	r2, r3, #30
 80066b6:	bf04      	itt	eq
 80066b8:	089b      	lsreq	r3, r3, #2
 80066ba:	3002      	addeq	r0, #2
 80066bc:	07da      	lsls	r2, r3, #31
 80066be:	d402      	bmi.n	80066c6 <__lo0bits+0x4e>
 80066c0:	085b      	lsrs	r3, r3, #1
 80066c2:	d006      	beq.n	80066d2 <__lo0bits+0x5a>
 80066c4:	3001      	adds	r0, #1
 80066c6:	600b      	str	r3, [r1, #0]
 80066c8:	4770      	bx	lr
 80066ca:	4610      	mov	r0, r2
 80066cc:	e7e9      	b.n	80066a2 <__lo0bits+0x2a>
 80066ce:	2000      	movs	r0, #0
 80066d0:	4770      	bx	lr
 80066d2:	2020      	movs	r0, #32
 80066d4:	4770      	bx	lr

080066d6 <__i2b>:
 80066d6:	b510      	push	{r4, lr}
 80066d8:	460c      	mov	r4, r1
 80066da:	2101      	movs	r1, #1
 80066dc:	f7ff ff27 	bl	800652e <_Balloc>
 80066e0:	2201      	movs	r2, #1
 80066e2:	6144      	str	r4, [r0, #20]
 80066e4:	6102      	str	r2, [r0, #16]
 80066e6:	bd10      	pop	{r4, pc}

080066e8 <__multiply>:
 80066e8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80066ec:	4614      	mov	r4, r2
 80066ee:	690a      	ldr	r2, [r1, #16]
 80066f0:	6923      	ldr	r3, [r4, #16]
 80066f2:	4688      	mov	r8, r1
 80066f4:	429a      	cmp	r2, r3
 80066f6:	bfbe      	ittt	lt
 80066f8:	460b      	movlt	r3, r1
 80066fa:	46a0      	movlt	r8, r4
 80066fc:	461c      	movlt	r4, r3
 80066fe:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8006702:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8006706:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800670a:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800670e:	eb07 0609 	add.w	r6, r7, r9
 8006712:	42b3      	cmp	r3, r6
 8006714:	bfb8      	it	lt
 8006716:	3101      	addlt	r1, #1
 8006718:	f7ff ff09 	bl	800652e <_Balloc>
 800671c:	f100 0514 	add.w	r5, r0, #20
 8006720:	462b      	mov	r3, r5
 8006722:	2200      	movs	r2, #0
 8006724:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 8006728:	4573      	cmp	r3, lr
 800672a:	d316      	bcc.n	800675a <__multiply+0x72>
 800672c:	f104 0214 	add.w	r2, r4, #20
 8006730:	f108 0114 	add.w	r1, r8, #20
 8006734:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 8006738:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 800673c:	9300      	str	r3, [sp, #0]
 800673e:	9b00      	ldr	r3, [sp, #0]
 8006740:	9201      	str	r2, [sp, #4]
 8006742:	4293      	cmp	r3, r2
 8006744:	d80c      	bhi.n	8006760 <__multiply+0x78>
 8006746:	2e00      	cmp	r6, #0
 8006748:	dd03      	ble.n	8006752 <__multiply+0x6a>
 800674a:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800674e:	2b00      	cmp	r3, #0
 8006750:	d05d      	beq.n	800680e <__multiply+0x126>
 8006752:	6106      	str	r6, [r0, #16]
 8006754:	b003      	add	sp, #12
 8006756:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800675a:	f843 2b04 	str.w	r2, [r3], #4
 800675e:	e7e3      	b.n	8006728 <__multiply+0x40>
 8006760:	f8b2 b000 	ldrh.w	fp, [r2]
 8006764:	f1bb 0f00 	cmp.w	fp, #0
 8006768:	d023      	beq.n	80067b2 <__multiply+0xca>
 800676a:	4689      	mov	r9, r1
 800676c:	46ac      	mov	ip, r5
 800676e:	f04f 0800 	mov.w	r8, #0
 8006772:	f859 4b04 	ldr.w	r4, [r9], #4
 8006776:	f8dc a000 	ldr.w	sl, [ip]
 800677a:	b2a3      	uxth	r3, r4
 800677c:	fa1f fa8a 	uxth.w	sl, sl
 8006780:	fb0b a303 	mla	r3, fp, r3, sl
 8006784:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8006788:	f8dc 4000 	ldr.w	r4, [ip]
 800678c:	4443      	add	r3, r8
 800678e:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8006792:	fb0b 840a 	mla	r4, fp, sl, r8
 8006796:	46e2      	mov	sl, ip
 8006798:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 800679c:	b29b      	uxth	r3, r3
 800679e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80067a2:	454f      	cmp	r7, r9
 80067a4:	ea4f 4814 	mov.w	r8, r4, lsr #16
 80067a8:	f84a 3b04 	str.w	r3, [sl], #4
 80067ac:	d82b      	bhi.n	8006806 <__multiply+0x11e>
 80067ae:	f8cc 8004 	str.w	r8, [ip, #4]
 80067b2:	9b01      	ldr	r3, [sp, #4]
 80067b4:	3204      	adds	r2, #4
 80067b6:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 80067ba:	f1ba 0f00 	cmp.w	sl, #0
 80067be:	d020      	beq.n	8006802 <__multiply+0x11a>
 80067c0:	4689      	mov	r9, r1
 80067c2:	46a8      	mov	r8, r5
 80067c4:	f04f 0b00 	mov.w	fp, #0
 80067c8:	682b      	ldr	r3, [r5, #0]
 80067ca:	f8b9 c000 	ldrh.w	ip, [r9]
 80067ce:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 80067d2:	b29b      	uxth	r3, r3
 80067d4:	fb0a 440c 	mla	r4, sl, ip, r4
 80067d8:	46c4      	mov	ip, r8
 80067da:	445c      	add	r4, fp
 80067dc:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80067e0:	f84c 3b04 	str.w	r3, [ip], #4
 80067e4:	f859 3b04 	ldr.w	r3, [r9], #4
 80067e8:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 80067ec:	0c1b      	lsrs	r3, r3, #16
 80067ee:	fb0a b303 	mla	r3, sl, r3, fp
 80067f2:	454f      	cmp	r7, r9
 80067f4:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 80067f8:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 80067fc:	d805      	bhi.n	800680a <__multiply+0x122>
 80067fe:	f8c8 3004 	str.w	r3, [r8, #4]
 8006802:	3504      	adds	r5, #4
 8006804:	e79b      	b.n	800673e <__multiply+0x56>
 8006806:	46d4      	mov	ip, sl
 8006808:	e7b3      	b.n	8006772 <__multiply+0x8a>
 800680a:	46e0      	mov	r8, ip
 800680c:	e7dd      	b.n	80067ca <__multiply+0xe2>
 800680e:	3e01      	subs	r6, #1
 8006810:	e799      	b.n	8006746 <__multiply+0x5e>
	...

08006814 <__pow5mult>:
 8006814:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006818:	4615      	mov	r5, r2
 800681a:	f012 0203 	ands.w	r2, r2, #3
 800681e:	4606      	mov	r6, r0
 8006820:	460f      	mov	r7, r1
 8006822:	d007      	beq.n	8006834 <__pow5mult+0x20>
 8006824:	4c21      	ldr	r4, [pc, #132]	; (80068ac <__pow5mult+0x98>)
 8006826:	3a01      	subs	r2, #1
 8006828:	2300      	movs	r3, #0
 800682a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800682e:	f7ff fec9 	bl	80065c4 <__multadd>
 8006832:	4607      	mov	r7, r0
 8006834:	10ad      	asrs	r5, r5, #2
 8006836:	d035      	beq.n	80068a4 <__pow5mult+0x90>
 8006838:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800683a:	b93c      	cbnz	r4, 800684c <__pow5mult+0x38>
 800683c:	2010      	movs	r0, #16
 800683e:	f7ff fe55 	bl	80064ec <malloc>
 8006842:	6270      	str	r0, [r6, #36]	; 0x24
 8006844:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006848:	6004      	str	r4, [r0, #0]
 800684a:	60c4      	str	r4, [r0, #12]
 800684c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8006850:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8006854:	b94c      	cbnz	r4, 800686a <__pow5mult+0x56>
 8006856:	f240 2171 	movw	r1, #625	; 0x271
 800685a:	4630      	mov	r0, r6
 800685c:	f7ff ff3b 	bl	80066d6 <__i2b>
 8006860:	2300      	movs	r3, #0
 8006862:	4604      	mov	r4, r0
 8006864:	f8c8 0008 	str.w	r0, [r8, #8]
 8006868:	6003      	str	r3, [r0, #0]
 800686a:	f04f 0800 	mov.w	r8, #0
 800686e:	07eb      	lsls	r3, r5, #31
 8006870:	d50a      	bpl.n	8006888 <__pow5mult+0x74>
 8006872:	4639      	mov	r1, r7
 8006874:	4622      	mov	r2, r4
 8006876:	4630      	mov	r0, r6
 8006878:	f7ff ff36 	bl	80066e8 <__multiply>
 800687c:	4681      	mov	r9, r0
 800687e:	4639      	mov	r1, r7
 8006880:	4630      	mov	r0, r6
 8006882:	f7ff fe88 	bl	8006596 <_Bfree>
 8006886:	464f      	mov	r7, r9
 8006888:	106d      	asrs	r5, r5, #1
 800688a:	d00b      	beq.n	80068a4 <__pow5mult+0x90>
 800688c:	6820      	ldr	r0, [r4, #0]
 800688e:	b938      	cbnz	r0, 80068a0 <__pow5mult+0x8c>
 8006890:	4622      	mov	r2, r4
 8006892:	4621      	mov	r1, r4
 8006894:	4630      	mov	r0, r6
 8006896:	f7ff ff27 	bl	80066e8 <__multiply>
 800689a:	6020      	str	r0, [r4, #0]
 800689c:	f8c0 8000 	str.w	r8, [r0]
 80068a0:	4604      	mov	r4, r0
 80068a2:	e7e4      	b.n	800686e <__pow5mult+0x5a>
 80068a4:	4638      	mov	r0, r7
 80068a6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80068aa:	bf00      	nop
 80068ac:	08009940 	.word	0x08009940

080068b0 <__lshift>:
 80068b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80068b4:	460c      	mov	r4, r1
 80068b6:	4607      	mov	r7, r0
 80068b8:	4616      	mov	r6, r2
 80068ba:	6923      	ldr	r3, [r4, #16]
 80068bc:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80068c0:	eb0a 0903 	add.w	r9, sl, r3
 80068c4:	6849      	ldr	r1, [r1, #4]
 80068c6:	68a3      	ldr	r3, [r4, #8]
 80068c8:	f109 0501 	add.w	r5, r9, #1
 80068cc:	42ab      	cmp	r3, r5
 80068ce:	db32      	blt.n	8006936 <__lshift+0x86>
 80068d0:	4638      	mov	r0, r7
 80068d2:	f7ff fe2c 	bl	800652e <_Balloc>
 80068d6:	2300      	movs	r3, #0
 80068d8:	4680      	mov	r8, r0
 80068da:	461a      	mov	r2, r3
 80068dc:	f100 0114 	add.w	r1, r0, #20
 80068e0:	4553      	cmp	r3, sl
 80068e2:	db2b      	blt.n	800693c <__lshift+0x8c>
 80068e4:	6920      	ldr	r0, [r4, #16]
 80068e6:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80068ea:	f104 0314 	add.w	r3, r4, #20
 80068ee:	f016 021f 	ands.w	r2, r6, #31
 80068f2:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80068f6:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80068fa:	d025      	beq.n	8006948 <__lshift+0x98>
 80068fc:	2000      	movs	r0, #0
 80068fe:	f1c2 0e20 	rsb	lr, r2, #32
 8006902:	468a      	mov	sl, r1
 8006904:	681e      	ldr	r6, [r3, #0]
 8006906:	4096      	lsls	r6, r2
 8006908:	4330      	orrs	r0, r6
 800690a:	f84a 0b04 	str.w	r0, [sl], #4
 800690e:	f853 0b04 	ldr.w	r0, [r3], #4
 8006912:	459c      	cmp	ip, r3
 8006914:	fa20 f00e 	lsr.w	r0, r0, lr
 8006918:	d814      	bhi.n	8006944 <__lshift+0x94>
 800691a:	6048      	str	r0, [r1, #4]
 800691c:	b108      	cbz	r0, 8006922 <__lshift+0x72>
 800691e:	f109 0502 	add.w	r5, r9, #2
 8006922:	3d01      	subs	r5, #1
 8006924:	4638      	mov	r0, r7
 8006926:	f8c8 5010 	str.w	r5, [r8, #16]
 800692a:	4621      	mov	r1, r4
 800692c:	f7ff fe33 	bl	8006596 <_Bfree>
 8006930:	4640      	mov	r0, r8
 8006932:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006936:	3101      	adds	r1, #1
 8006938:	005b      	lsls	r3, r3, #1
 800693a:	e7c7      	b.n	80068cc <__lshift+0x1c>
 800693c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8006940:	3301      	adds	r3, #1
 8006942:	e7cd      	b.n	80068e0 <__lshift+0x30>
 8006944:	4651      	mov	r1, sl
 8006946:	e7dc      	b.n	8006902 <__lshift+0x52>
 8006948:	3904      	subs	r1, #4
 800694a:	f853 2b04 	ldr.w	r2, [r3], #4
 800694e:	459c      	cmp	ip, r3
 8006950:	f841 2f04 	str.w	r2, [r1, #4]!
 8006954:	d8f9      	bhi.n	800694a <__lshift+0x9a>
 8006956:	e7e4      	b.n	8006922 <__lshift+0x72>

08006958 <__mcmp>:
 8006958:	6903      	ldr	r3, [r0, #16]
 800695a:	690a      	ldr	r2, [r1, #16]
 800695c:	b530      	push	{r4, r5, lr}
 800695e:	1a9b      	subs	r3, r3, r2
 8006960:	d10c      	bne.n	800697c <__mcmp+0x24>
 8006962:	0092      	lsls	r2, r2, #2
 8006964:	3014      	adds	r0, #20
 8006966:	3114      	adds	r1, #20
 8006968:	1884      	adds	r4, r0, r2
 800696a:	4411      	add	r1, r2
 800696c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8006970:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8006974:	4295      	cmp	r5, r2
 8006976:	d003      	beq.n	8006980 <__mcmp+0x28>
 8006978:	d305      	bcc.n	8006986 <__mcmp+0x2e>
 800697a:	2301      	movs	r3, #1
 800697c:	4618      	mov	r0, r3
 800697e:	bd30      	pop	{r4, r5, pc}
 8006980:	42a0      	cmp	r0, r4
 8006982:	d3f3      	bcc.n	800696c <__mcmp+0x14>
 8006984:	e7fa      	b.n	800697c <__mcmp+0x24>
 8006986:	f04f 33ff 	mov.w	r3, #4294967295
 800698a:	e7f7      	b.n	800697c <__mcmp+0x24>

0800698c <__mdiff>:
 800698c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006990:	460d      	mov	r5, r1
 8006992:	4607      	mov	r7, r0
 8006994:	4611      	mov	r1, r2
 8006996:	4628      	mov	r0, r5
 8006998:	4614      	mov	r4, r2
 800699a:	f7ff ffdd 	bl	8006958 <__mcmp>
 800699e:	1e06      	subs	r6, r0, #0
 80069a0:	d108      	bne.n	80069b4 <__mdiff+0x28>
 80069a2:	4631      	mov	r1, r6
 80069a4:	4638      	mov	r0, r7
 80069a6:	f7ff fdc2 	bl	800652e <_Balloc>
 80069aa:	2301      	movs	r3, #1
 80069ac:	e9c0 3604 	strd	r3, r6, [r0, #16]
 80069b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80069b4:	bfa4      	itt	ge
 80069b6:	4623      	movge	r3, r4
 80069b8:	462c      	movge	r4, r5
 80069ba:	4638      	mov	r0, r7
 80069bc:	6861      	ldr	r1, [r4, #4]
 80069be:	bfa6      	itte	ge
 80069c0:	461d      	movge	r5, r3
 80069c2:	2600      	movge	r6, #0
 80069c4:	2601      	movlt	r6, #1
 80069c6:	f7ff fdb2 	bl	800652e <_Balloc>
 80069ca:	f04f 0e00 	mov.w	lr, #0
 80069ce:	60c6      	str	r6, [r0, #12]
 80069d0:	692b      	ldr	r3, [r5, #16]
 80069d2:	6926      	ldr	r6, [r4, #16]
 80069d4:	f104 0214 	add.w	r2, r4, #20
 80069d8:	f105 0914 	add.w	r9, r5, #20
 80069dc:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 80069e0:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 80069e4:	f100 0114 	add.w	r1, r0, #20
 80069e8:	f852 ab04 	ldr.w	sl, [r2], #4
 80069ec:	f859 5b04 	ldr.w	r5, [r9], #4
 80069f0:	fa1f f38a 	uxth.w	r3, sl
 80069f4:	4473      	add	r3, lr
 80069f6:	b2ac      	uxth	r4, r5
 80069f8:	1b1b      	subs	r3, r3, r4
 80069fa:	0c2c      	lsrs	r4, r5, #16
 80069fc:	ebc4 441a 	rsb	r4, r4, sl, lsr #16
 8006a00:	eb04 4423 	add.w	r4, r4, r3, asr #16
 8006a04:	b29b      	uxth	r3, r3
 8006a06:	ea4f 4e24 	mov.w	lr, r4, asr #16
 8006a0a:	45c8      	cmp	r8, r9
 8006a0c:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8006a10:	4694      	mov	ip, r2
 8006a12:	f841 4b04 	str.w	r4, [r1], #4
 8006a16:	d8e7      	bhi.n	80069e8 <__mdiff+0x5c>
 8006a18:	45bc      	cmp	ip, r7
 8006a1a:	d304      	bcc.n	8006a26 <__mdiff+0x9a>
 8006a1c:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 8006a20:	b183      	cbz	r3, 8006a44 <__mdiff+0xb8>
 8006a22:	6106      	str	r6, [r0, #16]
 8006a24:	e7c4      	b.n	80069b0 <__mdiff+0x24>
 8006a26:	f85c 4b04 	ldr.w	r4, [ip], #4
 8006a2a:	b2a2      	uxth	r2, r4
 8006a2c:	4472      	add	r2, lr
 8006a2e:	1413      	asrs	r3, r2, #16
 8006a30:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8006a34:	b292      	uxth	r2, r2
 8006a36:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8006a3a:	ea4f 4e23 	mov.w	lr, r3, asr #16
 8006a3e:	f841 2b04 	str.w	r2, [r1], #4
 8006a42:	e7e9      	b.n	8006a18 <__mdiff+0x8c>
 8006a44:	3e01      	subs	r6, #1
 8006a46:	e7e9      	b.n	8006a1c <__mdiff+0x90>

08006a48 <__d2b>:
 8006a48:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8006a4c:	461c      	mov	r4, r3
 8006a4e:	e9dd 6508 	ldrd	r6, r5, [sp, #32]
 8006a52:	2101      	movs	r1, #1
 8006a54:	4690      	mov	r8, r2
 8006a56:	f7ff fd6a 	bl	800652e <_Balloc>
 8006a5a:	f3c4 0213 	ubfx	r2, r4, #0, #20
 8006a5e:	f3c4 540a 	ubfx	r4, r4, #20, #11
 8006a62:	4607      	mov	r7, r0
 8006a64:	bb34      	cbnz	r4, 8006ab4 <__d2b+0x6c>
 8006a66:	9201      	str	r2, [sp, #4]
 8006a68:	f1b8 0200 	subs.w	r2, r8, #0
 8006a6c:	d027      	beq.n	8006abe <__d2b+0x76>
 8006a6e:	a802      	add	r0, sp, #8
 8006a70:	f840 2d08 	str.w	r2, [r0, #-8]!
 8006a74:	f7ff fe00 	bl	8006678 <__lo0bits>
 8006a78:	9900      	ldr	r1, [sp, #0]
 8006a7a:	b1f0      	cbz	r0, 8006aba <__d2b+0x72>
 8006a7c:	9a01      	ldr	r2, [sp, #4]
 8006a7e:	f1c0 0320 	rsb	r3, r0, #32
 8006a82:	fa02 f303 	lsl.w	r3, r2, r3
 8006a86:	430b      	orrs	r3, r1
 8006a88:	40c2      	lsrs	r2, r0
 8006a8a:	617b      	str	r3, [r7, #20]
 8006a8c:	9201      	str	r2, [sp, #4]
 8006a8e:	9b01      	ldr	r3, [sp, #4]
 8006a90:	2b00      	cmp	r3, #0
 8006a92:	bf14      	ite	ne
 8006a94:	2102      	movne	r1, #2
 8006a96:	2101      	moveq	r1, #1
 8006a98:	61bb      	str	r3, [r7, #24]
 8006a9a:	6139      	str	r1, [r7, #16]
 8006a9c:	b1c4      	cbz	r4, 8006ad0 <__d2b+0x88>
 8006a9e:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8006aa2:	4404      	add	r4, r0
 8006aa4:	6034      	str	r4, [r6, #0]
 8006aa6:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8006aaa:	6028      	str	r0, [r5, #0]
 8006aac:	4638      	mov	r0, r7
 8006aae:	b002      	add	sp, #8
 8006ab0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006ab4:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8006ab8:	e7d5      	b.n	8006a66 <__d2b+0x1e>
 8006aba:	6179      	str	r1, [r7, #20]
 8006abc:	e7e7      	b.n	8006a8e <__d2b+0x46>
 8006abe:	a801      	add	r0, sp, #4
 8006ac0:	f7ff fdda 	bl	8006678 <__lo0bits>
 8006ac4:	2101      	movs	r1, #1
 8006ac6:	9b01      	ldr	r3, [sp, #4]
 8006ac8:	6139      	str	r1, [r7, #16]
 8006aca:	617b      	str	r3, [r7, #20]
 8006acc:	3020      	adds	r0, #32
 8006ace:	e7e5      	b.n	8006a9c <__d2b+0x54>
 8006ad0:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8006ad4:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8006ad8:	6030      	str	r0, [r6, #0]
 8006ada:	6918      	ldr	r0, [r3, #16]
 8006adc:	f7ff fdad 	bl	800663a <__hi0bits>
 8006ae0:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8006ae4:	e7e1      	b.n	8006aaa <__d2b+0x62>

08006ae6 <_calloc_r>:
 8006ae6:	b538      	push	{r3, r4, r5, lr}
 8006ae8:	fb02 f401 	mul.w	r4, r2, r1
 8006aec:	4621      	mov	r1, r4
 8006aee:	f000 f855 	bl	8006b9c <_malloc_r>
 8006af2:	4605      	mov	r5, r0
 8006af4:	b118      	cbz	r0, 8006afe <_calloc_r+0x18>
 8006af6:	4622      	mov	r2, r4
 8006af8:	2100      	movs	r1, #0
 8006afa:	f7fe fa1d 	bl	8004f38 <memset>
 8006afe:	4628      	mov	r0, r5
 8006b00:	bd38      	pop	{r3, r4, r5, pc}
	...

08006b04 <_free_r>:
 8006b04:	b538      	push	{r3, r4, r5, lr}
 8006b06:	4605      	mov	r5, r0
 8006b08:	2900      	cmp	r1, #0
 8006b0a:	d043      	beq.n	8006b94 <_free_r+0x90>
 8006b0c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006b10:	1f0c      	subs	r4, r1, #4
 8006b12:	2b00      	cmp	r3, #0
 8006b14:	bfb8      	it	lt
 8006b16:	18e4      	addlt	r4, r4, r3
 8006b18:	f000 fa27 	bl	8006f6a <__malloc_lock>
 8006b1c:	4a1e      	ldr	r2, [pc, #120]	; (8006b98 <_free_r+0x94>)
 8006b1e:	6813      	ldr	r3, [r2, #0]
 8006b20:	4610      	mov	r0, r2
 8006b22:	b933      	cbnz	r3, 8006b32 <_free_r+0x2e>
 8006b24:	6063      	str	r3, [r4, #4]
 8006b26:	6014      	str	r4, [r2, #0]
 8006b28:	4628      	mov	r0, r5
 8006b2a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006b2e:	f000 ba1d 	b.w	8006f6c <__malloc_unlock>
 8006b32:	42a3      	cmp	r3, r4
 8006b34:	d90b      	bls.n	8006b4e <_free_r+0x4a>
 8006b36:	6821      	ldr	r1, [r4, #0]
 8006b38:	1862      	adds	r2, r4, r1
 8006b3a:	4293      	cmp	r3, r2
 8006b3c:	bf01      	itttt	eq
 8006b3e:	681a      	ldreq	r2, [r3, #0]
 8006b40:	685b      	ldreq	r3, [r3, #4]
 8006b42:	1852      	addeq	r2, r2, r1
 8006b44:	6022      	streq	r2, [r4, #0]
 8006b46:	6063      	str	r3, [r4, #4]
 8006b48:	6004      	str	r4, [r0, #0]
 8006b4a:	e7ed      	b.n	8006b28 <_free_r+0x24>
 8006b4c:	4613      	mov	r3, r2
 8006b4e:	685a      	ldr	r2, [r3, #4]
 8006b50:	b10a      	cbz	r2, 8006b56 <_free_r+0x52>
 8006b52:	42a2      	cmp	r2, r4
 8006b54:	d9fa      	bls.n	8006b4c <_free_r+0x48>
 8006b56:	6819      	ldr	r1, [r3, #0]
 8006b58:	1858      	adds	r0, r3, r1
 8006b5a:	42a0      	cmp	r0, r4
 8006b5c:	d10b      	bne.n	8006b76 <_free_r+0x72>
 8006b5e:	6820      	ldr	r0, [r4, #0]
 8006b60:	4401      	add	r1, r0
 8006b62:	1858      	adds	r0, r3, r1
 8006b64:	4282      	cmp	r2, r0
 8006b66:	6019      	str	r1, [r3, #0]
 8006b68:	d1de      	bne.n	8006b28 <_free_r+0x24>
 8006b6a:	6810      	ldr	r0, [r2, #0]
 8006b6c:	6852      	ldr	r2, [r2, #4]
 8006b6e:	4401      	add	r1, r0
 8006b70:	6019      	str	r1, [r3, #0]
 8006b72:	605a      	str	r2, [r3, #4]
 8006b74:	e7d8      	b.n	8006b28 <_free_r+0x24>
 8006b76:	d902      	bls.n	8006b7e <_free_r+0x7a>
 8006b78:	230c      	movs	r3, #12
 8006b7a:	602b      	str	r3, [r5, #0]
 8006b7c:	e7d4      	b.n	8006b28 <_free_r+0x24>
 8006b7e:	6820      	ldr	r0, [r4, #0]
 8006b80:	1821      	adds	r1, r4, r0
 8006b82:	428a      	cmp	r2, r1
 8006b84:	bf01      	itttt	eq
 8006b86:	6811      	ldreq	r1, [r2, #0]
 8006b88:	6852      	ldreq	r2, [r2, #4]
 8006b8a:	1809      	addeq	r1, r1, r0
 8006b8c:	6021      	streq	r1, [r4, #0]
 8006b8e:	6062      	str	r2, [r4, #4]
 8006b90:	605c      	str	r4, [r3, #4]
 8006b92:	e7c9      	b.n	8006b28 <_free_r+0x24>
 8006b94:	bd38      	pop	{r3, r4, r5, pc}
 8006b96:	bf00      	nop
 8006b98:	200006f4 	.word	0x200006f4

08006b9c <_malloc_r>:
 8006b9c:	b570      	push	{r4, r5, r6, lr}
 8006b9e:	1ccd      	adds	r5, r1, #3
 8006ba0:	f025 0503 	bic.w	r5, r5, #3
 8006ba4:	3508      	adds	r5, #8
 8006ba6:	2d0c      	cmp	r5, #12
 8006ba8:	bf38      	it	cc
 8006baa:	250c      	movcc	r5, #12
 8006bac:	2d00      	cmp	r5, #0
 8006bae:	4606      	mov	r6, r0
 8006bb0:	db01      	blt.n	8006bb6 <_malloc_r+0x1a>
 8006bb2:	42a9      	cmp	r1, r5
 8006bb4:	d903      	bls.n	8006bbe <_malloc_r+0x22>
 8006bb6:	230c      	movs	r3, #12
 8006bb8:	6033      	str	r3, [r6, #0]
 8006bba:	2000      	movs	r0, #0
 8006bbc:	bd70      	pop	{r4, r5, r6, pc}
 8006bbe:	f000 f9d4 	bl	8006f6a <__malloc_lock>
 8006bc2:	4a21      	ldr	r2, [pc, #132]	; (8006c48 <_malloc_r+0xac>)
 8006bc4:	6814      	ldr	r4, [r2, #0]
 8006bc6:	4621      	mov	r1, r4
 8006bc8:	b991      	cbnz	r1, 8006bf0 <_malloc_r+0x54>
 8006bca:	4c20      	ldr	r4, [pc, #128]	; (8006c4c <_malloc_r+0xb0>)
 8006bcc:	6823      	ldr	r3, [r4, #0]
 8006bce:	b91b      	cbnz	r3, 8006bd8 <_malloc_r+0x3c>
 8006bd0:	4630      	mov	r0, r6
 8006bd2:	f000 f98f 	bl	8006ef4 <_sbrk_r>
 8006bd6:	6020      	str	r0, [r4, #0]
 8006bd8:	4629      	mov	r1, r5
 8006bda:	4630      	mov	r0, r6
 8006bdc:	f000 f98a 	bl	8006ef4 <_sbrk_r>
 8006be0:	1c43      	adds	r3, r0, #1
 8006be2:	d124      	bne.n	8006c2e <_malloc_r+0x92>
 8006be4:	230c      	movs	r3, #12
 8006be6:	4630      	mov	r0, r6
 8006be8:	6033      	str	r3, [r6, #0]
 8006bea:	f000 f9bf 	bl	8006f6c <__malloc_unlock>
 8006bee:	e7e4      	b.n	8006bba <_malloc_r+0x1e>
 8006bf0:	680b      	ldr	r3, [r1, #0]
 8006bf2:	1b5b      	subs	r3, r3, r5
 8006bf4:	d418      	bmi.n	8006c28 <_malloc_r+0x8c>
 8006bf6:	2b0b      	cmp	r3, #11
 8006bf8:	d90f      	bls.n	8006c1a <_malloc_r+0x7e>
 8006bfa:	600b      	str	r3, [r1, #0]
 8006bfc:	18cc      	adds	r4, r1, r3
 8006bfe:	50cd      	str	r5, [r1, r3]
 8006c00:	4630      	mov	r0, r6
 8006c02:	f000 f9b3 	bl	8006f6c <__malloc_unlock>
 8006c06:	f104 000b 	add.w	r0, r4, #11
 8006c0a:	1d23      	adds	r3, r4, #4
 8006c0c:	f020 0007 	bic.w	r0, r0, #7
 8006c10:	1ac3      	subs	r3, r0, r3
 8006c12:	d0d3      	beq.n	8006bbc <_malloc_r+0x20>
 8006c14:	425a      	negs	r2, r3
 8006c16:	50e2      	str	r2, [r4, r3]
 8006c18:	e7d0      	b.n	8006bbc <_malloc_r+0x20>
 8006c1a:	684b      	ldr	r3, [r1, #4]
 8006c1c:	428c      	cmp	r4, r1
 8006c1e:	bf16      	itet	ne
 8006c20:	6063      	strne	r3, [r4, #4]
 8006c22:	6013      	streq	r3, [r2, #0]
 8006c24:	460c      	movne	r4, r1
 8006c26:	e7eb      	b.n	8006c00 <_malloc_r+0x64>
 8006c28:	460c      	mov	r4, r1
 8006c2a:	6849      	ldr	r1, [r1, #4]
 8006c2c:	e7cc      	b.n	8006bc8 <_malloc_r+0x2c>
 8006c2e:	1cc4      	adds	r4, r0, #3
 8006c30:	f024 0403 	bic.w	r4, r4, #3
 8006c34:	42a0      	cmp	r0, r4
 8006c36:	d005      	beq.n	8006c44 <_malloc_r+0xa8>
 8006c38:	1a21      	subs	r1, r4, r0
 8006c3a:	4630      	mov	r0, r6
 8006c3c:	f000 f95a 	bl	8006ef4 <_sbrk_r>
 8006c40:	3001      	adds	r0, #1
 8006c42:	d0cf      	beq.n	8006be4 <_malloc_r+0x48>
 8006c44:	6025      	str	r5, [r4, #0]
 8006c46:	e7db      	b.n	8006c00 <_malloc_r+0x64>
 8006c48:	200006f4 	.word	0x200006f4
 8006c4c:	200006f8 	.word	0x200006f8

08006c50 <__ssputs_r>:
 8006c50:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006c54:	688e      	ldr	r6, [r1, #8]
 8006c56:	4682      	mov	sl, r0
 8006c58:	429e      	cmp	r6, r3
 8006c5a:	460c      	mov	r4, r1
 8006c5c:	4690      	mov	r8, r2
 8006c5e:	4699      	mov	r9, r3
 8006c60:	d837      	bhi.n	8006cd2 <__ssputs_r+0x82>
 8006c62:	898a      	ldrh	r2, [r1, #12]
 8006c64:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006c68:	d031      	beq.n	8006cce <__ssputs_r+0x7e>
 8006c6a:	2302      	movs	r3, #2
 8006c6c:	6825      	ldr	r5, [r4, #0]
 8006c6e:	6909      	ldr	r1, [r1, #16]
 8006c70:	1a6f      	subs	r7, r5, r1
 8006c72:	6965      	ldr	r5, [r4, #20]
 8006c74:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006c78:	fb95 f5f3 	sdiv	r5, r5, r3
 8006c7c:	f109 0301 	add.w	r3, r9, #1
 8006c80:	443b      	add	r3, r7
 8006c82:	429d      	cmp	r5, r3
 8006c84:	bf38      	it	cc
 8006c86:	461d      	movcc	r5, r3
 8006c88:	0553      	lsls	r3, r2, #21
 8006c8a:	d530      	bpl.n	8006cee <__ssputs_r+0x9e>
 8006c8c:	4629      	mov	r1, r5
 8006c8e:	f7ff ff85 	bl	8006b9c <_malloc_r>
 8006c92:	4606      	mov	r6, r0
 8006c94:	b950      	cbnz	r0, 8006cac <__ssputs_r+0x5c>
 8006c96:	230c      	movs	r3, #12
 8006c98:	f04f 30ff 	mov.w	r0, #4294967295
 8006c9c:	f8ca 3000 	str.w	r3, [sl]
 8006ca0:	89a3      	ldrh	r3, [r4, #12]
 8006ca2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006ca6:	81a3      	strh	r3, [r4, #12]
 8006ca8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006cac:	463a      	mov	r2, r7
 8006cae:	6921      	ldr	r1, [r4, #16]
 8006cb0:	f7ff fc32 	bl	8006518 <memcpy>
 8006cb4:	89a3      	ldrh	r3, [r4, #12]
 8006cb6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006cba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006cbe:	81a3      	strh	r3, [r4, #12]
 8006cc0:	6126      	str	r6, [r4, #16]
 8006cc2:	443e      	add	r6, r7
 8006cc4:	6026      	str	r6, [r4, #0]
 8006cc6:	464e      	mov	r6, r9
 8006cc8:	6165      	str	r5, [r4, #20]
 8006cca:	1bed      	subs	r5, r5, r7
 8006ccc:	60a5      	str	r5, [r4, #8]
 8006cce:	454e      	cmp	r6, r9
 8006cd0:	d900      	bls.n	8006cd4 <__ssputs_r+0x84>
 8006cd2:	464e      	mov	r6, r9
 8006cd4:	4632      	mov	r2, r6
 8006cd6:	4641      	mov	r1, r8
 8006cd8:	6820      	ldr	r0, [r4, #0]
 8006cda:	f000 f92d 	bl	8006f38 <memmove>
 8006cde:	68a3      	ldr	r3, [r4, #8]
 8006ce0:	2000      	movs	r0, #0
 8006ce2:	1b9b      	subs	r3, r3, r6
 8006ce4:	60a3      	str	r3, [r4, #8]
 8006ce6:	6823      	ldr	r3, [r4, #0]
 8006ce8:	441e      	add	r6, r3
 8006cea:	6026      	str	r6, [r4, #0]
 8006cec:	e7dc      	b.n	8006ca8 <__ssputs_r+0x58>
 8006cee:	462a      	mov	r2, r5
 8006cf0:	f000 f93d 	bl	8006f6e <_realloc_r>
 8006cf4:	4606      	mov	r6, r0
 8006cf6:	2800      	cmp	r0, #0
 8006cf8:	d1e2      	bne.n	8006cc0 <__ssputs_r+0x70>
 8006cfa:	6921      	ldr	r1, [r4, #16]
 8006cfc:	4650      	mov	r0, sl
 8006cfe:	f7ff ff01 	bl	8006b04 <_free_r>
 8006d02:	e7c8      	b.n	8006c96 <__ssputs_r+0x46>

08006d04 <_svfiprintf_r>:
 8006d04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006d08:	461d      	mov	r5, r3
 8006d0a:	898b      	ldrh	r3, [r1, #12]
 8006d0c:	b09d      	sub	sp, #116	; 0x74
 8006d0e:	061f      	lsls	r7, r3, #24
 8006d10:	4680      	mov	r8, r0
 8006d12:	460c      	mov	r4, r1
 8006d14:	4616      	mov	r6, r2
 8006d16:	d50f      	bpl.n	8006d38 <_svfiprintf_r+0x34>
 8006d18:	690b      	ldr	r3, [r1, #16]
 8006d1a:	b96b      	cbnz	r3, 8006d38 <_svfiprintf_r+0x34>
 8006d1c:	2140      	movs	r1, #64	; 0x40
 8006d1e:	f7ff ff3d 	bl	8006b9c <_malloc_r>
 8006d22:	6020      	str	r0, [r4, #0]
 8006d24:	6120      	str	r0, [r4, #16]
 8006d26:	b928      	cbnz	r0, 8006d34 <_svfiprintf_r+0x30>
 8006d28:	230c      	movs	r3, #12
 8006d2a:	f8c8 3000 	str.w	r3, [r8]
 8006d2e:	f04f 30ff 	mov.w	r0, #4294967295
 8006d32:	e0c8      	b.n	8006ec6 <_svfiprintf_r+0x1c2>
 8006d34:	2340      	movs	r3, #64	; 0x40
 8006d36:	6163      	str	r3, [r4, #20]
 8006d38:	2300      	movs	r3, #0
 8006d3a:	9309      	str	r3, [sp, #36]	; 0x24
 8006d3c:	2320      	movs	r3, #32
 8006d3e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006d42:	2330      	movs	r3, #48	; 0x30
 8006d44:	f04f 0b01 	mov.w	fp, #1
 8006d48:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006d4c:	9503      	str	r5, [sp, #12]
 8006d4e:	4637      	mov	r7, r6
 8006d50:	463d      	mov	r5, r7
 8006d52:	f815 3b01 	ldrb.w	r3, [r5], #1
 8006d56:	b10b      	cbz	r3, 8006d5c <_svfiprintf_r+0x58>
 8006d58:	2b25      	cmp	r3, #37	; 0x25
 8006d5a:	d13e      	bne.n	8006dda <_svfiprintf_r+0xd6>
 8006d5c:	ebb7 0a06 	subs.w	sl, r7, r6
 8006d60:	d00b      	beq.n	8006d7a <_svfiprintf_r+0x76>
 8006d62:	4653      	mov	r3, sl
 8006d64:	4632      	mov	r2, r6
 8006d66:	4621      	mov	r1, r4
 8006d68:	4640      	mov	r0, r8
 8006d6a:	f7ff ff71 	bl	8006c50 <__ssputs_r>
 8006d6e:	3001      	adds	r0, #1
 8006d70:	f000 80a4 	beq.w	8006ebc <_svfiprintf_r+0x1b8>
 8006d74:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006d76:	4453      	add	r3, sl
 8006d78:	9309      	str	r3, [sp, #36]	; 0x24
 8006d7a:	783b      	ldrb	r3, [r7, #0]
 8006d7c:	2b00      	cmp	r3, #0
 8006d7e:	f000 809d 	beq.w	8006ebc <_svfiprintf_r+0x1b8>
 8006d82:	2300      	movs	r3, #0
 8006d84:	f04f 32ff 	mov.w	r2, #4294967295
 8006d88:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006d8c:	9304      	str	r3, [sp, #16]
 8006d8e:	9307      	str	r3, [sp, #28]
 8006d90:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006d94:	931a      	str	r3, [sp, #104]	; 0x68
 8006d96:	462f      	mov	r7, r5
 8006d98:	2205      	movs	r2, #5
 8006d9a:	f817 1b01 	ldrb.w	r1, [r7], #1
 8006d9e:	4850      	ldr	r0, [pc, #320]	; (8006ee0 <_svfiprintf_r+0x1dc>)
 8006da0:	f7ff fbac 	bl	80064fc <memchr>
 8006da4:	9b04      	ldr	r3, [sp, #16]
 8006da6:	b9d0      	cbnz	r0, 8006dde <_svfiprintf_r+0xda>
 8006da8:	06d9      	lsls	r1, r3, #27
 8006daa:	bf44      	itt	mi
 8006dac:	2220      	movmi	r2, #32
 8006dae:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8006db2:	071a      	lsls	r2, r3, #28
 8006db4:	bf44      	itt	mi
 8006db6:	222b      	movmi	r2, #43	; 0x2b
 8006db8:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8006dbc:	782a      	ldrb	r2, [r5, #0]
 8006dbe:	2a2a      	cmp	r2, #42	; 0x2a
 8006dc0:	d015      	beq.n	8006dee <_svfiprintf_r+0xea>
 8006dc2:	462f      	mov	r7, r5
 8006dc4:	2000      	movs	r0, #0
 8006dc6:	250a      	movs	r5, #10
 8006dc8:	9a07      	ldr	r2, [sp, #28]
 8006dca:	4639      	mov	r1, r7
 8006dcc:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006dd0:	3b30      	subs	r3, #48	; 0x30
 8006dd2:	2b09      	cmp	r3, #9
 8006dd4:	d94d      	bls.n	8006e72 <_svfiprintf_r+0x16e>
 8006dd6:	b1b8      	cbz	r0, 8006e08 <_svfiprintf_r+0x104>
 8006dd8:	e00f      	b.n	8006dfa <_svfiprintf_r+0xf6>
 8006dda:	462f      	mov	r7, r5
 8006ddc:	e7b8      	b.n	8006d50 <_svfiprintf_r+0x4c>
 8006dde:	4a40      	ldr	r2, [pc, #256]	; (8006ee0 <_svfiprintf_r+0x1dc>)
 8006de0:	463d      	mov	r5, r7
 8006de2:	1a80      	subs	r0, r0, r2
 8006de4:	fa0b f000 	lsl.w	r0, fp, r0
 8006de8:	4318      	orrs	r0, r3
 8006dea:	9004      	str	r0, [sp, #16]
 8006dec:	e7d3      	b.n	8006d96 <_svfiprintf_r+0x92>
 8006dee:	9a03      	ldr	r2, [sp, #12]
 8006df0:	1d11      	adds	r1, r2, #4
 8006df2:	6812      	ldr	r2, [r2, #0]
 8006df4:	9103      	str	r1, [sp, #12]
 8006df6:	2a00      	cmp	r2, #0
 8006df8:	db01      	blt.n	8006dfe <_svfiprintf_r+0xfa>
 8006dfa:	9207      	str	r2, [sp, #28]
 8006dfc:	e004      	b.n	8006e08 <_svfiprintf_r+0x104>
 8006dfe:	4252      	negs	r2, r2
 8006e00:	f043 0302 	orr.w	r3, r3, #2
 8006e04:	9207      	str	r2, [sp, #28]
 8006e06:	9304      	str	r3, [sp, #16]
 8006e08:	783b      	ldrb	r3, [r7, #0]
 8006e0a:	2b2e      	cmp	r3, #46	; 0x2e
 8006e0c:	d10c      	bne.n	8006e28 <_svfiprintf_r+0x124>
 8006e0e:	787b      	ldrb	r3, [r7, #1]
 8006e10:	2b2a      	cmp	r3, #42	; 0x2a
 8006e12:	d133      	bne.n	8006e7c <_svfiprintf_r+0x178>
 8006e14:	9b03      	ldr	r3, [sp, #12]
 8006e16:	3702      	adds	r7, #2
 8006e18:	1d1a      	adds	r2, r3, #4
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	9203      	str	r2, [sp, #12]
 8006e1e:	2b00      	cmp	r3, #0
 8006e20:	bfb8      	it	lt
 8006e22:	f04f 33ff 	movlt.w	r3, #4294967295
 8006e26:	9305      	str	r3, [sp, #20]
 8006e28:	4d2e      	ldr	r5, [pc, #184]	; (8006ee4 <_svfiprintf_r+0x1e0>)
 8006e2a:	2203      	movs	r2, #3
 8006e2c:	7839      	ldrb	r1, [r7, #0]
 8006e2e:	4628      	mov	r0, r5
 8006e30:	f7ff fb64 	bl	80064fc <memchr>
 8006e34:	b138      	cbz	r0, 8006e46 <_svfiprintf_r+0x142>
 8006e36:	2340      	movs	r3, #64	; 0x40
 8006e38:	1b40      	subs	r0, r0, r5
 8006e3a:	fa03 f000 	lsl.w	r0, r3, r0
 8006e3e:	9b04      	ldr	r3, [sp, #16]
 8006e40:	3701      	adds	r7, #1
 8006e42:	4303      	orrs	r3, r0
 8006e44:	9304      	str	r3, [sp, #16]
 8006e46:	7839      	ldrb	r1, [r7, #0]
 8006e48:	2206      	movs	r2, #6
 8006e4a:	4827      	ldr	r0, [pc, #156]	; (8006ee8 <_svfiprintf_r+0x1e4>)
 8006e4c:	1c7e      	adds	r6, r7, #1
 8006e4e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006e52:	f7ff fb53 	bl	80064fc <memchr>
 8006e56:	2800      	cmp	r0, #0
 8006e58:	d038      	beq.n	8006ecc <_svfiprintf_r+0x1c8>
 8006e5a:	4b24      	ldr	r3, [pc, #144]	; (8006eec <_svfiprintf_r+0x1e8>)
 8006e5c:	bb13      	cbnz	r3, 8006ea4 <_svfiprintf_r+0x1a0>
 8006e5e:	9b03      	ldr	r3, [sp, #12]
 8006e60:	3307      	adds	r3, #7
 8006e62:	f023 0307 	bic.w	r3, r3, #7
 8006e66:	3308      	adds	r3, #8
 8006e68:	9303      	str	r3, [sp, #12]
 8006e6a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006e6c:	444b      	add	r3, r9
 8006e6e:	9309      	str	r3, [sp, #36]	; 0x24
 8006e70:	e76d      	b.n	8006d4e <_svfiprintf_r+0x4a>
 8006e72:	fb05 3202 	mla	r2, r5, r2, r3
 8006e76:	2001      	movs	r0, #1
 8006e78:	460f      	mov	r7, r1
 8006e7a:	e7a6      	b.n	8006dca <_svfiprintf_r+0xc6>
 8006e7c:	2300      	movs	r3, #0
 8006e7e:	250a      	movs	r5, #10
 8006e80:	4619      	mov	r1, r3
 8006e82:	3701      	adds	r7, #1
 8006e84:	9305      	str	r3, [sp, #20]
 8006e86:	4638      	mov	r0, r7
 8006e88:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006e8c:	3a30      	subs	r2, #48	; 0x30
 8006e8e:	2a09      	cmp	r2, #9
 8006e90:	d903      	bls.n	8006e9a <_svfiprintf_r+0x196>
 8006e92:	2b00      	cmp	r3, #0
 8006e94:	d0c8      	beq.n	8006e28 <_svfiprintf_r+0x124>
 8006e96:	9105      	str	r1, [sp, #20]
 8006e98:	e7c6      	b.n	8006e28 <_svfiprintf_r+0x124>
 8006e9a:	fb05 2101 	mla	r1, r5, r1, r2
 8006e9e:	2301      	movs	r3, #1
 8006ea0:	4607      	mov	r7, r0
 8006ea2:	e7f0      	b.n	8006e86 <_svfiprintf_r+0x182>
 8006ea4:	ab03      	add	r3, sp, #12
 8006ea6:	9300      	str	r3, [sp, #0]
 8006ea8:	4622      	mov	r2, r4
 8006eaa:	4b11      	ldr	r3, [pc, #68]	; (8006ef0 <_svfiprintf_r+0x1ec>)
 8006eac:	a904      	add	r1, sp, #16
 8006eae:	4640      	mov	r0, r8
 8006eb0:	f7fe f8dc 	bl	800506c <_printf_float>
 8006eb4:	f1b0 3fff 	cmp.w	r0, #4294967295
 8006eb8:	4681      	mov	r9, r0
 8006eba:	d1d6      	bne.n	8006e6a <_svfiprintf_r+0x166>
 8006ebc:	89a3      	ldrh	r3, [r4, #12]
 8006ebe:	065b      	lsls	r3, r3, #25
 8006ec0:	f53f af35 	bmi.w	8006d2e <_svfiprintf_r+0x2a>
 8006ec4:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006ec6:	b01d      	add	sp, #116	; 0x74
 8006ec8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006ecc:	ab03      	add	r3, sp, #12
 8006ece:	9300      	str	r3, [sp, #0]
 8006ed0:	4622      	mov	r2, r4
 8006ed2:	4b07      	ldr	r3, [pc, #28]	; (8006ef0 <_svfiprintf_r+0x1ec>)
 8006ed4:	a904      	add	r1, sp, #16
 8006ed6:	4640      	mov	r0, r8
 8006ed8:	f7fe fb74 	bl	80055c4 <_printf_i>
 8006edc:	e7ea      	b.n	8006eb4 <_svfiprintf_r+0x1b0>
 8006ede:	bf00      	nop
 8006ee0:	0800994c 	.word	0x0800994c
 8006ee4:	08009952 	.word	0x08009952
 8006ee8:	08009956 	.word	0x08009956
 8006eec:	0800506d 	.word	0x0800506d
 8006ef0:	08006c51 	.word	0x08006c51

08006ef4 <_sbrk_r>:
 8006ef4:	b538      	push	{r3, r4, r5, lr}
 8006ef6:	2300      	movs	r3, #0
 8006ef8:	4c05      	ldr	r4, [pc, #20]	; (8006f10 <_sbrk_r+0x1c>)
 8006efa:	4605      	mov	r5, r0
 8006efc:	4608      	mov	r0, r1
 8006efe:	6023      	str	r3, [r4, #0]
 8006f00:	f7fb fd50 	bl	80029a4 <_sbrk>
 8006f04:	1c43      	adds	r3, r0, #1
 8006f06:	d102      	bne.n	8006f0e <_sbrk_r+0x1a>
 8006f08:	6823      	ldr	r3, [r4, #0]
 8006f0a:	b103      	cbz	r3, 8006f0e <_sbrk_r+0x1a>
 8006f0c:	602b      	str	r3, [r5, #0]
 8006f0e:	bd38      	pop	{r3, r4, r5, pc}
 8006f10:	200008bc 	.word	0x200008bc

08006f14 <__ascii_mbtowc>:
 8006f14:	b082      	sub	sp, #8
 8006f16:	b901      	cbnz	r1, 8006f1a <__ascii_mbtowc+0x6>
 8006f18:	a901      	add	r1, sp, #4
 8006f1a:	b142      	cbz	r2, 8006f2e <__ascii_mbtowc+0x1a>
 8006f1c:	b14b      	cbz	r3, 8006f32 <__ascii_mbtowc+0x1e>
 8006f1e:	7813      	ldrb	r3, [r2, #0]
 8006f20:	600b      	str	r3, [r1, #0]
 8006f22:	7812      	ldrb	r2, [r2, #0]
 8006f24:	1c10      	adds	r0, r2, #0
 8006f26:	bf18      	it	ne
 8006f28:	2001      	movne	r0, #1
 8006f2a:	b002      	add	sp, #8
 8006f2c:	4770      	bx	lr
 8006f2e:	4610      	mov	r0, r2
 8006f30:	e7fb      	b.n	8006f2a <__ascii_mbtowc+0x16>
 8006f32:	f06f 0001 	mvn.w	r0, #1
 8006f36:	e7f8      	b.n	8006f2a <__ascii_mbtowc+0x16>

08006f38 <memmove>:
 8006f38:	4288      	cmp	r0, r1
 8006f3a:	b510      	push	{r4, lr}
 8006f3c:	eb01 0302 	add.w	r3, r1, r2
 8006f40:	d807      	bhi.n	8006f52 <memmove+0x1a>
 8006f42:	1e42      	subs	r2, r0, #1
 8006f44:	4299      	cmp	r1, r3
 8006f46:	d00a      	beq.n	8006f5e <memmove+0x26>
 8006f48:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006f4c:	f802 4f01 	strb.w	r4, [r2, #1]!
 8006f50:	e7f8      	b.n	8006f44 <memmove+0xc>
 8006f52:	4283      	cmp	r3, r0
 8006f54:	d9f5      	bls.n	8006f42 <memmove+0xa>
 8006f56:	1881      	adds	r1, r0, r2
 8006f58:	1ad2      	subs	r2, r2, r3
 8006f5a:	42d3      	cmn	r3, r2
 8006f5c:	d100      	bne.n	8006f60 <memmove+0x28>
 8006f5e:	bd10      	pop	{r4, pc}
 8006f60:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006f64:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8006f68:	e7f7      	b.n	8006f5a <memmove+0x22>

08006f6a <__malloc_lock>:
 8006f6a:	4770      	bx	lr

08006f6c <__malloc_unlock>:
 8006f6c:	4770      	bx	lr

08006f6e <_realloc_r>:
 8006f6e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006f70:	4607      	mov	r7, r0
 8006f72:	4614      	mov	r4, r2
 8006f74:	460e      	mov	r6, r1
 8006f76:	b921      	cbnz	r1, 8006f82 <_realloc_r+0x14>
 8006f78:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8006f7c:	4611      	mov	r1, r2
 8006f7e:	f7ff be0d 	b.w	8006b9c <_malloc_r>
 8006f82:	b922      	cbnz	r2, 8006f8e <_realloc_r+0x20>
 8006f84:	f7ff fdbe 	bl	8006b04 <_free_r>
 8006f88:	4625      	mov	r5, r4
 8006f8a:	4628      	mov	r0, r5
 8006f8c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006f8e:	f000 f821 	bl	8006fd4 <_malloc_usable_size_r>
 8006f92:	42a0      	cmp	r0, r4
 8006f94:	d20f      	bcs.n	8006fb6 <_realloc_r+0x48>
 8006f96:	4621      	mov	r1, r4
 8006f98:	4638      	mov	r0, r7
 8006f9a:	f7ff fdff 	bl	8006b9c <_malloc_r>
 8006f9e:	4605      	mov	r5, r0
 8006fa0:	2800      	cmp	r0, #0
 8006fa2:	d0f2      	beq.n	8006f8a <_realloc_r+0x1c>
 8006fa4:	4631      	mov	r1, r6
 8006fa6:	4622      	mov	r2, r4
 8006fa8:	f7ff fab6 	bl	8006518 <memcpy>
 8006fac:	4631      	mov	r1, r6
 8006fae:	4638      	mov	r0, r7
 8006fb0:	f7ff fda8 	bl	8006b04 <_free_r>
 8006fb4:	e7e9      	b.n	8006f8a <_realloc_r+0x1c>
 8006fb6:	4635      	mov	r5, r6
 8006fb8:	e7e7      	b.n	8006f8a <_realloc_r+0x1c>

08006fba <__ascii_wctomb>:
 8006fba:	b149      	cbz	r1, 8006fd0 <__ascii_wctomb+0x16>
 8006fbc:	2aff      	cmp	r2, #255	; 0xff
 8006fbe:	bf8b      	itete	hi
 8006fc0:	238a      	movhi	r3, #138	; 0x8a
 8006fc2:	700a      	strbls	r2, [r1, #0]
 8006fc4:	6003      	strhi	r3, [r0, #0]
 8006fc6:	2001      	movls	r0, #1
 8006fc8:	bf88      	it	hi
 8006fca:	f04f 30ff 	movhi.w	r0, #4294967295
 8006fce:	4770      	bx	lr
 8006fd0:	4608      	mov	r0, r1
 8006fd2:	4770      	bx	lr

08006fd4 <_malloc_usable_size_r>:
 8006fd4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006fd8:	1f18      	subs	r0, r3, #4
 8006fda:	2b00      	cmp	r3, #0
 8006fdc:	bfbc      	itt	lt
 8006fde:	580b      	ldrlt	r3, [r1, r0]
 8006fe0:	18c0      	addlt	r0, r0, r3
 8006fe2:	4770      	bx	lr
 8006fe4:	0000      	movs	r0, r0
	...

08006fe8 <atan>:
 8006fe8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006fec:	4bb6      	ldr	r3, [pc, #728]	; (80072c8 <atan+0x2e0>)
 8006fee:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8006ff2:	429e      	cmp	r6, r3
 8006ff4:	4604      	mov	r4, r0
 8006ff6:	460d      	mov	r5, r1
 8006ff8:	468b      	mov	fp, r1
 8006ffa:	dd17      	ble.n	800702c <atan+0x44>
 8006ffc:	4bb3      	ldr	r3, [pc, #716]	; (80072cc <atan+0x2e4>)
 8006ffe:	429e      	cmp	r6, r3
 8007000:	dc01      	bgt.n	8007006 <atan+0x1e>
 8007002:	d109      	bne.n	8007018 <atan+0x30>
 8007004:	b140      	cbz	r0, 8007018 <atan+0x30>
 8007006:	4622      	mov	r2, r4
 8007008:	462b      	mov	r3, r5
 800700a:	4620      	mov	r0, r4
 800700c:	4629      	mov	r1, r5
 800700e:	f7f9 f8ad 	bl	800016c <__adddf3>
 8007012:	4604      	mov	r4, r0
 8007014:	460d      	mov	r5, r1
 8007016:	e005      	b.n	8007024 <atan+0x3c>
 8007018:	f1bb 0f00 	cmp.w	fp, #0
 800701c:	4cac      	ldr	r4, [pc, #688]	; (80072d0 <atan+0x2e8>)
 800701e:	f340 8121 	ble.w	8007264 <atan+0x27c>
 8007022:	4dac      	ldr	r5, [pc, #688]	; (80072d4 <atan+0x2ec>)
 8007024:	4620      	mov	r0, r4
 8007026:	4629      	mov	r1, r5
 8007028:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800702c:	4baa      	ldr	r3, [pc, #680]	; (80072d8 <atan+0x2f0>)
 800702e:	429e      	cmp	r6, r3
 8007030:	dc11      	bgt.n	8007056 <atan+0x6e>
 8007032:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 8007036:	429e      	cmp	r6, r3
 8007038:	dc0a      	bgt.n	8007050 <atan+0x68>
 800703a:	a38b      	add	r3, pc, #556	; (adr r3, 8007268 <atan+0x280>)
 800703c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007040:	f7f9 f894 	bl	800016c <__adddf3>
 8007044:	2200      	movs	r2, #0
 8007046:	4ba5      	ldr	r3, [pc, #660]	; (80072dc <atan+0x2f4>)
 8007048:	f7f9 fcd6 	bl	80009f8 <__aeabi_dcmpgt>
 800704c:	2800      	cmp	r0, #0
 800704e:	d1e9      	bne.n	8007024 <atan+0x3c>
 8007050:	f04f 3aff 	mov.w	sl, #4294967295
 8007054:	e027      	b.n	80070a6 <atan+0xbe>
 8007056:	f000 f951 	bl	80072fc <fabs>
 800705a:	4ba1      	ldr	r3, [pc, #644]	; (80072e0 <atan+0x2f8>)
 800705c:	4604      	mov	r4, r0
 800705e:	429e      	cmp	r6, r3
 8007060:	460d      	mov	r5, r1
 8007062:	f300 80b8 	bgt.w	80071d6 <atan+0x1ee>
 8007066:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 800706a:	429e      	cmp	r6, r3
 800706c:	f300 809c 	bgt.w	80071a8 <atan+0x1c0>
 8007070:	4602      	mov	r2, r0
 8007072:	460b      	mov	r3, r1
 8007074:	f7f9 f87a 	bl	800016c <__adddf3>
 8007078:	2200      	movs	r2, #0
 800707a:	4b98      	ldr	r3, [pc, #608]	; (80072dc <atan+0x2f4>)
 800707c:	f7f9 f874 	bl	8000168 <__aeabi_dsub>
 8007080:	2200      	movs	r2, #0
 8007082:	4606      	mov	r6, r0
 8007084:	460f      	mov	r7, r1
 8007086:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800708a:	4620      	mov	r0, r4
 800708c:	4629      	mov	r1, r5
 800708e:	f7f9 f86d 	bl	800016c <__adddf3>
 8007092:	4602      	mov	r2, r0
 8007094:	460b      	mov	r3, r1
 8007096:	4630      	mov	r0, r6
 8007098:	4639      	mov	r1, r7
 800709a:	f7f9 fb47 	bl	800072c <__aeabi_ddiv>
 800709e:	f04f 0a00 	mov.w	sl, #0
 80070a2:	4604      	mov	r4, r0
 80070a4:	460d      	mov	r5, r1
 80070a6:	4622      	mov	r2, r4
 80070a8:	462b      	mov	r3, r5
 80070aa:	4620      	mov	r0, r4
 80070ac:	4629      	mov	r1, r5
 80070ae:	f7f9 fa13 	bl	80004d8 <__aeabi_dmul>
 80070b2:	4602      	mov	r2, r0
 80070b4:	460b      	mov	r3, r1
 80070b6:	4680      	mov	r8, r0
 80070b8:	4689      	mov	r9, r1
 80070ba:	f7f9 fa0d 	bl	80004d8 <__aeabi_dmul>
 80070be:	a36c      	add	r3, pc, #432	; (adr r3, 8007270 <atan+0x288>)
 80070c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070c4:	4606      	mov	r6, r0
 80070c6:	460f      	mov	r7, r1
 80070c8:	f7f9 fa06 	bl	80004d8 <__aeabi_dmul>
 80070cc:	a36a      	add	r3, pc, #424	; (adr r3, 8007278 <atan+0x290>)
 80070ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070d2:	f7f9 f84b 	bl	800016c <__adddf3>
 80070d6:	4632      	mov	r2, r6
 80070d8:	463b      	mov	r3, r7
 80070da:	f7f9 f9fd 	bl	80004d8 <__aeabi_dmul>
 80070de:	a368      	add	r3, pc, #416	; (adr r3, 8007280 <atan+0x298>)
 80070e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070e4:	f7f9 f842 	bl	800016c <__adddf3>
 80070e8:	4632      	mov	r2, r6
 80070ea:	463b      	mov	r3, r7
 80070ec:	f7f9 f9f4 	bl	80004d8 <__aeabi_dmul>
 80070f0:	a365      	add	r3, pc, #404	; (adr r3, 8007288 <atan+0x2a0>)
 80070f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070f6:	f7f9 f839 	bl	800016c <__adddf3>
 80070fa:	4632      	mov	r2, r6
 80070fc:	463b      	mov	r3, r7
 80070fe:	f7f9 f9eb 	bl	80004d8 <__aeabi_dmul>
 8007102:	a363      	add	r3, pc, #396	; (adr r3, 8007290 <atan+0x2a8>)
 8007104:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007108:	f7f9 f830 	bl	800016c <__adddf3>
 800710c:	4632      	mov	r2, r6
 800710e:	463b      	mov	r3, r7
 8007110:	f7f9 f9e2 	bl	80004d8 <__aeabi_dmul>
 8007114:	a360      	add	r3, pc, #384	; (adr r3, 8007298 <atan+0x2b0>)
 8007116:	e9d3 2300 	ldrd	r2, r3, [r3]
 800711a:	f7f9 f827 	bl	800016c <__adddf3>
 800711e:	4642      	mov	r2, r8
 8007120:	464b      	mov	r3, r9
 8007122:	f7f9 f9d9 	bl	80004d8 <__aeabi_dmul>
 8007126:	a35e      	add	r3, pc, #376	; (adr r3, 80072a0 <atan+0x2b8>)
 8007128:	e9d3 2300 	ldrd	r2, r3, [r3]
 800712c:	4680      	mov	r8, r0
 800712e:	4689      	mov	r9, r1
 8007130:	4630      	mov	r0, r6
 8007132:	4639      	mov	r1, r7
 8007134:	f7f9 f9d0 	bl	80004d8 <__aeabi_dmul>
 8007138:	a35b      	add	r3, pc, #364	; (adr r3, 80072a8 <atan+0x2c0>)
 800713a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800713e:	f7f9 f813 	bl	8000168 <__aeabi_dsub>
 8007142:	4632      	mov	r2, r6
 8007144:	463b      	mov	r3, r7
 8007146:	f7f9 f9c7 	bl	80004d8 <__aeabi_dmul>
 800714a:	a359      	add	r3, pc, #356	; (adr r3, 80072b0 <atan+0x2c8>)
 800714c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007150:	f7f9 f80a 	bl	8000168 <__aeabi_dsub>
 8007154:	4632      	mov	r2, r6
 8007156:	463b      	mov	r3, r7
 8007158:	f7f9 f9be 	bl	80004d8 <__aeabi_dmul>
 800715c:	a356      	add	r3, pc, #344	; (adr r3, 80072b8 <atan+0x2d0>)
 800715e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007162:	f7f9 f801 	bl	8000168 <__aeabi_dsub>
 8007166:	4632      	mov	r2, r6
 8007168:	463b      	mov	r3, r7
 800716a:	f7f9 f9b5 	bl	80004d8 <__aeabi_dmul>
 800716e:	a354      	add	r3, pc, #336	; (adr r3, 80072c0 <atan+0x2d8>)
 8007170:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007174:	f7f8 fff8 	bl	8000168 <__aeabi_dsub>
 8007178:	4632      	mov	r2, r6
 800717a:	463b      	mov	r3, r7
 800717c:	f7f9 f9ac 	bl	80004d8 <__aeabi_dmul>
 8007180:	4602      	mov	r2, r0
 8007182:	460b      	mov	r3, r1
 8007184:	4640      	mov	r0, r8
 8007186:	4649      	mov	r1, r9
 8007188:	f7f8 fff0 	bl	800016c <__adddf3>
 800718c:	4622      	mov	r2, r4
 800718e:	462b      	mov	r3, r5
 8007190:	f7f9 f9a2 	bl	80004d8 <__aeabi_dmul>
 8007194:	f1ba 3fff 	cmp.w	sl, #4294967295
 8007198:	4602      	mov	r2, r0
 800719a:	460b      	mov	r3, r1
 800719c:	d144      	bne.n	8007228 <atan+0x240>
 800719e:	4620      	mov	r0, r4
 80071a0:	4629      	mov	r1, r5
 80071a2:	f7f8 ffe1 	bl	8000168 <__aeabi_dsub>
 80071a6:	e734      	b.n	8007012 <atan+0x2a>
 80071a8:	2200      	movs	r2, #0
 80071aa:	4b4c      	ldr	r3, [pc, #304]	; (80072dc <atan+0x2f4>)
 80071ac:	f7f8 ffdc 	bl	8000168 <__aeabi_dsub>
 80071b0:	2200      	movs	r2, #0
 80071b2:	4606      	mov	r6, r0
 80071b4:	460f      	mov	r7, r1
 80071b6:	4b49      	ldr	r3, [pc, #292]	; (80072dc <atan+0x2f4>)
 80071b8:	4620      	mov	r0, r4
 80071ba:	4629      	mov	r1, r5
 80071bc:	f7f8 ffd6 	bl	800016c <__adddf3>
 80071c0:	4602      	mov	r2, r0
 80071c2:	460b      	mov	r3, r1
 80071c4:	4630      	mov	r0, r6
 80071c6:	4639      	mov	r1, r7
 80071c8:	f7f9 fab0 	bl	800072c <__aeabi_ddiv>
 80071cc:	f04f 0a01 	mov.w	sl, #1
 80071d0:	4604      	mov	r4, r0
 80071d2:	460d      	mov	r5, r1
 80071d4:	e767      	b.n	80070a6 <atan+0xbe>
 80071d6:	4b43      	ldr	r3, [pc, #268]	; (80072e4 <atan+0x2fc>)
 80071d8:	429e      	cmp	r6, r3
 80071da:	dc1a      	bgt.n	8007212 <atan+0x22a>
 80071dc:	2200      	movs	r2, #0
 80071de:	4b42      	ldr	r3, [pc, #264]	; (80072e8 <atan+0x300>)
 80071e0:	f7f8 ffc2 	bl	8000168 <__aeabi_dsub>
 80071e4:	2200      	movs	r2, #0
 80071e6:	4606      	mov	r6, r0
 80071e8:	460f      	mov	r7, r1
 80071ea:	4b3f      	ldr	r3, [pc, #252]	; (80072e8 <atan+0x300>)
 80071ec:	4620      	mov	r0, r4
 80071ee:	4629      	mov	r1, r5
 80071f0:	f7f9 f972 	bl	80004d8 <__aeabi_dmul>
 80071f4:	2200      	movs	r2, #0
 80071f6:	4b39      	ldr	r3, [pc, #228]	; (80072dc <atan+0x2f4>)
 80071f8:	f7f8 ffb8 	bl	800016c <__adddf3>
 80071fc:	4602      	mov	r2, r0
 80071fe:	460b      	mov	r3, r1
 8007200:	4630      	mov	r0, r6
 8007202:	4639      	mov	r1, r7
 8007204:	f7f9 fa92 	bl	800072c <__aeabi_ddiv>
 8007208:	f04f 0a02 	mov.w	sl, #2
 800720c:	4604      	mov	r4, r0
 800720e:	460d      	mov	r5, r1
 8007210:	e749      	b.n	80070a6 <atan+0xbe>
 8007212:	4602      	mov	r2, r0
 8007214:	460b      	mov	r3, r1
 8007216:	2000      	movs	r0, #0
 8007218:	4934      	ldr	r1, [pc, #208]	; (80072ec <atan+0x304>)
 800721a:	f7f9 fa87 	bl	800072c <__aeabi_ddiv>
 800721e:	f04f 0a03 	mov.w	sl, #3
 8007222:	4604      	mov	r4, r0
 8007224:	460d      	mov	r5, r1
 8007226:	e73e      	b.n	80070a6 <atan+0xbe>
 8007228:	4b31      	ldr	r3, [pc, #196]	; (80072f0 <atan+0x308>)
 800722a:	4e32      	ldr	r6, [pc, #200]	; (80072f4 <atan+0x30c>)
 800722c:	ea4f 0aca 	mov.w	sl, sl, lsl #3
 8007230:	4456      	add	r6, sl
 8007232:	449a      	add	sl, r3
 8007234:	e9da 2300 	ldrd	r2, r3, [sl]
 8007238:	f7f8 ff96 	bl	8000168 <__aeabi_dsub>
 800723c:	4622      	mov	r2, r4
 800723e:	462b      	mov	r3, r5
 8007240:	f7f8 ff92 	bl	8000168 <__aeabi_dsub>
 8007244:	4602      	mov	r2, r0
 8007246:	460b      	mov	r3, r1
 8007248:	e9d6 0100 	ldrd	r0, r1, [r6]
 800724c:	f7f8 ff8c 	bl	8000168 <__aeabi_dsub>
 8007250:	f1bb 0f00 	cmp.w	fp, #0
 8007254:	4604      	mov	r4, r0
 8007256:	460d      	mov	r5, r1
 8007258:	f6bf aee4 	bge.w	8007024 <atan+0x3c>
 800725c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007260:	461d      	mov	r5, r3
 8007262:	e6df      	b.n	8007024 <atan+0x3c>
 8007264:	4d24      	ldr	r5, [pc, #144]	; (80072f8 <atan+0x310>)
 8007266:	e6dd      	b.n	8007024 <atan+0x3c>
 8007268:	8800759c 	.word	0x8800759c
 800726c:	7e37e43c 	.word	0x7e37e43c
 8007270:	e322da11 	.word	0xe322da11
 8007274:	3f90ad3a 	.word	0x3f90ad3a
 8007278:	24760deb 	.word	0x24760deb
 800727c:	3fa97b4b 	.word	0x3fa97b4b
 8007280:	a0d03d51 	.word	0xa0d03d51
 8007284:	3fb10d66 	.word	0x3fb10d66
 8007288:	c54c206e 	.word	0xc54c206e
 800728c:	3fb745cd 	.word	0x3fb745cd
 8007290:	920083ff 	.word	0x920083ff
 8007294:	3fc24924 	.word	0x3fc24924
 8007298:	5555550d 	.word	0x5555550d
 800729c:	3fd55555 	.word	0x3fd55555
 80072a0:	2c6a6c2f 	.word	0x2c6a6c2f
 80072a4:	bfa2b444 	.word	0xbfa2b444
 80072a8:	52defd9a 	.word	0x52defd9a
 80072ac:	3fadde2d 	.word	0x3fadde2d
 80072b0:	af749a6d 	.word	0xaf749a6d
 80072b4:	3fb3b0f2 	.word	0x3fb3b0f2
 80072b8:	fe231671 	.word	0xfe231671
 80072bc:	3fbc71c6 	.word	0x3fbc71c6
 80072c0:	9998ebc4 	.word	0x9998ebc4
 80072c4:	3fc99999 	.word	0x3fc99999
 80072c8:	440fffff 	.word	0x440fffff
 80072cc:	7ff00000 	.word	0x7ff00000
 80072d0:	54442d18 	.word	0x54442d18
 80072d4:	3ff921fb 	.word	0x3ff921fb
 80072d8:	3fdbffff 	.word	0x3fdbffff
 80072dc:	3ff00000 	.word	0x3ff00000
 80072e0:	3ff2ffff 	.word	0x3ff2ffff
 80072e4:	40037fff 	.word	0x40037fff
 80072e8:	3ff80000 	.word	0x3ff80000
 80072ec:	bff00000 	.word	0xbff00000
 80072f0:	08009a88 	.word	0x08009a88
 80072f4:	08009a68 	.word	0x08009a68
 80072f8:	bff921fb 	.word	0xbff921fb

080072fc <fabs>:
 80072fc:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8007300:	4619      	mov	r1, r3
 8007302:	4770      	bx	lr

08007304 <roundf>:
 8007304:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 8007308:	3b7f      	subs	r3, #127	; 0x7f
 800730a:	2b16      	cmp	r3, #22
 800730c:	b510      	push	{r4, lr}
 800730e:	4601      	mov	r1, r0
 8007310:	dc14      	bgt.n	800733c <roundf+0x38>
 8007312:	2b00      	cmp	r3, #0
 8007314:	da07      	bge.n	8007326 <roundf+0x22>
 8007316:	3301      	adds	r3, #1
 8007318:	f000 4100 	and.w	r1, r0, #2147483648	; 0x80000000
 800731c:	d101      	bne.n	8007322 <roundf+0x1e>
 800731e:	f041 517e 	orr.w	r1, r1, #1065353216	; 0x3f800000
 8007322:	4608      	mov	r0, r1
 8007324:	bd10      	pop	{r4, pc}
 8007326:	4a08      	ldr	r2, [pc, #32]	; (8007348 <roundf+0x44>)
 8007328:	411a      	asrs	r2, r3
 800732a:	4210      	tst	r0, r2
 800732c:	d0f9      	beq.n	8007322 <roundf+0x1e>
 800732e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8007332:	4119      	asrs	r1, r3
 8007334:	4401      	add	r1, r0
 8007336:	ea21 0102 	bic.w	r1, r1, r2
 800733a:	e7f2      	b.n	8007322 <roundf+0x1e>
 800733c:	2b80      	cmp	r3, #128	; 0x80
 800733e:	d1f0      	bne.n	8007322 <roundf+0x1e>
 8007340:	f7f9 fbf8 	bl	8000b34 <__addsf3>
 8007344:	4601      	mov	r1, r0
 8007346:	e7ec      	b.n	8007322 <roundf+0x1e>
 8007348:	007fffff 	.word	0x007fffff

0800734c <atan2>:
 800734c:	f000 b854 	b.w	80073f8 <__ieee754_atan2>

08007350 <sqrt>:
 8007350:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007354:	b08b      	sub	sp, #44	; 0x2c
 8007356:	4604      	mov	r4, r0
 8007358:	460d      	mov	r5, r1
 800735a:	f000 f92b 	bl	80075b4 <__ieee754_sqrt>
 800735e:	4b24      	ldr	r3, [pc, #144]	; (80073f0 <sqrt+0xa0>)
 8007360:	4680      	mov	r8, r0
 8007362:	f993 a000 	ldrsb.w	sl, [r3]
 8007366:	4689      	mov	r9, r1
 8007368:	f1ba 3fff 	cmp.w	sl, #4294967295
 800736c:	d02b      	beq.n	80073c6 <sqrt+0x76>
 800736e:	4622      	mov	r2, r4
 8007370:	462b      	mov	r3, r5
 8007372:	4620      	mov	r0, r4
 8007374:	4629      	mov	r1, r5
 8007376:	f7f9 fb49 	bl	8000a0c <__aeabi_dcmpun>
 800737a:	4683      	mov	fp, r0
 800737c:	bb18      	cbnz	r0, 80073c6 <sqrt+0x76>
 800737e:	2600      	movs	r6, #0
 8007380:	2700      	movs	r7, #0
 8007382:	4632      	mov	r2, r6
 8007384:	463b      	mov	r3, r7
 8007386:	4620      	mov	r0, r4
 8007388:	4629      	mov	r1, r5
 800738a:	f7f9 fb17 	bl	80009bc <__aeabi_dcmplt>
 800738e:	b1d0      	cbz	r0, 80073c6 <sqrt+0x76>
 8007390:	2301      	movs	r3, #1
 8007392:	9300      	str	r3, [sp, #0]
 8007394:	4b17      	ldr	r3, [pc, #92]	; (80073f4 <sqrt+0xa4>)
 8007396:	f8cd b020 	str.w	fp, [sp, #32]
 800739a:	9301      	str	r3, [sp, #4]
 800739c:	e9cd 4504 	strd	r4, r5, [sp, #16]
 80073a0:	e9cd 4502 	strd	r4, r5, [sp, #8]
 80073a4:	f1ba 0f00 	cmp.w	sl, #0
 80073a8:	d112      	bne.n	80073d0 <sqrt+0x80>
 80073aa:	e9cd 6706 	strd	r6, r7, [sp, #24]
 80073ae:	4668      	mov	r0, sp
 80073b0:	f000 f9ac 	bl	800770c <matherr>
 80073b4:	b1b8      	cbz	r0, 80073e6 <sqrt+0x96>
 80073b6:	9b08      	ldr	r3, [sp, #32]
 80073b8:	b11b      	cbz	r3, 80073c2 <sqrt+0x72>
 80073ba:	f7fd fd93 	bl	8004ee4 <__errno>
 80073be:	9b08      	ldr	r3, [sp, #32]
 80073c0:	6003      	str	r3, [r0, #0]
 80073c2:	e9dd 8906 	ldrd	r8, r9, [sp, #24]
 80073c6:	4640      	mov	r0, r8
 80073c8:	4649      	mov	r1, r9
 80073ca:	b00b      	add	sp, #44	; 0x2c
 80073cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80073d0:	4632      	mov	r2, r6
 80073d2:	463b      	mov	r3, r7
 80073d4:	4630      	mov	r0, r6
 80073d6:	4639      	mov	r1, r7
 80073d8:	f7f9 f9a8 	bl	800072c <__aeabi_ddiv>
 80073dc:	f1ba 0f02 	cmp.w	sl, #2
 80073e0:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80073e4:	d1e3      	bne.n	80073ae <sqrt+0x5e>
 80073e6:	f7fd fd7d 	bl	8004ee4 <__errno>
 80073ea:	2321      	movs	r3, #33	; 0x21
 80073ec:	6003      	str	r3, [r0, #0]
 80073ee:	e7e2      	b.n	80073b6 <sqrt+0x66>
 80073f0:	2000027c 	.word	0x2000027c
 80073f4:	08009aa8 	.word	0x08009aa8

080073f8 <__ieee754_atan2>:
 80073f8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80073fc:	4256      	negs	r6, r2
 80073fe:	f023 4c00 	bic.w	ip, r3, #2147483648	; 0x80000000
 8007402:	4316      	orrs	r6, r2
 8007404:	f8df 91a8 	ldr.w	r9, [pc, #424]	; 80075b0 <__ieee754_atan2+0x1b8>
 8007408:	ea4c 76d6 	orr.w	r6, ip, r6, lsr #31
 800740c:	454e      	cmp	r6, r9
 800740e:	4604      	mov	r4, r0
 8007410:	460d      	mov	r5, r1
 8007412:	469e      	mov	lr, r3
 8007414:	d808      	bhi.n	8007428 <__ieee754_atan2+0x30>
 8007416:	4246      	negs	r6, r0
 8007418:	f021 4700 	bic.w	r7, r1, #2147483648	; 0x80000000
 800741c:	4306      	orrs	r6, r0
 800741e:	ea47 76d6 	orr.w	r6, r7, r6, lsr #31
 8007422:	454e      	cmp	r6, r9
 8007424:	4688      	mov	r8, r1
 8007426:	d906      	bls.n	8007436 <__ieee754_atan2+0x3e>
 8007428:	4620      	mov	r0, r4
 800742a:	4629      	mov	r1, r5
 800742c:	f7f8 fe9e 	bl	800016c <__adddf3>
 8007430:	4604      	mov	r4, r0
 8007432:	460d      	mov	r5, r1
 8007434:	e030      	b.n	8007498 <__ieee754_atan2+0xa0>
 8007436:	f103 4640 	add.w	r6, r3, #3221225472	; 0xc0000000
 800743a:	f506 1680 	add.w	r6, r6, #1048576	; 0x100000
 800743e:	4316      	orrs	r6, r2
 8007440:	d103      	bne.n	800744a <__ieee754_atan2+0x52>
 8007442:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007446:	f7ff bdcf 	b.w	8006fe8 <atan>
 800744a:	179e      	asrs	r6, r3, #30
 800744c:	f006 0602 	and.w	r6, r6, #2
 8007450:	ea46 76d1 	orr.w	r6, r6, r1, lsr #31
 8007454:	ea57 0100 	orrs.w	r1, r7, r0
 8007458:	d107      	bne.n	800746a <__ieee754_atan2+0x72>
 800745a:	2e02      	cmp	r6, #2
 800745c:	d079      	beq.n	8007552 <__ieee754_atan2+0x15a>
 800745e:	2e03      	cmp	r6, #3
 8007460:	d11a      	bne.n	8007498 <__ieee754_atan2+0xa0>
 8007462:	a541      	add	r5, pc, #260	; (adr r5, 8007568 <__ieee754_atan2+0x170>)
 8007464:	e9d5 4500 	ldrd	r4, r5, [r5]
 8007468:	e016      	b.n	8007498 <__ieee754_atan2+0xa0>
 800746a:	ea5c 0102 	orrs.w	r1, ip, r2
 800746e:	d106      	bne.n	800747e <__ieee754_atan2+0x86>
 8007470:	f1b8 0f00 	cmp.w	r8, #0
 8007474:	da71      	bge.n	800755a <__ieee754_atan2+0x162>
 8007476:	a53e      	add	r5, pc, #248	; (adr r5, 8007570 <__ieee754_atan2+0x178>)
 8007478:	e9d5 4500 	ldrd	r4, r5, [r5]
 800747c:	e00c      	b.n	8007498 <__ieee754_atan2+0xa0>
 800747e:	45cc      	cmp	ip, r9
 8007480:	d123      	bne.n	80074ca <__ieee754_atan2+0xd2>
 8007482:	4567      	cmp	r7, ip
 8007484:	d114      	bne.n	80074b0 <__ieee754_atan2+0xb8>
 8007486:	2e02      	cmp	r6, #2
 8007488:	d00a      	beq.n	80074a0 <__ieee754_atan2+0xa8>
 800748a:	2e03      	cmp	r6, #3
 800748c:	d00c      	beq.n	80074a8 <__ieee754_atan2+0xb0>
 800748e:	2e01      	cmp	r6, #1
 8007490:	d15b      	bne.n	800754a <__ieee754_atan2+0x152>
 8007492:	a539      	add	r5, pc, #228	; (adr r5, 8007578 <__ieee754_atan2+0x180>)
 8007494:	e9d5 4500 	ldrd	r4, r5, [r5]
 8007498:	4620      	mov	r0, r4
 800749a:	4629      	mov	r1, r5
 800749c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80074a0:	a537      	add	r5, pc, #220	; (adr r5, 8007580 <__ieee754_atan2+0x188>)
 80074a2:	e9d5 4500 	ldrd	r4, r5, [r5]
 80074a6:	e7f7      	b.n	8007498 <__ieee754_atan2+0xa0>
 80074a8:	a537      	add	r5, pc, #220	; (adr r5, 8007588 <__ieee754_atan2+0x190>)
 80074aa:	e9d5 4500 	ldrd	r4, r5, [r5]
 80074ae:	e7f3      	b.n	8007498 <__ieee754_atan2+0xa0>
 80074b0:	2e02      	cmp	r6, #2
 80074b2:	d04e      	beq.n	8007552 <__ieee754_atan2+0x15a>
 80074b4:	2e03      	cmp	r6, #3
 80074b6:	d0d4      	beq.n	8007462 <__ieee754_atan2+0x6a>
 80074b8:	2e01      	cmp	r6, #1
 80074ba:	f04f 0400 	mov.w	r4, #0
 80074be:	d102      	bne.n	80074c6 <__ieee754_atan2+0xce>
 80074c0:	f04f 4500 	mov.w	r5, #2147483648	; 0x80000000
 80074c4:	e7e8      	b.n	8007498 <__ieee754_atan2+0xa0>
 80074c6:	2500      	movs	r5, #0
 80074c8:	e7e6      	b.n	8007498 <__ieee754_atan2+0xa0>
 80074ca:	454f      	cmp	r7, r9
 80074cc:	d0d0      	beq.n	8007470 <__ieee754_atan2+0x78>
 80074ce:	eba7 070c 	sub.w	r7, r7, ip
 80074d2:	153f      	asrs	r7, r7, #20
 80074d4:	2f3c      	cmp	r7, #60	; 0x3c
 80074d6:	dc1e      	bgt.n	8007516 <__ieee754_atan2+0x11e>
 80074d8:	2b00      	cmp	r3, #0
 80074da:	da01      	bge.n	80074e0 <__ieee754_atan2+0xe8>
 80074dc:	373c      	adds	r7, #60	; 0x3c
 80074de:	db1e      	blt.n	800751e <__ieee754_atan2+0x126>
 80074e0:	4620      	mov	r0, r4
 80074e2:	4629      	mov	r1, r5
 80074e4:	f7f9 f922 	bl	800072c <__aeabi_ddiv>
 80074e8:	f7ff ff08 	bl	80072fc <fabs>
 80074ec:	f7ff fd7c 	bl	8006fe8 <atan>
 80074f0:	4604      	mov	r4, r0
 80074f2:	460d      	mov	r5, r1
 80074f4:	2e01      	cmp	r6, #1
 80074f6:	d015      	beq.n	8007524 <__ieee754_atan2+0x12c>
 80074f8:	2e02      	cmp	r6, #2
 80074fa:	d017      	beq.n	800752c <__ieee754_atan2+0x134>
 80074fc:	2e00      	cmp	r6, #0
 80074fe:	d0cb      	beq.n	8007498 <__ieee754_atan2+0xa0>
 8007500:	a323      	add	r3, pc, #140	; (adr r3, 8007590 <__ieee754_atan2+0x198>)
 8007502:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007506:	4620      	mov	r0, r4
 8007508:	4629      	mov	r1, r5
 800750a:	f7f8 fe2d 	bl	8000168 <__aeabi_dsub>
 800750e:	a322      	add	r3, pc, #136	; (adr r3, 8007598 <__ieee754_atan2+0x1a0>)
 8007510:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007514:	e016      	b.n	8007544 <__ieee754_atan2+0x14c>
 8007516:	a522      	add	r5, pc, #136	; (adr r5, 80075a0 <__ieee754_atan2+0x1a8>)
 8007518:	e9d5 4500 	ldrd	r4, r5, [r5]
 800751c:	e7ea      	b.n	80074f4 <__ieee754_atan2+0xfc>
 800751e:	2400      	movs	r4, #0
 8007520:	2500      	movs	r5, #0
 8007522:	e7e7      	b.n	80074f4 <__ieee754_atan2+0xfc>
 8007524:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 8007528:	461d      	mov	r5, r3
 800752a:	e7b5      	b.n	8007498 <__ieee754_atan2+0xa0>
 800752c:	a318      	add	r3, pc, #96	; (adr r3, 8007590 <__ieee754_atan2+0x198>)
 800752e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007532:	4620      	mov	r0, r4
 8007534:	4629      	mov	r1, r5
 8007536:	f7f8 fe17 	bl	8000168 <__aeabi_dsub>
 800753a:	4602      	mov	r2, r0
 800753c:	460b      	mov	r3, r1
 800753e:	a116      	add	r1, pc, #88	; (adr r1, 8007598 <__ieee754_atan2+0x1a0>)
 8007540:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007544:	f7f8 fe10 	bl	8000168 <__aeabi_dsub>
 8007548:	e772      	b.n	8007430 <__ieee754_atan2+0x38>
 800754a:	a517      	add	r5, pc, #92	; (adr r5, 80075a8 <__ieee754_atan2+0x1b0>)
 800754c:	e9d5 4500 	ldrd	r4, r5, [r5]
 8007550:	e7a2      	b.n	8007498 <__ieee754_atan2+0xa0>
 8007552:	a511      	add	r5, pc, #68	; (adr r5, 8007598 <__ieee754_atan2+0x1a0>)
 8007554:	e9d5 4500 	ldrd	r4, r5, [r5]
 8007558:	e79e      	b.n	8007498 <__ieee754_atan2+0xa0>
 800755a:	a511      	add	r5, pc, #68	; (adr r5, 80075a0 <__ieee754_atan2+0x1a8>)
 800755c:	e9d5 4500 	ldrd	r4, r5, [r5]
 8007560:	e79a      	b.n	8007498 <__ieee754_atan2+0xa0>
 8007562:	bf00      	nop
 8007564:	f3af 8000 	nop.w
 8007568:	54442d18 	.word	0x54442d18
 800756c:	c00921fb 	.word	0xc00921fb
 8007570:	54442d18 	.word	0x54442d18
 8007574:	bff921fb 	.word	0xbff921fb
 8007578:	54442d18 	.word	0x54442d18
 800757c:	bfe921fb 	.word	0xbfe921fb
 8007580:	7f3321d2 	.word	0x7f3321d2
 8007584:	4002d97c 	.word	0x4002d97c
 8007588:	7f3321d2 	.word	0x7f3321d2
 800758c:	c002d97c 	.word	0xc002d97c
 8007590:	33145c07 	.word	0x33145c07
 8007594:	3ca1a626 	.word	0x3ca1a626
 8007598:	54442d18 	.word	0x54442d18
 800759c:	400921fb 	.word	0x400921fb
 80075a0:	54442d18 	.word	0x54442d18
 80075a4:	3ff921fb 	.word	0x3ff921fb
 80075a8:	54442d18 	.word	0x54442d18
 80075ac:	3fe921fb 	.word	0x3fe921fb
 80075b0:	7ff00000 	.word	0x7ff00000

080075b4 <__ieee754_sqrt>:
 80075b4:	4b54      	ldr	r3, [pc, #336]	; (8007708 <__ieee754_sqrt+0x154>)
 80075b6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80075ba:	438b      	bics	r3, r1
 80075bc:	4606      	mov	r6, r0
 80075be:	460d      	mov	r5, r1
 80075c0:	460a      	mov	r2, r1
 80075c2:	460c      	mov	r4, r1
 80075c4:	d10f      	bne.n	80075e6 <__ieee754_sqrt+0x32>
 80075c6:	4602      	mov	r2, r0
 80075c8:	460b      	mov	r3, r1
 80075ca:	f7f8 ff85 	bl	80004d8 <__aeabi_dmul>
 80075ce:	4602      	mov	r2, r0
 80075d0:	460b      	mov	r3, r1
 80075d2:	4630      	mov	r0, r6
 80075d4:	4629      	mov	r1, r5
 80075d6:	f7f8 fdc9 	bl	800016c <__adddf3>
 80075da:	4606      	mov	r6, r0
 80075dc:	460d      	mov	r5, r1
 80075de:	4630      	mov	r0, r6
 80075e0:	4629      	mov	r1, r5
 80075e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80075e6:	2900      	cmp	r1, #0
 80075e8:	4607      	mov	r7, r0
 80075ea:	4603      	mov	r3, r0
 80075ec:	dc0e      	bgt.n	800760c <__ieee754_sqrt+0x58>
 80075ee:	f021 4c00 	bic.w	ip, r1, #2147483648	; 0x80000000
 80075f2:	ea5c 0707 	orrs.w	r7, ip, r7
 80075f6:	d0f2      	beq.n	80075de <__ieee754_sqrt+0x2a>
 80075f8:	b141      	cbz	r1, 800760c <__ieee754_sqrt+0x58>
 80075fa:	4602      	mov	r2, r0
 80075fc:	460b      	mov	r3, r1
 80075fe:	f7f8 fdb3 	bl	8000168 <__aeabi_dsub>
 8007602:	4602      	mov	r2, r0
 8007604:	460b      	mov	r3, r1
 8007606:	f7f9 f891 	bl	800072c <__aeabi_ddiv>
 800760a:	e7e6      	b.n	80075da <__ieee754_sqrt+0x26>
 800760c:	1512      	asrs	r2, r2, #20
 800760e:	d074      	beq.n	80076fa <__ieee754_sqrt+0x146>
 8007610:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 8007614:	07d5      	lsls	r5, r2, #31
 8007616:	f04f 0500 	mov.w	r5, #0
 800761a:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800761e:	bf48      	it	mi
 8007620:	0fd9      	lsrmi	r1, r3, #31
 8007622:	f444 1480 	orr.w	r4, r4, #1048576	; 0x100000
 8007626:	bf44      	itt	mi
 8007628:	005b      	lslmi	r3, r3, #1
 800762a:	eb01 0444 	addmi.w	r4, r1, r4, lsl #1
 800762e:	1051      	asrs	r1, r2, #1
 8007630:	0fda      	lsrs	r2, r3, #31
 8007632:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 8007636:	4628      	mov	r0, r5
 8007638:	2216      	movs	r2, #22
 800763a:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 800763e:	005b      	lsls	r3, r3, #1
 8007640:	1987      	adds	r7, r0, r6
 8007642:	42a7      	cmp	r7, r4
 8007644:	bfde      	ittt	le
 8007646:	19b8      	addle	r0, r7, r6
 8007648:	1be4      	suble	r4, r4, r7
 800764a:	19ad      	addle	r5, r5, r6
 800764c:	0fdf      	lsrs	r7, r3, #31
 800764e:	3a01      	subs	r2, #1
 8007650:	eb07 0444 	add.w	r4, r7, r4, lsl #1
 8007654:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8007658:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800765c:	d1f0      	bne.n	8007640 <__ieee754_sqrt+0x8c>
 800765e:	f04f 0c20 	mov.w	ip, #32
 8007662:	4696      	mov	lr, r2
 8007664:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8007668:	4284      	cmp	r4, r0
 800766a:	eb06 070e 	add.w	r7, r6, lr
 800766e:	dc02      	bgt.n	8007676 <__ieee754_sqrt+0xc2>
 8007670:	d112      	bne.n	8007698 <__ieee754_sqrt+0xe4>
 8007672:	429f      	cmp	r7, r3
 8007674:	d810      	bhi.n	8007698 <__ieee754_sqrt+0xe4>
 8007676:	2f00      	cmp	r7, #0
 8007678:	eb07 0e06 	add.w	lr, r7, r6
 800767c:	da42      	bge.n	8007704 <__ieee754_sqrt+0x150>
 800767e:	f1be 0f00 	cmp.w	lr, #0
 8007682:	db3f      	blt.n	8007704 <__ieee754_sqrt+0x150>
 8007684:	f100 0801 	add.w	r8, r0, #1
 8007688:	1a24      	subs	r4, r4, r0
 800768a:	4640      	mov	r0, r8
 800768c:	429f      	cmp	r7, r3
 800768e:	bf88      	it	hi
 8007690:	f104 34ff 	addhi.w	r4, r4, #4294967295
 8007694:	1bdb      	subs	r3, r3, r7
 8007696:	4432      	add	r2, r6
 8007698:	0064      	lsls	r4, r4, #1
 800769a:	f1bc 0c01 	subs.w	ip, ip, #1
 800769e:	eb04 74d3 	add.w	r4, r4, r3, lsr #31
 80076a2:	ea4f 0656 	mov.w	r6, r6, lsr #1
 80076a6:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80076aa:	d1dd      	bne.n	8007668 <__ieee754_sqrt+0xb4>
 80076ac:	4323      	orrs	r3, r4
 80076ae:	d006      	beq.n	80076be <__ieee754_sqrt+0x10a>
 80076b0:	1c54      	adds	r4, r2, #1
 80076b2:	bf0b      	itete	eq
 80076b4:	4662      	moveq	r2, ip
 80076b6:	3201      	addne	r2, #1
 80076b8:	3501      	addeq	r5, #1
 80076ba:	f022 0201 	bicne.w	r2, r2, #1
 80076be:	106b      	asrs	r3, r5, #1
 80076c0:	0852      	lsrs	r2, r2, #1
 80076c2:	07e8      	lsls	r0, r5, #31
 80076c4:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 80076c8:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 80076cc:	bf48      	it	mi
 80076ce:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 80076d2:	eb03 5501 	add.w	r5, r3, r1, lsl #20
 80076d6:	4616      	mov	r6, r2
 80076d8:	e781      	b.n	80075de <__ieee754_sqrt+0x2a>
 80076da:	0adc      	lsrs	r4, r3, #11
 80076dc:	3915      	subs	r1, #21
 80076de:	055b      	lsls	r3, r3, #21
 80076e0:	2c00      	cmp	r4, #0
 80076e2:	d0fa      	beq.n	80076da <__ieee754_sqrt+0x126>
 80076e4:	02e6      	lsls	r6, r4, #11
 80076e6:	d50a      	bpl.n	80076fe <__ieee754_sqrt+0x14a>
 80076e8:	f1c2 0020 	rsb	r0, r2, #32
 80076ec:	fa23 f000 	lsr.w	r0, r3, r0
 80076f0:	1e55      	subs	r5, r2, #1
 80076f2:	4093      	lsls	r3, r2
 80076f4:	4304      	orrs	r4, r0
 80076f6:	1b4a      	subs	r2, r1, r5
 80076f8:	e78a      	b.n	8007610 <__ieee754_sqrt+0x5c>
 80076fa:	4611      	mov	r1, r2
 80076fc:	e7f0      	b.n	80076e0 <__ieee754_sqrt+0x12c>
 80076fe:	0064      	lsls	r4, r4, #1
 8007700:	3201      	adds	r2, #1
 8007702:	e7ef      	b.n	80076e4 <__ieee754_sqrt+0x130>
 8007704:	4680      	mov	r8, r0
 8007706:	e7bf      	b.n	8007688 <__ieee754_sqrt+0xd4>
 8007708:	7ff00000 	.word	0x7ff00000

0800770c <matherr>:
 800770c:	2000      	movs	r0, #0
 800770e:	4770      	bx	lr

08007710 <_init>:
 8007710:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007712:	bf00      	nop
 8007714:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007716:	bc08      	pop	{r3}
 8007718:	469e      	mov	lr, r3
 800771a:	4770      	bx	lr

0800771c <_fini>:
 800771c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800771e:	bf00      	nop
 8007720:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007722:	bc08      	pop	{r3}
 8007724:	469e      	mov	lr, r3
 8007726:	4770      	bx	lr
